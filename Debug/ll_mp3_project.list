
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011200  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  080113b0  080113b0  000213b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d4c  08011d4c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08011d4c  08011d4c  00021d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d54  08011d54  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d54  08011d54  00021d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d58  08011d58  00021d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08011d5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00007668  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200076e4  200076e4  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029cd9  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e00  00000000  00000000  00059d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028c0  00000000  00000000  00060b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002548  00000000  00000000  00063448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000308e4  00000000  00000000  00065990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032247  00000000  00000000  00096274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e4a5  00000000  00000000  000c84bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d6960  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ae7c  00000000  00000000  001d69b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  001e182c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011398 	.word	0x08011398

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08011398 	.word	0x08011398

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2000500c 	.word	0x2000500c
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <MP3_Init>:
FATFS fs;
FIL mp3File;

/* Initialize VS1053 & Open a file */
bool MP3_Init()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	/* Initialize VS1053 */
    if(!VS1053_Init()) return false;
 8000638:	f000 f956 	bl	80008e8 <VS1053_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	f083 0301 	eor.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MP3_Init+0x18>
 8000648:	2300      	movs	r3, #0
 800064a:	e00a      	b.n	8000662 <MP3_Init+0x2e>

    /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK) return false;
 800064c:	2200      	movs	r2, #0
 800064e:	4906      	ldr	r1, [pc, #24]	; (8000668 <MP3_Init+0x34>)
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <MP3_Init+0x38>)
 8000652:	f006 ffc1 	bl	80075d8 <f_mount>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MP3_Init+0x2c>
 800065c:	2300      	movs	r3, #0
 800065e:	e000      	b.n	8000662 <MP3_Init+0x2e>

    return true;
 8000660:	2301      	movs	r3, #1
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	080113b0 	.word	0x080113b0
 800066c:	200000c4 	.word	0x200000c4

08000670 <MP3_Play>:

bool MP3_Play(const char *filename)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if(isPlaying) MP3_Stop();
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MP3_Play+0xa0>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MP3_Play+0x14>
 8000680:	f000 f84e 	bl	8000720 <MP3_Stop>

	if(!VS1053_SetMode(0x4800)) return false;	/* SM LINE1 | SM SDINEW */
 8000684:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000688:	f000 fa1b 	bl	8000ac2 <VS1053_SetMode>
 800068c:	4603      	mov	r3, r0
 800068e:	f083 0301 	eor.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MP3_Play+0x2c>
 8000698:	2300      	movs	r3, #0
 800069a:	e035      	b.n	8000708 <MP3_Play+0x98>
	if(!VS1053_AutoResync()) return false;		/* AutoResync */
 800069c:	f000 fa3f 	bl	8000b1e <VS1053_AutoResync>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MP3_Play+0x40>
 80006ac:	2300      	movs	r3, #0
 80006ae:	e02b      	b.n	8000708 <MP3_Play+0x98>
	if(!VS1053_SetDecodeTime(0)) return false;	/* Set decode time */
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fa54 	bl	8000b5e <VS1053_SetDecodeTime>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MP3_Play+0x56>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e020      	b.n	8000708 <MP3_Play+0x98>
	if(!VS1053_SetVolume( 0x0F, 0x0F )) return false;	/* Small number is louder */
 80006c6:	210f      	movs	r1, #15
 80006c8:	200f      	movs	r0, #15
 80006ca:	f000 f9d7 	bl	8000a7c <VS1053_SetVolume>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f083 0301 	eor.w	r3, r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MP3_Play+0x6e>
 80006da:	2300      	movs	r3, #0
 80006dc:	e014      	b.n	8000708 <MP3_Play+0x98>

	/* Open file to read */
	if(f_open(&mp3File, filename, FA_READ) != FR_OK) return false;
 80006de:	2201      	movs	r2, #1
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <MP3_Play+0xa4>)
 80006e4:	f006 ffbe 	bl	8007664 <f_open>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MP3_Play+0x82>
 80006ee:	2300      	movs	r3, #0
 80006f0:	e00a      	b.n	8000708 <MP3_Play+0x98>

	/* Get the file size */
	mp3FileSize = f_size(&mp3File);
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MP3_Play+0xa4>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MP3_Play+0xa8>)
 80006f8:	6013      	str	r3, [r2, #0]

	/* Set flags */
	isFileOpen = true;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MP3_Play+0xac>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
	isPlaying = true;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <MP3_Play+0xa0>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]

    return true;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000c2 	.word	0x200000c2
 8000714:	200010fc 	.word	0x200010fc
 8000718:	200000b8 	.word	0x200000b8
 800071c:	200000c3 	.word	0x200000c3

08000720 <MP3_Stop>:

void MP3_Stop(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	/* Refer to page 49 of VS1053 datasheet */

	uint16_t mode;
	VS1053_SendEndFill(2052);	/* send endfill bytes */
 8000726:	f640 0004 	movw	r0, #2052	; 0x804
 800072a:	f000 fa3f 	bl	8000bac <VS1053_SendEndFill>
	VS1053_SetMode(0x4808);		/* SM LINE1 | SM SDINEW | SM CANCEL */
 800072e:	f644 0008 	movw	r0, #18440	; 0x4808
 8000732:	f000 f9c6 	bl	8000ac2 <VS1053_SetMode>
	VS1053_SendEndFill(32);		/* send endfill bytes */
 8000736:	2020      	movs	r0, #32
 8000738:	f000 fa38 	bl	8000bac <VS1053_SendEndFill>
	LL_mDelay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f004 fbc5 	bl	8004ecc <LL_mDelay>
	VS1053_GetMode(&mode);		/* get mode value */
 8000742:	1dbb      	adds	r3, r7, #6
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f9d4 	bl	8000af2 <VS1053_GetMode>
	if((mode & 0x08) != 0x0)	/* if SM CANCEL is not clear, soft reset */
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MP3_Stop+0x38>
	{
		VS1053_SoftReset();
 8000754:	f000 f97c 	bl	8000a50 <VS1053_SoftReset>
	}

	f_close(&mp3File);
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <MP3_Stop+0x54>)
 800075a:	f007 fc28 	bl	8007fae <f_close>
	isPlaying = false;			/* Stop flag */
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MP3_Stop+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	isFileOpen = false;			/* Close flag */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <MP3_Stop+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200010fc 	.word	0x200010fc
 8000778:	200000c2 	.word	0x200000c2
 800077c:	200000c3 	.word	0x200000c3

08000780 <MP3_Feeder>:
	if(!isPlaying) isPlaying = true;
}

/* Send mp3 buffer to VS1053 */
void MP3_Feeder(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	if(!isPlaying || !isFileOpen) return;
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MP3_Feeder+0xa0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f083 0301 	eor.w	r3, r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d144      	bne.n	800081c <MP3_Feeder+0x9c>
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MP3_Feeder+0xa4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f083 0301 	eor.w	r3, r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d13d      	bne.n	800081c <MP3_Feeder+0x9c>

	if(mp3FileSize > BUFFER_SIZE)
 80007a0:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MP3_Feeder+0xa8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b20      	cmp	r3, #32
 80007a6:	d90e      	bls.n	80007c6 <MP3_Feeder+0x46>
	{
		/* Fill the buffer */
		f_read(&mp3File, mp3Buffer, BUFFER_SIZE, (void*)&readBytes);
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <MP3_Feeder+0xac>)
 80007aa:	2220      	movs	r2, #32
 80007ac:	4920      	ldr	r1, [pc, #128]	; (8000830 <MP3_Feeder+0xb0>)
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <MP3_Feeder+0xb4>)
 80007b0:	f007 fa20 	bl	8007bf4 <f_read>

		/* Tx buffer */
		VS1053_SdiWrite32( mp3Buffer );
 80007b4:	481e      	ldr	r0, [pc, #120]	; (8000830 <MP3_Feeder+0xb0>)
 80007b6:	f000 fb25 	bl	8000e04 <VS1053_SdiWrite32>

		/* bytes to send */
		mp3FileSize -= BUFFER_SIZE;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MP3_Feeder+0xa8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3b20      	subs	r3, #32
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <MP3_Feeder+0xa8>)
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	e02b      	b.n	800081e <MP3_Feeder+0x9e>
	}
	else
	{
		/* Read left bytes */
		f_read(&mp3File, mp3Buffer, mp3FileSize, (void*)&readBytes);
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MP3_Feeder+0xa8>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MP3_Feeder+0xac>)
 80007cc:	4918      	ldr	r1, [pc, #96]	; (8000830 <MP3_Feeder+0xb0>)
 80007ce:	4819      	ldr	r0, [pc, #100]	; (8000834 <MP3_Feeder+0xb4>)
 80007d0:	f007 fa10 	bl	8007bf4 <f_read>

		/* Tx buffer */
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MP3_Feeder+0xb8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	801a      	strh	r2, [r3, #0]
 80007da:	e015      	b.n	8000808 <MP3_Feeder+0x88>
		{
			while(!VS1053_SdiWrite(*(mp3Buffer + cnt)));
 80007dc:	bf00      	nop
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MP3_Feeder+0xb8>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MP3_Feeder+0xb0>)
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fada 	bl	8000da4 <VS1053_SdiWrite>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f083 0301 	eor.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f0      	bne.n	80007de <MP3_Feeder+0x5e>
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MP3_Feeder+0xb8>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MP3_Feeder+0xb8>)
 8000806:	801a      	strh	r2, [r3, #0]
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MP3_Feeder+0xb8>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MP3_Feeder+0xa8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3e2      	bcc.n	80007dc <MP3_Feeder+0x5c>
		}

		/* Stop when played the whole file */
		MP3_Stop();
 8000816:	f7ff ff83 	bl	8000720 <MP3_Stop>
 800081a:	e000      	b.n	800081e <MP3_Feeder+0x9e>
	if(!isPlaying || !isFileOpen) return;
 800081c:	bf00      	nop
	}
}
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000c2 	.word	0x200000c2
 8000824:	200000c3 	.word	0x200000c3
 8000828:	200000b8 	.word	0x200000b8
 800082c:	200000bc 	.word	0x200000bc
 8000830:	20000098 	.word	0x20000098
 8000834:	200010fc 	.word	0x200010fc
 8000838:	200000c0 	.word	0x200000c0

0800083c <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	4013      	ands	r3, r2
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	bf0c      	ite	eq
 800087a:	2301      	moveq	r3, #1
 800087c:	2300      	movne	r3, #0
 800087e:	b2db      	uxtb	r3, r3
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d005      	beq.n	80008aa <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	889a      	ldrh	r2, [r3, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 80008a8:	e006      	b.n	80008b8 <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	889b      	ldrh	r3, [r3, #4]
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	0412      	lsls	r2, r2, #16
 80008b6:	619a      	str	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <hal_gpio_readpin>:
	} else {
		return false;
	}
}

static inline uint32_t hal_gpio_readpin(const GpioPin* gpio) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	return LL_GPIO_IsInputPinSet(gpio->port, gpio->pin);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	889b      	ldrh	r3, [r3, #4]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4610      	mov	r0, r2
 80008d8:	f7ff ffc3 	bl	8000862 <LL_GPIO_IsInputPinSet>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <VS1053_Init>:
/* endFill byte is required to stop playing */
uint8_t endFillByte;

/* Initialize VS1053 */
bool VS1053_Init()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
//	uint16_t status = 0;

	XCS_HIGH;		    /* XCS High */
 80008ee:	2101      	movs	r1, #1
 80008f0:	4841      	ldr	r0, [pc, #260]	; (80009f8 <VS1053_Init+0x110>)
 80008f2:	f7ff ffcb 	bl	800088c <hal_gpio_write>
	XDCS_HIGH;		    /* XDCS High */
 80008f6:	2101      	movs	r1, #1
 80008f8:	4840      	ldr	r0, [pc, #256]	; (80009fc <VS1053_Init+0x114>)
 80008fa:	f7ff ffc7 	bl	800088c <hal_gpio_write>
	VS1053_Reset();     /* Hard Reset */
 80008fe:	f000 f883 	bl	8000a08 <VS1053_Reset>
	/* Read Status to check SPI */
//	if(!VS1053_SciRead(VS1053_REG_STATUS, &status)) return false;
//	if(((status >> 4) & 0x0F) != 0x04) return false;

	/* MP3 Mode GPIO configuration */
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC017)) return false; /* GPIO direction */
 8000902:	2307      	movs	r3, #7
 8000904:	f24c 0117 	movw	r1, #49175	; 0xc017
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f98b 	bl	8000c24 <VS1053_SciWrite>
 800090e:	4603      	mov	r3, r0
 8000910:	f083 0301 	eor.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <VS1053_Init+0x36>
 800091a:	2300      	movs	r3, #0
 800091c:	e067      	b.n	80009ee <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 3)) return false;
 800091e:	2306      	movs	r3, #6
 8000920:	2103      	movs	r1, #3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f97e 	bl	8000c24 <VS1053_SciWrite>
 8000928:	4603      	mov	r3, r0
 800092a:	f083 0301 	eor.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <VS1053_Init+0x50>
 8000934:	2300      	movs	r3, #0
 8000936:	e05a      	b.n	80009ee <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC019)) return false; /* GPIO output */
 8000938:	2307      	movs	r3, #7
 800093a:	f24c 0119 	movw	r1, #49177	; 0xc019
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f970 	bl	8000c24 <VS1053_SciWrite>
 8000944:	4603      	mov	r3, r0
 8000946:	f083 0301 	eor.w	r3, r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <VS1053_Init+0x6c>
 8000950:	2300      	movs	r3, #0
 8000952:	e04c      	b.n	80009ee <VS1053_Init+0x106>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000954:	2306      	movs	r3, #6
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f963 	bl	8000c24 <VS1053_SciWrite>
 800095e:	4603      	mov	r3, r0
 8000960:	f083 0301 	eor.w	r3, r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <VS1053_Init+0x86>
 800096a:	2300      	movs	r3, #0
 800096c:	e03f      	b.n	80009ee <VS1053_Init+0x106>

	/* Soft reset */
	if(!VS1053_SoftReset()) return false;
 800096e:	f000 f86f 	bl	8000a50 <VS1053_SoftReset>
 8000972:	4603      	mov	r3, r0
 8000974:	f083 0301 	eor.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <VS1053_Init+0x9a>
 800097e:	2300      	movs	r3, #0
 8000980:	e035      	b.n	80009ee <VS1053_Init+0x106>

	/* x3.0 Clock, 36MHz / 7, SPI Baudrate should be less than 5.14MHz */
	if(!VS1053_SciWrite(VS1053_REG_CLOCKF, 0x6000)) return false;
 8000982:	2303      	movs	r3, #3
 8000984:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f94b 	bl	8000c24 <VS1053_SciWrite>
 800098e:	4603      	mov	r3, r0
 8000990:	f083 0301 	eor.w	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <VS1053_Init+0xb6>
 800099a:	2300      	movs	r3, #0
 800099c:	e027      	b.n	80009ee <VS1053_Init+0x106>

	LL_SPI_SetBaudRatePrescaler(vs1053spidrv->spi, LL_SPI_BAUDRATEPRESCALER_DIV32); /* 90MHz / 32 = about 3mhz */
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <VS1053_Init+0x118>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2120      	movs	r1, #32
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff48 	bl	800083c <LL_SPI_SetBaudRatePrescaler>
//	if(!VS1053_SciRead(VS1053_REG_STATUS, &status)) return false;
//	if(((status >> 4) & 0x0F) != 0x04) return false;

	/* Read endFill Byte */
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 80009ac:	2307      	movs	r3, #7
 80009ae:	f641 6106 	movw	r1, #7686	; 0x1e06
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f936 	bl	8000c24 <VS1053_SciWrite>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f083 0301 	eor.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <VS1053_Init+0xe0>
 80009c4:	2300      	movs	r3, #0
 80009c6:	e012      	b.n	80009ee <VS1053_Init+0x106>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 80009c8:	2206      	movs	r2, #6
 80009ca:	1dbb      	adds	r3, r7, #6
 80009cc:	4619      	mov	r1, r3
 80009ce:	4610      	mov	r0, r2
 80009d0:	f000 f96e 	bl	8000cb0 <VS1053_SciRead>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f083 0301 	eor.w	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <VS1053_Init+0xfc>
 80009e0:	2300      	movs	r3, #0
 80009e2:	e004      	b.n	80009ee <VS1053_Init+0x106>
	endFillByte = regVal & 0xFF;
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <VS1053_Init+0x11c>)
 80009ea:	701a      	strb	r2, [r3, #0]

	return true;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	08011c70 	.word	0x08011c70
 80009fc:	08011c78 	.word	0x08011c78
 8000a00:	20000000 	.word	0x20000000
 8000a04:	2000212c 	.word	0x2000212c

08000a08 <VS1053_Reset>:

/* Hard reset */
void VS1053_Reset()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8000a0e:	23ff      	movs	r3, #255	; 0xff
 8000a10:	71fb      	strb	r3, [r7, #7]
	XRST_LOW;		                                    /* XRST Low */
 8000a12:	2100      	movs	r1, #0
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <VS1053_Reset+0x40>)
 8000a16:	f7ff ff39 	bl	800088c <hal_gpio_write>
	hal_spi_transfer(vs1053spidrv, &dummy, 1, VS1053_SPI_TIMEOUT); /* Tx Dummy */
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <VS1053_Reset+0x44>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	1df9      	adds	r1, r7, #7
 8000a20:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a24:	2201      	movs	r2, #1
 8000a26:	f00e fec9 	bl	800f7bc <hal_spi_transfer>
	LL_mDelay(10);										/* 10ms Delay */
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f004 fa4e 	bl	8004ecc <LL_mDelay>
	XRST_HIGH;			                                /* XRST High */
 8000a30:	2101      	movs	r1, #1
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <VS1053_Reset+0x40>)
 8000a34:	f7ff ff2a 	bl	800088c <hal_gpio_write>
	LL_mDelay(10);
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f004 fa47 	bl	8004ecc <LL_mDelay>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08011c80 	.word	0x08011c80
 8000a4c:	20000000 	.word	0x20000000

08000a50 <VS1053_SoftReset>:

/* Soft reset */
bool VS1053_SoftReset()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_MODE, 0x4804)) return false;	/* SM LINE1 | SM SDINEW | SM RESET */
 8000a54:	2300      	movs	r3, #0
 8000a56:	f644 0104 	movw	r1, #18436	; 0x4804
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f8e2 	bl	8000c24 <VS1053_SciWrite>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f083 0301 	eor.w	r3, r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <VS1053_SoftReset+0x20>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e003      	b.n	8000a78 <VS1053_SoftReset+0x28>
	LL_mDelay(100);
 8000a70:	2064      	movs	r0, #100	; 0x64
 8000a72:	f004 fa2b 	bl	8004ecc <LL_mDelay>
	return true;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <VS1053_SetVolume>:

/* Volume control */
bool VS1053_SetVolume(uint8_t volumeLeft, uint8_t volumeRight)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	71bb      	strb	r3, [r7, #6]
    uint16_t volume;
    volume = ( volumeLeft << 8 ) + volumeRight;
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	81fb      	strh	r3, [r7, #14]

    if(!VS1053_SciWrite(VS1053_REG_VOL, volume)) return false;
 8000a9c:	220b      	movs	r2, #11
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	f000 f8be 	bl	8000c24 <VS1053_SciWrite>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <VS1053_SetVolume+0x3c>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e000      	b.n	8000aba <VS1053_SetVolume+0x3e>
    return true;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <VS1053_SetMode>:

/* Mode control */
bool VS1053_SetMode(uint16_t mode)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_MODE, mode)) return false;
 8000acc:	2200      	movs	r2, #0
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	f000 f8a6 	bl	8000c24 <VS1053_SciWrite>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f083 0301 	eor.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <VS1053_SetMode+0x26>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e000      	b.n	8000aea <VS1053_SetMode+0x28>
	return true;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <VS1053_GetMode>:

bool VS1053_GetMode(uint16_t *mode)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	if(!VS1053_SciRead(VS1053_REG_MODE, mode)) return false;
 8000afa:	2300      	movs	r3, #0
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f8d6 	bl	8000cb0 <VS1053_SciRead>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f083 0301 	eor.w	r3, r3, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <VS1053_GetMode+0x22>
 8000b10:	2300      	movs	r3, #0
 8000b12:	e000      	b.n	8000b16 <VS1053_GetMode+0x24>
	return true;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <VS1053_AutoResync>:

/* Resync control */
bool VS1053_AutoResync()
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E29)) return false; /* Auto Resync */
 8000b22:	2307      	movs	r3, #7
 8000b24:	f641 6129 	movw	r1, #7721	; 0x1e29
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f87b 	bl	8000c24 <VS1053_SciWrite>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f083 0301 	eor.w	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <VS1053_AutoResync+0x20>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e00d      	b.n	8000b5a <VS1053_AutoResync+0x3c>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000b3e:	2306      	movs	r3, #6
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f86e 	bl	8000c24 <VS1053_SciWrite>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f083 0301 	eor.w	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <VS1053_AutoResync+0x3a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	e000      	b.n	8000b5a <VS1053_AutoResync+0x3c>
	return true;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <VS1053_SetDecodeTime>:

/* Set decode time */
bool VS1053_SetDecodeTime(uint16_t time)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000b68:	2204      	movs	r2, #4
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f000 f858 	bl	8000c24 <VS1053_SciWrite>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <VS1053_SetDecodeTime+0x26>
 8000b80:	2300      	movs	r3, #0
 8000b82:	e00e      	b.n	8000ba2 <VS1053_SetDecodeTime+0x44>
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000b84:	2204      	movs	r2, #4
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	f000 f84a 	bl	8000c24 <VS1053_SciWrite>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f083 0301 	eor.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <VS1053_SetDecodeTime+0x42>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e000      	b.n	8000ba2 <VS1053_SetDecodeTime+0x44>
	return true;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <VS1053_SendEndFill>:

/* Send endfill bytes */
bool VS1053_SendEndFill(uint16_t num)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f831 	bl	8000c24 <VS1053_SciWrite>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <VS1053_SendEndFill+0x26>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e022      	b.n	8000c18 <VS1053_SendEndFill+0x6c>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000bd2:	2206      	movs	r2, #6
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	f000 f868 	bl	8000cb0 <VS1053_SciRead>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f083 0301 	eor.w	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <VS1053_SendEndFill+0x44>
 8000bec:	2300      	movs	r3, #0
 8000bee:	e013      	b.n	8000c18 <VS1053_SendEndFill+0x6c>
	endFillByte = regVal & 0xFF;
 8000bf0:	89bb      	ldrh	r3, [r7, #12]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <VS1053_SendEndFill+0x74>)
 8000bf6:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < num; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81fb      	strh	r3, [r7, #14]
 8000bfc:	e007      	b.n	8000c0e <VS1053_SendEndFill+0x62>
	{
		VS1053_SdiWrite(endFillByte);
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <VS1053_SendEndFill+0x74>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f8ce 	bl	8000da4 <VS1053_SdiWrite>
	for(uint16_t i = 0; i < num; i++)
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	81fb      	strh	r3, [r7, #14]
 8000c0e:	89fa      	ldrh	r2, [r7, #14]
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3f3      	bcc.n	8000bfe <VS1053_SendEndFill+0x52>
	}
	return true;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000212c 	.word	0x2000212c

08000c24 <VS1053_SciWrite>:
	else return true; // busy
}

/* SCI Tx */
bool VS1053_SciWrite( uint8_t address, uint16_t input )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	buffer[0] = VS1053_WRITE_CMD;
 8000c34:	2302      	movs	r3, #2
 8000c36:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	737b      	strb	r3, [r7, #13]
	buffer[2] = input >> 8;			/* Input MSB */
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	73bb      	strb	r3, [r7, #14]
	buffer[3] = input & 0x00FF;		/* Input LSB */
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	73fb      	strb	r3, [r7, #15]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000c4c:	bf00      	nop
 8000c4e:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <VS1053_SciWrite+0x80>)
 8000c50:	f7ff fe38 	bl	80008c4 <hal_gpio_readpin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f9      	beq.n	8000c4e <VS1053_SciWrite+0x2a>

	XCS_LOW;			/* XCS Low */
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <VS1053_SciWrite+0x84>)
 8000c5e:	f7ff fe15 	bl	800088c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, buffer, sizeof(buffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <VS1053_SciWrite+0x88>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	f107 010c 	add.w	r1, r7, #12
 8000c6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c6e:	2204      	movs	r2, #4
 8000c70:	f00e fda4 	bl	800f7bc <hal_spi_transfer>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f083 0301 	eor.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <VS1053_SciWrite+0x60>
 8000c80:	2300      	movs	r3, #0
 8000c82:	e00b      	b.n	8000c9c <VS1053_SciWrite+0x78>
	XCS_HIGH;			/* XCS High */
 8000c84:	2101      	movs	r1, #1
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <VS1053_SciWrite+0x84>)
 8000c88:	f7ff fe00 	bl	800088c <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000c8c:	bf00      	nop
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <VS1053_SciWrite+0x80>)
 8000c90:	f7ff fe18 	bl	80008c4 <hal_gpio_readpin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f9      	beq.n	8000c8e <VS1053_SciWrite+0x6a>

	return true;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	08011c88 	.word	0x08011c88
 8000ca8:	08011c70 	.word	0x08011c70
 8000cac:	20000000 	.word	0x20000000

08000cb0 <VS1053_SciRead>:

/* SCI TxRx */
bool VS1053_SciRead( uint8_t address, uint16_t *res)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8000cbc:	23ff      	movs	r3, #255	; 0xff
 8000cbe:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];

	txBuffer[0] = VS1053_READ_CMD;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = address;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	737b      	strb	r3, [r7, #13]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000cc8:	bf00      	nop
 8000cca:	4833      	ldr	r0, [pc, #204]	; (8000d98 <VS1053_SciRead+0xe8>)
 8000ccc:	f7ff fdfa 	bl	80008c4 <hal_gpio_readpin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f9      	beq.n	8000cca <VS1053_SciRead+0x1a>

	XCS_LOW;        /* XCS Low */
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4830      	ldr	r0, [pc, #192]	; (8000d9c <VS1053_SciRead+0xec>)
 8000cda:	f7ff fdd7 	bl	800088c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, txBuffer, sizeof(txBuffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <VS1053_SciRead+0xf0>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	f107 010c 	add.w	r1, r7, #12
 8000ce6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cea:	2202      	movs	r2, #2
 8000cec:	f00e fd66 	bl	800f7bc <hal_spi_transfer>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <VS1053_SciRead+0x50>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e046      	b.n	8000d8e <VS1053_SciRead+0xde>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[0], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <VS1053_SciRead+0xf0>)
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	f107 0208 	add.w	r2, r7, #8
 8000d08:	f107 010f 	add.w	r1, r7, #15
 8000d0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2301      	movs	r3, #1
 8000d14:	f00e fdac 	bl	800f870 <hal_spi_txrx>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f083 0301 	eor.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <VS1053_SciRead+0x78>
 8000d24:	2300      	movs	r3, #0
 8000d26:	e032      	b.n	8000d8e <VS1053_SciRead+0xde>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[1], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <VS1053_SciRead+0xf0>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	f107 010f 	add.w	r1, r7, #15
 8000d36:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f00e fd97 	bl	800f870 <hal_spi_txrx>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f083 0301 	eor.w	r3, r3, #1
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <VS1053_SciRead+0xa2>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e01d      	b.n	8000d8e <VS1053_SciRead+0xde>
	XCS_HIGH;       /* XCS High */
 8000d52:	2101      	movs	r1, #1
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <VS1053_SciRead+0xec>)
 8000d56:	f7ff fd99 	bl	800088c <hal_gpio_write>

	*res = rxBuffer[0];     /* Received data */
 8000d5a:	7a3b      	ldrb	r3, [r7, #8]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	801a      	strh	r2, [r3, #0]
	*res <<= 8;				/* MSB */
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	801a      	strh	r2, [r3, #0]
	*res |= rxBuffer[1];	/* LSB */
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	7a7b      	ldrb	r3, [r7, #9]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	801a      	strh	r2, [r3, #0]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000d7e:	bf00      	nop
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <VS1053_SciRead+0xe8>)
 8000d82:	f7ff fd9f 	bl	80008c4 <hal_gpio_readpin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f9      	beq.n	8000d80 <VS1053_SciRead+0xd0>
	return true;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08011c88 	.word	0x08011c88
 8000d9c:	08011c70 	.word	0x08011c70
 8000da0:	20000000 	.word	0x20000000

08000da4 <VS1053_SdiWrite>:

/* SDI Tx */
bool VS1053_SdiWrite( uint8_t input )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000dae:	bf00      	nop
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <VS1053_SdiWrite+0x54>)
 8000db2:	f7ff fd87 	bl	80008c4 <hal_gpio_readpin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f9      	beq.n	8000db0 <VS1053_SdiWrite+0xc>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <VS1053_SdiWrite+0x58>)
 8000dc0:	f7ff fd64 	bl	800088c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, &input, 1, VS1053_SPI_TIMEOUT) != true) return false;		/* SPI Tx 1 byte */
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <VS1053_SdiWrite+0x5c>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	1df9      	adds	r1, r7, #7
 8000dca:	f242 7310 	movw	r3, #10000	; 0x2710
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f00e fcf4 	bl	800f7bc <hal_spi_transfer>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f083 0301 	eor.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <VS1053_SdiWrite+0x40>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e004      	b.n	8000dee <VS1053_SdiWrite+0x4a>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8000de4:	2101      	movs	r1, #1
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <VS1053_SdiWrite+0x58>)
 8000de8:	f7ff fd50 	bl	800088c <hal_gpio_write>

	return true;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08011c88 	.word	0x08011c88
 8000dfc:	08011c78 	.word	0x08011c78
 8000e00:	20000000 	.word	0x20000000

08000e04 <VS1053_SdiWrite32>:

/* SDI Tx 32 bytes */
bool VS1053_SdiWrite32( uint8_t *input32 )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000e0c:	bf00      	nop
 8000e0e:	4811      	ldr	r0, [pc, #68]	; (8000e54 <VS1053_SdiWrite32+0x50>)
 8000e10:	f7ff fd58 	bl	80008c4 <hal_gpio_readpin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f9      	beq.n	8000e0e <VS1053_SdiWrite32+0xa>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <VS1053_SdiWrite32+0x54>)
 8000e1e:	f7ff fd35 	bl	800088c <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, input32, 32, VS1053_SPI_TIMEOUT) != true) return false; /* SPI Tx 32 bytes */
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <VS1053_SdiWrite32+0x58>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	f00e fcc5 	bl	800f7bc <hal_spi_transfer>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <VS1053_SdiWrite32+0x3e>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e004      	b.n	8000e4c <VS1053_SdiWrite32+0x48>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8000e42:	2101      	movs	r1, #1
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <VS1053_SdiWrite32+0x54>)
 8000e46:	f7ff fd21 	bl	800088c <hal_gpio_write>

	return true;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	08011c88 	.word	0x08011c88
 8000e58:	08011c78 	.word	0x08011c78
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f8fc 	bl	8001086 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2005      	movs	r0, #5
 8000e90:	f00f f86a 	bl	800ff68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f00f f83c 	bl	800ff10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20002130 	.word	0x20002130

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20002130 	.word	0x20002130

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff4c 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ae:	f7ff ff61 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f7ff ffb1 	bl	8001020 <NVIC_EncodePriority>
 80010be:	4602      	mov	r2, r0
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff80 	bl	8000fcc <__NVIC_SetPriority>
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff54 	bl	8000f90 <__NVIC_EnableIRQ>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff fee6 	bl	8000ecc <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e099      	b.n	8001240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2202      	movs	r2, #2
 8001110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112c:	e00f      	b.n	800114e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800112e:	f7ff fecd 	bl	8000ecc <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b05      	cmp	r3, #5
 800113a:	d908      	bls.n	800114e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2220      	movs	r2, #32
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e078      	b.n	8001240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e8      	bne.n	800112e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <HAL_DMA_Init+0x158>)
 8001168:	4013      	ands	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d107      	bne.n	80011b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4313      	orrs	r3, r2
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f023 0307 	bic.w	r3, r3, #7
 80011ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d117      	bne.n	8001212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00e      	beq.n	8001212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fa9d 	bl	8001734 <DMA_CheckFifoParam>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800120e:	2301      	movs	r3, #1
 8001210:	e016      	b.n	8001240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fa54 	bl	80016c8 <DMA_CalcBaseAndBitshift>
 8001220:	4603      	mov	r3, r0
 8001222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	223f      	movs	r2, #63	; 0x3f
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	f010803f 	.word	0xf010803f

0800124c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_DMA_Start_IT+0x26>
 800126e:	2302      	movs	r3, #2
 8001270:	e040      	b.n	80012f4 <HAL_DMA_Start_IT+0xa8>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d12f      	bne.n	80012e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2202      	movs	r2, #2
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f9e6 	bl	800166c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a4:	223f      	movs	r2, #63	; 0x3f
 80012a6:	409a      	lsls	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0216 	orr.w	r2, r2, #22
 80012ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0208 	orr.w	r2, r2, #8
 80012d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e005      	b.n	80012f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
 80012f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d004      	beq.n	800131a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00c      	b.n	8001334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2205      	movs	r2, #5
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800134c:	4b8e      	ldr	r3, [pc, #568]	; (8001588 <HAL_DMA_IRQHandler+0x248>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a8e      	ldr	r2, [pc, #568]	; (800158c <HAL_DMA_IRQHandler+0x24c>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0a9b      	lsrs	r3, r3, #10
 8001358:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2208      	movs	r2, #8
 800136c:	409a      	lsls	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01a      	beq.n	80013ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2208      	movs	r2, #8
 800139a:	409a      	lsls	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b0:	2201      	movs	r2, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d012      	beq.n	80013e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2201      	movs	r2, #1
 80013d0:	409a      	lsls	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013da:	f043 0202 	orr.w	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	2204      	movs	r2, #4
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d012      	beq.n	8001418 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2204      	movs	r2, #4
 8001406:	409a      	lsls	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	f043 0204 	orr.w	r2, r3, #4
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	2210      	movs	r2, #16
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d043      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03c      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2210      	movs	r2, #16
 800143c:	409a      	lsls	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d018      	beq.n	8001482 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d024      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4798      	blx	r3
 800146e:	e01f      	b.n	80014b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001474:	2b00      	cmp	r3, #0
 8001476:	d01b      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
 8001480:	e016      	b.n	80014b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0208 	bic.w	r2, r2, #8
 800149e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2220      	movs	r2, #32
 80014b6:	409a      	lsls	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 808f 	beq.w	80015e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8087 	beq.w	80015e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2220      	movs	r2, #32
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d136      	bne.n	8001558 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0216 	bic.w	r2, r2, #22
 80014f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001508:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <HAL_DMA_IRQHandler+0x1da>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0208 	bic.w	r2, r2, #8
 8001528:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	223f      	movs	r2, #63	; 0x3f
 8001530:	409a      	lsls	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800154a:	2b00      	cmp	r3, #0
 800154c:	d07e      	beq.n	800164c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	4798      	blx	r3
        }
        return;
 8001556:	e079      	b.n	800164c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01d      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10d      	bne.n	8001590 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	2b00      	cmp	r3, #0
 800157a:	d031      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	4798      	blx	r3
 8001584:	e02c      	b.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
 8001586:	bf00      	nop
 8001588:	20000014 	.word	0x20000014
 800158c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d023      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
 80015a0:	e01e      	b.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10f      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0210 	bic.w	r2, r2, #16
 80015be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d032      	beq.n	800164e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d022      	beq.n	800163a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2205      	movs	r2, #5
 80015f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	d307      	bcc.n	8001628 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f2      	bne.n	800160c <HAL_DMA_IRQHandler+0x2cc>
 8001626:	e000      	b.n	800162a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001628:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d005      	beq.n	800164e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
 800164a:	e000      	b.n	800164e <HAL_DMA_IRQHandler+0x30e>
        return;
 800164c:	bf00      	nop
    }
  }
}
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b40      	cmp	r3, #64	; 0x40
 8001698:	d108      	bne.n	80016ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016aa:	e007      	b.n	80016bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	60da      	str	r2, [r3, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	3b10      	subs	r3, #16
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <DMA_CalcBaseAndBitshift+0x64>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <DMA_CalcBaseAndBitshift+0x68>)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d909      	bls.n	800170a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016fe:	f023 0303 	bic.w	r3, r3, #3
 8001702:	1d1a      	adds	r2, r3, #4
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	659a      	str	r2, [r3, #88]	; 0x58
 8001708:	e007      	b.n	800171a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	aaaaaaab 	.word	0xaaaaaaab
 8001730:	08011768 	.word	0x08011768

08001734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d11f      	bne.n	800178e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d856      	bhi.n	8001802 <DMA_CheckFifoParam+0xce>
 8001754:	a201      	add	r2, pc, #4	; (adr r2, 800175c <DMA_CheckFifoParam+0x28>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	0800176d 	.word	0x0800176d
 8001760:	0800177f 	.word	0x0800177f
 8001764:	0800176d 	.word	0x0800176d
 8001768:	08001803 	.word	0x08001803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d046      	beq.n	8001806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800177c:	e043      	b.n	8001806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001786:	d140      	bne.n	800180a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800178c:	e03d      	b.n	800180a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001796:	d121      	bne.n	80017dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d837      	bhi.n	800180e <DMA_CheckFifoParam+0xda>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <DMA_CheckFifoParam+0x70>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	080017bb 	.word	0x080017bb
 80017ac:	080017b5 	.word	0x080017b5
 80017b0:	080017cd 	.word	0x080017cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
      break;
 80017b8:	e030      	b.n	800181c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d025      	beq.n	8001812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ca:	e022      	b.n	8001812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017d4:	d11f      	bne.n	8001816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017da:	e01c      	b.n	8001816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d903      	bls.n	80017ea <DMA_CheckFifoParam+0xb6>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d003      	beq.n	80017f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017e8:	e018      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
      break;
 80017ee:	e015      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00e      	beq.n	800181a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001800:	e00b      	b.n	800181a <DMA_CheckFifoParam+0xe6>
      break;
 8001802:	bf00      	nop
 8001804:	e00a      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      break;
 8001806:	bf00      	nop
 8001808:	e008      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      break;
 800180a:	bf00      	nop
 800180c:	e006      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      break;
 800180e:	bf00      	nop
 8001810:	e004      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      break;
 8001812:	bf00      	nop
 8001814:	e002      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      break;   
 8001816:	bf00      	nop
 8001818:	e000      	b.n	800181c <DMA_CheckFifoParam+0xe8>
      break;
 800181a:	bf00      	nop
    }
  } 
  
  return status; 
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e177      	b.n	8001b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001848:	2201      	movs	r2, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8166 	bne.w	8001b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d005      	beq.n	800187e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187a:	2b02      	cmp	r3, #2
 800187c:	d130      	bne.n	80018e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 0201 	and.w	r2, r3, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d017      	beq.n	800191c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d123      	bne.n	8001970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	08da      	lsrs	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3208      	adds	r2, #8
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80c0 	beq.w	8001b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_GPIO_Init+0x324>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a65      	ldr	r2, [pc, #404]	; (8001b50 <HAL_GPIO_Init+0x324>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_GPIO_Init+0x324>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ce:	4a61      	ldr	r2, [pc, #388]	; (8001b54 <HAL_GPIO_Init+0x328>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_GPIO_Init+0x32c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d037      	beq.n	8001a6a <HAL_GPIO_Init+0x23e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a57      	ldr	r2, [pc, #348]	; (8001b5c <HAL_GPIO_Init+0x330>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_GPIO_Init+0x23a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a56      	ldr	r2, [pc, #344]	; (8001b60 <HAL_GPIO_Init+0x334>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d02b      	beq.n	8001a62 <HAL_GPIO_Init+0x236>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a55      	ldr	r2, [pc, #340]	; (8001b64 <HAL_GPIO_Init+0x338>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x232>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a54      	ldr	r2, [pc, #336]	; (8001b68 <HAL_GPIO_Init+0x33c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x22e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a53      	ldr	r2, [pc, #332]	; (8001b6c <HAL_GPIO_Init+0x340>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x22a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a52      	ldr	r2, [pc, #328]	; (8001b70 <HAL_GPIO_Init+0x344>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x226>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a51      	ldr	r2, [pc, #324]	; (8001b74 <HAL_GPIO_Init+0x348>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x222>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <HAL_GPIO_Init+0x34c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x21e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x21a>
 8001a42:	2309      	movs	r3, #9
 8001a44:	e012      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a46:	230a      	movs	r3, #10
 8001a48:	e010      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	e00e      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a7c:	4935      	ldr	r1, [pc, #212]	; (8001b54 <HAL_GPIO_Init+0x328>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aae:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab4:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_GPIO_Init+0x354>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	f67f ae84 	bls.w	8001848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40013800 	.word	0x40013800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40021400 	.word	0x40021400
 8001b70:	40021800 	.word	0x40021800
 8001b74:	40021c00 	.word	0x40021c00
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40022400 	.word	0x40022400
 8001b80:	40013c00 	.word	0x40013c00

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000014 	.word	0x20000014

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08011ca8 	.word	0x08011ca8

08001bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_RCC_GetClockConfig+0x60>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e022      	b.n	8001c80 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f00d fa31 	bl	800f0b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f814 	bl	8001c88 <HAL_SD_InitCard>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00a      	b.n	8001c80 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001ca4:	2376      	movs	r3, #118	; 0x76
 8001ca6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681d      	ldr	r5, [r3, #0]
 8001cac:	466c      	mov	r4, sp
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f002 f863 	bl	8003d8c <SDIO_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e04f      	b.n	8001d78 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_SD_InitCard+0xf8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 f89b 	bl	8003e1e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_SD_InitCard+0xf8>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f7ff f8f8 	bl	8000ee4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 ff6b 	bl	8002bd0 <SD_PowerON>
 8001cfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e02e      	b.n	8001d78 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fe8a 	bl	8002a34 <SD_InitCard>
 8001d20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00b      	beq.n	8001d40 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e01b      	b.n	8001d78 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 f8fa 	bl	8003f42 <SDMMC_CmdBlockLength>
 8001d4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00f      	beq.n	8001d76 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_SD_InitCard+0xfc>)
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d80:	422580a0 	.word	0x422580a0
 8001d84:	004005ff 	.word	0x004005ff

08001d88 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0c0      	b.n	8001f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	f040 80b9 	bne.w	8001f30 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	441a      	add	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d907      	bls.n	8001de2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0a7      	b.n	8001f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8001e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3380      	adds	r3, #128	; 0x80
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	025b      	lsls	r3, r3, #9
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	f7ff f9f9 	bl	800124c <HAL_DMA_Start_IT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d017      	beq.n	8001e90 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e050      	b.n	8001f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d002      	beq.n	8001ea4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	025b      	lsls	r3, r3, #9
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001eb0:	2390      	movs	r3, #144	; 0x90
 8001eb2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f107 0210 	add.w	r2, r7, #16
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 f80d 	bl	8003eea <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d90a      	bls.n	8001eec <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2282      	movs	r2, #130	; 0x82
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 f871 	bl	8003fca <SDMMC_CmdReadMultiBlock>
 8001ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001eea:	e009      	b.n	8001f00 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2281      	movs	r2, #129	; 0x81
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 f844 	bl	8003f86 <SDMMC_CmdReadSingleBlock>
 8001efe:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e002      	b.n	8001f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3730      	adds	r7, #48	; 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08002843 	.word	0x08002843
 8001f40:	080028b5 	.word	0x080028b5
 8001f44:	004005ff 	.word	0x004005ff
 8001f48:	4225858c 	.word	0x4225858c

08001f4c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0c5      	b.n	8002100 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f040 80be 	bne.w	80020fe <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d907      	bls.n	8001fa6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0ac      	b.n	8002100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	4a4e      	ldr	r2, [pc, #312]	; (8002108 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8001fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	4a4d      	ldr	r2, [pc, #308]	; (800210c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8001fd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	2200      	movs	r2, #0
 8001fe0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d002      	beq.n	8001ff0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d90a      	bls.n	800200c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	22a0      	movs	r2, #160	; 0xa0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002002:	4618      	mov	r0, r3
 8002004:	f002 f825 	bl	8004052 <SDMMC_CmdWriteMultiBlock>
 8002008:	62f8      	str	r0, [r7, #44]	; 0x2c
 800200a:	e009      	b.n	8002020 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2290      	movs	r2, #144	; 0x90
 8002010:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002018:	4618      	mov	r0, r3
 800201a:	f001 fff8 	bl	800400e <SDMMC_CmdWriteSingleBlock>
 800201e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a39      	ldr	r2, [pc, #228]	; (8002110 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	431a      	orrs	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e059      	b.n	8002100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3380      	adds	r3, #128	; 0x80
 8002082:	461a      	mov	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	f7ff f8df 	bl	800124c <HAL_DMA_Start_IT>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01c      	beq.n	80020ce <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80020a2:	f023 0302 	bic.w	r3, r3, #2
 80020a6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e018      	b.n	8002100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	025b      	lsls	r3, r3, #9
 80020d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020da:	2390      	movs	r3, #144	; 0x90
 80020dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f107 0210 	add.w	r2, r7, #16
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 fef8 	bl	8003eea <SDIO_ConfigData>

      return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3730      	adds	r7, #48	; 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	08002819 	.word	0x08002819
 800210c:	080028b5 	.word	0x080028b5
 8002110:	004005ff 	.word	0x004005ff
 8002114:	4225858c 	.word	0x4225858c

08002118 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_SD_IRQHandler+0x2e>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fdfc 	bl	8002d3c <SD_Read_IT>
 8002144:	e165      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 808f 	beq.w	8002274 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800216e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002172:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d039      	beq.n	8002202 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <HAL_SD_IRQHandler+0x8a>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d011      	beq.n	80021c6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 ff76 	bl	8004098 <SDMMC_CmdStopTransfer>
 80021ac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f92f 	bl	8002424 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <HAL_SD_IRQHandler+0xda>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f002 ff1e 	bl	8005034 <HAL_SD_RxCpltCallback>
 80021f8:	e10b      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f002 ff10 	bl	8005020 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002200:	e107      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8102 	beq.w	8002412 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d011      	beq.n	800223c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f001 ff3b 	bl	8004098 <SDMMC_CmdStopTransfer>
 8002222:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8f4 	bl	8002424 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80e5 	bne.w	8002412 <HAL_SD_IRQHandler+0x2fa>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80df 	bne.w	8002412 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0208 	bic.w	r2, r2, #8
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f002 fed7 	bl	8005020 <HAL_SD_TxCpltCallback>
}
 8002272:	e0ce      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_SD_IRQHandler+0x17c>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fda6 	bl	8002dde <SD_Write_IT>
 8002292:	e0be      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800229a:	f240 233a 	movw	r3, #570	; 0x23a
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80b6 	beq.w	8002412 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	f043 0202 	orr.w	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	f043 0208 	orr.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	f043 0208 	orr.w	r2, r3, #8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f240 723a 	movw	r2, #1850	; 0x73a
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002340:	f023 0302 	bic.w	r3, r3, #2
 8002344:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f001 fea4 	bl	8004098 <SDMMC_CmdStopTransfer>
 8002350:	4602      	mov	r2, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f855 	bl	8002424 <HAL_SD_ErrorCallback>
}
 800237a:	e04a      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d045      	beq.n	8002412 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <HAL_SD_IRQHandler+0x282>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d011      	beq.n	80023be <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_SD_IRQHandler+0x304>)
 80023a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe ffa8 	bl	80012fc <HAL_DMA_Abort_IT>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d02f      	beq.n	8002412 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 face 	bl	8002958 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80023bc:	e029      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_SD_IRQHandler+0x2ba>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d011      	beq.n	80023f6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_SD_IRQHandler+0x308>)
 80023d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe ff8c 	bl	80012fc <HAL_DMA_Abort_IT>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d013      	beq.n	8002412 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fae9 	bl	80029c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80023f4:	e00d      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f002 fdfe 	bl	800500c <HAL_SD_AbortCallback>
}
 8002410:	e7ff      	b.n	8002412 <HAL_SD_IRQHandler+0x2fa>
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	08002959 	.word	0x08002959
 8002420:	080029c7 	.word	0x080029c7

08002424 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002446:	0f9b      	lsrs	r3, r3, #30
 8002448:	b2da      	uxtb	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	b2da      	uxtb	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002464:	0e1b      	lsrs	r3, r3, #24
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	b2da      	uxtb	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b2da      	uxtb	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800248e:	b2da      	uxtb	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002498:	0d1b      	lsrs	r3, r3, #20
 800249a:	b29a      	uxth	r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b6:	0bdb      	lsrs	r3, r3, #15
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024c8:	0b9b      	lsrs	r3, r3, #14
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024da:	0b5b      	lsrs	r3, r3, #13
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ec:	0b1b      	lsrs	r3, r3, #12
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	2b00      	cmp	r3, #0
 8002506:	d163      	bne.n	80025d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800250c:	009a      	lsls	r2, r3, #2
 800250e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002512:	4013      	ands	r3, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002518:	0f92      	lsrs	r2, r2, #30
 800251a:	431a      	orrs	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002524:	0edb      	lsrs	r3, r3, #27
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	b2da      	uxtb	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002536:	0e1b      	lsrs	r3, r3, #24
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	b2da      	uxtb	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002548:	0d5b      	lsrs	r3, r3, #21
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	b2da      	uxtb	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	0c9b      	lsrs	r3, r3, #18
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	b2da      	uxtb	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256c:	0bdb      	lsrs	r3, r3, #15
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	b2da      	uxtb	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7e1b      	ldrb	r3, [r3, #24]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	3302      	adds	r3, #2
 8002590:	2201      	movs	r2, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800259a:	fb03 f202 	mul.w	r2, r3, r2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7a1b      	ldrb	r3, [r3, #8]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2201      	movs	r2, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025bc:	0a52      	lsrs	r2, r2, #9
 80025be:	fb03 f202 	mul.w	r2, r3, r2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025cc:	661a      	str	r2, [r3, #96]	; 0x60
 80025ce:	e031      	b.n	8002634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d11d      	bne.n	8002614 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e6:	0c1b      	lsrs	r3, r3, #16
 80025e8:	431a      	orrs	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	3301      	adds	r3, #1
 80025f4:	029a      	lsls	r2, r3, #10
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002608:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	661a      	str	r2, [r3, #96]	; 0x60
 8002612:	e00f      	b.n	8002634 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_SD_GetCardCSD+0x344>)
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e09d      	b.n	8002770 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002638:	0b9b      	lsrs	r3, r3, #14
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	b2da      	uxtb	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264a:	09db      	lsrs	r3, r3, #7
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002652:	b2da      	uxtb	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002662:	b2da      	uxtb	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	0fdb      	lsrs	r3, r3, #31
 800266e:	b2da      	uxtb	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	0f5b      	lsrs	r3, r3, #29
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	b2da      	uxtb	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	b2da      	uxtb	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	0d9b      	lsrs	r3, r3, #22
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	0d5b      	lsrs	r3, r3, #21
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	0bdb      	lsrs	r3, r3, #15
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	0b9b      	lsrs	r3, r3, #14
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	0b1b      	lsrs	r3, r3, #12
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	b2da      	uxtb	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	b2da      	uxtb	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	b2da      	uxtb	r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800275e:	b2da      	uxtb	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	004005ff 	.word	0x004005ff

08002780 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa7e 	bl	8002cec <SD_SendStatus>
 80027f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	0a5b      	lsrs	r3, r3, #9
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800280e:	693b      	ldr	r3, [r7, #16]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002834:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	2b82      	cmp	r3, #130	; 0x82
 8002856:	d111      	bne.n	800287c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fc1b 	bl	8004098 <SDMMC_CmdStopTransfer>
 8002862:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fdd4 	bl	8002424 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0208 	bic.w	r2, r2, #8
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f240 523a 	movw	r2, #1338	; 0x53a
 8002894:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f002 fbc5 	bl	8005034 <HAL_SD_RxCpltCallback>
#endif
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fec6 	bl	8001654 <HAL_DMA_GetError>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d03e      	beq.n	800294c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d002      	beq.n	80028ea <SD_DMAError+0x36>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d12d      	bne.n	8002946 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a19      	ldr	r2, [pc, #100]	; (8002954 <SD_DMAError+0xa0>)
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002900:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7ff ff62 	bl	80027d8 <HAL_SD_GetCardState>
 8002914:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b06      	cmp	r3, #6
 800291a:	d002      	beq.n	8002922 <SD_DMAError+0x6e>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d10a      	bne.n	8002938 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fbb6 	bl	8004098 <SDMMC_CmdStopTransfer>
 800292c:	4602      	mov	r2, r0
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	431a      	orrs	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f7ff fd6c 	bl	8002424 <HAL_SD_ErrorCallback>
#endif
  }
}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	004005ff 	.word	0x004005ff

08002958 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f240 523a 	movw	r2, #1338	; 0x53a
 800296e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff ff31 	bl	80027d8 <HAL_SD_GetCardState>
 8002976:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d002      	beq.n	8002992 <SD_DMATxAbort+0x3a>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d10a      	bne.n	80029a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fb7e 	bl	8004098 <SDMMC_CmdStopTransfer>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f002 fb2b 	bl	800500c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80029b6:	e002      	b.n	80029be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fd33 	bl	8002424 <HAL_SD_ErrorCallback>
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff fefa 	bl	80027d8 <HAL_SD_GetCardState>
 80029e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d002      	beq.n	8002a00 <SD_DMARxAbort+0x3a>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	d10a      	bne.n	8002a16 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 fb47 	bl	8004098 <SDMMC_CmdStopTransfer>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f002 faf4 	bl	800500c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002a24:	e002      	b.n	8002a2c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff fcfc 	bl	8002424 <HAL_SD_ErrorCallback>
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b094      	sub	sp, #80	; 0x50
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 f9f8 	bl	8003e3a <SDIO_GetPowerState>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a54:	e0b8      	b.n	8002bc8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d02f      	beq.n	8002abe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 fbdf 	bl	8004226 <SDMMC_CmdSendCID>
 8002a68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <SD_InitCard+0x40>
    {
      return errorstate;
 8002a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a72:	e0a9      	b.n	8002bc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 fa22 	bl	8003ec4 <SDIO_GetResponse>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fa19 	bl	8003ec4 <SDIO_GetResponse>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2108      	movs	r1, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fa10 	bl	8003ec4 <SDIO_GetResponse>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	210c      	movs	r1, #12
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 fa07 	bl	8003ec4 <SDIO_GetResponse>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d00d      	beq.n	8002ae2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f107 020e 	add.w	r2, r7, #14
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 fbe5 	bl	80042a0 <SDMMC_CmdSetRelAdd>
 8002ad6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SD_InitCard+0xae>
    {
      return errorstate;
 8002ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae0:	e072      	b.n	8002bc8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d036      	beq.n	8002b58 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002aea:	89fb      	ldrh	r3, [r7, #14]
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f001 fbaf 	bl	8004262 <SDMMC_CmdSendCSD>
 8002b04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	e05b      	b.n	8002bc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 f9d4 	bl	8003ec4 <SDIO_GetResponse>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2104      	movs	r1, #4
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 f9cb 	bl	8003ec4 <SDIO_GetResponse>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2108      	movs	r1, #8
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f9c2 	bl	8003ec4 <SDIO_GetResponse>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	210c      	movs	r1, #12
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f9b9 	bl	8003ec4 <SDIO_GetResponse>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 f9b0 	bl	8003ec4 <SDIO_GetResponse>
 8002b64:	4603      	mov	r3, r0
 8002b66:	0d1a      	lsrs	r2, r3, #20
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fc60 	bl	8002438 <HAL_SD_GetCardCSD>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b82:	e021      	b.n	8002bc8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	2200      	movs	r2, #0
 8002b90:	461c      	mov	r4, r3
 8002b92:	4615      	mov	r5, r2
 8002b94:	4622      	mov	r2, r4
 8002b96:	462b      	mov	r3, r5
 8002b98:	4608      	mov	r0, r1
 8002b9a:	f001 fa9f 	bl	80040dc <SDMMC_CmdSelDesel>
 8002b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SD_InitCard+0x176>
  {
    return errorstate;
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	e00e      	b.n	8002bc8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681d      	ldr	r5, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	466c      	mov	r4, sp
 8002bb2:	f103 0210 	add.w	r2, r3, #16
 8002bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	f001 f8e3 	bl	8003d8c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3740      	adds	r7, #64	; 0x40
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bdb0      	pop	{r4, r5, r7, pc}

08002bd0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fa9a 	bl	8004122 <SDMMC_CmdGoIdleState>
 8002bee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <SD_PowerON+0x2a>
  {
    return errorstate;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	e072      	b.n	8002ce0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 faad 	bl	800415e <SDMMC_CmdOperCond>
 8002c04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fa83 	bl	8004122 <SDMMC_CmdGoIdleState>
 8002c1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	e05b      	b.n	8002ce0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d137      	bne.n	8002ca6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 faad 	bl	800419c <SDMMC_CmdAppCommand>
 8002c42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d02d      	beq.n	8002ca6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c4e:	e047      	b.n	8002ce0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 faa0 	bl	800419c <SDMMC_CmdAppCommand>
 8002c5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <SD_PowerON+0x98>
    {
      return errorstate;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	e03b      	b.n	8002ce0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	491e      	ldr	r1, [pc, #120]	; (8002ce8 <SD_PowerON+0x118>)
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 fab6 	bl	80041e0 <SDMMC_CmdAppOperCommand>
 8002c74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c80:	e02e      	b.n	8002ce0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 f91b 	bl	8003ec4 <SDIO_GetResponse>
 8002c8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	0fdb      	lsrs	r3, r3, #31
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <SD_PowerON+0xcc>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <SD_PowerON+0xce>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]

    count++;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d802      	bhi.n	8002cb6 <SD_PowerON+0xe6>
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0cc      	beq.n	8002c50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d902      	bls.n	8002cc6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc4:	e00c      	b.n	8002ce0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
 8002cd6:	e002      	b.n	8002cde <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	c1100000 	.word	0xc1100000

08002cec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d00:	e018      	b.n	8002d34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f001 fae7 	bl	80042e2 <SDMMC_CmdSendStatus>
 8002d14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e009      	b.n	8002d34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 f8cc 	bl	8003ec4 <SDIO_GetResponse>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d03f      	beq.n	8002dd6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e033      	b.n	8002dc4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 f83e 	bl	8003de2 <SDIO_ReadFIFO>
 8002d66:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	0e1b      	lsrs	r3, r3, #24
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3301      	adds	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b07      	cmp	r3, #7
 8002dc8:	d9c8      	bls.n	8002d5c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d043      	beq.n	8002e80 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e037      	b.n	8002e6e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	041a      	lsls	r2, r3, #16
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	061a      	lsls	r2, r3, #24
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f107 0208 	add.w	r2, r7, #8
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ffca 	bl	8003dfc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b07      	cmp	r3, #7
 8002e72:	d9c4      	bls.n	8002dfe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e041      	b.n	8002f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f839 	bl	8002f26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f000 f9d8 	bl	800327c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d001      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e04e      	b.n	8002ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a23      	ldr	r2, [pc, #140]	; (8003000 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d022      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d01d      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1f      	ldr	r2, [pc, #124]	; (8003004 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d018      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x80>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d111      	bne.n	8002fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d010      	beq.n	8002ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fde:	e007      	b.n	8002ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40010400 	.word	0x40010400
 8003014:	40014000 	.word	0x40014000
 8003018:	40001800 	.word	0x40001800

0800301c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0202 	mvn.w	r2, #2
 8003048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8ee 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8e0 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8f1 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0204 	mvn.w	r2, #4
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8c4 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8b6 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f8c7 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0208 	mvn.w	r2, #8
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f89a 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f88c 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f89d 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b10      	cmp	r3, #16
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0210 	mvn.w	r2, #16
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2208      	movs	r2, #8
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f870 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f862 	bl	800322c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f873 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0201 	mvn.w	r2, #1
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f00c ff80 	bl	80100a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d10e      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d107      	bne.n	80031cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f902 	bl	80033d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d10e      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f838 	bl	8003268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b20      	cmp	r3, #32
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b20      	cmp	r3, #32
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0220 	mvn.w	r2, #32
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8cc 	bl	80033bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a40      	ldr	r2, [pc, #256]	; (8003390 <TIM_Base_SetConfig+0x114>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d00f      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <TIM_Base_SetConfig+0x118>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <TIM_Base_SetConfig+0x11c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3b      	ldr	r2, [pc, #236]	; (800339c <TIM_Base_SetConfig+0x120>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <TIM_Base_SetConfig+0x114>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d027      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <TIM_Base_SetConfig+0x118>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d023      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2b      	ldr	r2, [pc, #172]	; (8003398 <TIM_Base_SetConfig+0x11c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01f      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <TIM_Base_SetConfig+0x120>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d017      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <TIM_Base_SetConfig+0x128>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <TIM_Base_SetConfig+0x12c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <TIM_Base_SetConfig+0x130>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <TIM_Base_SetConfig+0x134>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <TIM_Base_SetConfig+0x138>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <TIM_Base_SetConfig+0x13c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d108      	bne.n	8003340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <TIM_Base_SetConfig+0x114>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0xf8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d103      	bne.n	800337c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	615a      	str	r2, [r3, #20]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40010400 	.word	0x40010400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800
 80033b0:	40001800 	.word	0x40001800
 80033b4:	40001c00 	.word	0x40001c00
 80033b8:	40002000 	.word	0x40002000

080033bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800343e:	481c      	ldr	r0, [pc, #112]	; (80034b0 <LL_ADC_CommonInit+0x80>)
 8003440:	f7ff ffe3 	bl	800340a <LL_ADC_IsEnabled>
 8003444:	4604      	mov	r4, r0
 8003446:	481b      	ldr	r0, [pc, #108]	; (80034b4 <LL_ADC_CommonInit+0x84>)
 8003448:	f7ff ffdf 	bl	800340a <LL_ADC_IsEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	431c      	orrs	r4, r3
 8003450:	4819      	ldr	r0, [pc, #100]	; (80034b8 <LL_ADC_CommonInit+0x88>)
 8003452:	f7ff ffda 	bl	800340a <LL_ADC_IsEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	4323      	orrs	r3, r4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d120      	bne.n	80034a0 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <LL_ADC_CommonInit+0x8c>)
 800346c:	4013      	ands	r3, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	6852      	ldr	r2, [r2, #4]
 8003476:	4311      	orrs	r1, r2
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	6892      	ldr	r2, [r2, #8]
 800347c:	4311      	orrs	r1, r2
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	430a      	orrs	r2, r1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e00b      	b.n	80034a4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <LL_ADC_CommonInit+0x8c>)
 8003492:	4013      	ands	r3, r2
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	e001      	b.n	80034a4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40012000 	.word	0x40012000
 80034b4:	40012100 	.word	0x40012100
 80034b8:	40012200 	.word	0x40012200
 80034bc:	fffc10e0 	.word	0xfffc10e0

080034c0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff9b 	bl	800340a <LL_ADC_IsEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d117      	bne.n	800350a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80034e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	6811      	ldr	r1, [r2, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	e001      	b.n	800350e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff6f 	bl	800340a <LL_ADC_IsEnabled>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d12b      	bne.n	800358a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	e005      	b.n	800355a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <LL_ADC_REG_Init+0x80>)
 8003560:	4013      	ands	r3, r2
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	4311      	orrs	r1, r2
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	6912      	ldr	r2, [r2, #16]
 8003574:	430a      	orrs	r2, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff2e 	bl	80033e4 <LL_ADC_REG_SetSequencerLength>
 8003588:	e001      	b.n	800358e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	c0fffcfd 	.word	0xc0fffcfd

0800359c <LL_GPIO_SetPinMode>:
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2103      	movs	r1, #3
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	61bb      	str	r3, [r7, #24]
  return result;
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	431a      	orrs	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3724      	adds	r7, #36	; 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_GPIO_SetPinOutputType>:
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	43db      	mvns	r3, r3
 800360e:	401a      	ands	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_GPIO_SetPinSpeed>:
{
 800362a:	b480      	push	{r7}
 800362c:	b089      	sub	sp, #36	; 0x24
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	613b      	str	r3, [r7, #16]
  return result;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2103      	movs	r1, #3
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	401a      	ands	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	61bb      	str	r3, [r7, #24]
  return result;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	431a      	orrs	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
}
 800367c:	bf00      	nop
 800367e:	3724      	adds	r7, #36	; 0x24
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_GPIO_SetPinPull>:
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	613b      	str	r3, [r7, #16]
  return result;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2103      	movs	r1, #3
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	401a      	ands	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	61bb      	str	r3, [r7, #24]
  return result;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	60da      	str	r2, [r3, #12]
}
 80036da:	bf00      	nop
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_GPIO_SetAFPin_0_7>:
{
 80036e6:	b480      	push	{r7}
 80036e8:	b089      	sub	sp, #36	; 0x24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	613b      	str	r3, [r7, #16]
  return result;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	210f      	movs	r1, #15
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	401a      	ands	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	61bb      	str	r3, [r7, #24]
  return result;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	3724      	adds	r7, #36	; 0x24
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_GPIO_SetAFPin_8_15>:
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	613b      	str	r3, [r7, #16]
  return result;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	210f      	movs	r1, #15
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	61bb      	str	r3, [r7, #24]
  return result;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24
}
 800379a:	bf00      	nop
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	613b      	str	r3, [r7, #16]
  return result;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80037d0:	e050      	b.n	8003874 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d042      	beq.n	800386e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d003      	beq.n	80037f8 <LL_GPIO_Init+0x52>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d10d      	bne.n	8003814 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	461a      	mov	r2, r3
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff12 	bl	800362a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	69b9      	ldr	r1, [r7, #24]
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fef3 	bl	80035fa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	461a      	mov	r2, r3
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff33 	bl	8003688 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d11a      	bne.n	8003860 <LL_GPIO_Init+0xba>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	60bb      	str	r3, [r7, #8]
  return result;
 8003836:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b07      	cmp	r3, #7
 8003840:	d807      	bhi.n	8003852 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	461a      	mov	r2, r3
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ff4b 	bl	80036e6 <LL_GPIO_SetAFPin_0_7>
 8003850:	e006      	b.n	8003860 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	461a      	mov	r2, r3
 8003858:	69b9      	ldr	r1, [r7, #24]
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff72 	bl	8003744 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	461a      	mov	r2, r3
 8003866:	69b9      	ldr	r1, [r7, #24]
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe97 	bl	800359c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3301      	adds	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	fa22 f303 	lsr.w	r3, r2, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1a7      	bne.n	80037d2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 0201 	bic.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f023 021f 	bic.w	r2, r3, #31
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800390c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	430a      	orrs	r2, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a42      	ldr	r2, [pc, #264]	; (8003a4c <LL_I2C_ConfigSpeed+0x124>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	493a      	ldr	r1, [pc, #232]	; (8003a50 <LL_I2C_ConfigSpeed+0x128>)
 8003966:	428b      	cmp	r3, r1
 8003968:	d802      	bhi.n	8003970 <LL_I2C_ConfigSpeed+0x48>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3301      	adds	r3, #1
 800396e:	e009      	b.n	8003984 <LL_I2C_ConfigSpeed+0x5c>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4936      	ldr	r1, [pc, #216]	; (8003a54 <LL_I2C_ConfigSpeed+0x12c>)
 800397c:	fba1 1303 	umull	r1, r3, r1, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	3301      	adds	r3, #1
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a30      	ldr	r2, [pc, #192]	; (8003a50 <LL_I2C_ConfigSpeed+0x128>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d939      	bls.n	8003a06 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d117      	bne.n	80039c8 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c0:	e01d      	b.n	80039fe <LL_I2C_ConfigSpeed+0xd6>
 80039c2:	f248 0301 	movw	r3, #32769	; 0x8001
 80039c6:	e01a      	b.n	80039fe <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009a      	lsls	r2, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f8:	e001      	b.n	80039fe <LL_I2C_ConfigSpeed+0xd6>
 80039fa:	f248 0301 	movw	r3, #32769	; 0x8001
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e011      	b.n	8003a2a <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a14:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	e000      	b.n	8003a28 <LL_I2C_ConfigSpeed+0x100>
 8003a26:	2304      	movs	r3, #4
 8003a28:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	61da      	str	r2, [r3, #28]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	431bde83 	.word	0x431bde83
 8003a50:	000186a0 	.word	0x000186a0
 8003a54:	10624dd3 	.word	0x10624dd3

08003a58 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 021a 	bic.w	r2, r3, #26
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fefc 	bl	80038ac <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f89d 	bl	8003bf8 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff feff 	bl	80038cc <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003ace:	6939      	ldr	r1, [r7, #16]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff25 	bl	8003928 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6959      	ldr	r1, [r3, #20]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff05 	bl	80038f8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ffaf 	bl	8003a58 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fec6 	bl	800388c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ffb9 	bl	8003a7e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <LL_RCC_GetSysClkSource+0x18>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800

08003b34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <LL_RCC_GetAHBPrescaler+0x18>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800

08003b50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <LL_RCC_PLL_GetMainSource+0x18>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800

08003ba4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <LL_RCC_PLL_GetN+0x18>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <LL_RCC_PLL_GetP+0x18>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800

08003bdc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <LL_RCC_PLL_GetDivider+0x18>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800

08003bf8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003c00:	f000 f820 	bl	8003c44 <RCC_GetSystemClockFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f840 	bl	8003c94 <RCC_GetHCLKClockFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f84e 	bl	8003cc0 <RCC_GetPCLK1ClockFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f85a 	bl	8003ce8 <RCC_GetPCLK2ClockFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60da      	str	r2, [r3, #12]
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003c4e:	f7ff ff63 	bl	8003b18 <LL_RCC_GetSysClkSource>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d00c      	beq.n	8003c72 <RCC_GetSystemClockFreq+0x2e>
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d80f      	bhi.n	8003c7c <RCC_GetSystemClockFreq+0x38>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <RCC_GetSystemClockFreq+0x22>
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d003      	beq.n	8003c6c <RCC_GetSystemClockFreq+0x28>
 8003c64:	e00a      	b.n	8003c7c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <RCC_GetSystemClockFreq+0x48>)
 8003c68:	607b      	str	r3, [r7, #4]
      break;
 8003c6a:	e00a      	b.n	8003c82 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <RCC_GetSystemClockFreq+0x4c>)
 8003c6e:	607b      	str	r3, [r7, #4]
      break;
 8003c70:	e007      	b.n	8003c82 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003c72:	2008      	movs	r0, #8
 8003c74:	f000 f84c 	bl	8003d10 <RCC_PLL_GetFreqDomain_SYS>
 8003c78:	6078      	str	r0, [r7, #4]
      break;
 8003c7a:	e002      	b.n	8003c82 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <RCC_GetSystemClockFreq+0x48>)
 8003c7e:	607b      	str	r3, [r7, #4]
      break;
 8003c80:	bf00      	nop
  }

  return frequency;
 8003c82:	687b      	ldr	r3, [r7, #4]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	007a1200 	.word	0x007a1200

08003c94 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003c9c:	f7ff ff4a 	bl	8003b34 <LL_RCC_GetAHBPrescaler>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <RCC_GetHCLKClockFreq+0x28>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	461a      	mov	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	40d3      	lsrs	r3, r2
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08011c98 	.word	0x08011c98

08003cc0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003cc8:	f7ff ff42 	bl	8003b50 <LL_RCC_GetAPB1Prescaler>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	0a9b      	lsrs	r3, r3, #10
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <RCC_GetPCLK1ClockFreq+0x24>)
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	40d3      	lsrs	r3, r2
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	08011ca8 	.word	0x08011ca8

08003ce8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003cf0:	f7ff ff3c 	bl	8003b6c <LL_RCC_GetAPB2Prescaler>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <RCC_GetPCLK2ClockFreq+0x24>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	40d3      	lsrs	r3, r2
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08011ca8 	.word	0x08011ca8

08003d10 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003d24:	f7ff ff30 	bl	8003b88 <LL_RCC_PLL_GetMainSource>
 8003d28:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d36:	d003      	beq.n	8003d40 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003d38:	e005      	b.n	8003d46 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003d3c:	617b      	str	r3, [r7, #20]
      break;
 8003d3e:	e005      	b.n	8003d4c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003d42:	617b      	str	r3, [r7, #20]
      break;
 8003d44:	e002      	b.n	8003d4c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003d48:	617b      	str	r3, [r7, #20]
      break;
 8003d4a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d113      	bne.n	8003d7a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003d52:	f7ff ff43 	bl	8003bdc <LL_RCC_PLL_GetDivider>
 8003d56:	4602      	mov	r2, r0
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fbb3 f4f2 	udiv	r4, r3, r2
 8003d5e:	f7ff ff21 	bl	8003ba4 <LL_RCC_PLL_GetN>
 8003d62:	4603      	mov	r3, r0
 8003d64:	fb03 f404 	mul.w	r4, r3, r4
 8003d68:	f7ff ff2a 	bl	8003bc0 <LL_RCC_PLL_GetP>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	3301      	adds	r3, #1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d78:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003d7a:	693b      	ldr	r3, [r7, #16]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd90      	pop	{r4, r7, pc}
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	007a1200 	.word	0x007a1200

08003d8c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	f107 001c 	add.w	r0, r7, #28
 8003d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003da2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003da4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003da6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003daa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003dae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003db2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003db6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003dc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	b004      	add	sp, #16
 8003de0:	4770      	bx	lr

08003de2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0303 	and.w	r3, r3, #3
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e74:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003e7a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003e80:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003e90:	f023 030f 	bic.w	r3, r3, #15
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	b2db      	uxtb	r3, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
}  
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003f10:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003f16:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003f1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0

}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b088      	sub	sp, #32
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003f50:	2310      	movs	r3, #16
 8003f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff74 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	2110      	movs	r1, #16
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f9d7 	bl	8004328 <SDMMC_GetCmdResp1>
 8003f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003f94:	2311      	movs	r3, #17
 8003f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f98:	2340      	movs	r3, #64	; 0x40
 8003f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff52 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	2111      	movs	r1, #17
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f9b5 	bl	8004328 <SDMMC_GetCmdResp1>
 8003fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b088      	sub	sp, #32
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003fd8:	2312      	movs	r3, #18
 8003fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fdc:	2340      	movs	r3, #64	; 0x40
 8003fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff30 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	2112      	movs	r1, #18
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f993 	bl	8004328 <SDMMC_GetCmdResp1>
 8004002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004004:	69fb      	ldr	r3, [r7, #28]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b088      	sub	sp, #32
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800401c:	2318      	movs	r3, #24
 800401e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004020:	2340      	movs	r3, #64	; 0x40
 8004022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800402e:	f107 0308 	add.w	r3, r7, #8
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff0e 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	2118      	movs	r1, #24
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f971 	bl	8004328 <SDMMC_GetCmdResp1>
 8004046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004048:	69fb      	ldr	r3, [r7, #28]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b088      	sub	sp, #32
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004060:	2319      	movs	r3, #25
 8004062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004064:	2340      	movs	r3, #64	; 0x40
 8004066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800406c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff feec 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	2119      	movs	r1, #25
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f94f 	bl	8004328 <SDMMC_GetCmdResp1>
 800408a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800408c:	69fb      	ldr	r3, [r7, #28]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80040a4:	230c      	movs	r3, #12
 80040a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff feca 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80040c2:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <SDMMC_CmdStopTransfer+0x40>)
 80040c4:	210c      	movs	r1, #12
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f92e 	bl	8004328 <SDMMC_GetCmdResp1>
 80040cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ce:	69fb      	ldr	r3, [r7, #28]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	05f5e100 	.word	0x05f5e100

080040dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80040ec:	2307      	movs	r3, #7
 80040ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040fe:	f107 0310 	add.w	r3, r7, #16
 8004102:	4619      	mov	r1, r3
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff fea6 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	2107      	movs	r1, #7
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f909 	bl	8004328 <SDMMC_GetCmdResp1>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800411a:	4618      	mov	r0, r3
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b088      	sub	sp, #32
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800413a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800413e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004140:	f107 0308 	add.w	r3, r7, #8
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fe85 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fb23 	bl	8004798 <SDMMC_GetCmdError>
 8004152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004154:	69fb      	ldr	r3, [r7, #28]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b088      	sub	sp, #32
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004166:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800416a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800416c:	2308      	movs	r3, #8
 800416e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800417c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fe66 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fab6 	bl	80046fc <SDMMC_GetCmdResp7>
 8004190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004192:	69fb      	ldr	r3, [r7, #28]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80041aa:	2337      	movs	r3, #55	; 0x37
 80041ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041ae:	2340      	movs	r3, #64	; 0x40
 80041b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041bc:	f107 0308 	add.w	r3, r7, #8
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe47 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	2137      	movs	r1, #55	; 0x37
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8aa 	bl	8004328 <SDMMC_GetCmdResp1>
 80041d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041d6:	69fb      	ldr	r3, [r7, #28]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80041f6:	2329      	movs	r3, #41	; 0x29
 80041f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041fa:	2340      	movs	r3, #64	; 0x40
 80041fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004208:	f107 0308 	add.w	r3, r7, #8
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fe21 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f9bd 	bl	8004594 <SDMMC_GetCmdResp3>
 800421a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800421c:	69fb      	ldr	r3, [r7, #28]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b088      	sub	sp, #32
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004232:	2302      	movs	r3, #2
 8004234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004236:	23c0      	movs	r3, #192	; 0xc0
 8004238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800423e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004242:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004244:	f107 0308 	add.w	r3, r7, #8
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fe03 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f957 	bl	8004504 <SDMMC_GetCmdResp2>
 8004256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004258:	69fb      	ldr	r3, [r7, #28]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b088      	sub	sp, #32
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004270:	2309      	movs	r3, #9
 8004272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004274:	23c0      	movs	r3, #192	; 0xc0
 8004276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800427c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fde4 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f938 	bl	8004504 <SDMMC_GetCmdResp2>
 8004294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004296:	69fb      	ldr	r3, [r7, #28]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80042ae:	2303      	movs	r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042c0:	f107 0308 	add.w	r3, r7, #8
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff fdc5 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	2103      	movs	r1, #3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f99d 	bl	8004610 <SDMMC_GetCmdResp6>
 80042d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042d8:	69fb      	ldr	r3, [r7, #28]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b088      	sub	sp, #32
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80042f0:	230d      	movs	r3, #13
 80042f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042f4:	2340      	movs	r3, #64	; 0x40
 80042f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004300:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fda4 	bl	8003e56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	210d      	movs	r1, #13
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f807 	bl	8004328 <SDMMC_GetCmdResp1>
 800431a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800431c:	69fb      	ldr	r3, [r7, #28]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	460b      	mov	r3, r1
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004336:	4b70      	ldr	r3, [pc, #448]	; (80044f8 <SDMMC_GetCmdResp1+0x1d0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a70      	ldr	r2, [pc, #448]	; (80044fc <SDMMC_GetCmdResp1+0x1d4>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	0a5a      	lsrs	r2, r3, #9
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	1e5a      	subs	r2, r3, #1
 800434e:	61fa      	str	r2, [r7, #28]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004358:	e0c9      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ef      	beq.n	800434a <SDMMC_GetCmdResp1+0x22>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ea      	bne.n	800434a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2204      	movs	r2, #4
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004386:	2304      	movs	r3, #4
 8004388:	e0b1      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800439c:	2301      	movs	r3, #1
 800439e:	e0a6      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	22c5      	movs	r2, #197	; 0xc5
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fd7f 	bl	8003eaa <SDIO_GetCommandResponse>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461a      	mov	r2, r3
 80043b0:	7afb      	ldrb	r3, [r7, #11]
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d001      	beq.n	80043ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e099      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80043ba:	2100      	movs	r1, #0
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff fd81 	bl	8003ec4 <SDIO_GetResponse>
 80043c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <SDMMC_GetCmdResp1+0x1d8>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e08d      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da02      	bge.n	80043de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80043d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043dc:	e087      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80043e8:	2340      	movs	r3, #64	; 0x40
 80043ea:	e080      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	e079      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004408:	e071      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004418:	e069      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004428:	e061      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004438:	e059      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004448:	e051      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004458:	e049      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004468:	e041      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004478:	e039      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004488:	e031      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004494:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004498:	e029      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80044a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044a8:	e021      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80044b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044b8:	e019      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80044c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044c8:	e011      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80044d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044d8:	e009      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80044e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80044e8:	e001      	b.n	80044ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80044ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000014 	.word	0x20000014
 80044fc:	10624dd3 	.word	0x10624dd3
 8004500:	fdffe008 	.word	0xfdffe008

08004504 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800450c:	4b1f      	ldr	r3, [pc, #124]	; (800458c <SDMMC_GetCmdResp2+0x88>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <SDMMC_GetCmdResp2+0x8c>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	0a5b      	lsrs	r3, r3, #9
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	60fa      	str	r2, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800452c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004530:	e026      	b.n	8004580 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ef      	beq.n	8004522 <SDMMC_GetCmdResp2+0x1e>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ea      	bne.n	8004522 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2204      	movs	r2, #4
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800455e:	2304      	movs	r3, #4
 8004560:	e00e      	b.n	8004580 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004574:	2301      	movs	r3, #1
 8004576:	e003      	b.n	8004580 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	22c5      	movs	r2, #197	; 0xc5
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	20000014 	.word	0x20000014
 8004590:	10624dd3 	.word	0x10624dd3

08004594 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800459c:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <SDMMC_GetCmdResp3+0x74>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <SDMMC_GetCmdResp3+0x78>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0a5b      	lsrs	r3, r3, #9
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1e5a      	subs	r2, r3, #1
 80045b6:	60fa      	str	r2, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045c0:	e01b      	b.n	80045fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ef      	beq.n	80045b2 <SDMMC_GetCmdResp3+0x1e>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ea      	bne.n	80045b2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2204      	movs	r2, #4
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045ee:	2304      	movs	r3, #4
 80045f0:	e003      	b.n	80045fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	22c5      	movs	r2, #197	; 0xc5
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000014 	.word	0x20000014
 800460c:	10624dd3 	.word	0x10624dd3

08004610 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	460b      	mov	r3, r1
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800461e:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <SDMMC_GetCmdResp6+0xe4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a35      	ldr	r2, [pc, #212]	; (80046f8 <SDMMC_GetCmdResp6+0xe8>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	0a5b      	lsrs	r3, r3, #9
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	1e5a      	subs	r2, r3, #1
 8004638:	61fa      	str	r2, [r7, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800463e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004642:	e052      	b.n	80046ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ef      	beq.n	8004634 <SDMMC_GetCmdResp6+0x24>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ea      	bne.n	8004634 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2204      	movs	r2, #4
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004670:	2304      	movs	r3, #4
 8004672:	e03a      	b.n	80046ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004686:	2301      	movs	r3, #1
 8004688:	e02f      	b.n	80046ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff fc0d 	bl	8003eaa <SDIO_GetCommandResponse>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	7afb      	ldrb	r3, [r7, #11]
 8004696:	4293      	cmp	r3, r2
 8004698:	d001      	beq.n	800469e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800469a:	2301      	movs	r3, #1
 800469c:	e025      	b.n	80046ea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22c5      	movs	r2, #197	; 0xc5
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80046a4:	2100      	movs	r1, #0
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff fc0c 	bl	8003ec4 <SDIO_GetResponse>
 80046ac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e011      	b.n	80046ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80046d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046d4:	e009      	b.n	80046ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80046e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e4:	e001      	b.n	80046ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80046e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000014 	.word	0x20000014
 80046f8:	10624dd3 	.word	0x10624dd3

080046fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004704:	4b22      	ldr	r3, [pc, #136]	; (8004790 <SDMMC_GetCmdResp7+0x94>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <SDMMC_GetCmdResp7+0x98>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	0a5b      	lsrs	r3, r3, #9
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	60fa      	str	r2, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004728:	e02c      	b.n	8004784 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ef      	beq.n	800471a <SDMMC_GetCmdResp7+0x1e>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ea      	bne.n	800471a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2204      	movs	r2, #4
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004756:	2304      	movs	r3, #4
 8004758:	e014      	b.n	8004784 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800476c:	2301      	movs	r3, #1
 800476e:	e009      	b.n	8004784 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2240      	movs	r2, #64	; 0x40
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004782:	2300      	movs	r3, #0
  
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000014 	.word	0x20000014
 8004794:	10624dd3 	.word	0x10624dd3

08004798 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047a0:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <SDMMC_GetCmdError+0x50>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a11      	ldr	r2, [pc, #68]	; (80047ec <SDMMC_GetCmdError+0x54>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0a5b      	lsrs	r3, r3, #9
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047c4:	e009      	b.n	80047da <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f1      	beq.n	80047b6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	22c5      	movs	r2, #197	; 0xc5
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000014 	.word	0x20000014
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <LL_SPI_IsEnabled>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d101      	bne.n	8004808 <LL_SPI_IsEnabled+0x18>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <LL_SPI_IsEnabled+0x1a>
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	611a      	str	r2, [r3, #16]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ffd3 	bl	80047f0 <LL_SPI_IsEnabled>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d139      	bne.n	80048c4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004858:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	6811      	ldr	r1, [r2, #0]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	6852      	ldr	r2, [r2, #4]
 8004864:	4311      	orrs	r1, r2
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	4311      	orrs	r1, r2
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68d2      	ldr	r2, [r2, #12]
 8004870:	4311      	orrs	r1, r2
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	6912      	ldr	r2, [r2, #16]
 8004876:	4311      	orrs	r1, r2
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	6952      	ldr	r2, [r2, #20]
 800487c:	4311      	orrs	r1, r2
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	6992      	ldr	r2, [r2, #24]
 8004882:	4311      	orrs	r1, r2
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	69d2      	ldr	r2, [r2, #28]
 8004888:	4311      	orrs	r1, r2
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	6a12      	ldr	r2, [r2, #32]
 800488e:	430a      	orrs	r2, r1
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f023 0204 	bic.w	r2, r3, #4
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b2:	d105      	bne.n	80048c0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff ffab 	bl	8004816 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	61da      	str	r2, [r3, #28]
  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	615a      	str	r2, [r3, #20]
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004954:	b0c0      	sub	sp, #256	; 0x100
 8004956:	af00      	add	r7, sp, #0
 8004958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800495c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004960:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004970:	f040 810c 	bne.w	8004b8c <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800497e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	1891      	adds	r1, r2, r2
 800498c:	6639      	str	r1, [r7, #96]	; 0x60
 800498e:	415b      	adcs	r3, r3
 8004990:	667b      	str	r3, [r7, #100]	; 0x64
 8004992:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004996:	4621      	mov	r1, r4
 8004998:	eb12 0801 	adds.w	r8, r2, r1
 800499c:	4629      	mov	r1, r5
 800499e:	eb43 0901 	adc.w	r9, r3, r1
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049b6:	4690      	mov	r8, r2
 80049b8:	4699      	mov	r9, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	eb18 0303 	adds.w	r3, r8, r3
 80049c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049c4:	462b      	mov	r3, r5
 80049c6:	eb49 0303 	adc.w	r3, r9, r3
 80049ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049d2:	2200      	movs	r2, #0
 80049d4:	469a      	mov	sl, r3
 80049d6:	4693      	mov	fp, r2
 80049d8:	eb1a 030a 	adds.w	r3, sl, sl
 80049dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80049de:	eb4b 030b 	adc.w	r3, fp, fp
 80049e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049ec:	f7fb fca0 	bl	8000330 <__aeabi_uldivmod>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4b64      	ldr	r3, [pc, #400]	; (8004b88 <LL_USART_SetBaudRate+0x238>)
 80049f6:	fba3 2302 	umull	r2, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	b29c      	uxth	r4, r3
 8004a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a0c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a10:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	6539      	str	r1, [r7, #80]	; 0x50
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a24:	4641      	mov	r1, r8
 8004a26:	1851      	adds	r1, r2, r1
 8004a28:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	00cb      	lsls	r3, r1, #3
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a46:	4651      	mov	r1, sl
 8004a48:	00ca      	lsls	r2, r1, #3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4642      	mov	r2, r8
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a58:	464b      	mov	r3, r9
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a6e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004a72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004a76:	460b      	mov	r3, r1
 8004a78:	18db      	adds	r3, r3, r3
 8004a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	eb42 0303 	adc.w	r3, r2, r3
 8004a82:	647b      	str	r3, [r7, #68]	; 0x44
 8004a84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a88:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a8c:	f7fb fc50 	bl	8000330 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4611      	mov	r1, r2
 8004a96:	4b3c      	ldr	r3, [pc, #240]	; (8004b88 <LL_USART_SetBaudRate+0x238>)
 8004a98:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	2264      	movs	r2, #100	; 0x64
 8004aa0:	fb02 f303 	mul.w	r3, r2, r3
 8004aa4:	1acb      	subs	r3, r1, r3
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <LL_USART_SetBaudRate+0x238>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4423      	add	r3, r4
 8004ac2:	b29c      	uxth	r4, r3
 8004ac4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ace:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	464b      	mov	r3, r9
 8004ada:	1891      	adds	r1, r2, r2
 8004adc:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ade:	415b      	adcs	r3, r3
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	1851      	adds	r1, r2, r1
 8004aea:	6339      	str	r1, [r7, #48]	; 0x30
 8004aec:	4649      	mov	r1, r9
 8004aee:	414b      	adcs	r3, r1
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004afe:	4659      	mov	r1, fp
 8004b00:	00cb      	lsls	r3, r1, #3
 8004b02:	4651      	mov	r1, sl
 8004b04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b08:	4651      	mov	r1, sl
 8004b0a:	00ca      	lsls	r2, r1, #3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	4642      	mov	r2, r8
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	eb42 0303 	adc.w	r3, r2, r3
 8004b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b30:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004b34:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	18db      	adds	r3, r3, r3
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3e:	4613      	mov	r3, r2
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004b4e:	f7fb fbef 	bl	8000330 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <LL_USART_SetBaudRate+0x238>)
 8004b58:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	2164      	movs	r1, #100	; 0x64
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3332      	adds	r3, #50	; 0x32
 8004b6a:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <LL_USART_SetBaudRate+0x238>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4423      	add	r3, r4
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8004b86:	e107      	b.n	8004d98 <LL_USART_SetBaudRate+0x448>
 8004b88:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004b8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b96:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b9a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	6239      	str	r1, [r7, #32]
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bae:	4641      	mov	r1, r8
 8004bb0:	1854      	adds	r4, r2, r1
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	eb43 0501 	adc.w	r5, r3, r1
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	00eb      	lsls	r3, r5, #3
 8004bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc6:	00e2      	lsls	r2, r4, #3
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	4643      	mov	r3, r8
 8004bce:	18e3      	adds	r3, r4, r3
 8004bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	eb45 0303 	adc.w	r3, r5, r3
 8004bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004be8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	008b      	lsls	r3, r1, #2
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c02:	4621      	mov	r1, r4
 8004c04:	008a      	lsls	r2, r1, #2
 8004c06:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c0a:	f7fb fb91 	bl	8000330 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4b64      	ldr	r3, [pc, #400]	; (8004da4 <LL_USART_SetBaudRate+0x454>)
 8004c14:	fba3 2302 	umull	r2, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	b29c      	uxth	r4, r3
 8004c20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c2e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004c32:	4642      	mov	r2, r8
 8004c34:	464b      	mov	r3, r9
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	61b9      	str	r1, [r7, #24]
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c42:	4641      	mov	r1, r8
 8004c44:	1851      	adds	r1, r2, r1
 8004c46:	6139      	str	r1, [r7, #16]
 8004c48:	4649      	mov	r1, r9
 8004c4a:	414b      	adcs	r3, r1
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5a:	4659      	mov	r1, fp
 8004c5c:	00cb      	lsls	r3, r1, #3
 8004c5e:	4651      	mov	r1, sl
 8004c60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c64:	4651      	mov	r1, sl
 8004c66:	00ca      	lsls	r2, r1, #3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4642      	mov	r2, r8
 8004c70:	189b      	adds	r3, r3, r2
 8004c72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c76:	464b      	mov	r3, r9
 8004c78:	460a      	mov	r2, r1
 8004c7a:	eb42 0303 	adc.w	r3, r2, r3
 8004c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004cae:	f7fb fb3f 	bl	8000330 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4b3b      	ldr	r3, [pc, #236]	; (8004da4 <LL_USART_SetBaudRate+0x454>)
 8004cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	2164      	movs	r1, #100	; 0x64
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	3332      	adds	r3, #50	; 0x32
 8004cca:	4a36      	ldr	r2, [pc, #216]	; (8004da4 <LL_USART_SetBaudRate+0x454>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	4423      	add	r3, r4
 8004cdc:	b29c      	uxth	r4, r3
 8004cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cec:	4642      	mov	r2, r8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	1891      	adds	r1, r2, r2
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	1851      	adds	r1, r2, r1
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	4649      	mov	r1, r9
 8004d04:	414b      	adcs	r3, r1
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d14:	4659      	mov	r1, fp
 8004d16:	00cb      	lsls	r3, r1, #3
 8004d18:	4651      	mov	r1, sl
 8004d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1e:	4651      	mov	r1, sl
 8004d20:	00ca      	lsls	r2, r1, #3
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	4642      	mov	r2, r8
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8004d2e:	464b      	mov	r3, r9
 8004d30:	460a      	mov	r2, r1
 8004d32:	eb42 0303 	adc.w	r3, r2, r3
 8004d36:	677b      	str	r3, [r7, #116]	; 0x74
 8004d38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004d4e:	4649      	mov	r1, r9
 8004d50:	008b      	lsls	r3, r1, #2
 8004d52:	4641      	mov	r1, r8
 8004d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d58:	4641      	mov	r1, r8
 8004d5a:	008a      	lsls	r2, r1, #2
 8004d5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004d60:	f7fb fae6 	bl	8000330 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <LL_USART_SetBaudRate+0x454>)
 8004d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2164      	movs	r1, #100	; 0x64
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	3332      	adds	r3, #50	; 0x32
 8004d7c:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <LL_USART_SetBaudRate+0x454>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	4423      	add	r3, r4
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da4:	51eb851f 	.word	0x51eb851f

08004da8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff fd8d 	bl	80048da <LL_USART_IsEnabled>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d16c      	bne.n	8004ea0 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004dce:	f023 030c 	bic.w	r3, r3, #12
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	6851      	ldr	r1, [r2, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	68d2      	ldr	r2, [r2, #12]
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	6912      	ldr	r2, [r2, #16]
 8004de0:	4311      	orrs	r1, r2
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	6992      	ldr	r2, [r2, #24]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fd84 	bl	8004902 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fd91 	bl	8004928 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004e06:	f107 0308 	add.w	r3, r7, #8
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fef4 	bl	8003bf8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a26      	ldr	r2, [pc, #152]	; (8004eac <LL_USART_Init+0x104>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d102      	bne.n	8004e1e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e02f      	b.n	8004e7e <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <LL_USART_Init+0x108>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d102      	bne.n	8004e2c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	e028      	b.n	8004e7e <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <LL_USART_Init+0x10c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d102      	bne.n	8004e3a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	e021      	b.n	8004e7e <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <LL_USART_Init+0x110>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d102      	bne.n	8004e48 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e01a      	b.n	8004e7e <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <LL_USART_Init+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d102      	bne.n	8004e56 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e013      	b.n	8004e7e <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <LL_USART_Init+0x118>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d102      	bne.n	8004e64 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e00c      	b.n	8004e7e <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <LL_USART_Init+0x11c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d102      	bne.n	8004e72 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e005      	b.n	8004e7e <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <LL_USART_Init+0x120>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69b9      	ldr	r1, [r7, #24]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fd58 	bl	8004950 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40011000 	.word	0x40011000
 8004eb0:	40004400 	.word	0x40004400
 8004eb4:	40004800 	.word	0x40004800
 8004eb8:	40011400 	.word	0x40011400
 8004ebc:	40004c00 	.word	0x40004c00
 8004ec0:	40005000 	.word	0x40005000
 8004ec4:	40007800 	.word	0x40007800
 8004ec8:	40007c00 	.word	0x40007c00

08004ecc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <LL_mDelay+0x48>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004eda:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee2:	d00c      	beq.n	8004efe <LL_mDelay+0x32>
  {
    Delay++;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004eea:	e008      	b.n	8004efe <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <LL_mDelay+0x48>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <LL_mDelay+0x32>
    {
      Delay--;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f3      	bne.n	8004eec <LL_mDelay+0x20>
    }
  }
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	e000e010 	.word	0xe000e010

08004f18 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <LL_SetSystemCoreClock+0x1c>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6013      	str	r3, [r2, #0]
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000014 	.word	0x20000014

08004f38 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004f42:	f000 f888 	bl	8005056 <BSP_SD_IsDetected>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e005      	b.n	8004f5c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004f50:	4804      	ldr	r0, [pc, #16]	; (8004f64 <BSP_SD_Init+0x2c>)
 8004f52:	f7fc fe69 	bl	8001c28 <HAL_SD_Init>
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20007564 	.word	0x20007564

08004f68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	4806      	ldr	r0, [pc, #24]	; (8004f98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004f80:	f7fc ff02 	bl	8001d88 <HAL_SD_ReadBlocks_DMA>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20007564 	.word	0x20007564

08004f9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	4806      	ldr	r0, [pc, #24]	; (8004fcc <BSP_SD_WriteBlocks_DMA+0x30>)
 8004fb4:	f7fc ffca 	bl	8001f4c <HAL_SD_WriteBlocks_DMA>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20007564 	.word	0x20007564

08004fd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004fd4:	4805      	ldr	r0, [pc, #20]	; (8004fec <BSP_SD_GetCardState+0x1c>)
 8004fd6:	f7fd fbff 	bl	80027d8 <HAL_SD_GetCardState>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20007564 	.word	0x20007564

08004ff0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4803      	ldr	r0, [pc, #12]	; (8005008 <BSP_SD_GetCardInfo+0x18>)
 8004ffc:	f7fd fbc0 	bl	8002780 <HAL_SD_GetCardInfo>
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20007564 	.word	0x20007564

0800500c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005014:	f000 f818 	bl	8005048 <BSP_SD_AbortCallback>
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005028:	f003 f9b0 	bl	800838c <BSP_SD_WriteCpltCallback>
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800503c:	f003 f9b2 	bl	80083a4 <BSP_SD_ReadCpltCallback>
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0

}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800505c:	2301      	movs	r3, #1
 800505e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	b2db      	uxtb	r3, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	6039      	str	r1, [r7, #0]
 800507a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	2b7f      	cmp	r3, #127	; 0x7f
 8005080:	d802      	bhi.n	8005088 <ff_convert+0x18>
		c = chr;
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	81fb      	strh	r3, [r7, #14]
 8005086:	e025      	b.n	80050d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	d805      	bhi.n	80050a0 <ff_convert+0x30>
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	3b80      	subs	r3, #128	; 0x80
 8005098:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <ff_convert+0x74>)
 800509a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509e:	e000      	b.n	80050a2 <ff_convert+0x32>
 80050a0:	2300      	movs	r3, #0
 80050a2:	81fb      	strh	r3, [r7, #14]
 80050a4:	e016      	b.n	80050d4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80050a6:	2300      	movs	r3, #0
 80050a8:	81fb      	strh	r3, [r7, #14]
 80050aa:	e009      	b.n	80050c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <ff_convert+0x74>)
 80050b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d006      	beq.n	80050c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80050ba:	89fb      	ldrh	r3, [r7, #14]
 80050bc:	3301      	adds	r3, #1
 80050be:	81fb      	strh	r3, [r7, #14]
 80050c0:	89fb      	ldrh	r3, [r7, #14]
 80050c2:	2b7f      	cmp	r3, #127	; 0x7f
 80050c4:	d9f2      	bls.n	80050ac <ff_convert+0x3c>
 80050c6:	e000      	b.n	80050ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80050c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	3380      	adds	r3, #128	; 0x80
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80050d4:	89fb      	ldrh	r3, [r7, #14]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	08011770 	.word	0x08011770

080050e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d201      	bcs.n	80050fe <ff_wtoupper+0x16>
 80050fa:	4b3e      	ldr	r3, [pc, #248]	; (80051f4 <ff_wtoupper+0x10c>)
 80050fc:	e000      	b.n	8005100 <ff_wtoupper+0x18>
 80050fe:	4b3e      	ldr	r3, [pc, #248]	; (80051f8 <ff_wtoupper+0x110>)
 8005100:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	1c9a      	adds	r2, r3, #2
 8005106:	617a      	str	r2, [r7, #20]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800510c:	8a7b      	ldrh	r3, [r7, #18]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d068      	beq.n	80051e4 <ff_wtoupper+0xfc>
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	8a7b      	ldrh	r3, [r7, #18]
 8005116:	429a      	cmp	r2, r3
 8005118:	d364      	bcc.n	80051e4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	1c9a      	adds	r2, r3, #2
 800511e:	617a      	str	r2, [r7, #20]
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	823b      	strh	r3, [r7, #16]
 8005124:	8a3b      	ldrh	r3, [r7, #16]
 8005126:	0a1b      	lsrs	r3, r3, #8
 8005128:	81fb      	strh	r3, [r7, #14]
 800512a:	8a3b      	ldrh	r3, [r7, #16]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005130:	88fa      	ldrh	r2, [r7, #6]
 8005132:	8a79      	ldrh	r1, [r7, #18]
 8005134:	8a3b      	ldrh	r3, [r7, #16]
 8005136:	440b      	add	r3, r1
 8005138:	429a      	cmp	r2, r3
 800513a:	da49      	bge.n	80051d0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800513c:	89fb      	ldrh	r3, [r7, #14]
 800513e:	2b08      	cmp	r3, #8
 8005140:	d84f      	bhi.n	80051e2 <ff_wtoupper+0xfa>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <ff_wtoupper+0x60>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800516d 	.word	0x0800516d
 800514c:	0800517f 	.word	0x0800517f
 8005150:	08005195 	.word	0x08005195
 8005154:	0800519d 	.word	0x0800519d
 8005158:	080051a5 	.word	0x080051a5
 800515c:	080051ad 	.word	0x080051ad
 8005160:	080051b5 	.word	0x080051b5
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051c5 	.word	0x080051c5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	8a7b      	ldrh	r3, [r7, #18]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	80fb      	strh	r3, [r7, #6]
 800517c:	e027      	b.n	80051ce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	8a7b      	ldrh	r3, [r7, #18]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	b29b      	uxth	r3, r3
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	b29b      	uxth	r3, r3
 800518c:	88fa      	ldrh	r2, [r7, #6]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	80fb      	strh	r3, [r7, #6]
 8005192:	e01c      	b.n	80051ce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	3b10      	subs	r3, #16
 8005198:	80fb      	strh	r3, [r7, #6]
 800519a:	e018      	b.n	80051ce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	3b20      	subs	r3, #32
 80051a0:	80fb      	strh	r3, [r7, #6]
 80051a2:	e014      	b.n	80051ce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	3b30      	subs	r3, #48	; 0x30
 80051a8:	80fb      	strh	r3, [r7, #6]
 80051aa:	e010      	b.n	80051ce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	3b1a      	subs	r3, #26
 80051b0:	80fb      	strh	r3, [r7, #6]
 80051b2:	e00c      	b.n	80051ce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	3308      	adds	r3, #8
 80051b8:	80fb      	strh	r3, [r7, #6]
 80051ba:	e008      	b.n	80051ce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	3b50      	subs	r3, #80	; 0x50
 80051c0:	80fb      	strh	r3, [r7, #6]
 80051c2:	e004      	b.n	80051ce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80051ca:	80fb      	strh	r3, [r7, #6]
 80051cc:	bf00      	nop
			}
			break;
 80051ce:	e008      	b.n	80051e2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d195      	bne.n	8005102 <ff_wtoupper+0x1a>
 80051d6:	8a3b      	ldrh	r3, [r7, #16]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80051e0:	e78f      	b.n	8005102 <ff_wtoupper+0x1a>
			break;
 80051e2:	bf00      	nop
	}

	return chr;
 80051e4:	88fb      	ldrh	r3, [r7, #6]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	08011870 	.word	0x08011870
 80051f8:	08011a64 	.word	0x08011a64

080051fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	4a08      	ldr	r2, [pc, #32]	; (800522c <disk_status+0x30>)
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	79fa      	ldrb	r2, [r7, #7]
 8005214:	4905      	ldr	r1, [pc, #20]	; (800522c <disk_status+0x30>)
 8005216:	440a      	add	r2, r1
 8005218:	7a12      	ldrb	r2, [r2, #8]
 800521a:	4610      	mov	r0, r2
 800521c:	4798      	blx	r3
 800521e:	4603      	mov	r3, r0
 8005220:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20002164 	.word	0x20002164

08005230 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <disk_initialize+0x48>)
 8005242:	5cd3      	ldrb	r3, [r2, r3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	4a0b      	ldr	r2, [pc, #44]	; (8005278 <disk_initialize+0x48>)
 800524c:	2101      	movs	r1, #1
 800524e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <disk_initialize+0x48>)
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	79fa      	ldrb	r2, [r7, #7]
 800525e:	4906      	ldr	r1, [pc, #24]	; (8005278 <disk_initialize+0x48>)
 8005260:	440a      	add	r2, r1
 8005262:	7a12      	ldrb	r2, [r2, #8]
 8005264:	4610      	mov	r0, r2
 8005266:	4798      	blx	r3
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20002164 	.word	0x20002164

0800527c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4603      	mov	r3, r0
 800528a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <disk_read+0x3c>)
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	689c      	ldr	r4, [r3, #8]
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <disk_read+0x3c>)
 800529c:	4413      	add	r3, r2
 800529e:	7a18      	ldrb	r0, [r3, #8]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	47a0      	blx	r4
 80052a8:	4603      	mov	r3, r0
 80052aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20002164 	.word	0x20002164

080052bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <disk_write+0x3c>)
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68dc      	ldr	r4, [r3, #12]
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <disk_write+0x3c>)
 80052dc:	4413      	add	r3, r2
 80052de:	7a18      	ldrb	r0, [r3, #8]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	47a0      	blx	r4
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd90      	pop	{r4, r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20002164 	.word	0x20002164

080052fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	603a      	str	r2, [r7, #0]
 8005306:	71fb      	strb	r3, [r7, #7]
 8005308:	460b      	mov	r3, r1
 800530a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <disk_ioctl+0x38>)
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	79fa      	ldrb	r2, [r7, #7]
 800531a:	4906      	ldr	r1, [pc, #24]	; (8005334 <disk_ioctl+0x38>)
 800531c:	440a      	add	r2, r1
 800531e:	7a10      	ldrb	r0, [r2, #8]
 8005320:	79b9      	ldrb	r1, [r7, #6]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	4798      	blx	r3
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
  return res;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20002164 	.word	0x20002164

08005338 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800533c:	4904      	ldr	r1, [pc, #16]	; (8005350 <MX_FATFS_Init+0x18>)
 800533e:	4805      	ldr	r0, [pc, #20]	; (8005354 <MX_FATFS_Init+0x1c>)
 8005340:	f002 feac 	bl	800809c <FATFS_LinkDriver>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <MX_FATFS_Init+0x20>)
 800534a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800534c:	bf00      	nop
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20002138 	.word	0x20002138
 8005354:	08011bb0 	.word	0x08011bb0
 8005358:	20002134 	.word	0x20002134

0800535c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005360:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005362:	4618      	mov	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3301      	adds	r3, #1
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800537c:	89fb      	ldrh	r3, [r7, #14]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	b21a      	sxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	b21b      	sxth	r3, r3
 8005388:	4313      	orrs	r3, r2
 800538a:	b21b      	sxth	r3, r3
 800538c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800538e:	89fb      	ldrh	r3, [r7, #14]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3303      	adds	r3, #3
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	3202      	adds	r2, #2
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	3201      	adds	r2, #1
 80053c2:	7812      	ldrb	r2, [r2, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80053d4:	68fb      	ldr	r3, [r7, #12]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	887a      	ldrh	r2, [r7, #2]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	887b      	ldrh	r3, [r7, #2]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	607a      	str	r2, [r7, #4]
 8005406:	887a      	ldrh	r2, [r7, #2]
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	1c53      	adds	r3, r2, #1
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1c59      	adds	r1, r3, #1
 8005494:	6179      	str	r1, [r7, #20]
 8005496:	7812      	ldrb	r2, [r2, #0]
 8005498:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3b01      	subs	r3, #1
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f1      	bne.n	800548a <mem_cpy+0x1a>
	}
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80054b2:	b480      	push	{r7}
 80054b4:	b087      	sub	sp, #28
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	617a      	str	r2, [r7, #20]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f3      	bne.n	80054c2 <mem_set+0x10>
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	61fa      	str	r2, [r7, #28]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	61ba      	str	r2, [r7, #24]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	1acb      	subs	r3, r1, r3
 8005514:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3b01      	subs	r3, #1
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <mem_cmp+0x40>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0eb      	beq.n	8005500 <mem_cmp+0x18>

	return r;
 8005528:	697b      	ldr	r3, [r7, #20]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3724      	adds	r7, #36	; 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005540:	e002      	b.n	8005548 <chk_chr+0x12>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3301      	adds	r3, #1
 8005546:	607b      	str	r3, [r7, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <chk_chr+0x26>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	4293      	cmp	r3, r2
 800555a:	d1f2      	bne.n	8005542 <chk_chr+0xc>
	return *str;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	781b      	ldrb	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e029      	b.n	80055d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005580:	4a27      	ldr	r2, [pc, #156]	; (8005620 <chk_lock+0xb4>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4413      	add	r3, r2
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01d      	beq.n	80055ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800558e:	4a24      	ldr	r2, [pc, #144]	; (8005620 <chk_lock+0xb4>)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	4413      	add	r3, r2
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d116      	bne.n	80055ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80055a0:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <chk_lock+0xb4>)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	4413      	add	r3, r2
 80055a8:	3304      	adds	r3, #4
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d10c      	bne.n	80055ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80055b4:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <chk_lock+0xb4>)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	4413      	add	r3, r2
 80055bc:	3308      	adds	r3, #8
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d102      	bne.n	80055ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80055c8:	e007      	b.n	80055da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d9d2      	bls.n	8005580 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d109      	bne.n	80055f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <chk_lock+0x80>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d101      	bne.n	80055f0 <chk_lock+0x84>
 80055ec:	2300      	movs	r3, #0
 80055ee:	e010      	b.n	8005612 <chk_lock+0xa6>
 80055f0:	2312      	movs	r3, #18
 80055f2:	e00e      	b.n	8005612 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d108      	bne.n	800560c <chk_lock+0xa0>
 80055fa:	4a09      	ldr	r2, [pc, #36]	; (8005620 <chk_lock+0xb4>)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	4413      	add	r3, r2
 8005602:	330c      	adds	r3, #12
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560a:	d101      	bne.n	8005610 <chk_lock+0xa4>
 800560c:	2310      	movs	r3, #16
 800560e:	e000      	b.n	8005612 <chk_lock+0xa6>
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20002144 	.word	0x20002144

08005624 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800562a:	2300      	movs	r3, #0
 800562c:	607b      	str	r3, [r7, #4]
 800562e:	e002      	b.n	8005636 <enq_lock+0x12>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3301      	adds	r3, #1
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d806      	bhi.n	800564a <enq_lock+0x26>
 800563c:	4a09      	ldr	r2, [pc, #36]	; (8005664 <enq_lock+0x40>)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	4413      	add	r3, r2
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f2      	bne.n	8005630 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b02      	cmp	r3, #2
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20002144 	.word	0x20002144

08005668 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e01f      	b.n	80056b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005678:	4a41      	ldr	r2, [pc, #260]	; (8005780 <inc_lock+0x118>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	4413      	add	r3, r2
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d113      	bne.n	80056b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800568a:	4a3d      	ldr	r2, [pc, #244]	; (8005780 <inc_lock+0x118>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	4413      	add	r3, r2
 8005692:	3304      	adds	r3, #4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800569a:	429a      	cmp	r2, r3
 800569c:	d109      	bne.n	80056b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800569e:	4a38      	ldr	r2, [pc, #224]	; (8005780 <inc_lock+0x118>)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	4413      	add	r3, r2
 80056a6:	3308      	adds	r3, #8
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d006      	beq.n	80056c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d9dc      	bls.n	8005678 <inc_lock+0x10>
 80056be:	e000      	b.n	80056c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80056c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d132      	bne.n	800572e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e002      	b.n	80056d4 <inc_lock+0x6c>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d806      	bhi.n	80056e8 <inc_lock+0x80>
 80056da:	4a29      	ldr	r2, [pc, #164]	; (8005780 <inc_lock+0x118>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	4413      	add	r3, r2
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f2      	bne.n	80056ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d101      	bne.n	80056f2 <inc_lock+0x8a>
 80056ee:	2300      	movs	r3, #0
 80056f0:	e040      	b.n	8005774 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4922      	ldr	r1, [pc, #136]	; (8005780 <inc_lock+0x118>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	440b      	add	r3, r1
 80056fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	491e      	ldr	r1, [pc, #120]	; (8005780 <inc_lock+0x118>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	440b      	add	r3, r1
 800570c:	3304      	adds	r3, #4
 800570e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	491a      	ldr	r1, [pc, #104]	; (8005780 <inc_lock+0x118>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	440b      	add	r3, r1
 800571c:	3308      	adds	r3, #8
 800571e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <inc_lock+0x118>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	4413      	add	r3, r2
 8005728:	330c      	adds	r3, #12
 800572a:	2200      	movs	r2, #0
 800572c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <inc_lock+0xe0>
 8005734:	4a12      	ldr	r2, [pc, #72]	; (8005780 <inc_lock+0x118>)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4413      	add	r3, r2
 800573c:	330c      	adds	r3, #12
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <inc_lock+0xe0>
 8005744:	2300      	movs	r3, #0
 8005746:	e015      	b.n	8005774 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <inc_lock+0xf8>
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <inc_lock+0x118>)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	4413      	add	r3, r2
 8005756:	330c      	adds	r3, #12
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	3301      	adds	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	e001      	b.n	8005764 <inc_lock+0xfc>
 8005760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005764:	4906      	ldr	r1, [pc, #24]	; (8005780 <inc_lock+0x118>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	440b      	add	r3, r1
 800576c:	330c      	adds	r3, #12
 800576e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20002144 	.word	0x20002144

08005784 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d825      	bhi.n	80057e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005798:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <dec_lock+0x74>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	4413      	add	r3, r2
 80057a0:	330c      	adds	r3, #12
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ac:	d101      	bne.n	80057b2 <dec_lock+0x2e>
 80057ae:	2300      	movs	r3, #0
 80057b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80057b2:	89fb      	ldrh	r3, [r7, #14]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <dec_lock+0x3a>
 80057b8:	89fb      	ldrh	r3, [r7, #14]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80057be:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <dec_lock+0x74>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	4413      	add	r3, r2
 80057c6:	330c      	adds	r3, #12
 80057c8:	89fa      	ldrh	r2, [r7, #14]
 80057ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <dec_lock+0x5a>
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <dec_lock+0x74>)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	4413      	add	r3, r2
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	737b      	strb	r3, [r7, #13]
 80057e2:	e001      	b.n	80057e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80057e4:	2302      	movs	r3, #2
 80057e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80057e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20002144 	.word	0x20002144

080057fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e010      	b.n	800582c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800580a:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <clear_lock+0x44>)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	4413      	add	r3, r2
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d105      	bne.n	8005826 <clear_lock+0x2a>
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <clear_lock+0x44>)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	4413      	add	r3, r2
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d9eb      	bls.n	800580a <clear_lock+0xe>
	}
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20002144 	.word	0x20002144

08005844 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	78db      	ldrb	r3, [r3, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d034      	beq.n	80058c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	7858      	ldrb	r0, [r3, #1]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005868:	2301      	movs	r3, #1
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	f7ff fd26 	bl	80052bc <disk_write>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005876:	2301      	movs	r3, #1
 8005878:	73fb      	strb	r3, [r7, #15]
 800587a:	e022      	b.n	80058c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	1ad2      	subs	r2, r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	429a      	cmp	r2, r3
 8005890:	d217      	bcs.n	80058c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	789b      	ldrb	r3, [r3, #2]
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	e010      	b.n	80058bc <sync_window+0x78>
					wsect += fs->fsize;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4413      	add	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7858      	ldrb	r0, [r3, #1]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058ae:	2301      	movs	r3, #1
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	f7ff fd03 	bl	80052bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d8eb      	bhi.n	800589a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d01b      	beq.n	800591c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ffad 	bl	8005844 <sync_window>
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d113      	bne.n	800591c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	7858      	ldrb	r0, [r3, #1]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058fe:	2301      	movs	r3, #1
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	f7ff fcbb 	bl	800527c <disk_read>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800590c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005910:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff ff87 	bl	8005844 <sync_window>
 8005936:	4603      	mov	r3, r0
 8005938:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d159      	bne.n	80059f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d149      	bne.n	80059dc <sync_fs+0xb4>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	791b      	ldrb	r3, [r3, #4]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d145      	bne.n	80059dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	899b      	ldrh	r3, [r3, #12]
 800595a:	461a      	mov	r2, r3
 800595c:	2100      	movs	r1, #0
 800595e:	f7ff fda8 	bl	80054b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3338      	adds	r3, #56	; 0x38
 8005966:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800596a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fd37 	bl	80053e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3338      	adds	r3, #56	; 0x38
 8005978:	4921      	ldr	r1, [pc, #132]	; (8005a00 <sync_fs+0xd8>)
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fd4c 	bl	8005418 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3338      	adds	r3, #56	; 0x38
 8005984:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005988:	491e      	ldr	r1, [pc, #120]	; (8005a04 <sync_fs+0xdc>)
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fd44 	bl	8005418 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3338      	adds	r3, #56	; 0x38
 8005994:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7ff fd3a 	bl	8005418 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3338      	adds	r3, #56	; 0x38
 80059a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7ff fd30 	bl	8005418 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	7858      	ldrb	r0, [r3, #1]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d0:	2301      	movs	r3, #1
 80059d2:	f7ff fc73 	bl	80052bc <disk_write>
			fs->fsi_flag = 0;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2100      	movs	r1, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fc89 	bl	80052fc <disk_ioctl>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <sync_fs+0xcc>
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	41615252 	.word	0x41615252
 8005a04:	61417272 	.word	0x61417272

08005a08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	3b02      	subs	r3, #2
 8005a16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	3b02      	subs	r3, #2
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d301      	bcc.n	8005a28 <clust2sect+0x20>
 8005a24:	2300      	movs	r3, #0
 8005a26:	e008      	b.n	8005a3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	895b      	ldrh	r3, [r3, #10]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	fb03 f202 	mul.w	r2, r3, r2
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	4413      	add	r3, r2
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d904      	bls.n	8005a66 <get_fat+0x20>
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005a66:	2301      	movs	r3, #1
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e0bb      	b.n	8005be4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	f000 8083 	beq.w	8005b82 <get_fat+0x13c>
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	f300 80a7 	bgt.w	8005bd0 <get_fat+0x18a>
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d002      	beq.n	8005a8c <get_fat+0x46>
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d056      	beq.n	8005b38 <get_fat+0xf2>
 8005a8a:	e0a1      	b.n	8005bd0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	899b      	ldrh	r3, [r3, #12]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aaa:	4413      	add	r3, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	6938      	ldr	r0, [r7, #16]
 8005ab0:	f7ff ff0c 	bl	80058cc <move_window>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 808d 	bne.w	8005bd6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	60fa      	str	r2, [r7, #12]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	8992      	ldrh	r2, [r2, #12]
 8005ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005aca:	fb01 f202 	mul.w	r2, r1, r2
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ad8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	899b      	ldrh	r3, [r3, #12]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aea:	4413      	add	r3, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	6938      	ldr	r0, [r7, #16]
 8005af0:	f7ff feec 	bl	80058cc <move_window>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d16f      	bne.n	8005bda <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	899b      	ldrh	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b06:	fb01 f202 	mul.w	r2, r1, r2
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	461a      	mov	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <get_fat+0xe8>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	e002      	b.n	8005b34 <get_fat+0xee>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b34:	617b      	str	r3, [r7, #20]
			break;
 8005b36:	e055      	b.n	8005be4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	899b      	ldrh	r3, [r3, #12]
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4619      	mov	r1, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6938      	ldr	r0, [r7, #16]
 8005b52:	f7ff febb 	bl	80058cc <move_window>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d140      	bne.n	8005bde <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	8992      	ldrh	r2, [r2, #12]
 8005b6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b6e:	fb00 f202 	mul.w	r2, r0, r2
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	440b      	add	r3, r1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fbf8 	bl	800536c <ld_word>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	617b      	str	r3, [r7, #20]
			break;
 8005b80:	e030      	b.n	8005be4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	899b      	ldrh	r3, [r3, #12]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	4619      	mov	r1, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b96:	4413      	add	r3, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6938      	ldr	r0, [r7, #16]
 8005b9c:	f7ff fe96 	bl	80058cc <move_window>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11d      	bne.n	8005be2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	8992      	ldrh	r2, [r2, #12]
 8005bb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bb8:	fb00 f202 	mul.w	r2, r0, r2
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fbeb 	bl	800539c <ld_dword>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bcc:	617b      	str	r3, [r7, #20]
			break;
 8005bce:	e009      	b.n	8005be4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e006      	b.n	8005be4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bd6:	bf00      	nop
 8005bd8:	e004      	b.n	8005be4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bda:	bf00      	nop
 8005bdc:	e002      	b.n	8005be4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005be2:	bf00      	nop
		}
	}

	return val;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005bee:	b590      	push	{r4, r7, lr}
 8005bf0:	b089      	sub	sp, #36	; 0x24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f240 8102 	bls.w	8005e0a <put_fat+0x21c>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	f080 80fc 	bcs.w	8005e0a <put_fat+0x21c>
		switch (fs->fs_type) {
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	f000 80b6 	beq.w	8005d88 <put_fat+0x19a>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	f300 80fd 	bgt.w	8005e1c <put_fat+0x22e>
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d003      	beq.n	8005c2e <put_fat+0x40>
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	f000 8083 	beq.w	8005d32 <put_fat+0x144>
 8005c2c:	e0f6      	b.n	8005e1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	899b      	ldrh	r3, [r3, #12]
 8005c44:	4619      	mov	r1, r3
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff fe3b 	bl	80058cc <move_window>
 8005c56:	4603      	mov	r3, r0
 8005c58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c5a:	7ffb      	ldrb	r3, [r7, #31]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 80d6 	bne.w	8005e0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	61ba      	str	r2, [r7, #24]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	8992      	ldrh	r2, [r2, #12]
 8005c72:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c76:	fb00 f202 	mul.w	r2, r0, r2
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <put_fat+0xb8>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	b25a      	sxtb	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	b25b      	sxtb	r3, r3
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	e001      	b.n	8005caa <put_fat+0xbc>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	899b      	ldrh	r3, [r3, #12]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fdff 	bl	80058cc <move_window>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cd2:	7ffb      	ldrb	r3, [r7, #31]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 809c 	bne.w	8005e12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	899b      	ldrh	r3, [r3, #12]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cec:	fb00 f202 	mul.w	r2, r0, r2
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <put_fat+0x11a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e00e      	b.n	8005d26 <put_fat+0x138>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	f023 030f 	bic.w	r3, r3, #15
 8005d12:	b25a      	sxtb	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	b25b      	sxtb	r3, r3
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	4313      	orrs	r3, r2
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	70da      	strb	r2, [r3, #3]
			break;
 8005d30:	e074      	b.n	8005e1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	899b      	ldrh	r3, [r3, #12]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d46:	4413      	add	r3, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff fdbe 	bl	80058cc <move_window>
 8005d50:	4603      	mov	r3, r0
 8005d52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d54:	7ffb      	ldrb	r3, [r7, #31]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d15d      	bne.n	8005e16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	8992      	ldrh	r2, [r2, #12]
 8005d68:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d6c:	fb00 f202 	mul.w	r2, r0, r2
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	440b      	add	r3, r1
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	b292      	uxth	r2, r2
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff fb31 	bl	80053e2 <st_word>
			fs->wflag = 1;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	70da      	strb	r2, [r3, #3]
			break;
 8005d86:	e049      	b.n	8005e1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	899b      	ldrh	r3, [r3, #12]
 8005d90:	089b      	lsrs	r3, r3, #2
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	4619      	mov	r1, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4619      	mov	r1, r3
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff fd93 	bl	80058cc <move_window>
 8005da6:	4603      	mov	r3, r0
 8005da8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005daa:	7ffb      	ldrb	r3, [r7, #31]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d134      	bne.n	8005e1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	8992      	ldrh	r2, [r2, #12]
 8005dc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dc8:	fb00 f202 	mul.w	r2, r0, r2
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	440b      	add	r3, r1
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fae3 	bl	800539c <ld_dword>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ddc:	4323      	orrs	r3, r4
 8005dde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	8992      	ldrh	r2, [r2, #12]
 8005dee:	fbb3 f0f2 	udiv	r0, r3, r2
 8005df2:	fb00 f202 	mul.w	r2, r0, r2
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	440b      	add	r3, r1
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fb0b 	bl	8005418 <st_dword>
			fs->wflag = 1;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	70da      	strb	r2, [r3, #3]
			break;
 8005e08:	e008      	b.n	8005e1c <put_fat+0x22e>
		}
	}
 8005e0a:	bf00      	nop
 8005e0c:	e006      	b.n	8005e1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e0e:	bf00      	nop
 8005e10:	e004      	b.n	8005e1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005e1a:	bf00      	nop
	return res;
 8005e1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3724      	adds	r7, #36	; 0x24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd90      	pop	{r4, r7, pc}

08005e26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b088      	sub	sp, #32
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d904      	bls.n	8005e4c <remove_chain+0x26>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d301      	bcc.n	8005e50 <remove_chain+0x2a>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e04b      	b.n	8005ee8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	69b8      	ldr	r0, [r7, #24]
 8005e5e:	f7ff fec6 	bl	8005bee <put_fat>
 8005e62:	4603      	mov	r3, r0
 8005e64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005e66:	7ffb      	ldrb	r3, [r7, #31]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <remove_chain+0x4a>
 8005e6c:	7ffb      	ldrb	r3, [r7, #31]
 8005e6e:	e03b      	b.n	8005ee8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fde7 	bl	8005a46 <get_fat>
 8005e78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d031      	beq.n	8005ee4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <remove_chain+0x64>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e02e      	b.n	8005ee8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e90:	d101      	bne.n	8005e96 <remove_chain+0x70>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e028      	b.n	8005ee8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005e96:	2200      	movs	r2, #0
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	69b8      	ldr	r0, [r7, #24]
 8005e9c:	f7ff fea7 	bl	8005bee <put_fat>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ea4:	7ffb      	ldrb	r3, [r7, #31]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <remove_chain+0x88>
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	e01c      	b.n	8005ee8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	3b02      	subs	r3, #2
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d20b      	bcs.n	8005ed4 <remove_chain+0xae>
			fs->free_clst++;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	791b      	ldrb	r3, [r3, #4]
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d3c6      	bcc.n	8005e70 <remove_chain+0x4a>
 8005ee2:	e000      	b.n	8005ee6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005ee4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <create_chain+0x2c>
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d31b      	bcc.n	8005f54 <create_chain+0x64>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e018      	b.n	8005f54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff fd8e 	bl	8005a46 <get_fat>
 8005f2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d801      	bhi.n	8005f36 <create_chain+0x46>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e070      	b.n	8006018 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3c:	d101      	bne.n	8005f42 <create_chain+0x52>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	e06a      	b.n	8006018 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d201      	bcs.n	8005f50 <create_chain+0x60>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	e063      	b.n	8006018 <create_chain+0x128>
		scl = clst;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d307      	bcc.n	8005f78 <create_chain+0x88>
				ncl = 2;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d901      	bls.n	8005f78 <create_chain+0x88>
 8005f74:	2300      	movs	r3, #0
 8005f76:	e04f      	b.n	8006018 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fd63 	bl	8005a46 <get_fat>
 8005f80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d003      	beq.n	8005f96 <create_chain+0xa6>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f94:	d101      	bne.n	8005f9a <create_chain+0xaa>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	e03e      	b.n	8006018 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d1da      	bne.n	8005f58 <create_chain+0x68>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e038      	b.n	8006018 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005fa6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fac:	69f9      	ldr	r1, [r7, #28]
 8005fae:	6938      	ldr	r0, [r7, #16]
 8005fb0:	f7ff fe1d 	bl	8005bee <put_fat>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <create_chain+0xe2>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6938      	ldr	r0, [r7, #16]
 8005fca:	f7ff fe10 	bl	8005bee <put_fat>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d116      	bne.n	8006006 <create_chain+0x116>
		fs->last_clst = ncl;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	3b02      	subs	r3, #2
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d804      	bhi.n	8005ff6 <create_chain+0x106>
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	1e5a      	subs	r2, r3, #1
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	791b      	ldrb	r3, [r3, #4]
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	711a      	strb	r2, [r3, #4]
 8006004:	e007      	b.n	8006016 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d102      	bne.n	8006012 <create_chain+0x122>
 800600c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006010:	e000      	b.n	8006014 <create_chain+0x124>
 8006012:	2301      	movs	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006016:	69fb      	ldr	r3, [r7, #28]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	3304      	adds	r3, #4
 8006036:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	899b      	ldrh	r3, [r3, #12]
 800603c:	461a      	mov	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	fbb3 f3f2 	udiv	r3, r3, r2
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	8952      	ldrh	r2, [r2, #10]
 8006048:	fbb3 f3f2 	udiv	r3, r3, r2
 800604c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1d1a      	adds	r2, r3, #4
 8006052:	613a      	str	r2, [r7, #16]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <clmt_clust+0x42>
 800605e:	2300      	movs	r3, #0
 8006060:	e010      	b.n	8006084 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	d307      	bcc.n	800607a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3304      	adds	r3, #4
 8006076:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006078:	e7e9      	b.n	800604e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800607a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4413      	add	r3, r2
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060a6:	d204      	bcs.n	80060b2 <dir_sdi+0x22>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80060b2:	2302      	movs	r3, #2
 80060b4:	e071      	b.n	800619a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <dir_sdi+0x46>
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d902      	bls.n	80060d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10c      	bne.n	80060f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	8912      	ldrh	r2, [r2, #8]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d301      	bcc.n	80060ec <dir_sdi+0x5c>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e056      	b.n	800619a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	61da      	str	r2, [r3, #28]
 80060f4:	e02d      	b.n	8006152 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	895b      	ldrh	r3, [r3, #10]
 80060fa:	461a      	mov	r2, r3
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	899b      	ldrh	r3, [r3, #12]
 8006100:	fb02 f303 	mul.w	r3, r2, r3
 8006104:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006106:	e019      	b.n	800613c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6979      	ldr	r1, [r7, #20]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fc9a 	bl	8005a46 <get_fat>
 8006112:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800611a:	d101      	bne.n	8006120 <dir_sdi+0x90>
 800611c:	2301      	movs	r3, #1
 800611e:	e03c      	b.n	800619a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d904      	bls.n	8006130 <dir_sdi+0xa0>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	429a      	cmp	r2, r3
 800612e:	d301      	bcc.n	8006134 <dir_sdi+0xa4>
 8006130:	2302      	movs	r3, #2
 8006132:	e032      	b.n	800619a <dir_sdi+0x10a>
			ofs -= csz;
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	429a      	cmp	r2, r3
 8006142:	d2e1      	bcs.n	8006108 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	6938      	ldr	r0, [r7, #16]
 8006148:	f7ff fc5e 	bl	8005a08 <clust2sect>
 800614c:	4602      	mov	r2, r0
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <dir_sdi+0xd4>
 8006160:	2302      	movs	r3, #2
 8006162:	e01a      	b.n	800619a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	899b      	ldrh	r3, [r3, #12]
 800616c:	4619      	mov	r1, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	fbb3 f3f1 	udiv	r3, r3, r1
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	899b      	ldrh	r3, [r3, #12]
 8006184:	461a      	mov	r2, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	fbb3 f0f2 	udiv	r0, r3, r2
 800618c:	fb00 f202 	mul.w	r2, r0, r2
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	18ca      	adds	r2, r1, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	3320      	adds	r3, #32
 80061b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <dir_next+0x28>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c8:	d301      	bcc.n	80061ce <dir_next+0x2c>
 80061ca:	2304      	movs	r3, #4
 80061cc:	e0bb      	b.n	8006346 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	899b      	ldrh	r3, [r3, #12]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80061da:	fb01 f202 	mul.w	r2, r1, r2
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f040 809d 	bne.w	8006320 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	8912      	ldrh	r2, [r2, #8]
 8006200:	4293      	cmp	r3, r2
 8006202:	f0c0 808d 	bcc.w	8006320 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	61da      	str	r2, [r3, #28]
 800620c:	2304      	movs	r3, #4
 800620e:	e09a      	b.n	8006346 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	899b      	ldrh	r3, [r3, #12]
 8006214:	461a      	mov	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	fbb3 f3f2 	udiv	r3, r3, r2
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	8952      	ldrh	r2, [r2, #10]
 8006220:	3a01      	subs	r2, #1
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d17b      	bne.n	8006320 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7ff fc08 	bl	8005a46 <get_fat>
 8006236:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d801      	bhi.n	8006242 <dir_next+0xa0>
 800623e:	2302      	movs	r3, #2
 8006240:	e081      	b.n	8006346 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006248:	d101      	bne.n	800624e <dir_next+0xac>
 800624a:	2301      	movs	r3, #1
 800624c:	e07b      	b.n	8006346 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	429a      	cmp	r2, r3
 8006256:	d359      	bcc.n	800630c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	61da      	str	r2, [r3, #28]
 8006264:	2304      	movs	r3, #4
 8006266:	e06e      	b.n	8006346 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7ff fe3d 	bl	8005ef0 <create_chain>
 8006276:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <dir_next+0xe0>
 800627e:	2307      	movs	r3, #7
 8006280:	e061      	b.n	8006346 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <dir_next+0xea>
 8006288:	2302      	movs	r3, #2
 800628a:	e05c      	b.n	8006346 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006292:	d101      	bne.n	8006298 <dir_next+0xf6>
 8006294:	2301      	movs	r3, #1
 8006296:	e056      	b.n	8006346 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7ff fad3 	bl	8005844 <sync_window>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <dir_next+0x106>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e04e      	b.n	8006346 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	899b      	ldrh	r3, [r3, #12]
 80062b2:	461a      	mov	r2, r3
 80062b4:	2100      	movs	r1, #0
 80062b6:	f7ff f8fc 	bl	80054b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff fba1 	bl	8005a08 <clust2sect>
 80062c6:	4602      	mov	r2, r0
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	635a      	str	r2, [r3, #52]	; 0x34
 80062cc:	e012      	b.n	80062f4 <dir_next+0x152>
						fs->wflag = 1;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff fab5 	bl	8005844 <sync_window>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <dir_next+0x142>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e030      	b.n	8006346 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	3301      	adds	r3, #1
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	635a      	str	r2, [r3, #52]	; 0x34
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	895b      	ldrh	r3, [r3, #10]
 80062f8:	461a      	mov	r2, r3
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d3e6      	bcc.n	80062ce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006312:	6979      	ldr	r1, [r7, #20]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff fb77 	bl	8005a08 <clust2sect>
 800631a:	4602      	mov	r2, r0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	899b      	ldrh	r3, [r3, #12]
 8006330:	461a      	mov	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	fbb3 f0f2 	udiv	r0, r3, r2
 8006338:	fb00 f202 	mul.w	r2, r0, r2
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	18ca      	adds	r2, r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800635e:	2100      	movs	r1, #0
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fe95 	bl	8006090 <dir_sdi>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d12b      	bne.n	80063c8 <dir_alloc+0x7a>
		n = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	4619      	mov	r1, r3
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff faa6 	bl	80058cc <move_window>
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11d      	bne.n	80063c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2be5      	cmp	r3, #229	; 0xe5
 8006392:	d004      	beq.n	800639e <dir_alloc+0x50>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3301      	adds	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d102      	bne.n	80063b2 <dir_alloc+0x64>
 80063ac:	e00c      	b.n	80063c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80063b2:	2101      	movs	r1, #1
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fef4 	bl	80061a2 <dir_next>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0d7      	beq.n	8006374 <dir_alloc+0x26>
 80063c4:	e000      	b.n	80063c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80063c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d101      	bne.n	80063d2 <dir_alloc+0x84>
 80063ce:	2307      	movs	r3, #7
 80063d0:	75fb      	strb	r3, [r7, #23]
	return res;
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	331a      	adds	r3, #26
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe ffbe 	bl	800536c <ld_word>
 80063f0:	4603      	mov	r3, r0
 80063f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d109      	bne.n	8006410 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe ffb3 	bl	800536c <ld_word>
 8006406:	4603      	mov	r3, r0
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006410:	68fb      	ldr	r3, [r7, #12]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	331a      	adds	r3, #26
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	b292      	uxth	r2, r2
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe ffd6 	bl	80053e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b03      	cmp	r3, #3
 800643c:	d109      	bne.n	8006452 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f103 0214 	add.w	r2, r3, #20
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	0c1b      	lsrs	r3, r3, #16
 8006448:	b29b      	uxth	r3, r3
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7fe ffc8 	bl	80053e2 <st_word>
	}
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	331a      	adds	r3, #26
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe ff7e 	bl	800536c <ld_word>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <cmp_lfn+0x1e>
 8006476:	2300      	movs	r3, #0
 8006478:	e059      	b.n	800652e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006482:	1e5a      	subs	r2, r3, #1
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006490:	2301      	movs	r3, #1
 8006492:	81fb      	strh	r3, [r7, #14]
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	e033      	b.n	8006502 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800649a:	4a27      	ldr	r2, [pc, #156]	; (8006538 <cmp_lfn+0xdc>)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	4413      	add	r3, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe ff5f 	bl	800536c <ld_word>
 80064ae:	4603      	mov	r3, r0
 80064b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80064b2:	89fb      	ldrh	r3, [r7, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01a      	beq.n	80064ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2bfe      	cmp	r3, #254	; 0xfe
 80064bc:	d812      	bhi.n	80064e4 <cmp_lfn+0x88>
 80064be:	89bb      	ldrh	r3, [r7, #12]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fe11 	bl	80050e8 <ff_wtoupper>
 80064c6:	4603      	mov	r3, r0
 80064c8:	461c      	mov	r4, r3
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	617a      	str	r2, [r7, #20]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fe05 	bl	80050e8 <ff_wtoupper>
 80064de:	4603      	mov	r3, r0
 80064e0:	429c      	cmp	r4, r3
 80064e2:	d001      	beq.n	80064e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80064e4:	2300      	movs	r3, #0
 80064e6:	e022      	b.n	800652e <cmp_lfn+0xd2>
			}
			wc = uc;
 80064e8:	89bb      	ldrh	r3, [r7, #12]
 80064ea:	81fb      	strh	r3, [r7, #14]
 80064ec:	e006      	b.n	80064fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80064ee:	89bb      	ldrh	r3, [r7, #12]
 80064f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d001      	beq.n	80064fc <cmp_lfn+0xa0>
 80064f8:	2300      	movs	r3, #0
 80064fa:	e018      	b.n	800652e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3301      	adds	r3, #1
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d9c8      	bls.n	800649a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <cmp_lfn+0xd0>
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <cmp_lfn+0xd0>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <cmp_lfn+0xd0>
 8006528:	2300      	movs	r3, #0
 800652a:	e000      	b.n	800652e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800652c:	2301      	movs	r3, #1
}
 800652e:	4618      	mov	r0, r3
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	bd90      	pop	{r4, r7, pc}
 8006536:	bf00      	nop
 8006538:	08011ba0 	.word	0x08011ba0

0800653c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4611      	mov	r1, r2
 8006548:	461a      	mov	r2, r3
 800654a:	460b      	mov	r3, r1
 800654c:	71fb      	strb	r3, [r7, #7]
 800654e:	4613      	mov	r3, r2
 8006550:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	330d      	adds	r3, #13
 8006556:	79ba      	ldrb	r2, [r7, #6]
 8006558:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	330b      	adds	r3, #11
 800655e:	220f      	movs	r2, #15
 8006560:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	330c      	adds	r3, #12
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	331a      	adds	r3, #26
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe ff36 	bl	80053e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	82fb      	strh	r3, [r7, #22]
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800658e:	8afb      	ldrh	r3, [r7, #22]
 8006590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006594:	4293      	cmp	r3, r2
 8006596:	d007      	beq.n	80065a8 <put_lfn+0x6c>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80065a8:	4a17      	ldr	r2, [pc, #92]	; (8006608 <put_lfn+0xcc>)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	4413      	add	r3, r2
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4413      	add	r3, r2
 80065b6:	8afa      	ldrh	r2, [r7, #22]
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe ff11 	bl	80053e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80065c0:	8afb      	ldrh	r3, [r7, #22]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <put_lfn+0x90>
 80065c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b0c      	cmp	r3, #12
 80065d6:	d9da      	bls.n	800658e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80065d8:	8afb      	ldrh	r3, [r7, #22]
 80065da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065de:	4293      	cmp	r3, r2
 80065e0:	d006      	beq.n	80065f0 <put_lfn+0xb4>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <put_lfn+0xbc>
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	79fa      	ldrb	r2, [r7, #7]
 80065fc:	701a      	strb	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	08011ba0 	.word	0x08011ba0

0800660c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800661a:	220b      	movs	r2, #11
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7fe ff26 	bl	8005470 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b05      	cmp	r3, #5
 8006628:	d92b      	bls.n	8006682 <gen_numname+0x76>
		sr = seq;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800662e:	e022      	b.n	8006676 <gen_numname+0x6a>
			wc = *lfn++;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	1c9a      	adds	r2, r3, #2
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800663a:	2300      	movs	r3, #0
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
 800663e:	e017      	b.n	8006670 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	005a      	lsls	r2, r3, #1
 8006644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	4413      	add	r3, r2
 800664c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800664e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <gen_numname+0x5e>
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006664:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006668:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	3301      	adds	r3, #1
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	2b0f      	cmp	r3, #15
 8006674:	d9e4      	bls.n	8006640 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1d8      	bne.n	8006630 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006682:	2307      	movs	r3, #7
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	b2db      	uxtb	r3, r3
 8006690:	3330      	adds	r3, #48	; 0x30
 8006692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800669a:	2b39      	cmp	r3, #57	; 0x39
 800669c:	d904      	bls.n	80066a8 <gen_numname+0x9c>
 800669e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a2:	3307      	adds	r3, #7
 80066a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	1e5a      	subs	r2, r3, #1
 80066ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80066ae:	3330      	adds	r3, #48	; 0x30
 80066b0:	443b      	add	r3, r7
 80066b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80066b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	603b      	str	r3, [r7, #0]
	} while (seq);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1df      	bne.n	8006686 <gen_numname+0x7a>
	ns[i] = '~';
 80066c6:	f107 0214 	add.w	r2, r7, #20
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	4413      	add	r3, r2
 80066ce:	227e      	movs	r2, #126	; 0x7e
 80066d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80066d2:	2300      	movs	r3, #0
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
 80066d6:	e002      	b.n	80066de <gen_numname+0xd2>
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	3301      	adds	r3, #1
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
 80066de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d205      	bcs.n	80066f2 <gen_numname+0xe6>
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	4413      	add	r3, r2
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d1f2      	bne.n	80066d8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	2b07      	cmp	r3, #7
 80066f6:	d807      	bhi.n	8006708 <gen_numname+0xfc>
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80066fe:	3330      	adds	r3, #48	; 0x30
 8006700:	443b      	add	r3, r7
 8006702:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006706:	e000      	b.n	800670a <gen_numname+0xfe>
 8006708:	2120      	movs	r1, #32
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	627a      	str	r2, [r7, #36]	; 0x24
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	460a      	mov	r2, r1
 8006716:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	2b07      	cmp	r3, #7
 800671c:	d9e9      	bls.n	80066f2 <gen_numname+0xe6>
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	3730      	adds	r7, #48	; 0x30
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006734:	230b      	movs	r3, #11
 8006736:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	0852      	lsrs	r2, r2, #1
 800673e:	01db      	lsls	r3, r3, #7
 8006740:	4313      	orrs	r3, r2
 8006742:	b2da      	uxtb	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6079      	str	r1, [r7, #4]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4413      	add	r3, r2
 800674e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	3b01      	subs	r3, #1
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ed      	bne.n	8006738 <sum_sfn+0x10>
	return sum;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006778:	2100      	movs	r1, #0
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fc88 	bl	8006090 <dir_sdi>
 8006780:	4603      	mov	r3, r0
 8006782:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <dir_find+0x24>
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	e0a9      	b.n	80068e2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800678e:	23ff      	movs	r3, #255	; 0xff
 8006790:	753b      	strb	r3, [r7, #20]
 8006792:	7d3b      	ldrb	r3, [r7, #20]
 8006794:	757b      	strb	r3, [r7, #21]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6938      	ldr	r0, [r7, #16]
 80067a6:	f7ff f891 	bl	80058cc <move_window>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 8090 	bne.w	80068d6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067be:	7dbb      	ldrb	r3, [r7, #22]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <dir_find+0x60>
 80067c4:	2304      	movs	r3, #4
 80067c6:	75fb      	strb	r3, [r7, #23]
 80067c8:	e08a      	b.n	80068e0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	330b      	adds	r3, #11
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7bfa      	ldrb	r2, [r7, #15]
 80067dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80067de:	7dbb      	ldrb	r3, [r7, #22]
 80067e0:	2be5      	cmp	r3, #229	; 0xe5
 80067e2:	d007      	beq.n	80067f4 <dir_find+0x8a>
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <dir_find+0x98>
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b0f      	cmp	r3, #15
 80067f2:	d006      	beq.n	8006802 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80067f4:	23ff      	movs	r3, #255	; 0xff
 80067f6:	757b      	strb	r3, [r7, #21]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006800:	e05e      	b.n	80068c0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d136      	bne.n	8006876 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d154      	bne.n	80068c0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006816:	7dbb      	ldrb	r3, [r7, #22]
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	7b5b      	ldrb	r3, [r3, #13]
 8006826:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006828:	7dbb      	ldrb	r3, [r7, #22]
 800682a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682e:	75bb      	strb	r3, [r7, #22]
 8006830:	7dbb      	ldrb	r3, [r7, #22]
 8006832:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695a      	ldr	r2, [r3, #20]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800683c:	7dba      	ldrb	r2, [r7, #22]
 800683e:	7d7b      	ldrb	r3, [r7, #21]
 8006840:	429a      	cmp	r2, r3
 8006842:	d115      	bne.n	8006870 <dir_find+0x106>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	330d      	adds	r3, #13
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	7d3a      	ldrb	r2, [r7, #20]
 800684e:	429a      	cmp	r2, r3
 8006850:	d10e      	bne.n	8006870 <dir_find+0x106>
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7ff fdfd 	bl	800645c <cmp_lfn>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <dir_find+0x106>
 8006868:	7d7b      	ldrb	r3, [r7, #21]
 800686a:	3b01      	subs	r3, #1
 800686c:	b2db      	uxtb	r3, r3
 800686e:	e000      	b.n	8006872 <dir_find+0x108>
 8006870:	23ff      	movs	r3, #255	; 0xff
 8006872:	757b      	strb	r3, [r7, #21]
 8006874:	e024      	b.n	80068c0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006876:	7d7b      	ldrb	r3, [r7, #21]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d109      	bne.n	8006890 <dir_find+0x126>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff ff51 	bl	8006728 <sum_sfn>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	7d3b      	ldrb	r3, [r7, #20]
 800688c:	4293      	cmp	r3, r2
 800688e:	d024      	beq.n	80068da <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <dir_find+0x14a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a18      	ldr	r0, [r3, #32]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3324      	adds	r3, #36	; 0x24
 80068a6:	220b      	movs	r2, #11
 80068a8:	4619      	mov	r1, r3
 80068aa:	f7fe fe1d 	bl	80054e8 <mem_cmp>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d014      	beq.n	80068de <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80068b4:	23ff      	movs	r3, #255	; 0xff
 80068b6:	757b      	strb	r3, [r7, #21]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80068c0:	2100      	movs	r1, #0
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fc6d 	bl	80061a2 <dir_next>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f43f af65 	beq.w	800679e <dir_find+0x34>
 80068d4:	e004      	b.n	80068e0 <dir_find+0x176>
		if (res != FR_OK) break;
 80068d6:	bf00      	nop
 80068d8:	e002      	b.n	80068e0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80068de:	bf00      	nop

	return res;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08c      	sub	sp, #48	; 0x30
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006900:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <dir_register+0x20>
 8006908:	2306      	movs	r3, #6
 800690a:	e0e0      	b.n	8006ace <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800690c:	2300      	movs	r3, #0
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
 8006910:	e002      	b.n	8006918 <dir_register+0x2c>
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	3301      	adds	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f4      	bne.n	8006912 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800692e:	f107 030c 	add.w	r3, r7, #12
 8006932:	220c      	movs	r2, #12
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fd9b 	bl	8005470 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d032      	beq.n	80069aa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2240      	movs	r2, #64	; 0x40
 8006948:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800694c:	2301      	movs	r3, #1
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006950:	e016      	b.n	8006980 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	f107 010c 	add.w	r1, r7, #12
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	f7ff fe53 	bl	800660c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff feff 	bl	800676a <dir_find>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	3301      	adds	r3, #1
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	2b63      	cmp	r3, #99	; 0x63
 8006984:	d9e5      	bls.n	8006952 <dir_register+0x66>
 8006986:	e000      	b.n	800698a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006988:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	2b64      	cmp	r3, #100	; 0x64
 800698e:	d101      	bne.n	8006994 <dir_register+0xa8>
 8006990:	2307      	movs	r3, #7
 8006992:	e09c      	b.n	8006ace <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006998:	2b04      	cmp	r3, #4
 800699a:	d002      	beq.n	80069a2 <dir_register+0xb6>
 800699c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069a0:	e095      	b.n	8006ace <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80069a2:	7dfa      	ldrb	r2, [r7, #23]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <dir_register+0xd8>
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	330c      	adds	r3, #12
 80069b8:	4a47      	ldr	r2, [pc, #284]	; (8006ad8 <dir_register+0x1ec>)
 80069ba:	fba2 2303 	umull	r2, r3, r2, r3
 80069be:	089b      	lsrs	r3, r3, #2
 80069c0:	3301      	adds	r3, #1
 80069c2:	e000      	b.n	80069c6 <dir_register+0xda>
 80069c4:	2301      	movs	r3, #1
 80069c6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80069c8:	6a39      	ldr	r1, [r7, #32]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fcbf 	bl	800634e <dir_alloc>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80069d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d148      	bne.n	8006a70 <dir_register+0x184>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d042      	beq.n	8006a70 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	015b      	lsls	r3, r3, #5
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff fb4a 	bl	8006090 <dir_sdi>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d132      	bne.n	8006a70 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3324      	adds	r3, #36	; 0x24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fe8a 	bl	8006728 <sum_sfn>
 8006a14:	4603      	mov	r3, r0
 8006a16:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	69f8      	ldr	r0, [r7, #28]
 8006a20:	f7fe ff54 	bl	80058cc <move_window>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11d      	bne.n	8006a6e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	6918      	ldr	r0, [r3, #16]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a19      	ldr	r1, [r3, #32]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	7efb      	ldrb	r3, [r7, #27]
 8006a40:	f7ff fd7c 	bl	800653c <put_lfn>
				fs->wflag = 1;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2201      	movs	r2, #1
 8006a48:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff fba8 	bl	80061a2 <dir_next>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d107      	bne.n	8006a70 <dir_register+0x184>
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1d5      	bne.n	8006a18 <dir_register+0x12c>
 8006a6c:	e000      	b.n	8006a70 <dir_register+0x184>
				if (res != FR_OK) break;
 8006a6e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d128      	bne.n	8006aca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	69f8      	ldr	r0, [r7, #28]
 8006a80:	f7fe ff24 	bl	80058cc <move_window>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11b      	bne.n	8006aca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	2220      	movs	r2, #32
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fd09 	bl	80054b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a18      	ldr	r0, [r3, #32]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3324      	adds	r3, #36	; 0x24
 8006aa8:	220b      	movs	r2, #11
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f7fe fce0 	bl	8005470 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	330c      	adds	r3, #12
 8006abc:	f002 0218 	and.w	r2, r2, #24
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3730      	adds	r7, #48	; 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	4ec4ec4f 	.word	0x4ec4ec4f

08006adc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	61ba      	str	r2, [r7, #24]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b0c:	2b1f      	cmp	r3, #31
 8006b0e:	d940      	bls.n	8006b92 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b12:	2b2f      	cmp	r3, #47	; 0x2f
 8006b14:	d006      	beq.n	8006b24 <create_name+0x48>
 8006b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b18:	2b5c      	cmp	r3, #92	; 0x5c
 8006b1a:	d110      	bne.n	8006b3e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006b1c:	e002      	b.n	8006b24 <create_name+0x48>
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	3301      	adds	r3, #1
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	4413      	add	r3, r2
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8006b2e:	d0f6      	beq.n	8006b1e <create_name+0x42>
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	4413      	add	r3, r2
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b5c      	cmp	r3, #92	; 0x5c
 8006b3a:	d0f0      	beq.n	8006b1e <create_name+0x42>
			break;
 8006b3c:	e02a      	b.n	8006b94 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2bfe      	cmp	r3, #254	; 0xfe
 8006b42:	d901      	bls.n	8006b48 <create_name+0x6c>
 8006b44:	2306      	movs	r3, #6
 8006b46:	e17d      	b.n	8006e44 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b50:	2101      	movs	r1, #1
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fa8c 	bl	8005070 <ff_convert>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <create_name+0x8a>
 8006b62:	2306      	movs	r3, #6
 8006b64:	e16e      	b.n	8006e44 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b68:	2b7f      	cmp	r3, #127	; 0x7f
 8006b6a:	d809      	bhi.n	8006b80 <create_name+0xa4>
 8006b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b6e:	4619      	mov	r1, r3
 8006b70:	488d      	ldr	r0, [pc, #564]	; (8006da8 <create_name+0x2cc>)
 8006b72:	f7fe fce0 	bl	8005536 <chk_chr>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <create_name+0xa4>
 8006b7c:	2306      	movs	r3, #6
 8006b7e:	e161      	b.n	8006e44 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	617a      	str	r2, [r7, #20]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006b90:	e7b4      	b.n	8006afc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006b92:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	441a      	add	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ba0:	2b1f      	cmp	r3, #31
 8006ba2:	d801      	bhi.n	8006ba8 <create_name+0xcc>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	e000      	b.n	8006baa <create_name+0xce>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006bae:	e011      	b.n	8006bd4 <create_name+0xf8>
		w = lfn[di - 1];
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d002      	beq.n	8006bce <create_name+0xf2>
 8006bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bca:	2b2e      	cmp	r3, #46	; 0x2e
 8006bcc:	d106      	bne.n	8006bdc <create_name+0x100>
		di--;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1ea      	bne.n	8006bb0 <create_name+0xd4>
 8006bda:	e000      	b.n	8006bde <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006bdc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	2200      	movs	r2, #0
 8006be8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <create_name+0x118>
 8006bf0:	2306      	movs	r3, #6
 8006bf2:	e127      	b.n	8006e44 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3324      	adds	r3, #36	; 0x24
 8006bf8:	220b      	movs	r2, #11
 8006bfa:	2120      	movs	r1, #32
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe fc58 	bl	80054b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006c02:	2300      	movs	r3, #0
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	e002      	b.n	8006c0e <create_name+0x132>
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d0f5      	beq.n	8006c08 <create_name+0x12c>
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	2b2e      	cmp	r3, #46	; 0x2e
 8006c28:	d0ee      	beq.n	8006c08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d009      	beq.n	8006c44 <create_name+0x168>
 8006c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c34:	f043 0303 	orr.w	r3, r3, #3
 8006c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006c3c:	e002      	b.n	8006c44 <create_name+0x168>
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <create_name+0x182>
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c50:	3b01      	subs	r3, #1
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c5c:	d1ef      	bne.n	8006c3e <create_name+0x162>

	i = b = 0; ni = 8;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c64:	2300      	movs	r3, #0
 8006c66:	623b      	str	r3, [r7, #32]
 8006c68:	2308      	movs	r3, #8
 8006c6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	61ba      	str	r2, [r7, #24]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 8090 	beq.w	8006da4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d006      	beq.n	8006c98 <create_name+0x1bc>
 8006c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c8e:	d10a      	bne.n	8006ca6 <create_name+0x1ca>
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d006      	beq.n	8006ca6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c9c:	f043 0303 	orr.w	r3, r3, #3
 8006ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ca4:	e07d      	b.n	8006da2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d203      	bcs.n	8006cb6 <create_name+0x1da>
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d123      	bne.n	8006cfe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2b0b      	cmp	r3, #11
 8006cba:	d106      	bne.n	8006cca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cc0:	f043 0303 	orr.w	r3, r3, #3
 8006cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cc8:	e075      	b.n	8006db6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d005      	beq.n	8006cde <create_name+0x202>
 8006cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cd6:	f043 0303 	orr.w	r3, r3, #3
 8006cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d866      	bhi.n	8006db4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	2308      	movs	r3, #8
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	230b      	movs	r3, #11
 8006cf0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cfc:	e051      	b.n	8006da2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d00:	2b7f      	cmp	r3, #127	; 0x7f
 8006d02:	d914      	bls.n	8006d2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe f9b1 	bl	8005070 <ff_convert>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <create_name+0x246>
 8006d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d1a:	3b80      	subs	r3, #128	; 0x80
 8006d1c:	4a23      	ldr	r2, [pc, #140]	; (8006dac <create_name+0x2d0>)
 8006d1e:	5cd3      	ldrb	r3, [r2, r3]
 8006d20:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d26:	f043 0302 	orr.w	r3, r3, #2
 8006d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <create_name+0x268>
 8006d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d36:	4619      	mov	r1, r3
 8006d38:	481d      	ldr	r0, [pc, #116]	; (8006db0 <create_name+0x2d4>)
 8006d3a:	f7fe fbfc 	bl	8005536 <chk_chr>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006d44:	235f      	movs	r3, #95	; 0x5f
 8006d46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d4c:	f043 0303 	orr.w	r3, r3, #3
 8006d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d54:	e01b      	b.n	8006d8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d909      	bls.n	8006d70 <create_name+0x294>
 8006d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d5e:	2b5a      	cmp	r3, #90	; 0x5a
 8006d60:	d806      	bhi.n	8006d70 <create_name+0x294>
					b |= 2;
 8006d62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d66:	f043 0302 	orr.w	r3, r3, #2
 8006d6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d6e:	e00e      	b.n	8006d8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d72:	2b60      	cmp	r3, #96	; 0x60
 8006d74:	d90b      	bls.n	8006d8e <create_name+0x2b2>
 8006d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d78:	2b7a      	cmp	r3, #122	; 0x7a
 8006d7a:	d808      	bhi.n	8006d8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d80:	f043 0301 	orr.w	r3, r3, #1
 8006d84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d8a:	3b20      	subs	r3, #32
 8006d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	623a      	str	r2, [r7, #32]
 8006d94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d96:	b2d1      	uxtb	r1, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	460a      	mov	r2, r1
 8006d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006da2:	e763      	b.n	8006c6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006da4:	bf00      	nop
 8006da6:	e006      	b.n	8006db6 <create_name+0x2da>
 8006da8:	080113b4 	.word	0x080113b4
 8006dac:	08011b20 	.word	0x08011b20
 8006db0:	080113c0 	.word	0x080113c0
			if (si > di) break;			/* No extension */
 8006db4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dbc:	2be5      	cmp	r3, #229	; 0xe5
 8006dbe:	d103      	bne.n	8006dc8 <create_name+0x2ec>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2205      	movs	r2, #5
 8006dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d104      	bne.n	8006dd8 <create_name+0x2fc>
 8006dce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ddc:	f003 030c 	and.w	r3, r3, #12
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	d005      	beq.n	8006df0 <create_name+0x314>
 8006de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d105      	bne.n	8006dfc <create_name+0x320>
 8006df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006df4:	f043 0302 	orr.w	r3, r3, #2
 8006df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d117      	bne.n	8006e38 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006e08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d105      	bne.n	8006e20 <create_name+0x344>
 8006e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e18:	f043 0310 	orr.w	r3, r3, #16
 8006e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e24:	f003 030c 	and.w	r3, r3, #12
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d105      	bne.n	8006e38 <create_name+0x35c>
 8006e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e30:	f043 0308 	orr.w	r3, r3, #8
 8006e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006e42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3728      	adds	r7, #40	; 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006e60:	e002      	b.n	8006e68 <follow_path+0x1c>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8006e6e:	d0f8      	beq.n	8006e62 <follow_path+0x16>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b5c      	cmp	r3, #92	; 0x5c
 8006e76:	d0f4      	beq.n	8006e62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b1f      	cmp	r3, #31
 8006e84:	d80a      	bhi.n	8006e9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2280      	movs	r2, #128	; 0x80
 8006e8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff f8fd 	bl	8006090 <dir_sdi>
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]
 8006e9a:	e048      	b.n	8006f2e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff fe1b 	bl	8006adc <create_name>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d139      	bne.n	8006f24 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff fc5a 	bl	800676a <dir_find>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ec0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d12c      	bne.n	8006f28 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ece:	7afb      	ldrb	r3, [r7, #11]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d127      	bne.n	8006f28 <follow_path+0xdc>
 8006ed8:	2305      	movs	r3, #5
 8006eda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006edc:	e024      	b.n	8006f28 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d121      	bne.n	8006f2c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	799b      	ldrb	r3, [r3, #6]
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006ef4:	2305      	movs	r3, #5
 8006ef6:	75fb      	strb	r3, [r7, #23]
 8006ef8:	e019      	b.n	8006f2e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	8992      	ldrh	r2, [r2, #12]
 8006f08:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f0c:	fb00 f202 	mul.w	r2, r0, r2
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	440b      	add	r3, r1
 8006f14:	4619      	mov	r1, r3
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f7ff fa60 	bl	80063dc <ld_clust>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f22:	e7bb      	b.n	8006e9c <follow_path+0x50>
			if (res != FR_OK) break;
 8006f24:	bf00      	nop
 8006f26:	e002      	b.n	8006f2e <follow_path+0xe2>
				break;
 8006f28:	bf00      	nop
 8006f2a:	e000      	b.n	8006f2e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f2c:	bf00      	nop
			}
		}
	}

	return res;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f44:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d031      	beq.n	8006fb2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e002      	b.n	8006f5c <get_ldnumber+0x24>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b1f      	cmp	r3, #31
 8006f62:	d903      	bls.n	8006f6c <get_ldnumber+0x34>
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b3a      	cmp	r3, #58	; 0x3a
 8006f6a:	d1f4      	bne.n	8006f56 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b3a      	cmp	r3, #58	; 0x3a
 8006f72:	d11c      	bne.n	8006fae <get_ldnumber+0x76>
			tp = *path;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	60fa      	str	r2, [r7, #12]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	3b30      	subs	r3, #48	; 0x30
 8006f84:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b09      	cmp	r3, #9
 8006f8a:	d80e      	bhi.n	8006faa <get_ldnumber+0x72>
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d10a      	bne.n	8006faa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d107      	bne.n	8006faa <get_ldnumber+0x72>
					vol = (int)i;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	e002      	b.n	8006fb4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006fb2:	693b      	ldr	r3, [r7, #16]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	70da      	strb	r2, [r3, #3]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fd6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fe fc76 	bl	80058cc <move_window>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <check_fs+0x2a>
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	e038      	b.n	800705c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3338      	adds	r3, #56	; 0x38
 8006fee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe f9ba 	bl	800536c <ld_word>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <check_fs+0x48>
 8007004:	2303      	movs	r3, #3
 8007006:	e029      	b.n	800705c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800700e:	2be9      	cmp	r3, #233	; 0xe9
 8007010:	d009      	beq.n	8007026 <check_fs+0x66>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007018:	2beb      	cmp	r3, #235	; 0xeb
 800701a:	d11e      	bne.n	800705a <check_fs+0x9a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007022:	2b90      	cmp	r3, #144	; 0x90
 8007024:	d119      	bne.n	800705a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3338      	adds	r3, #56	; 0x38
 800702a:	3336      	adds	r3, #54	; 0x36
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe f9b5 	bl	800539c <ld_dword>
 8007032:	4603      	mov	r3, r0
 8007034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007038:	4a0a      	ldr	r2, [pc, #40]	; (8007064 <check_fs+0xa4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <check_fs+0x82>
 800703e:	2300      	movs	r3, #0
 8007040:	e00c      	b.n	800705c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3338      	adds	r3, #56	; 0x38
 8007046:	3352      	adds	r3, #82	; 0x52
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe f9a7 	bl	800539c <ld_dword>
 800704e:	4603      	mov	r3, r0
 8007050:	4a05      	ldr	r2, [pc, #20]	; (8007068 <check_fs+0xa8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d101      	bne.n	800705a <check_fs+0x9a>
 8007056:	2300      	movs	r3, #0
 8007058:	e000      	b.n	800705c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800705a:	2302      	movs	r3, #2
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	00544146 	.word	0x00544146
 8007068:	33544146 	.word	0x33544146

0800706c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b096      	sub	sp, #88	; 0x58
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff59 	bl	8006f38 <get_ldnumber>
 8007086:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708a:	2b00      	cmp	r3, #0
 800708c:	da01      	bge.n	8007092 <find_volume+0x26>
 800708e:	230b      	movs	r3, #11
 8007090:	e262      	b.n	8007558 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007092:	4a9f      	ldr	r2, [pc, #636]	; (8007310 <find_volume+0x2a4>)
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <find_volume+0x3a>
 80070a2:	230c      	movs	r3, #12
 80070a4:	e258      	b.n	8007558 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01a      	beq.n	80070f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe f89b 	bl	80051fc <disk_status>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10c      	bne.n	80070f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <find_volume+0x82>
 80070de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80070ea:	230a      	movs	r3, #10
 80070ec:	e234      	b.n	8007558 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80070ee:	2300      	movs	r3, #0
 80070f0:	e232      	b.n	8007558 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	4618      	mov	r0, r3
 8007106:	f7fe f893 	bl	8005230 <disk_initialize>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800711c:	2303      	movs	r3, #3
 800711e:	e21b      	b.n	8007558 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <find_volume+0xca>
 8007126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007132:	230a      	movs	r3, #10
 8007134:	e210      	b.n	8007558 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	7858      	ldrb	r0, [r3, #1]
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	330c      	adds	r3, #12
 800713e:	461a      	mov	r2, r3
 8007140:	2102      	movs	r1, #2
 8007142:	f7fe f8db 	bl	80052fc <disk_ioctl>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <find_volume+0xe4>
 800714c:	2301      	movs	r3, #1
 800714e:	e203      	b.n	8007558 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	899b      	ldrh	r3, [r3, #12]
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007158:	d80d      	bhi.n	8007176 <find_volume+0x10a>
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	899b      	ldrh	r3, [r3, #12]
 800715e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007162:	d308      	bcc.n	8007176 <find_volume+0x10a>
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	899b      	ldrh	r3, [r3, #12]
 8007168:	461a      	mov	r2, r3
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	899b      	ldrh	r3, [r3, #12]
 800716e:	3b01      	subs	r3, #1
 8007170:	4013      	ands	r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <find_volume+0x10e>
 8007176:	2301      	movs	r3, #1
 8007178:	e1ee      	b.n	8007558 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800717e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007182:	f7ff ff1d 	bl	8006fc0 <check_fs>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800718c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007190:	2b02      	cmp	r3, #2
 8007192:	d149      	bne.n	8007228 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007194:	2300      	movs	r3, #0
 8007196:	643b      	str	r3, [r7, #64]	; 0x40
 8007198:	e01e      	b.n	80071d8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80071a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80071a8:	4413      	add	r3, r2
 80071aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	3304      	adds	r3, #4
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d006      	beq.n	80071c4 <find_volume+0x158>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	3308      	adds	r3, #8
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe f8ee 	bl	800539c <ld_dword>
 80071c0:	4602      	mov	r2, r0
 80071c2:	e000      	b.n	80071c6 <find_volume+0x15a>
 80071c4:	2200      	movs	r2, #0
 80071c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	3358      	adds	r3, #88	; 0x58
 80071cc:	443b      	add	r3, r7
 80071ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80071d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d4:	3301      	adds	r3, #1
 80071d6:	643b      	str	r3, [r7, #64]	; 0x40
 80071d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d9dd      	bls.n	800719a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80071de:	2300      	movs	r3, #0
 80071e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80071e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <find_volume+0x182>
 80071e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ea:	3b01      	subs	r3, #1
 80071ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80071ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	3358      	adds	r3, #88	; 0x58
 80071f4:	443b      	add	r3, r7
 80071f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <find_volume+0x1a2>
 8007202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007206:	f7ff fedb 	bl	8006fc0 <check_fs>
 800720a:	4603      	mov	r3, r0
 800720c:	e000      	b.n	8007210 <find_volume+0x1a4>
 800720e:	2303      	movs	r3, #3
 8007210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007218:	2b01      	cmp	r3, #1
 800721a:	d905      	bls.n	8007228 <find_volume+0x1bc>
 800721c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721e:	3301      	adds	r3, #1
 8007220:	643b      	str	r3, [r7, #64]	; 0x40
 8007222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007224:	2b03      	cmp	r3, #3
 8007226:	d9e2      	bls.n	80071ee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800722c:	2b04      	cmp	r3, #4
 800722e:	d101      	bne.n	8007234 <find_volume+0x1c8>
 8007230:	2301      	movs	r3, #1
 8007232:	e191      	b.n	8007558 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007238:	2b01      	cmp	r3, #1
 800723a:	d901      	bls.n	8007240 <find_volume+0x1d4>
 800723c:	230d      	movs	r3, #13
 800723e:	e18b      	b.n	8007558 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	3338      	adds	r3, #56	; 0x38
 8007244:	330b      	adds	r3, #11
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe f890 	bl	800536c <ld_word>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	899b      	ldrh	r3, [r3, #12]
 8007254:	429a      	cmp	r2, r3
 8007256:	d001      	beq.n	800725c <find_volume+0x1f0>
 8007258:	230d      	movs	r3, #13
 800725a:	e17d      	b.n	8007558 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	3338      	adds	r3, #56	; 0x38
 8007260:	3316      	adds	r3, #22
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe f882 	bl	800536c <ld_word>
 8007268:	4603      	mov	r3, r0
 800726a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800726c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <find_volume+0x214>
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	3338      	adds	r3, #56	; 0x38
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe f88f 	bl	800539c <ld_dword>
 800727e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007284:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	789b      	ldrb	r3, [r3, #2]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d005      	beq.n	80072a4 <find_volume+0x238>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	789b      	ldrb	r3, [r3, #2]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d001      	beq.n	80072a4 <find_volume+0x238>
 80072a0:	230d      	movs	r3, #13
 80072a2:	e159      	b.n	8007558 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	789b      	ldrb	r3, [r3, #2]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ac:	fb02 f303 	mul.w	r3, r2, r3
 80072b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	895b      	ldrh	r3, [r3, #10]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <find_volume+0x26c>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	895b      	ldrh	r3, [r3, #10]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	895b      	ldrh	r3, [r3, #10]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <find_volume+0x270>
 80072d8:	230d      	movs	r3, #13
 80072da:	e13d      	b.n	8007558 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	3338      	adds	r3, #56	; 0x38
 80072e0:	3311      	adds	r3, #17
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe f842 	bl	800536c <ld_word>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461a      	mov	r2, r3
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	891b      	ldrh	r3, [r3, #8]
 80072f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072f6:	8992      	ldrh	r2, [r2, #12]
 80072f8:	0952      	lsrs	r2, r2, #5
 80072fa:	b292      	uxth	r2, r2
 80072fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007300:	fb01 f202 	mul.w	r2, r1, r2
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <find_volume+0x2a8>
 800730c:	230d      	movs	r3, #13
 800730e:	e123      	b.n	8007558 <find_volume+0x4ec>
 8007310:	2000213c 	.word	0x2000213c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	3338      	adds	r3, #56	; 0x38
 8007318:	3313      	adds	r3, #19
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe f826 	bl	800536c <ld_word>
 8007320:	4603      	mov	r3, r0
 8007322:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <find_volume+0x2cc>
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	3338      	adds	r3, #56	; 0x38
 800732e:	3320      	adds	r3, #32
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe f833 	bl	800539c <ld_dword>
 8007336:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	3338      	adds	r3, #56	; 0x38
 800733c:	330e      	adds	r3, #14
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe f814 	bl	800536c <ld_word>
 8007344:	4603      	mov	r3, r0
 8007346:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <find_volume+0x2e6>
 800734e:	230d      	movs	r3, #13
 8007350:	e102      	b.n	8007558 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007352:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007356:	4413      	add	r3, r2
 8007358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800735a:	8911      	ldrh	r1, [r2, #8]
 800735c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800735e:	8992      	ldrh	r2, [r2, #12]
 8007360:	0952      	lsrs	r2, r2, #5
 8007362:	b292      	uxth	r2, r2
 8007364:	fbb1 f2f2 	udiv	r2, r1, r2
 8007368:	b292      	uxth	r2, r2
 800736a:	4413      	add	r3, r2
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800736e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	429a      	cmp	r2, r3
 8007374:	d201      	bcs.n	800737a <find_volume+0x30e>
 8007376:	230d      	movs	r3, #13
 8007378:	e0ee      	b.n	8007558 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800737a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007382:	8952      	ldrh	r2, [r2, #10]
 8007384:	fbb3 f3f2 	udiv	r3, r3, r2
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <find_volume+0x328>
 8007390:	230d      	movs	r3, #13
 8007392:	e0e1      	b.n	8007558 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007394:	2303      	movs	r3, #3
 8007396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d802      	bhi.n	80073aa <find_volume+0x33e>
 80073a4:	2302      	movs	r3, #2
 80073a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d802      	bhi.n	80073ba <find_volume+0x34e>
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	1c9a      	adds	r2, r3, #2
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80073c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80073ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073cc:	441a      	add	r2, r3
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80073d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	441a      	add	r2, r3
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80073dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d11e      	bne.n	8007422 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	3338      	adds	r3, #56	; 0x38
 80073e8:	332a      	adds	r3, #42	; 0x2a
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd ffbe 	bl	800536c <ld_word>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <find_volume+0x38e>
 80073f6:	230d      	movs	r3, #13
 80073f8:	e0ae      	b.n	8007558 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	891b      	ldrh	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <find_volume+0x39a>
 8007402:	230d      	movs	r3, #13
 8007404:	e0a8      	b.n	8007558 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	3338      	adds	r3, #56	; 0x38
 800740a:	332c      	adds	r3, #44	; 0x2c
 800740c:	4618      	mov	r0, r3
 800740e:	f7fd ffc5 	bl	800539c <ld_dword>
 8007412:	4602      	mov	r2, r0
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	647b      	str	r3, [r7, #68]	; 0x44
 8007420:	e01f      	b.n	8007462 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	891b      	ldrh	r3, [r3, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <find_volume+0x3c2>
 800742a:	230d      	movs	r3, #13
 800742c:	e094      	b.n	8007558 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	441a      	add	r2, r3
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800743a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800743e:	2b02      	cmp	r3, #2
 8007440:	d103      	bne.n	800744a <find_volume+0x3de>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	e00a      	b.n	8007460 <find_volume+0x3f4>
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	69da      	ldr	r2, [r3, #28]
 800744e:	4613      	mov	r3, r2
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	4413      	add	r3, r2
 8007454:	085a      	lsrs	r2, r3, #1
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007460:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	6a1a      	ldr	r2, [r3, #32]
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	899b      	ldrh	r3, [r3, #12]
 800746a:	4619      	mov	r1, r3
 800746c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746e:	440b      	add	r3, r1
 8007470:	3b01      	subs	r3, #1
 8007472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007474:	8989      	ldrh	r1, [r1, #12]
 8007476:	fbb3 f3f1 	udiv	r3, r3, r1
 800747a:	429a      	cmp	r2, r3
 800747c:	d201      	bcs.n	8007482 <find_volume+0x416>
 800747e:	230d      	movs	r3, #13
 8007480:	e06a      	b.n	8007558 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007488:	619a      	str	r2, [r3, #24]
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2280      	movs	r2, #128	; 0x80
 8007496:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800749c:	2b03      	cmp	r3, #3
 800749e:	d149      	bne.n	8007534 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	3338      	adds	r3, #56	; 0x38
 80074a4:	3330      	adds	r3, #48	; 0x30
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fd ff60 	bl	800536c <ld_word>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d140      	bne.n	8007534 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80074b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b4:	3301      	adds	r3, #1
 80074b6:	4619      	mov	r1, r3
 80074b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074ba:	f7fe fa07 	bl	80058cc <move_window>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d137      	bne.n	8007534 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	2200      	movs	r2, #0
 80074c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	3338      	adds	r3, #56	; 0x38
 80074ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fd ff4a 	bl	800536c <ld_word>
 80074d8:	4603      	mov	r3, r0
 80074da:	461a      	mov	r2, r3
 80074dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d127      	bne.n	8007534 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	3338      	adds	r3, #56	; 0x38
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fd ff57 	bl	800539c <ld_dword>
 80074ee:	4603      	mov	r3, r0
 80074f0:	4a1b      	ldr	r2, [pc, #108]	; (8007560 <find_volume+0x4f4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d11e      	bne.n	8007534 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	3338      	adds	r3, #56	; 0x38
 80074fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fd ff4c 	bl	800539c <ld_dword>
 8007504:	4603      	mov	r3, r0
 8007506:	4a17      	ldr	r2, [pc, #92]	; (8007564 <find_volume+0x4f8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d113      	bne.n	8007534 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	3338      	adds	r3, #56	; 0x38
 8007510:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007514:	4618      	mov	r0, r3
 8007516:	f7fd ff41 	bl	800539c <ld_dword>
 800751a:	4602      	mov	r2, r0
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	3338      	adds	r3, #56	; 0x38
 8007524:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007528:	4618      	mov	r0, r3
 800752a:	f7fd ff37 	bl	800539c <ld_dword>
 800752e:	4602      	mov	r2, r0
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800753a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <find_volume+0x4fc>)
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	4b08      	ldr	r3, [pc, #32]	; (8007568 <find_volume+0x4fc>)
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <find_volume+0x4fc>)
 800754a:	881a      	ldrh	r2, [r3, #0]
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007550:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007552:	f7fe f953 	bl	80057fc <clear_lock>
#endif
	return FR_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3758      	adds	r7, #88	; 0x58
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	41615252 	.word	0x41615252
 8007564:	61417272 	.word	0x61417272
 8007568:	20002140 	.word	0x20002140

0800756c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007576:	2309      	movs	r3, #9
 8007578:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01c      	beq.n	80075ba <validate+0x4e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d018      	beq.n	80075ba <validate+0x4e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d013      	beq.n	80075ba <validate+0x4e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	889a      	ldrh	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	88db      	ldrh	r3, [r3, #6]
 800759c:	429a      	cmp	r2, r3
 800759e:	d10c      	bne.n	80075ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fe28 	bl	80051fc <disk_status>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <validate+0x4e>
			res = FR_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d102      	bne.n	80075c6 <validate+0x5a>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	e000      	b.n	80075c8 <validate+0x5c>
 80075c6:	2300      	movs	r3, #0
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	6013      	str	r3, [r2, #0]
	return res;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80075ea:	f107 0310 	add.w	r3, r7, #16
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fca2 	bl	8006f38 <get_ldnumber>
 80075f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da01      	bge.n	8007600 <f_mount+0x28>
 80075fc:	230b      	movs	r3, #11
 80075fe:	e02b      	b.n	8007658 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007600:	4a17      	ldr	r2, [pc, #92]	; (8007660 <f_mount+0x88>)
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007608:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007610:	69b8      	ldr	r0, [r7, #24]
 8007612:	f7fe f8f3 	bl	80057fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2200      	movs	r2, #0
 800761a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	490d      	ldr	r1, [pc, #52]	; (8007660 <f_mount+0x88>)
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <f_mount+0x66>
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d001      	beq.n	8007642 <f_mount+0x6a>
 800763e:	2300      	movs	r3, #0
 8007640:	e00a      	b.n	8007658 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007642:	f107 010c 	add.w	r1, r7, #12
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	2200      	movs	r2, #0
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fd0d 	bl	800706c <find_volume>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007656:	7dfb      	ldrb	r3, [r7, #23]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	2000213c 	.word	0x2000213c

08007664 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800766a:	af00      	add	r7, sp, #0
 800766c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007670:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007674:	6018      	str	r0, [r3, #0]
 8007676:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800767a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800767e:	6019      	str	r1, [r3, #0]
 8007680:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007684:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007688:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800768a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800768e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <f_open+0x38>
 8007698:	2309      	movs	r3, #9
 800769a:	e2a6      	b.n	8007bea <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800769c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076a0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80076a4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80076a8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80076b2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80076b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076b8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80076bc:	781a      	ldrb	r2, [r3, #0]
 80076be:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80076c2:	f107 0308 	add.w	r3, r7, #8
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fcd0 	bl	800706c <find_volume>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80076d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f040 827a 	bne.w	8007bd0 <f_open+0x56c>
		dj.obj.fs = fs;
 80076dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80076e0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 80076e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80076e8:	f107 0210 	add.w	r2, r7, #16
 80076ec:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80076ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076f2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fba4 	bl	8006e4c <follow_path>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800770a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11e      	bne.n	8007750 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007712:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8007716:	b25b      	sxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	da03      	bge.n	8007724 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800771c:	2306      	movs	r3, #6
 800771e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007722:	e015      	b.n	8007750 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007724:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007728:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	bf14      	ite	ne
 8007736:	2301      	movne	r3, #1
 8007738:	2300      	moveq	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd ff11 	bl	800556c <chk_lock>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007750:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007754:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	f003 031c 	and.w	r3, r3, #28
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 80a7 	beq.w	80078b2 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007764:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01f      	beq.n	80077ac <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800776c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007770:	2b04      	cmp	r3, #4
 8007772:	d10e      	bne.n	8007792 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007774:	f7fd ff56 	bl	8005624 <enq_lock>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <f_open+0x128>
 800777e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff f8b2 	bl	80068ec <dir_register>
 8007788:	4603      	mov	r3, r0
 800778a:	e000      	b.n	800778e <f_open+0x12a>
 800778c:	2312      	movs	r3, #18
 800778e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007792:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007796:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800779a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800779e:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	f042 0208 	orr.w	r2, r2, #8
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	e015      	b.n	80077d8 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80077ac:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80077b0:	f003 0311 	and.w	r3, r3, #17
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <f_open+0x15c>
					res = FR_DENIED;
 80077b8:	2307      	movs	r3, #7
 80077ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80077be:	e00b      	b.n	80077d8 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80077c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80077c4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <f_open+0x174>
 80077d2:	2308      	movs	r3, #8
 80077d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80077d8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f040 8088 	bne.w	80078f2 <f_open+0x28e>
 80077e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80077e6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d07e      	beq.n	80078f2 <f_open+0x28e>
				dw = GET_FATTIME();
 80077f4:	f7fd fdb2 	bl	800535c <get_fattime>
 80077f8:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80077fc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007800:	330e      	adds	r3, #14
 8007802:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd fe06 	bl	8005418 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800780c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007810:	3316      	adds	r3, #22
 8007812:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd fdfe 	bl	8005418 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800781c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007820:	330b      	adds	r3, #11
 8007822:	2220      	movs	r2, #32
 8007824:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007826:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800782a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fdd3 	bl	80063dc <ld_clust>
 8007836:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800783a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800783e:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8007842:	2200      	movs	r2, #0
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fde8 	bl	800641a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800784a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800784e:	331c      	adds	r3, #28
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f7fd fde0 	bl	8005418 <st_dword>
					fs->wflag = 1;
 8007858:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800785c:	2201      	movs	r2, #1
 800785e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007860:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007864:	2b00      	cmp	r3, #0
 8007866:	d044      	beq.n	80078f2 <f_open+0x28e>
						dw = fs->winsect;
 8007868:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800786c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007872:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007876:	2200      	movs	r2, #0
 8007878:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fad2 	bl	8005e26 <remove_chain>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007888:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800788c:	2b00      	cmp	r3, #0
 800788e:	d130      	bne.n	80078f2 <f_open+0x28e>
							res = move_window(fs, dw);
 8007890:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007894:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe f817 	bl	80058cc <move_window>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80078a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80078a8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80078ac:	3a01      	subs	r2, #1
 80078ae:	615a      	str	r2, [r3, #20]
 80078b0:	e01f      	b.n	80078f2 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80078b2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11b      	bne.n	80078f2 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80078ba:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <f_open+0x26a>
					res = FR_NO_FILE;
 80078c6:	2304      	movs	r3, #4
 80078c8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80078cc:	e011      	b.n	80078f2 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80078ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078d2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <f_open+0x28e>
 80078e0:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <f_open+0x28e>
						res = FR_DENIED;
 80078ec:	2307      	movs	r3, #7
 80078ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80078f2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d14a      	bne.n	8007990 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80078fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078fe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800790c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007910:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007914:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007918:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800791c:	7812      	ldrb	r2, [r2, #0]
 800791e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007922:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007924:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800792e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007936:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800793a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800793e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007946:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800794a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	bf14      	ite	ne
 8007958:	2301      	movne	r3, #1
 800795a:	2300      	moveq	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f7fd fe7e 	bl	8005668 <inc_lock>
 800796c:	4602      	mov	r2, r0
 800796e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007972:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800797a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800797e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <f_open+0x32c>
 800798a:	2302      	movs	r3, #2
 800798c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007990:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 811b 	bne.w	8007bd0 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800799a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800799e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fd19 	bl	80063dc <ld_clust>
 80079aa:	4602      	mov	r2, r0
 80079ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80079b8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80079bc:	331c      	adds	r3, #28
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fcec 	bl	800539c <ld_dword>
 80079c4:	4602      	mov	r2, r0
 80079c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80079d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2200      	movs	r2, #0
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80079e0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80079e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079e8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80079f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80079f4:	88da      	ldrh	r2, [r3, #6]
 80079f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007a02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007a10:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007a14:	7812      	ldrb	r2, [r2, #0]
 8007a16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007a18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007a26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2200      	movs	r2, #0
 8007a32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007a34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007a42:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a46:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3330      	adds	r3, #48	; 0x30
 8007a4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fd fd2c 	bl	80054b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007a5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a5e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80b1 	beq.w	8007bd0 <f_open+0x56c>
 8007a6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a72:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80a8 	beq.w	8007bd0 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a90:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a98:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007a9c:	895b      	ldrh	r3, [r3, #10]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007aa4:	899b      	ldrh	r3, [r3, #12]
 8007aa6:	fb02 f303 	mul.w	r3, r2, r3
 8007aaa:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007aae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ab2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007abe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ac2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007ace:	e021      	b.n	8007b14 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8007ad0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ad4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd ffb1 	bl	8005a46 <get_fat>
 8007ae4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007ae8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d802      	bhi.n	8007af6 <f_open+0x492>
 8007af0:	2302      	movs	r3, #2
 8007af2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007af6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007afe:	d102      	bne.n	8007b06 <f_open+0x4a2>
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b06:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007b0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007b14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <f_open+0x4c4>
 8007b1c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007b20:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d8d3      	bhi.n	8007ad0 <f_open+0x46c>
				}
				fp->clust = clst;
 8007b28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b2c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007b36:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007b38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d147      	bne.n	8007bd0 <f_open+0x56c>
 8007b40:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007b44:	899b      	ldrh	r3, [r3, #12]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b50:	fb01 f202 	mul.w	r2, r1, r2
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d03a      	beq.n	8007bd0 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007b5a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007b5e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fd ff50 	bl	8005a08 <clust2sect>
 8007b68:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007b6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <f_open+0x518>
						res = FR_INT_ERR;
 8007b74:	2302      	movs	r3, #2
 8007b76:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007b7a:	e029      	b.n	8007bd0 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007b7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007b80:	899b      	ldrh	r3, [r3, #12]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007b88:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007b90:	441a      	add	r2, r3
 8007b92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007b9e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007ba2:	7858      	ldrb	r0, [r3, #1]
 8007ba4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ba8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007bb6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f7fd fb5c 	bl	800527c <disk_read>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <f_open+0x56c>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007bd0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d006      	beq.n	8007be6 <f_open+0x582>
 8007bd8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007bdc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007be6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08e      	sub	sp, #56	; 0x38
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f107 0214 	add.w	r2, r7, #20
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff fca9 	bl	800756c <validate>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d107      	bne.n	8007c38 <f_read+0x44>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	7d5b      	ldrb	r3, [r3, #21]
 8007c2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <f_read+0x4a>
 8007c38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c3c:	e135      	b.n	8007eaa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	7d1b      	ldrb	r3, [r3, #20]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <f_read+0x5a>
 8007c4a:	2307      	movs	r3, #7
 8007c4c:	e12d      	b.n	8007eaa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	f240 811e 	bls.w	8007ea0 <f_read+0x2ac>
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c68:	e11a      	b.n	8007ea0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	8992      	ldrh	r2, [r2, #12]
 8007c72:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c76:	fb01 f202 	mul.w	r2, r1, r2
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f040 80d5 	bne.w	8007e2c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	8992      	ldrh	r2, [r2, #12]
 8007c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	8952      	ldrh	r2, [r2, #10]
 8007c92:	3a01      	subs	r2, #1
 8007c94:	4013      	ands	r3, r2
 8007c96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d12f      	bne.n	8007cfe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	633b      	str	r3, [r7, #48]	; 0x30
 8007cac:	e013      	b.n	8007cd6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7fe f9af 	bl	8006020 <clmt_clust>
 8007cc2:	6338      	str	r0, [r7, #48]	; 0x30
 8007cc4:	e007      	b.n	8007cd6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fd feb9 	bl	8005a46 <get_fat>
 8007cd4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d804      	bhi.n	8007ce6 <f_read+0xf2>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	755a      	strb	r2, [r3, #21]
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e0e1      	b.n	8007eaa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cec:	d104      	bne.n	8007cf8 <f_read+0x104>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	755a      	strb	r2, [r3, #21]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e0d8      	b.n	8007eaa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fd fe7e 	bl	8005a08 <clust2sect>
 8007d0c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <f_read+0x12a>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2202      	movs	r2, #2
 8007d18:	755a      	strb	r2, [r3, #21]
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e0c5      	b.n	8007eaa <f_read+0x2b6>
			sect += csect;
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	4413      	add	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	899b      	ldrh	r3, [r3, #12]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d32:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d041      	beq.n	8007dbe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	4413      	add	r3, r2
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	8952      	ldrh	r2, [r2, #10]
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d905      	bls.n	8007d54 <f_read+0x160>
					cc = fs->csize - csect;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	895b      	ldrh	r3, [r3, #10]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	7858      	ldrb	r0, [r3, #1]
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d5e:	f7fd fa8d 	bl	800527c <disk_read>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <f_read+0x17e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	755a      	strb	r2, [r3, #21]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e09b      	b.n	8007eaa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	7d1b      	ldrb	r3, [r3, #20]
 8007d76:	b25b      	sxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	da18      	bge.n	8007dae <f_read+0x1ba>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a1a      	ldr	r2, [r3, #32]
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d911      	bls.n	8007dae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a1a      	ldr	r2, [r3, #32]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	8992      	ldrh	r2, [r2, #12]
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
 8007d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9c:	18d0      	adds	r0, r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	899b      	ldrh	r3, [r3, #12]
 8007da8:	461a      	mov	r2, r3
 8007daa:	f7fd fb61 	bl	8005470 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	899b      	ldrh	r3, [r3, #12]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	fb02 f303 	mul.w	r3, r2, r3
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007dbc:	e05c      	b.n	8007e78 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d02e      	beq.n	8007e26 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	7d1b      	ldrb	r3, [r3, #20]
 8007dcc:	b25b      	sxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da18      	bge.n	8007e04 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	7858      	ldrb	r0, [r3, #1]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a1a      	ldr	r2, [r3, #32]
 8007de0:	2301      	movs	r3, #1
 8007de2:	f7fd fa6b 	bl	80052bc <disk_write>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d004      	beq.n	8007df6 <f_read+0x202>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2201      	movs	r2, #1
 8007df0:	755a      	strb	r2, [r3, #21]
 8007df2:	2301      	movs	r3, #1
 8007df4:	e059      	b.n	8007eaa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	7d1b      	ldrb	r3, [r3, #20]
 8007dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	7858      	ldrb	r0, [r3, #1]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e0e:	2301      	movs	r3, #1
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	f7fd fa33 	bl	800527c <disk_read>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <f_read+0x232>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	755a      	strb	r2, [r3, #21]
 8007e22:	2301      	movs	r3, #1
 8007e24:	e041      	b.n	8007eaa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	899b      	ldrh	r3, [r3, #12]
 8007e30:	4618      	mov	r0, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	8992      	ldrh	r2, [r2, #12]
 8007e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e3e:	fb01 f202 	mul.w	r2, r1, r2
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	1ac3      	subs	r3, r0, r3
 8007e46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d901      	bls.n	8007e54 <f_read+0x260>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	8992      	ldrh	r2, [r2, #12]
 8007e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e66:	fb00 f202 	mul.w	r2, r0, r2
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e70:	4619      	mov	r1, r3
 8007e72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e74:	f7fd fafc 	bl	8005470 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	4413      	add	r3, r2
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	441a      	add	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	619a      	str	r2, [r3, #24]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	441a      	add	r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f47f aee1 	bne.w	8007c6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3738      	adds	r7, #56	; 0x38
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f107 0208 	add.w	r2, r7, #8
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fb52 	bl	800756c <validate>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d168      	bne.n	8007fa4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7d1b      	ldrb	r3, [r3, #20]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d062      	beq.n	8007fa4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7d1b      	ldrb	r3, [r3, #20]
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	da15      	bge.n	8007f14 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	7858      	ldrb	r0, [r3, #1]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1a      	ldr	r2, [r3, #32]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f7fd f9e0 	bl	80052bc <disk_write>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <f_sync+0x54>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e04f      	b.n	8007fa6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7d1b      	ldrb	r3, [r3, #20]
 8007f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f14:	f7fd fa22 	bl	800535c <get_fattime>
 8007f18:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	4619      	mov	r1, r3
 8007f22:	4610      	mov	r0, r2
 8007f24:	f7fd fcd2 	bl	80058cc <move_window>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d138      	bne.n	8007fa4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	330b      	adds	r3, #11
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	330b      	adds	r3, #11
 8007f42:	f042 0220 	orr.w	r2, r2, #32
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	461a      	mov	r2, r3
 8007f54:	68f9      	ldr	r1, [r7, #12]
 8007f56:	f7fe fa60 	bl	800641a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f103 021c 	add.w	r2, r3, #28
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7fd fa56 	bl	8005418 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3316      	adds	r3, #22
 8007f70:	6939      	ldr	r1, [r7, #16]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fd fa50 	bl	8005418 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3312      	adds	r3, #18
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fd fa2f 	bl	80053e2 <st_word>
					fs->wflag = 1;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2201      	movs	r2, #1
 8007f88:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fd fccb 	bl	8005928 <sync_fs>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	7d1b      	ldrb	r3, [r3, #20]
 8007f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff ff7b 	bl	8007eb2 <f_sync>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d118      	bne.n	8007ff8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f107 0208 	add.w	r2, r7, #8
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff facc 	bl	800756c <validate>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10c      	bne.n	8007ff8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd fbce 	bl	8005784 <dec_lock>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008012:	2301      	movs	r3, #1
 8008014:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800801a:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 800801c:	7a5b      	ldrb	r3, [r3, #9]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d131      	bne.n	8008088 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008024:	4b1c      	ldr	r3, [pc, #112]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 8008026:	7a5b      	ldrb	r3, [r3, #9]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 800802e:	2100      	movs	r1, #0
 8008030:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008032:	4b19      	ldr	r3, [pc, #100]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 8008034:	7a5b      	ldrb	r3, [r3, #9]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	4a17      	ldr	r2, [pc, #92]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 8008044:	7a5b      	ldrb	r3, [r3, #9]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	4b13      	ldr	r3, [pc, #76]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 800804c:	4413      	add	r3, r2
 800804e:	79fa      	ldrb	r2, [r7, #7]
 8008050:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008052:	4b11      	ldr	r3, [pc, #68]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 8008054:	7a5b      	ldrb	r3, [r3, #9]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	b2d1      	uxtb	r1, r2
 800805c:	4a0e      	ldr	r2, [pc, #56]	; (8008098 <FATFS_LinkDriverEx+0x94>)
 800805e:	7251      	strb	r1, [r2, #9]
 8008060:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008062:	7dbb      	ldrb	r3, [r7, #22]
 8008064:	3330      	adds	r3, #48	; 0x30
 8008066:	b2da      	uxtb	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	3301      	adds	r3, #1
 8008070:	223a      	movs	r2, #58	; 0x3a
 8008072:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3302      	adds	r3, #2
 8008078:	222f      	movs	r2, #47	; 0x2f
 800807a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3303      	adds	r3, #3
 8008080:	2200      	movs	r2, #0
 8008082:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008088:	7dfb      	ldrb	r3, [r7, #23]
}
 800808a:	4618      	mov	r0, r3
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20002164 	.word	0x20002164

0800809c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80080a6:	2200      	movs	r2, #0
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff ffaa 	bl	8008004 <FATFS_LinkDriverEx>
 80080b0:	4603      	mov	r3, r0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80080c2:	f7f8 ff03 	bl	8000ecc <HAL_GetTick>
 80080c6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80080c8:	e006      	b.n	80080d8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80080ca:	f7fc ff81 	bl	8004fd0 <BSP_SD_GetCardState>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e009      	b.n	80080ec <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80080d8:	f7f8 fef8 	bl	8000ecc <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d8f0      	bhi.n	80080ca <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80080e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80080fe:	4b0b      	ldr	r3, [pc, #44]	; (800812c <SD_CheckStatus+0x38>)
 8008100:	2201      	movs	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008104:	f7fc ff64 	bl	8004fd0 <BSP_SD_GetCardState>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d107      	bne.n	800811e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800810e:	4b07      	ldr	r3, [pc, #28]	; (800812c <SD_CheckStatus+0x38>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	b2da      	uxtb	r2, r3
 800811a:	4b04      	ldr	r3, [pc, #16]	; (800812c <SD_CheckStatus+0x38>)
 800811c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800811e:	4b03      	ldr	r3, [pc, #12]	; (800812c <SD_CheckStatus+0x38>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b2db      	uxtb	r3, r3
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000009 	.word	0x20000009

08008130 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800813a:	f7fc fefd 	bl	8004f38 <BSP_SD_Init>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d107      	bne.n	8008154 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff ffd4 	bl	80080f4 <SD_CheckStatus>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	4b04      	ldr	r3, [pc, #16]	; (8008164 <SD_initialize+0x34>)
 8008152:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008154:	4b03      	ldr	r3, [pc, #12]	; (8008164 <SD_initialize+0x34>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	b2db      	uxtb	r3, r3
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000009 	.word	0x20000009

08008168 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff ffbd 	bl	80080f4 <SD_CheckStatus>
 800817a:	4603      	mov	r3, r0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008198:	f247 5030 	movw	r0, #30000	; 0x7530
 800819c:	f7ff ff8d 	bl	80080ba <SD_CheckStatusWithTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da01      	bge.n	80081aa <SD_read+0x26>
  {
    return res;
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	e03b      	b.n	8008222 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	68b8      	ldr	r0, [r7, #8]
 80081b0:	f7fc feda 	bl	8004f68 <BSP_SD_ReadBlocks_DMA>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d132      	bne.n	8008220 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80081ba:	4b1c      	ldr	r3, [pc, #112]	; (800822c <SD_read+0xa8>)
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80081c0:	f7f8 fe84 	bl	8000ecc <HAL_GetTick>
 80081c4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80081c6:	bf00      	nop
 80081c8:	4b18      	ldr	r3, [pc, #96]	; (800822c <SD_read+0xa8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d108      	bne.n	80081e2 <SD_read+0x5e>
 80081d0:	f7f8 fe7c 	bl	8000ecc <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	f247 522f 	movw	r2, #29999	; 0x752f
 80081de:	4293      	cmp	r3, r2
 80081e0:	d9f2      	bls.n	80081c8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <SD_read+0xa8>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]
 80081ee:	e017      	b.n	8008220 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80081f0:	4b0e      	ldr	r3, [pc, #56]	; (800822c <SD_read+0xa8>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80081f6:	f7f8 fe69 	bl	8000ecc <HAL_GetTick>
 80081fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80081fc:	e007      	b.n	800820e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081fe:	f7fc fee7 	bl	8004fd0 <BSP_SD_GetCardState>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d102      	bne.n	800820e <SD_read+0x8a>
          {
            res = RES_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800820c:	e008      	b.n	8008220 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800820e:	f7f8 fe5d 	bl	8000ecc <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	f247 522f 	movw	r2, #29999	; 0x752f
 800821c:	4293      	cmp	r3, r2
 800821e:	d9ee      	bls.n	80081fe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20002174 	.word	0x20002174

08008230 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008244:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <SD_write+0xa8>)
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800824a:	f247 5030 	movw	r0, #30000	; 0x7530
 800824e:	f7ff ff34 	bl	80080ba <SD_CheckStatusWithTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	da01      	bge.n	800825c <SD_write+0x2c>
  {
    return res;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	e038      	b.n	80082ce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	68b8      	ldr	r0, [r7, #8]
 8008262:	f7fc fe9b 	bl	8004f9c <BSP_SD_WriteBlocks_DMA>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d12f      	bne.n	80082cc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800826c:	f7f8 fe2e 	bl	8000ecc <HAL_GetTick>
 8008270:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008272:	bf00      	nop
 8008274:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <SD_write+0xa8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d108      	bne.n	800828e <SD_write+0x5e>
 800827c:	f7f8 fe26 	bl	8000ecc <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	f247 522f 	movw	r2, #29999	; 0x752f
 800828a:	4293      	cmp	r3, r2
 800828c:	d9f2      	bls.n	8008274 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800828e:	4b12      	ldr	r3, [pc, #72]	; (80082d8 <SD_write+0xa8>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
 800829a:	e017      	b.n	80082cc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800829c:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <SD_write+0xa8>)
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80082a2:	f7f8 fe13 	bl	8000ecc <HAL_GetTick>
 80082a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80082a8:	e007      	b.n	80082ba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80082aa:	f7fc fe91 	bl	8004fd0 <BSP_SD_GetCardState>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <SD_write+0x8a>
          {
            res = RES_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	75fb      	strb	r3, [r7, #23]
            break;
 80082b8:	e008      	b.n	80082cc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80082ba:	f7f8 fe07 	bl	8000ecc <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d9ee      	bls.n	80082aa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20002170 	.word	0x20002170

080082dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08c      	sub	sp, #48	; 0x30
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	603a      	str	r2, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
 80082e8:	460b      	mov	r3, r1
 80082ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80082f2:	4b25      	ldr	r3, [pc, #148]	; (8008388 <SD_ioctl+0xac>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <SD_ioctl+0x28>
 8008300:	2303      	movs	r3, #3
 8008302:	e03c      	b.n	800837e <SD_ioctl+0xa2>

  switch (cmd)
 8008304:	79bb      	ldrb	r3, [r7, #6]
 8008306:	2b03      	cmp	r3, #3
 8008308:	d834      	bhi.n	8008374 <SD_ioctl+0x98>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <SD_ioctl+0x34>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008321 	.word	0x08008321
 8008314:	08008329 	.word	0x08008329
 8008318:	08008341 	.word	0x08008341
 800831c:	0800835b 	.word	0x0800835b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008326:	e028      	b.n	800837a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	4618      	mov	r0, r3
 800832e:	f7fc fe5f 	bl	8004ff0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800833e:	e01c      	b.n	800837a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008340:	f107 030c 	add.w	r3, r7, #12
 8008344:	4618      	mov	r0, r3
 8008346:	f7fc fe53 	bl	8004ff0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	b29a      	uxth	r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008358:	e00f      	b.n	800837a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800835a:	f107 030c 	add.w	r3, r7, #12
 800835e:	4618      	mov	r0, r3
 8008360:	f7fc fe46 	bl	8004ff0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	0a5a      	lsrs	r2, r3, #9
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008372:	e002      	b.n	800837a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008374:	2304      	movs	r3, #4
 8008376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800837a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800837e:	4618      	mov	r0, r3
 8008380:	3730      	adds	r7, #48	; 0x30
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000009 	.word	0x20000009

0800838c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008390:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <BSP_SD_WriteCpltCallback+0x14>)
 8008392:	2201      	movs	r2, #1
 8008394:	601a      	str	r2, [r3, #0]
}
 8008396:	bf00      	nop
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	20002170 	.word	0x20002170

080083a4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80083a8:	4b03      	ldr	r3, [pc, #12]	; (80083b8 <BSP_SD_ReadCpltCallback+0x14>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
}
 80083ae:	bf00      	nop
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20002174 	.word	0x20002174

080083bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08a      	sub	sp, #40	; 0x28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80083c8:	f001 ff76 	bl	800a2b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80083cc:	4b67      	ldr	r3, [pc, #412]	; (800856c <pvPortMalloc+0x1b0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80083d4:	f000 f938 	bl	8008648 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083d8:	4b65      	ldr	r3, [pc, #404]	; (8008570 <pvPortMalloc+0x1b4>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4013      	ands	r3, r2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f040 80a7 	bne.w	8008534 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d02d      	beq.n	8008448 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80083ec:	2208      	movs	r2, #8
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d227      	bcs.n	8008448 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80083f8:	2208      	movs	r2, #8
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b00      	cmp	r3, #0
 8008408:	d021      	beq.n	800844e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f023 0307 	bic.w	r3, r3, #7
 8008410:	3308      	adds	r3, #8
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d214      	bcs.n	8008442 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f023 0307 	bic.w	r3, r3, #7
 800841e:	3308      	adds	r3, #8
 8008420:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f003 0307 	and.w	r3, r3, #7
 8008428:	2b00      	cmp	r3, #0
 800842a:	d010      	beq.n	800844e <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008446:	e002      	b.n	800844e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	e000      	b.n	8008450 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800844e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d06e      	beq.n	8008534 <pvPortMalloc+0x178>
 8008456:	4b47      	ldr	r3, [pc, #284]	; (8008574 <pvPortMalloc+0x1b8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d869      	bhi.n	8008534 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008460:	4b45      	ldr	r3, [pc, #276]	; (8008578 <pvPortMalloc+0x1bc>)
 8008462:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008464:	4b44      	ldr	r3, [pc, #272]	; (8008578 <pvPortMalloc+0x1bc>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800846a:	e004      	b.n	8008476 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d903      	bls.n	8008488 <pvPortMalloc+0xcc>
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1f1      	bne.n	800846c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008488:	4b38      	ldr	r3, [pc, #224]	; (800856c <pvPortMalloc+0x1b0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848e:	429a      	cmp	r2, r3
 8008490:	d050      	beq.n	8008534 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2208      	movs	r2, #8
 8008498:	4413      	add	r3, r2
 800849a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	1ad2      	subs	r2, r2, r3
 80084ac:	2308      	movs	r3, #8
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d91f      	bls.n	80084f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <pvPortMalloc+0x120>
        __asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	613b      	str	r3, [r7, #16]
    }
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084ee:	69b8      	ldr	r0, [r7, #24]
 80084f0:	f000 f90c 	bl	800870c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084f4:	4b1f      	ldr	r3, [pc, #124]	; (8008574 <pvPortMalloc+0x1b8>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <pvPortMalloc+0x1b8>)
 8008500:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <pvPortMalloc+0x1b8>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b1d      	ldr	r3, [pc, #116]	; (800857c <pvPortMalloc+0x1c0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d203      	bcs.n	8008516 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800850e:	4b19      	ldr	r3, [pc, #100]	; (8008574 <pvPortMalloc+0x1b8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a1a      	ldr	r2, [pc, #104]	; (800857c <pvPortMalloc+0x1c0>)
 8008514:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	4b15      	ldr	r3, [pc, #84]	; (8008570 <pvPortMalloc+0x1b4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	431a      	orrs	r2, r3
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800852a:	4b15      	ldr	r3, [pc, #84]	; (8008580 <pvPortMalloc+0x1c4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	4a13      	ldr	r2, [pc, #76]	; (8008580 <pvPortMalloc+0x1c4>)
 8008532:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008534:	f001 fece 	bl	800a2d4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 800853e:	f006 f8ad 	bl	800e69c <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <pvPortMalloc+0x1a6>
        __asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	60fb      	str	r3, [r7, #12]
    }
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <pvPortMalloc+0x1a4>
    return pvReturn;
 8008562:	69fb      	ldr	r3, [r7, #28]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3728      	adds	r7, #40	; 0x28
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20004980 	.word	0x20004980
 8008570:	20004994 	.word	0x20004994
 8008574:	20004984 	.word	0x20004984
 8008578:	20004978 	.word	0x20004978
 800857c:	20004988 	.word	0x20004988
 8008580:	2000498c 	.word	0x2000498c

08008584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d04d      	beq.n	8008632 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008596:	2308      	movs	r3, #8
 8008598:	425b      	negs	r3, r3
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	4413      	add	r3, r2
 800859e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	4b24      	ldr	r3, [pc, #144]	; (800863c <vPortFree+0xb8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4013      	ands	r3, r2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <vPortFree+0x44>
        __asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	60fb      	str	r3, [r7, #12]
    }
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <vPortFree+0x62>
        __asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60bb      	str	r3, [r7, #8]
    }
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <vPortFree+0xb8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4013      	ands	r3, r2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01e      	beq.n	8008632 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d11a      	bne.n	8008632 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	4b0e      	ldr	r3, [pc, #56]	; (800863c <vPortFree+0xb8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	43db      	mvns	r3, r3
 8008606:	401a      	ands	r2, r3
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800860c:	f001 fe54 	bl	800a2b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <vPortFree+0xbc>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4413      	add	r3, r2
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <vPortFree+0xbc>)
 800861c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800861e:	6938      	ldr	r0, [r7, #16]
 8008620:	f000 f874 	bl	800870c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <vPortFree+0xc0>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3301      	adds	r3, #1
 800862a:	4a06      	ldr	r2, [pc, #24]	; (8008644 <vPortFree+0xc0>)
 800862c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800862e:	f001 fe51 	bl	800a2d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008632:	bf00      	nop
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20004994 	.word	0x20004994
 8008640:	20004984 	.word	0x20004984
 8008644:	20004990 	.word	0x20004990

08008648 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800864e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008652:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008654:	4b27      	ldr	r3, [pc, #156]	; (80086f4 <prvHeapInit+0xac>)
 8008656:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00c      	beq.n	800867c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3307      	adds	r3, #7
 8008666:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	4a1f      	ldr	r2, [pc, #124]	; (80086f4 <prvHeapInit+0xac>)
 8008678:	4413      	add	r3, r2
 800867a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008680:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <prvHeapInit+0xb0>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008686:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <prvHeapInit+0xb0>)
 8008688:	2200      	movs	r2, #0
 800868a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008694:	2208      	movs	r2, #8
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0307 	bic.w	r3, r3, #7
 80086a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4a15      	ldr	r2, [pc, #84]	; (80086fc <prvHeapInit+0xb4>)
 80086a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <prvHeapInit+0xb4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2200      	movs	r2, #0
 80086b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <prvHeapInit+0xb4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	1ad2      	subs	r2, r2, r3
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <prvHeapInit+0xb4>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <prvHeapInit+0xb8>)
 80086d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4a09      	ldr	r2, [pc, #36]	; (8008704 <prvHeapInit+0xbc>)
 80086de:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086e0:	4b09      	ldr	r3, [pc, #36]	; (8008708 <prvHeapInit+0xc0>)
 80086e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086e6:	601a      	str	r2, [r3, #0]
}
 80086e8:	bf00      	nop
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20002178 	.word	0x20002178
 80086f8:	20004978 	.word	0x20004978
 80086fc:	20004980 	.word	0x20004980
 8008700:	20004988 	.word	0x20004988
 8008704:	20004984 	.word	0x20004984
 8008708:	20004994 	.word	0x20004994

0800870c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008714:	4b28      	ldr	r3, [pc, #160]	; (80087b8 <prvInsertBlockIntoFreeList+0xac>)
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	e002      	b.n	8008720 <prvInsertBlockIntoFreeList+0x14>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d8f7      	bhi.n	800871a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	4413      	add	r3, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	d108      	bne.n	800874e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	441a      	add	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	441a      	add	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d118      	bne.n	8008794 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	4b15      	ldr	r3, [pc, #84]	; (80087bc <prvInsertBlockIntoFreeList+0xb0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d00d      	beq.n	800878a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	441a      	add	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e008      	b.n	800879c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800878a:	4b0c      	ldr	r3, [pc, #48]	; (80087bc <prvInsertBlockIntoFreeList+0xb0>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e003      	b.n	800879c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d002      	beq.n	80087aa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80087aa:	bf00      	nop
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20004978 	.word	0x20004978
 80087bc:	20004980 	.word	0x20004980

080087c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f103 0208 	add.w	r2, r3, #8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f103 0208 	add.w	r2, r3, #8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f103 0208 	add.w	r2, r3, #8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008862:	b480      	push	{r7}
 8008864:	b085      	sub	sp, #20
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008878:	d103      	bne.n	8008882 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	e00c      	b.n	800889c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3308      	adds	r3, #8
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e002      	b.n	8008890 <vListInsert+0x2e>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	429a      	cmp	r2, r3
 800889a:	d2f6      	bcs.n	800888a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6892      	ldr	r2, [r2, #8]
 80088ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d103      	bne.n	8008908 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	1e5a      	subs	r2, r3, #1
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3b04      	subs	r3, #4
 8008938:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008940:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b04      	subs	r3, #4
 8008946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b04      	subs	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008958:	4a0c      	ldr	r2, [pc, #48]	; (800898c <pxPortInitialiseStack+0x64>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b14      	subs	r3, #20
 8008962:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b04      	subs	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f06f 0202 	mvn.w	r2, #2
 8008976:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b20      	subs	r3, #32
 800897c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	08008991 	.word	0x08008991

08008990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800899a:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <prvTaskExitError+0x54>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a2:	d00a      	beq.n	80089ba <prvTaskExitError+0x2a>
        __asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60fb      	str	r3, [r7, #12]
    }
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <prvTaskExitError+0x28>
        __asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	60bb      	str	r3, [r7, #8]
    }
 80089cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80089ce:	bf00      	nop
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0fc      	beq.n	80089d0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	2000000c 	.word	0x2000000c
	...

080089f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <pxCurrentTCBConst2>)
 80089f2:	6819      	ldr	r1, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fa:	f380 8809 	msr	PSP, r0
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8811 	msr	BASEPRI, r0
 8008a0a:	4770      	bx	lr
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst2>:
 8008a10:	200049e0 	.word	0x200049e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008a18:	4808      	ldr	r0, [pc, #32]	; (8008a3c <prvPortStartFirstTask+0x24>)
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f380 8808 	msr	MSP, r0
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8814 	msr	CONTROL, r0
 8008a2a:	b662      	cpsie	i
 8008a2c:	b661      	cpsie	f
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	df00      	svc	0
 8008a38:	bf00      	nop
 8008a3a:	0000      	.short	0x0000
 8008a3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop

08008a44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a4a:	4b46      	ldr	r3, [pc, #280]	; (8008b64 <xPortStartScheduler+0x120>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a46      	ldr	r2, [pc, #280]	; (8008b68 <xPortStartScheduler+0x124>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d10a      	bne.n	8008a6a <xPortStartScheduler+0x26>
        __asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	613b      	str	r3, [r7, #16]
    }
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a6a:	4b3e      	ldr	r3, [pc, #248]	; (8008b64 <xPortStartScheduler+0x120>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a3f      	ldr	r2, [pc, #252]	; (8008b6c <xPortStartScheduler+0x128>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d10a      	bne.n	8008a8a <xPortStartScheduler+0x46>
        __asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60fb      	str	r3, [r7, #12]
    }
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a8a:	4b39      	ldr	r3, [pc, #228]	; (8008b70 <xPortStartScheduler+0x12c>)
 8008a8c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	22ff      	movs	r2, #255	; 0xff
 8008a9a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	4b31      	ldr	r3, [pc, #196]	; (8008b74 <xPortStartScheduler+0x130>)
 8008ab0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ab2:	4b31      	ldr	r3, [pc, #196]	; (8008b78 <xPortStartScheduler+0x134>)
 8008ab4:	2207      	movs	r2, #7
 8008ab6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ab8:	e009      	b.n	8008ace <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008aba:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <xPortStartScheduler+0x134>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	4a2d      	ldr	r2, [pc, #180]	; (8008b78 <xPortStartScheduler+0x134>)
 8008ac2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ace:	78fb      	ldrb	r3, [r7, #3]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad6:	2b80      	cmp	r3, #128	; 0x80
 8008ad8:	d0ef      	beq.n	8008aba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ada:	4b27      	ldr	r3, [pc, #156]	; (8008b78 <xPortStartScheduler+0x134>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1c3 0307 	rsb	r3, r3, #7
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d00a      	beq.n	8008afc <xPortStartScheduler+0xb8>
        __asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60bb      	str	r3, [r7, #8]
    }
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008afc:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <xPortStartScheduler+0x134>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	4a1d      	ldr	r2, [pc, #116]	; (8008b78 <xPortStartScheduler+0x134>)
 8008b04:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b06:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <xPortStartScheduler+0x134>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b0e:	4a1a      	ldr	r2, [pc, #104]	; (8008b78 <xPortStartScheduler+0x134>)
 8008b10:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008b1a:	4b18      	ldr	r3, [pc, #96]	; (8008b7c <xPortStartScheduler+0x138>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <xPortStartScheduler+0x138>)
 8008b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008b26:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <xPortStartScheduler+0x138>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a14      	ldr	r2, [pc, #80]	; (8008b7c <xPortStartScheduler+0x138>)
 8008b2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008b32:	f000 f8e3 	bl	8008cfc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <xPortStartScheduler+0x13c>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008b3c:	f000 f902 	bl	8008d44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <xPortStartScheduler+0x140>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a0f      	ldr	r2, [pc, #60]	; (8008b84 <xPortStartScheduler+0x140>)
 8008b46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008b4c:	f7ff ff64 	bl	8008a18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008b50:	f001 fd42 	bl	800a5d8 <vTaskSwitchContext>
    prvTaskExitError();
 8008b54:	f7ff ff1c 	bl	8008990 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	e000ed00 	.word	0xe000ed00
 8008b68:	410fc271 	.word	0x410fc271
 8008b6c:	410fc270 	.word	0x410fc270
 8008b70:	e000e400 	.word	0xe000e400
 8008b74:	20004998 	.word	0x20004998
 8008b78:	2000499c 	.word	0x2000499c
 8008b7c:	e000ed20 	.word	0xe000ed20
 8008b80:	2000000c 	.word	0x2000000c
 8008b84:	e000ef34 	.word	0xe000ef34

08008b88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
        __asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
    }
 8008ba0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008ba2:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <vPortEnterCritical+0x58>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	4a0d      	ldr	r2, [pc, #52]	; (8008be0 <vPortEnterCritical+0x58>)
 8008baa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008bac:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <vPortEnterCritical+0x58>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d10f      	bne.n	8008bd4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <vPortEnterCritical+0x5c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <vPortEnterCritical+0x4c>
        __asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	603b      	str	r3, [r7, #0]
    }
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <vPortEnterCritical+0x4a>
    }
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	2000000c 	.word	0x2000000c
 8008be4:	e000ed04 	.word	0xe000ed04

08008be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008bee:	4b12      	ldr	r3, [pc, #72]	; (8008c38 <vPortExitCritical+0x50>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <vPortExitCritical+0x24>
        __asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	607b      	str	r3, [r7, #4]
    }
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <vPortExitCritical+0x50>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <vPortExitCritical+0x50>)
 8008c14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008c16:	4b08      	ldr	r3, [pc, #32]	; (8008c38 <vPortExitCritical+0x50>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d105      	bne.n	8008c2a <vPortExitCritical+0x42>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008c28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	2000000c 	.word	0x2000000c
 8008c3c:	00000000 	.word	0x00000000

08008c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008c40:	f3ef 8009 	mrs	r0, PSP
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <pxCurrentTCBConst>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	f01e 0f10 	tst.w	lr, #16
 8008c50:	bf08      	it	eq
 8008c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5a:	6010      	str	r0, [r2, #0]
 8008c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c64:	f380 8811 	msr	BASEPRI, r0
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f001 fcb2 	bl	800a5d8 <vTaskSwitchContext>
 8008c74:	f04f 0000 	mov.w	r0, #0
 8008c78:	f380 8811 	msr	BASEPRI, r0
 8008c7c:	bc09      	pop	{r0, r3}
 8008c7e:	6819      	ldr	r1, [r3, #0]
 8008c80:	6808      	ldr	r0, [r1, #0]
 8008c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c86:	f01e 0f10 	tst.w	lr, #16
 8008c8a:	bf08      	it	eq
 8008c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c90:	f380 8809 	msr	PSP, r0
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	f3af 8000 	nop.w

08008ca0 <pxCurrentTCBConst>:
 8008ca0:	200049e0 	.word	0x200049e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop

08008ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
        __asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	607b      	str	r3, [r7, #4]
    }
 8008cc0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8008cc2:	f003 fdc1 	bl	800c848 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008cc6:	f001 fbc9 	bl	800a45c <xTaskIncrementTick>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d006      	beq.n	8008cde <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8008cd0:	f003 fe18 	bl	800c904 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cd4:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <SysTick_Handler+0x50>)
 8008cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e001      	b.n	8008ce2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8008cde:	f003 fdf5 	bl	800c8cc <SEGGER_SYSVIEW_RecordExitISR>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	f383 8811 	msr	BASEPRI, r3
    }
 8008cec:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d00:	4b0b      	ldr	r3, [pc, #44]	; (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d06:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <vPortSetupTimerInterrupt+0x38>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	; (8008d38 <vPortSetupTimerInterrupt+0x3c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0a      	ldr	r2, [pc, #40]	; (8008d3c <vPortSetupTimerInterrupt+0x40>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	4a09      	ldr	r2, [pc, #36]	; (8008d40 <vPortSetupTimerInterrupt+0x44>)
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d1e:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d20:	2207      	movs	r2, #7
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	e000e010 	.word	0xe000e010
 8008d34:	e000e018 	.word	0xe000e018
 8008d38:	20000014 	.word	0x20000014
 8008d3c:	10624dd3 	.word	0x10624dd3
 8008d40:	e000e014 	.word	0xe000e014

08008d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d54 <vPortEnableVFP+0x10>
 8008d48:	6801      	ldr	r1, [r0, #0]
 8008d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d4e:	6001      	str	r1, [r0, #0]
 8008d50:	4770      	bx	lr
 8008d52:	0000      	.short	0x0000
 8008d54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop

08008d5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8008d62:	f000 f83b 	bl	8008ddc <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008d66:	f3ef 8305 	mrs	r3, IPSR
 8008d6a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b0f      	cmp	r3, #15
 8008d70:	d914      	bls.n	8008d9c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d72:	4a16      	ldr	r2, [pc, #88]	; (8008dcc <vPortValidateInterruptPriority+0x70>)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d7c:	4b14      	ldr	r3, [pc, #80]	; (8008dd0 <vPortValidateInterruptPriority+0x74>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	7afa      	ldrb	r2, [r7, #11]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d20a      	bcs.n	8008d9c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	607b      	str	r3, [r7, #4]
    }
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <vPortValidateInterruptPriority+0x78>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <vPortValidateInterruptPriority+0x7c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d90a      	bls.n	8008dc2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	603b      	str	r3, [r7, #0]
    }
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <vPortValidateInterruptPriority+0x64>
    }
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	e000e3f0 	.word	0xe000e3f0
 8008dd0:	20004998 	.word	0x20004998
 8008dd4:	e000ed0c 	.word	0xe000ed0c
 8008dd8:	2000499c 	.word	0x2000499c

08008ddc <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008de2:	4b1f      	ldr	r3, [pc, #124]	; (8008e60 <vSetVarulMaxPRIGROUPValue+0x84>)
 8008de4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	22ff      	movs	r2, #255	; 0xff
 8008dea:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008df4:	4b1b      	ldr	r3, [pc, #108]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008df6:	2207      	movs	r2, #7
 8008df8:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dfa:	e009      	b.n	8008e10 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8008dfc:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008e04:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e18:	2b80      	cmp	r3, #128	; 0x80
 8008e1a:	d0ef      	beq.n	8008dfc <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f1c3 0307 	rsb	r3, r3, #7
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d00a      	beq.n	8008e3e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	60bb      	str	r3, [r7, #8]
    }
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	021b      	lsls	r3, r3, #8
 8008e44:	4a07      	ldr	r2, [pc, #28]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008e46:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e50:	4a04      	ldr	r2, [pc, #16]	; (8008e64 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008e52:	6013      	str	r3, [r2, #0]
}
 8008e54:	bf00      	nop
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	e000e400 	.word	0xe000e400
 8008e64:	2000499c 	.word	0x2000499c

08008e68 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xQueueGenericReset+0x2a>
        __asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	60bb      	str	r3, [r7, #8]
    }
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8008e92:	f7ff fe79 	bl	8008b88 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9e:	68f9      	ldr	r1, [r7, #12]
 8008ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ea2:	fb01 f303 	mul.w	r3, r1, r3
 8008ea6:	441a      	add	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	68f9      	ldr	r1, [r7, #12]
 8008ec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ec8:	fb01 f303 	mul.w	r3, r1, r3
 8008ecc:	441a      	add	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	22ff      	movs	r2, #255	; 0xff
 8008ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	22ff      	movs	r2, #255	; 0xff
 8008ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d114      	bne.n	8008f12 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d01a      	beq.n	8008f26 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3310      	adds	r3, #16
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f001 fc53 	bl	800a7a0 <xTaskRemoveFromEventList>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d012      	beq.n	8008f26 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8008f00:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <xQueueGenericReset+0xcc>)
 8008f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	e009      	b.n	8008f26 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3310      	adds	r3, #16
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff fc52 	bl	80087c0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3324      	adds	r3, #36	; 0x24
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7ff fc4d 	bl	80087c0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008f26:	f7ff fe5f 	bl	8008be8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008f2a:	2301      	movs	r3, #1
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08e      	sub	sp, #56	; 0x38
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <xQueueGenericCreateStatic+0x52>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <xQueueGenericCreateStatic+0x56>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e000      	b.n	8008f90 <xQueueGenericCreateStatic+0x58>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	623b      	str	r3, [r7, #32]
    }
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <xQueueGenericCreateStatic+0x7e>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <xQueueGenericCreateStatic+0x82>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <xQueueGenericCreateStatic+0x84>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	61fb      	str	r3, [r7, #28]
    }
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8008fd6:	2350      	movs	r3, #80	; 0x50
 8008fd8:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2b50      	cmp	r3, #80	; 0x50
 8008fde:	d00a      	beq.n	8008ff6 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	61bb      	str	r3, [r7, #24]
    }
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ff6:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800900a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4613      	mov	r3, r2
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 f868 	bl	80090ee <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8009020:	4618      	mov	r0, r3
 8009022:	3730      	adds	r7, #48	; 0x30
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009028:	b580      	push	{r7, lr}
 800902a:	b08c      	sub	sp, #48	; 0x30
 800902c:	af02      	add	r7, sp, #8
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xQueueGenericCreate+0x2a>
        __asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	61bb      	str	r3, [r7, #24]
    }
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	fb02 f303 	mul.w	r3, r2, r3
 800905a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d006      	beq.n	8009070 <xQueueGenericCreate+0x48>
 8009062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	fbb2 f3f3 	udiv	r3, r2, r3
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	429a      	cmp	r2, r3
 800906e:	d101      	bne.n	8009074 <xQueueGenericCreate+0x4c>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <xQueueGenericCreate+0x4e>
 8009074:	2300      	movs	r3, #0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <xQueueGenericCreate+0x68>
        __asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	617b      	str	r3, [r7, #20]
    }
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8009096:	d90a      	bls.n	80090ae <xQueueGenericCreate+0x86>
        __asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	613b      	str	r3, [r7, #16]
    }
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	3350      	adds	r3, #80	; 0x50
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff f982 	bl	80083bc <pvPortMalloc>
 80090b8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d011      	beq.n	80090e4 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	3350      	adds	r3, #80	; 0x50
 80090c8:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090d2:	79fa      	ldrb	r2, [r7, #7]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4613      	mov	r3, r2
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f805 	bl	80090ee <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80090e4:	6a3b      	ldr	r3, [r7, #32]
    }
 80090e6:	4618      	mov	r0, r3
 80090e8:	3728      	adds	r7, #40	; 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	607a      	str	r2, [r7, #4]
 80090fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	e002      	b.n	8009110 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800911c:	2101      	movs	r1, #1
 800911e:	69b8      	ldr	r0, [r7, #24]
 8009120:	f7ff fea2 	bl	8008e68 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	68f9      	ldr	r1, [r7, #12]
 8009132:	2073      	movs	r0, #115	; 0x73
 8009134:	f002 ffb8 	bl	800c0a8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8009138:	bf00      	nop
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00e      	beq.n	800916c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009160:	2300      	movs	r3, #0
 8009162:	2200      	movs	r2, #0
 8009164:	2100      	movs	r1, #0
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f81c 	bl	80091a4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800917e:	2301      	movs	r3, #1
 8009180:	617b      	str	r3, [r7, #20]
 8009182:	2300      	movs	r3, #0
 8009184:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	461a      	mov	r2, r3
 800918a:	6939      	ldr	r1, [r7, #16]
 800918c:	6978      	ldr	r0, [r7, #20]
 800918e:	f7ff ff4b 	bl	8009028 <xQueueGenericCreate>
 8009192:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f7ff ffd3 	bl	8009140 <prvInitialiseMutex>

        return xNewQueue;
 800919a:	68fb      	ldr	r3, [r7, #12]
    }
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b090      	sub	sp, #64	; 0x40
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091b2:	2300      	movs	r3, #0
 80091b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <xQueueGenericSend+0x32>
        __asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <xQueueGenericSend+0x40>
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <xQueueGenericSend+0x44>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e000      	b.n	80091ea <xQueueGenericSend+0x46>
 80091e8:	2300      	movs	r3, #0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <xQueueGenericSend+0x60>
        __asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d103      	bne.n	8009212 <xQueueGenericSend+0x6e>
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <xQueueGenericSend+0x72>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <xQueueGenericSend+0x74>
 8009216:	2300      	movs	r3, #0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xQueueGenericSend+0x8e>
        __asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	623b      	str	r3, [r7, #32]
    }
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009232:	f001 fcaf 	bl	800ab94 <xTaskGetSchedulerState>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d102      	bne.n	8009242 <xQueueGenericSend+0x9e>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <xQueueGenericSend+0xa2>
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <xQueueGenericSend+0xa4>
 8009246:	2300      	movs	r3, #0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <xQueueGenericSend+0xbe>
        __asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	61fb      	str	r3, [r7, #28]
    }
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009262:	f7ff fc91 	bl	8008b88 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926e:	429a      	cmp	r2, r3
 8009270:	d302      	bcc.n	8009278 <xQueueGenericSend+0xd4>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d136      	bne.n	80092e6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	4618      	mov	r0, r3
 800927c:	f003 fca0 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	460b      	mov	r3, r1
 800928a:	4601      	mov	r1, r0
 800928c:	205a      	movs	r0, #90	; 0x5a
 800928e:	f002 ff81 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009298:	f000 fbcc 	bl	8009a34 <prvCopyDataToQueue>
 800929c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d010      	beq.n	80092c8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	3324      	adds	r3, #36	; 0x24
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 fa78 	bl	800a7a0 <xTaskRemoveFromEventList>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d013      	beq.n	80092de <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80092b6:	4b4d      	ldr	r3, [pc, #308]	; (80093ec <xQueueGenericSend+0x248>)
 80092b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	e00a      	b.n	80092de <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d007      	beq.n	80092de <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80092ce:	4b47      	ldr	r3, [pc, #284]	; (80093ec <xQueueGenericSend+0x248>)
 80092d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80092de:	f7ff fc83 	bl	8008be8 <vPortExitCritical>
                return pdPASS;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e07d      	b.n	80093e2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d110      	bne.n	800930e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80092ec:	f7ff fc7c 	bl	8008be8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	4618      	mov	r0, r3
 80092f4:	f003 fc64 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	460b      	mov	r3, r1
 8009302:	4601      	mov	r1, r0
 8009304:	205a      	movs	r0, #90	; 0x5a
 8009306:	f002 ff45 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800930a:	2300      	movs	r3, #0
 800930c:	e069      	b.n	80093e2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800930e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	4618      	mov	r0, r3
 800931a:	f001 faa9 	bl	800a870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800931e:	2301      	movs	r3, #1
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009322:	f7ff fc61 	bl	8008be8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009326:	f000 ffc7 	bl	800a2b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800932a:	f7ff fc2d 	bl	8008b88 <vPortEnterCritical>
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009334:	b25b      	sxtb	r3, r3
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800933a:	d103      	bne.n	8009344 <xQueueGenericSend+0x1a0>
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800934a:	b25b      	sxtb	r3, r3
 800934c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009350:	d103      	bne.n	800935a <xQueueGenericSend+0x1b6>
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800935a:	f7ff fc45 	bl	8008be8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800935e:	1d3a      	adds	r2, r7, #4
 8009360:	f107 0314 	add.w	r3, r7, #20
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f001 fa98 	bl	800a89c <xTaskCheckForTimeOut>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d124      	bne.n	80093bc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009374:	f000 fc56 	bl	8009c24 <prvIsQueueFull>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d018      	beq.n	80093b0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	3310      	adds	r3, #16
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f001 f9b8 	bl	800a6fc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800938c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800938e:	f000 fbe1 	bl	8009b54 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009392:	f000 ff9f 	bl	800a2d4 <xTaskResumeAll>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	f47f af62 	bne.w	8009262 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <xQueueGenericSend+0x248>)
 80093a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	e758      	b.n	8009262 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80093b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093b2:	f000 fbcf 	bl	8009b54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80093b6:	f000 ff8d 	bl	800a2d4 <xTaskResumeAll>
 80093ba:	e752      	b.n	8009262 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80093bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093be:	f000 fbc9 	bl	8009b54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80093c2:	f000 ff87 	bl	800a2d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	4618      	mov	r0, r3
 80093ca:	f003 fbf9 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	460b      	mov	r3, r1
 80093d8:	4601      	mov	r1, r0
 80093da:	205a      	movs	r0, #90	; 0x5a
 80093dc:	f002 feda 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80093e0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3738      	adds	r7, #56	; 0x38
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b090      	sub	sp, #64	; 0x40
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8009402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800941a:	bf00      	nop
 800941c:	e7fe      	b.n	800941c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <xQueueGenericSendFromISR+0x3c>
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <xQueueGenericSendFromISR+0x40>
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <xQueueGenericSendFromISR+0x42>
 8009430:	2300      	movs	r3, #0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d103      	bne.n	800945a <xQueueGenericSendFromISR+0x6a>
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <xQueueGenericSendFromISR+0x6e>
 800945a:	2301      	movs	r3, #1
 800945c:	e000      	b.n	8009460 <xQueueGenericSendFromISR+0x70>
 800945e:	2300      	movs	r3, #0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	623b      	str	r3, [r7, #32]
    }
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800947a:	f7ff fc6f 	bl	8008d5c <vPortValidateInterruptPriority>
        __asm volatile
 800947e:	f3ef 8211 	mrs	r2, BASEPRI
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	61fa      	str	r2, [r7, #28]
 8009494:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8009496:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d302      	bcc.n	80094ac <xQueueGenericSendFromISR+0xbc>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d148      	bne.n	800953e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	4618      	mov	r0, r3
 80094c0:	f003 fb7e 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 80094c4:	4601      	mov	r1, r0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	461a      	mov	r2, r3
 80094ca:	2060      	movs	r0, #96	; 0x60
 80094cc:	f002 fd92 	bl	800bff4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	68b9      	ldr	r1, [r7, #8]
 80094d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094d6:	f000 faad 	bl	8009a34 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80094da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e2:	d112      	bne.n	800950a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d025      	beq.n	8009538 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	3324      	adds	r3, #36	; 0x24
 80094f0:	4618      	mov	r0, r3
 80094f2:	f001 f955 	bl	800a7a0 <xTaskRemoveFromEventList>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01d      	beq.n	8009538 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01a      	beq.n	8009538 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	e016      	b.n	8009538 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800950a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800950e:	2b7f      	cmp	r3, #127	; 0x7f
 8009510:	d10a      	bne.n	8009528 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	617b      	str	r3, [r7, #20]
    }
 8009524:	bf00      	nop
 8009526:	e7fe      	b.n	8009526 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800952c:	3301      	adds	r3, #1
 800952e:	b2db      	uxtb	r3, r3
 8009530:	b25a      	sxtb	r2, r3
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009538:	2301      	movs	r3, #1
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800953c:	e00b      	b.n	8009556 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	4618      	mov	r0, r3
 8009542:	f003 fb3d 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 8009546:	4601      	mov	r1, r0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	461a      	mov	r2, r3
 800954c:	2060      	movs	r0, #96	; 0x60
 800954e:	f002 fd51 	bl	800bff4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009558:	613b      	str	r3, [r7, #16]
        __asm volatile
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f383 8811 	msr	BASEPRI, r3
    }
 8009560:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009564:	4618      	mov	r0, r3
 8009566:	3740      	adds	r7, #64	; 0x40
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800956c:	b590      	push	{r4, r7, lr}
 800956e:	b08f      	sub	sp, #60	; 0x3c
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009578:	2300      	movs	r3, #0
 800957a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <xQueueReceive+0x30>
        __asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	623b      	str	r3, [r7, #32]
    }
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <xQueueReceive+0x3e>
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <xQueueReceive+0x42>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <xQueueReceive+0x44>
 80095ae:	2300      	movs	r3, #0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <xQueueReceive+0x5e>
        __asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61fb      	str	r3, [r7, #28]
    }
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ca:	f001 fae3 	bl	800ab94 <xTaskGetSchedulerState>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <xQueueReceive+0x6e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <xQueueReceive+0x72>
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <xQueueReceive+0x74>
 80095de:	2300      	movs	r3, #0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xQueueReceive+0x8e>
        __asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	61bb      	str	r3, [r7, #24]
    }
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80095fa:	f7ff fac5 	bl	8008b88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	2b00      	cmp	r3, #0
 8009608:	d02f      	beq.n	800966a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800960e:	f000 fa7b 	bl	8009b08 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	4618      	mov	r0, r3
 8009616:	f003 fad3 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 800961a:	4604      	mov	r4, r0
 800961c:	2000      	movs	r0, #0
 800961e:	f003 facf 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 8009622:	4602      	mov	r2, r0
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2101      	movs	r1, #1
 8009628:	9100      	str	r1, [sp, #0]
 800962a:	4621      	mov	r1, r4
 800962c:	205c      	movs	r0, #92	; 0x5c
 800962e:	f002 fdb1 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	1e5a      	subs	r2, r3, #1
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00f      	beq.n	8009662 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	3310      	adds	r3, #16
 8009646:	4618      	mov	r0, r3
 8009648:	f001 f8aa 	bl	800a7a0 <xTaskRemoveFromEventList>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d007      	beq.n	8009662 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009652:	4b4d      	ldr	r3, [pc, #308]	; (8009788 <xQueueReceive+0x21c>)
 8009654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009662:	f7ff fac1 	bl	8008be8 <vPortExitCritical>
                return pdPASS;
 8009666:	2301      	movs	r3, #1
 8009668:	e08a      	b.n	8009780 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d113      	bne.n	8009698 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009670:	f7ff faba 	bl	8008be8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	4618      	mov	r0, r3
 8009678:	f003 faa2 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 800967c:	4604      	mov	r4, r0
 800967e:	2000      	movs	r0, #0
 8009680:	f003 fa9e 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 8009684:	4602      	mov	r2, r0
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2101      	movs	r1, #1
 800968a:	9100      	str	r1, [sp, #0]
 800968c:	4621      	mov	r1, r4
 800968e:	205c      	movs	r0, #92	; 0x5c
 8009690:	f002 fd80 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009694:	2300      	movs	r3, #0
 8009696:	e073      	b.n	8009780 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800969e:	f107 0310 	add.w	r3, r7, #16
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 f8e4 	bl	800a870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80096ac:	f7ff fa9c 	bl	8008be8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80096b0:	f000 fe02 	bl	800a2b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80096b4:	f7ff fa68 	bl	8008b88 <vPortEnterCritical>
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096be:	b25b      	sxtb	r3, r3
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c4:	d103      	bne.n	80096ce <xQueueReceive+0x162>
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d4:	b25b      	sxtb	r3, r3
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096da:	d103      	bne.n	80096e4 <xQueueReceive+0x178>
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096e4:	f7ff fa80 	bl	8008be8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096e8:	1d3a      	adds	r2, r7, #4
 80096ea:	f107 0310 	add.w	r3, r7, #16
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 f8d3 	bl	800a89c <xTaskCheckForTimeOut>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d124      	bne.n	8009746 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fe:	f000 fa7b 	bl	8009bf8 <prvIsQueueEmpty>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d018      	beq.n	800973a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	3324      	adds	r3, #36	; 0x24
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fff3 	bl	800a6fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009718:	f000 fa1c 	bl	8009b54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800971c:	f000 fdda 	bl	800a2d4 <xTaskResumeAll>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	f47f af69 	bne.w	80095fa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8009728:	4b17      	ldr	r3, [pc, #92]	; (8009788 <xQueueReceive+0x21c>)
 800972a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	e75f      	b.n	80095fa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800973a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800973c:	f000 fa0a 	bl	8009b54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009740:	f000 fdc8 	bl	800a2d4 <xTaskResumeAll>
 8009744:	e759      	b.n	80095fa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009748:	f000 fa04 	bl	8009b54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800974c:	f000 fdc2 	bl	800a2d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009752:	f000 fa51 	bl	8009bf8 <prvIsQueueEmpty>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	f43f af4e 	beq.w	80095fa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	4618      	mov	r0, r3
 8009762:	f003 fa2d 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 8009766:	4604      	mov	r4, r0
 8009768:	2000      	movs	r0, #0
 800976a:	f003 fa29 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 800976e:	4602      	mov	r2, r0
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2101      	movs	r1, #1
 8009774:	9100      	str	r1, [sp, #0]
 8009776:	4621      	mov	r1, r4
 8009778:	205c      	movs	r0, #92	; 0x5c
 800977a:	f002 fd0b 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800977e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009780:	4618      	mov	r0, r3
 8009782:	3734      	adds	r7, #52	; 0x34
 8009784:	46bd      	mov	sp, r7
 8009786:	bd90      	pop	{r4, r7, pc}
 8009788:	e000ed04 	.word	0xe000ed04

0800978c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b091      	sub	sp, #68	; 0x44
 8009790:	af02      	add	r7, sp, #8
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009796:	2300      	movs	r3, #0
 8009798:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80097a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <xQueueSemaphoreTake+0x32>
        __asm volatile
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	623b      	str	r3, [r7, #32]
    }
 80097ba:	bf00      	nop
 80097bc:	e7fe      	b.n	80097bc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00a      	beq.n	80097dc <xQueueSemaphoreTake+0x50>
        __asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	61fb      	str	r3, [r7, #28]
    }
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097dc:	f001 f9da 	bl	800ab94 <xTaskGetSchedulerState>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <xQueueSemaphoreTake+0x60>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <xQueueSemaphoreTake+0x64>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <xQueueSemaphoreTake+0x66>
 80097f0:	2300      	movs	r3, #0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <xQueueSemaphoreTake+0x80>
        __asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	61bb      	str	r3, [r7, #24]
    }
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800980c:	f7ff f9bc 	bl	8008b88 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009818:	2b00      	cmp	r3, #0
 800981a:	d034      	beq.n	8009886 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800981c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981e:	4618      	mov	r0, r3
 8009820:	f003 f9ce 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 8009824:	4604      	mov	r4, r0
 8009826:	2000      	movs	r0, #0
 8009828:	f003 f9ca 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 800982c:	4602      	mov	r2, r0
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2101      	movs	r1, #1
 8009832:	9100      	str	r1, [sp, #0]
 8009834:	4621      	mov	r1, r4
 8009836:	205c      	movs	r0, #92	; 0x5c
 8009838:	f002 fcac 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	1e5a      	subs	r2, r3, #1
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d104      	bne.n	8009856 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800984c:	f001 fb32 	bl	800aeb4 <pvTaskIncrementMutexHeldCount>
 8009850:	4602      	mov	r2, r0
 8009852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009854:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00f      	beq.n	800987e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009860:	3310      	adds	r3, #16
 8009862:	4618      	mov	r0, r3
 8009864:	f000 ff9c 	bl	800a7a0 <xTaskRemoveFromEventList>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d007      	beq.n	800987e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800986e:	4b64      	ldr	r3, [pc, #400]	; (8009a00 <xQueueSemaphoreTake+0x274>)
 8009870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800987e:	f7ff f9b3 	bl	8008be8 <vPortExitCritical>
                return pdPASS;
 8009882:	2301      	movs	r3, #1
 8009884:	e0b7      	b.n	80099f6 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d121      	bne.n	80098d0 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800988c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	617b      	str	r3, [r7, #20]
    }
 80098a4:	bf00      	nop
 80098a6:	e7fe      	b.n	80098a6 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80098a8:	f7ff f99e 	bl	8008be8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	4618      	mov	r0, r3
 80098b0:	f003 f986 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 80098b4:	4604      	mov	r4, r0
 80098b6:	2000      	movs	r0, #0
 80098b8:	f003 f982 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 80098bc:	4602      	mov	r2, r0
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2101      	movs	r1, #1
 80098c2:	9100      	str	r1, [sp, #0]
 80098c4:	4621      	mov	r1, r4
 80098c6:	205c      	movs	r0, #92	; 0x5c
 80098c8:	f002 fc64 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80098cc:	2300      	movs	r3, #0
 80098ce:	e092      	b.n	80099f6 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80098d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80098d6:	f107 030c 	add.w	r3, r7, #12
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 ffc8 	bl	800a870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80098e0:	2301      	movs	r3, #1
 80098e2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80098e4:	f7ff f980 	bl	8008be8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80098e8:	f000 fce6 	bl	800a2b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80098ec:	f7ff f94c 	bl	8008b88 <vPortEnterCritical>
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f6:	b25b      	sxtb	r3, r3
 80098f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098fc:	d103      	bne.n	8009906 <xQueueSemaphoreTake+0x17a>
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800990c:	b25b      	sxtb	r3, r3
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009912:	d103      	bne.n	800991c <xQueueSemaphoreTake+0x190>
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800991c:	f7ff f964 	bl	8008be8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009920:	463a      	mov	r2, r7
 8009922:	f107 030c 	add.w	r3, r7, #12
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f000 ffb7 	bl	800a89c <xTaskCheckForTimeOut>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d132      	bne.n	800999a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009936:	f000 f95f 	bl	8009bf8 <prvIsQueueEmpty>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d026      	beq.n	800998e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d109      	bne.n	800995c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8009948:	f7ff f91e 	bl	8008b88 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	4618      	mov	r0, r3
 8009952:	f001 f93d 	bl	800abd0 <xTaskPriorityInherit>
 8009956:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8009958:	f7ff f946 	bl	8008be8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	3324      	adds	r3, #36	; 0x24
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fec9 	bl	800a6fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800996a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800996c:	f000 f8f2 	bl	8009b54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009970:	f000 fcb0 	bl	800a2d4 <xTaskResumeAll>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	f47f af48 	bne.w	800980c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800997c:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <xQueueSemaphoreTake+0x274>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	e73e      	b.n	800980c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800998e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009990:	f000 f8e0 	bl	8009b54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009994:	f000 fc9e 	bl	800a2d4 <xTaskResumeAll>
 8009998:	e738      	b.n	800980c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800999a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800999c:	f000 f8da 	bl	8009b54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80099a0:	f000 fc98 	bl	800a2d4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099a6:	f000 f927 	bl	8009bf8 <prvIsQueueEmpty>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f43f af2d 	beq.w	800980c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00d      	beq.n	80099d4 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 80099b8:	f7ff f8e6 	bl	8008b88 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80099bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099be:	f000 f821 	bl	8009a04 <prvGetDisinheritPriorityAfterTimeout>
 80099c2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 f9e8 	bl	800ada0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80099d0:	f7ff f90a 	bl	8008be8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	4618      	mov	r0, r3
 80099d8:	f003 f8f2 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 80099dc:	4604      	mov	r4, r0
 80099de:	2000      	movs	r0, #0
 80099e0:	f003 f8ee 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 80099e4:	4602      	mov	r2, r0
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2101      	movs	r1, #1
 80099ea:	9100      	str	r1, [sp, #0]
 80099ec:	4621      	mov	r1, r4
 80099ee:	205c      	movs	r0, #92	; 0x5c
 80099f0:	f002 fbd0 	bl	800c194 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80099f4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	373c      	adds	r7, #60	; 0x3c
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd90      	pop	{r4, r7, pc}
 80099fe:	bf00      	nop
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	e001      	b.n	8009a26 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009a26:	68fb      	ldr	r3, [r7, #12]
    }
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a48:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10d      	bne.n	8009a6e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d14d      	bne.n	8009af6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f001 f928 	bl	800acb4 <xTaskPriorityDisinherit>
 8009a64:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	609a      	str	r2, [r3, #8]
 8009a6c:	e043      	b.n	8009af6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d119      	bne.n	8009aa8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6858      	ldr	r0, [r3, #4]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	f006 ffe6 	bl	8010a50 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8c:	441a      	add	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d32b      	bcc.n	8009af6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	e026      	b.n	8009af6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	68d8      	ldr	r0, [r3, #12]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	f006 ffcc 	bl	8010a50 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	68da      	ldr	r2, [r3, #12]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac0:	425b      	negs	r3, r3
 8009ac2:	441a      	add	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d207      	bcs.n	8009ae4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	689a      	ldr	r2, [r3, #8]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	425b      	negs	r3, r3
 8009ade:	441a      	add	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d105      	bne.n	8009af6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8009afe:	697b      	ldr	r3, [r7, #20]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d018      	beq.n	8009b4c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	441a      	add	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d303      	bcc.n	8009b3c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68d9      	ldr	r1, [r3, #12]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	461a      	mov	r2, r3
 8009b46:	6838      	ldr	r0, [r7, #0]
 8009b48:	f006 ff82 	bl	8010a50 <memcpy>
    }
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009b5c:	f7ff f814 	bl	8008b88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b66:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b68:	e011      	b.n	8009b8e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d012      	beq.n	8009b98 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3324      	adds	r3, #36	; 0x24
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fe12 	bl	800a7a0 <xTaskRemoveFromEventList>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009b82:	f000 fef1 	bl	800a968 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dce9      	bgt.n	8009b6a <prvUnlockQueue+0x16>
 8009b96:	e000      	b.n	8009b9a <prvUnlockQueue+0x46>
                        break;
 8009b98:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	22ff      	movs	r2, #255	; 0xff
 8009b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8009ba2:	f7ff f821 	bl	8008be8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009ba6:	f7fe ffef 	bl	8008b88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bb0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bb2:	e011      	b.n	8009bd8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d012      	beq.n	8009be2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3310      	adds	r3, #16
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fded 	bl	800a7a0 <xTaskRemoveFromEventList>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009bcc:	f000 fecc 	bl	800a968 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dce9      	bgt.n	8009bb4 <prvUnlockQueue+0x60>
 8009be0:	e000      	b.n	8009be4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009be2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	22ff      	movs	r2, #255	; 0xff
 8009be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8009bec:	f7fe fffc 	bl	8008be8 <vPortExitCritical>
}
 8009bf0:	bf00      	nop
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009c00:	f7fe ffc2 	bl	8008b88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	e001      	b.n	8009c16 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009c16:	f7fe ffe7 	bl	8008be8 <vPortExitCritical>

    return xReturn;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009c2c:	f7fe ffac 	bl	8008b88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d102      	bne.n	8009c42 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e001      	b.n	8009c46 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009c46:	f7fe ffcf 	bl	8008be8 <vPortExitCritical>

    return xReturn;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	e01e      	b.n	8009ca2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c64:	4a13      	ldr	r2, [pc, #76]	; (8009cb4 <vQueueAddToRegistry+0x60>)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d115      	bne.n	8009c9c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c70:	4910      	ldr	r1, [pc, #64]	; (8009cb4 <vQueueAddToRegistry+0x60>)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8009c7a:	4a0e      	ldr	r2, [pc, #56]	; (8009cb4 <vQueueAddToRegistry+0x60>)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	4413      	add	r3, r2
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f002 ff99 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 8009c8e:	4601      	mov	r1, r0
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	2071      	movs	r0, #113	; 0x71
 8009c96:	f002 f9ad 	bl	800bff4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8009c9a:	e006      	b.n	8009caa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b07      	cmp	r3, #7
 8009ca6:	d9dd      	bls.n	8009c64 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	200049a0 	.word	0x200049a0

08009cb8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009cc8:	f7fe ff5e 	bl	8008b88 <vPortEnterCritical>
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cd2:	b25b      	sxtb	r3, r3
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd8:	d103      	bne.n	8009ce2 <vQueueWaitForMessageRestricted+0x2a>
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ce8:	b25b      	sxtb	r3, r3
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cee:	d103      	bne.n	8009cf8 <vQueueWaitForMessageRestricted+0x40>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cf8:	f7fe ff76 	bl	8008be8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d106      	bne.n	8009d12 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3324      	adds	r3, #36	; 0x24
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fd19 	bl	800a744 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f7ff ff1e 	bl	8009b54 <prvUnlockQueue>
    }
 8009d18:	bf00      	nop
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08e      	sub	sp, #56	; 0x38
 8009d24:	af04      	add	r7, sp, #16
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xTaskCreateStatic+0x2a>
        __asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	623b      	str	r3, [r7, #32]
    }
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xTaskCreateStatic+0x46>
        __asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	61fb      	str	r3, [r7, #28]
    }
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8009d66:	235c      	movs	r3, #92	; 0x5c
 8009d68:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b5c      	cmp	r3, #92	; 0x5c
 8009d6e:	d00a      	beq.n	8009d86 <xTaskCreateStatic+0x66>
        __asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	61bb      	str	r3, [r7, #24]
    }
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d86:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d01e      	beq.n	8009dcc <xTaskCreateStatic+0xac>
 8009d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d01b      	beq.n	8009dcc <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d9c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009da6:	2300      	movs	r3, #0
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	f107 0314 	add.w	r3, r7, #20
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 f850 	bl	8009e64 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dc6:	f000 f8e3 	bl	8009f90 <prvAddNewTaskToReadyList>
 8009dca:	e001      	b.n	8009dd0 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8009dd0:	697b      	ldr	r3, [r7, #20]
    }
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3728      	adds	r7, #40	; 0x28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b08c      	sub	sp, #48	; 0x30
 8009dde:	af04      	add	r7, sp, #16
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	603b      	str	r3, [r7, #0]
 8009de6:	4613      	mov	r3, r2
 8009de8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009dea:	88fb      	ldrh	r3, [r7, #6]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fae4 	bl	80083bc <pvPortMalloc>
 8009df4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00e      	beq.n	8009e1a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009dfc:	205c      	movs	r0, #92	; 0x5c
 8009dfe:	f7fe fadd 	bl	80083bc <pvPortMalloc>
 8009e02:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8009e10:	e005      	b.n	8009e1e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009e12:	6978      	ldr	r0, [r7, #20]
 8009e14:	f7fe fbb6 	bl	8008584 <vPortFree>
 8009e18:	e001      	b.n	8009e1e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d017      	beq.n	8009e54 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e2c:	88fa      	ldrh	r2, [r7, #6]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9303      	str	r3, [sp, #12]
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	9302      	str	r3, [sp, #8]
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68b9      	ldr	r1, [r7, #8]
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 f80e 	bl	8009e64 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009e48:	69f8      	ldr	r0, [r7, #28]
 8009e4a:	f000 f8a1 	bl	8009f90 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	e002      	b.n	8009e5a <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e58:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009e5a:	69bb      	ldr	r3, [r7, #24]
    }
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3720      	adds	r7, #32
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	21a5      	movs	r1, #165	; 0xa5
 8009e7e:	f006 fdf5 	bl	8010a6c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	f023 0307 	bic.w	r3, r3, #7
 8009e9a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	f003 0307 	and.w	r3, r3, #7
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <prvInitialiseNewTask+0x58>
        __asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	617b      	str	r3, [r7, #20]
    }
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d01f      	beq.n	8009f02 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	61fb      	str	r3, [r7, #28]
 8009ec6:	e012      	b.n	8009eee <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	7819      	ldrb	r1, [r3, #0]
 8009ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3334      	adds	r3, #52	; 0x34
 8009ed8:	460a      	mov	r2, r1
 8009eda:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d006      	beq.n	8009ef6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	3301      	adds	r3, #1
 8009eec:	61fb      	str	r3, [r7, #28]
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	2b0f      	cmp	r3, #15
 8009ef2:	d9e9      	bls.n	8009ec8 <prvInitialiseNewTask+0x64>
 8009ef4:	e000      	b.n	8009ef8 <prvInitialiseNewTask+0x94>
            {
                break;
 8009ef6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f00:	e003      	b.n	8009f0a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	2b37      	cmp	r3, #55	; 0x37
 8009f0e:	d901      	bls.n	8009f14 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f10:	2337      	movs	r3, #55	; 0x37
 8009f12:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f18:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f1e:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	2200      	movs	r2, #0
 8009f24:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fc68 	bl	8008800 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	3318      	adds	r3, #24
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fc63 	bl	8008800 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f4e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	3354      	adds	r3, #84	; 0x54
 8009f54:	2204      	movs	r2, #4
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f006 fd87 	bl	8010a6c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	3358      	adds	r3, #88	; 0x58
 8009f62:	2201      	movs	r2, #1
 8009f64:	2100      	movs	r1, #0
 8009f66:	4618      	mov	r0, r3
 8009f68:	f006 fd80 	bl	8010a6c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	69b8      	ldr	r0, [r7, #24]
 8009f72:	f7fe fcd9 	bl	8008928 <pxPortInitialiseStack>
 8009f76:	4602      	mov	r2, r0
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f86:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009f88:	bf00      	nop
 8009f8a:	3720      	adds	r7, #32
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009f90:	b5b0      	push	{r4, r5, r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009f98:	f7fe fdf6 	bl	8008b88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009f9c:	4b3c      	ldr	r3, [pc, #240]	; (800a090 <prvAddNewTaskToReadyList+0x100>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	4a3b      	ldr	r2, [pc, #236]	; (800a090 <prvAddNewTaskToReadyList+0x100>)
 8009fa4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009fa6:	4b3b      	ldr	r3, [pc, #236]	; (800a094 <prvAddNewTaskToReadyList+0x104>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d109      	bne.n	8009fc2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009fae:	4a39      	ldr	r2, [pc, #228]	; (800a094 <prvAddNewTaskToReadyList+0x104>)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fb4:	4b36      	ldr	r3, [pc, #216]	; (800a090 <prvAddNewTaskToReadyList+0x100>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d110      	bne.n	8009fde <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009fbc:	f000 fcf8 	bl	800a9b0 <prvInitialiseTaskLists>
 8009fc0:	e00d      	b.n	8009fde <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009fc2:	4b35      	ldr	r3, [pc, #212]	; (800a098 <prvAddNewTaskToReadyList+0x108>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fca:	4b32      	ldr	r3, [pc, #200]	; (800a094 <prvAddNewTaskToReadyList+0x104>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d802      	bhi.n	8009fde <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009fd8:	4a2e      	ldr	r2, [pc, #184]	; (800a094 <prvAddNewTaskToReadyList+0x104>)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009fde:	4b2f      	ldr	r3, [pc, #188]	; (800a09c <prvAddNewTaskToReadyList+0x10c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	4a2d      	ldr	r2, [pc, #180]	; (800a09c <prvAddNewTaskToReadyList+0x10c>)
 8009fe6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009fe8:	4b2c      	ldr	r3, [pc, #176]	; (800a09c <prvAddNewTaskToReadyList+0x10c>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d016      	beq.n	800a024 <prvAddNewTaskToReadyList+0x94>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f002 fcbb 	bl	800c974 <SEGGER_SYSVIEW_OnTaskCreate>
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	461d      	mov	r5, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	461c      	mov	r4, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01a:	1ae3      	subs	r3, r4, r3
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	462b      	mov	r3, r5
 800a020:	f002 ffdc 	bl	800cfdc <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4618      	mov	r0, r3
 800a028:	f002 fd28 	bl	800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a030:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <prvAddNewTaskToReadyList+0x110>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	429a      	cmp	r2, r3
 800a036:	d903      	bls.n	800a040 <prvAddNewTaskToReadyList+0xb0>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	4a18      	ldr	r2, [pc, #96]	; (800a0a0 <prvAddNewTaskToReadyList+0x110>)
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <prvAddNewTaskToReadyList+0x114>)
 800a04e:	441a      	add	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3304      	adds	r3, #4
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f7fe fbdf 	bl	800881a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a05c:	f7fe fdc4 	bl	8008be8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a060:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <prvAddNewTaskToReadyList+0x108>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00e      	beq.n	800a086 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <prvAddNewTaskToReadyList+0x104>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	429a      	cmp	r2, r3
 800a074:	d207      	bcs.n	800a086 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a076:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <prvAddNewTaskToReadyList+0x118>)
 800a078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bdb0      	pop	{r4, r5, r7, pc}
 800a08e:	bf00      	nop
 800a090:	20004eb4 	.word	0x20004eb4
 800a094:	200049e0 	.word	0x200049e0
 800a098:	20004ec0 	.word	0x20004ec0
 800a09c:	20004ed0 	.word	0x20004ed0
 800a0a0:	20004ebc 	.word	0x20004ebc
 800a0a4:	200049e4 	.word	0x200049e4
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800a0b4:	f7fe fd68 	bl	8008b88 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d102      	bne.n	800a0c4 <vTaskDelete+0x18>
 800a0be:	4b39      	ldr	r3, [pc, #228]	; (800a1a4 <vTaskDelete+0xf8>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	e000      	b.n	800a0c6 <vTaskDelete+0x1a>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe fc01 	bl	80088d4 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d004      	beq.n	800a0e4 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3318      	adds	r3, #24
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fbf8 	bl	80088d4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800a0e4:	4b30      	ldr	r3, [pc, #192]	; (800a1a8 <vTaskDelete+0xfc>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	4a2f      	ldr	r2, [pc, #188]	; (800a1a8 <vTaskDelete+0xfc>)
 800a0ec:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800a0ee:	4b2d      	ldr	r3, [pc, #180]	; (800a1a4 <vTaskDelete+0xf8>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d118      	bne.n	800a12a <vTaskDelete+0x7e>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	482b      	ldr	r0, [pc, #172]	; (800a1ac <vTaskDelete+0x100>)
 800a100:	f7fe fb8b 	bl	800881a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800a104:	4b2a      	ldr	r3, [pc, #168]	; (800a1b0 <vTaskDelete+0x104>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	4a29      	ldr	r2, [pc, #164]	; (800a1b0 <vTaskDelete+0x104>)
 800a10c:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4618      	mov	r0, r3
 800a112:	f002 fd55 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 800a116:	4603      	mov	r3, r0
 800a118:	4619      	mov	r1, r3
 800a11a:	2022      	movs	r0, #34	; 0x22
 800a11c:	f001 ff2e 	bl	800bf7c <SEGGER_SYSVIEW_RecordU32>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4618      	mov	r0, r3
 800a124:	f002 ffc2 	bl	800d0ac <SYSVIEW_DeleteTask>
 800a128:	e016      	b.n	800a158 <vTaskDelete+0xac>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800a12a:	4b22      	ldr	r3, [pc, #136]	; (800a1b4 <vTaskDelete+0x108>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3b01      	subs	r3, #1
 800a130:	4a20      	ldr	r2, [pc, #128]	; (800a1b4 <vTaskDelete+0x108>)
 800a132:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4618      	mov	r0, r3
 800a138:	f002 fd42 	bl	800cbc0 <SEGGER_SYSVIEW_ShrinkId>
 800a13c:	4603      	mov	r3, r0
 800a13e:	4619      	mov	r1, r3
 800a140:	2022      	movs	r0, #34	; 0x22
 800a142:	f001 ff1b 	bl	800bf7c <SEGGER_SYSVIEW_RecordU32>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4618      	mov	r0, r3
 800a14a:	f002 ffaf 	bl	800d0ac <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 fcd4 	bl	800aafc <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800a154:	f000 fd02 	bl	800ab5c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800a158:	f7fe fd46 	bl	8008be8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800a15c:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <vTaskDelete+0x10c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01b      	beq.n	800a19c <vTaskDelete+0xf0>
        {
            if( pxTCB == pxCurrentTCB )
 800a164:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <vTaskDelete+0xf8>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d116      	bne.n	800a19c <vTaskDelete+0xf0>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800a16e:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <vTaskDelete+0x110>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00a      	beq.n	800a18c <vTaskDelete+0xe0>
        __asm volatile
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	60bb      	str	r3, [r7, #8]
    }
 800a188:	bf00      	nop
 800a18a:	e7fe      	b.n	800a18a <vTaskDelete+0xde>
                portYIELD_WITHIN_API();
 800a18c:	4b0c      	ldr	r3, [pc, #48]	; (800a1c0 <vTaskDelete+0x114>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	200049e0 	.word	0x200049e0
 800a1a8:	20004ed0 	.word	0x20004ed0
 800a1ac:	20004e88 	.word	0x20004e88
 800a1b0:	20004e9c 	.word	0x20004e9c
 800a1b4:	20004eb4 	.word	0x20004eb4
 800a1b8:	20004ec0 	.word	0x20004ec0
 800a1bc:	20004edc 	.word	0x20004edc
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08a      	sub	sp, #40	; 0x28
 800a1c8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1d2:	463a      	mov	r2, r7
 800a1d4:	1d39      	adds	r1, r7, #4
 800a1d6:	f107 0308 	add.w	r3, r7, #8
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f004 fa7c 	bl	800e6d8 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	9202      	str	r2, [sp, #8]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	460a      	mov	r2, r1
 800a1f2:	4929      	ldr	r1, [pc, #164]	; (800a298 <vTaskStartScheduler+0xd4>)
 800a1f4:	4829      	ldr	r0, [pc, #164]	; (800a29c <vTaskStartScheduler+0xd8>)
 800a1f6:	f7ff fd93 	bl	8009d20 <xTaskCreateStatic>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4a28      	ldr	r2, [pc, #160]	; (800a2a0 <vTaskStartScheduler+0xdc>)
 800a1fe:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800a200:	4b27      	ldr	r3, [pc, #156]	; (800a2a0 <vTaskStartScheduler+0xdc>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800a208:	2301      	movs	r3, #1
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	e001      	b.n	800a212 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d102      	bne.n	800a21e <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800a218:	f000 fec0 	bl	800af9c <xTimerCreateTimerTask>
 800a21c:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d124      	bne.n	800a26e <vTaskStartScheduler+0xaa>
        __asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	613b      	str	r3, [r7, #16]
    }
 800a236:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a238:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <vTaskStartScheduler+0xe0>)
 800a23a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a23e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a240:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <vTaskStartScheduler+0xe4>)
 800a242:	2201      	movs	r2, #1
 800a244:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a246:	4b19      	ldr	r3, [pc, #100]	; (800a2ac <vTaskStartScheduler+0xe8>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a24c:	4b18      	ldr	r3, [pc, #96]	; (800a2b0 <vTaskStartScheduler+0xec>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <vTaskStartScheduler+0xdc>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	429a      	cmp	r2, r3
 800a256:	d102      	bne.n	800a25e <vTaskStartScheduler+0x9a>
 800a258:	f002 fb70 	bl	800c93c <SEGGER_SYSVIEW_OnIdle>
 800a25c:	e004      	b.n	800a268 <vTaskStartScheduler+0xa4>
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <vTaskStartScheduler+0xec>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f002 fbc8 	bl	800c9f8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a268:	f7fe fbec 	bl	8008a44 <xPortStartScheduler>
 800a26c:	e00e      	b.n	800a28c <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a274:	d10a      	bne.n	800a28c <vTaskStartScheduler+0xc8>
        __asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
    }
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a28c:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <vTaskStartScheduler+0xf0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
}
 800a290:	bf00      	nop
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	080113fc 	.word	0x080113fc
 800a29c:	0800a981 	.word	0x0800a981
 800a2a0:	20004ed8 	.word	0x20004ed8
 800a2a4:	20004ed4 	.word	0x20004ed4
 800a2a8:	20004ec0 	.word	0x20004ec0
 800a2ac:	20004eb8 	.word	0x20004eb8
 800a2b0:	200049e0 	.word	0x200049e0
 800a2b4:	20000010 	.word	0x20000010

0800a2b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a2bc:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <vTaskSuspendAll+0x18>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	4a03      	ldr	r2, [pc, #12]	; (800a2d0 <vTaskSuspendAll+0x18>)
 800a2c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a2c6:	bf00      	nop
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	20004edc 	.word	0x20004edc

0800a2d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a2e2:	4b44      	ldr	r3, [pc, #272]	; (800a3f4 <xTaskResumeAll+0x120>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10a      	bne.n	800a300 <xTaskResumeAll+0x2c>
        __asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	603b      	str	r3, [r7, #0]
    }
 800a2fc:	bf00      	nop
 800a2fe:	e7fe      	b.n	800a2fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a300:	f7fe fc42 	bl	8008b88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a304:	4b3b      	ldr	r3, [pc, #236]	; (800a3f4 <xTaskResumeAll+0x120>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3b01      	subs	r3, #1
 800a30a:	4a3a      	ldr	r2, [pc, #232]	; (800a3f4 <xTaskResumeAll+0x120>)
 800a30c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a30e:	4b39      	ldr	r3, [pc, #228]	; (800a3f4 <xTaskResumeAll+0x120>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d166      	bne.n	800a3e4 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a316:	4b38      	ldr	r3, [pc, #224]	; (800a3f8 <xTaskResumeAll+0x124>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d062      	beq.n	800a3e4 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a31e:	e033      	b.n	800a388 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a320:	4b36      	ldr	r3, [pc, #216]	; (800a3fc <xTaskResumeAll+0x128>)
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3318      	adds	r3, #24
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fad1 	bl	80088d4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3304      	adds	r3, #4
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe facc 	bl	80088d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4618      	mov	r0, r3
 800a340:	f002 fb9c 	bl	800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4b2d      	ldr	r3, [pc, #180]	; (800a400 <xTaskResumeAll+0x12c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d903      	bls.n	800a358 <xTaskResumeAll+0x84>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	4a2a      	ldr	r2, [pc, #168]	; (800a400 <xTaskResumeAll+0x12c>)
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4a27      	ldr	r2, [pc, #156]	; (800a404 <xTaskResumeAll+0x130>)
 800a366:	441a      	add	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f7fe fa53 	bl	800881a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	4b23      	ldr	r3, [pc, #140]	; (800a408 <xTaskResumeAll+0x134>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	429a      	cmp	r2, r3
 800a380:	d302      	bcc.n	800a388 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a382:	4b22      	ldr	r3, [pc, #136]	; (800a40c <xTaskResumeAll+0x138>)
 800a384:	2201      	movs	r2, #1
 800a386:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a388:	4b1c      	ldr	r3, [pc, #112]	; (800a3fc <xTaskResumeAll+0x128>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1c7      	bne.n	800a320 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a396:	f000 fbe1 	bl	800ab5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a39a:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <xTaskResumeAll+0x13c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d010      	beq.n	800a3c8 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a3a6:	f000 f859 	bl	800a45c <xTaskIncrementTick>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a3b0:	4b16      	ldr	r3, [pc, #88]	; (800a40c <xTaskResumeAll+0x138>)
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f1      	bne.n	800a3a6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a3c2:	4b13      	ldr	r3, [pc, #76]	; (800a410 <xTaskResumeAll+0x13c>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a3c8:	4b10      	ldr	r3, [pc, #64]	; (800a40c <xTaskResumeAll+0x138>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d009      	beq.n	800a3e4 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <xTaskResumeAll+0x140>)
 800a3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a3e4:	f7fe fc00 	bl	8008be8 <vPortExitCritical>

    return xAlreadyYielded;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20004edc 	.word	0x20004edc
 800a3f8:	20004eb4 	.word	0x20004eb4
 800a3fc:	20004e74 	.word	0x20004e74
 800a400:	20004ebc 	.word	0x20004ebc
 800a404:	200049e4 	.word	0x200049e4
 800a408:	200049e0 	.word	0x200049e0
 800a40c:	20004ec8 	.word	0x20004ec8
 800a410:	20004ec4 	.word	0x20004ec4
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <xTaskGetTickCount+0x1c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a424:	687b      	ldr	r3, [r7, #4]
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20004eb8 	.word	0x20004eb8

0800a438 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a43e:	f7fe fc8d 	bl	8008d5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a442:	2300      	movs	r3, #0
 800a444:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a446:	4b04      	ldr	r3, [pc, #16]	; (800a458 <xTaskGetTickCountFromISR+0x20>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a44c:	683b      	ldr	r3, [r7, #0]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20004eb8 	.word	0x20004eb8

0800a45c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a466:	4b51      	ldr	r3, [pc, #324]	; (800a5ac <xTaskIncrementTick+0x150>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f040 8093 	bne.w	800a596 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a470:	4b4f      	ldr	r3, [pc, #316]	; (800a5b0 <xTaskIncrementTick+0x154>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3301      	adds	r3, #1
 800a476:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a478:	4a4d      	ldr	r2, [pc, #308]	; (800a5b0 <xTaskIncrementTick+0x154>)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d120      	bne.n	800a4c6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800a484:	4b4b      	ldr	r3, [pc, #300]	; (800a5b4 <xTaskIncrementTick+0x158>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00a      	beq.n	800a4a4 <xTaskIncrementTick+0x48>
        __asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	603b      	str	r3, [r7, #0]
    }
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <xTaskIncrementTick+0x46>
 800a4a4:	4b43      	ldr	r3, [pc, #268]	; (800a5b4 <xTaskIncrementTick+0x158>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	4b43      	ldr	r3, [pc, #268]	; (800a5b8 <xTaskIncrementTick+0x15c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a41      	ldr	r2, [pc, #260]	; (800a5b4 <xTaskIncrementTick+0x158>)
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	4a41      	ldr	r2, [pc, #260]	; (800a5b8 <xTaskIncrementTick+0x15c>)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	4b40      	ldr	r3, [pc, #256]	; (800a5bc <xTaskIncrementTick+0x160>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	4a3f      	ldr	r2, [pc, #252]	; (800a5bc <xTaskIncrementTick+0x160>)
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	f000 fb4b 	bl	800ab5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a4c6:	4b3e      	ldr	r3, [pc, #248]	; (800a5c0 <xTaskIncrementTick+0x164>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d34d      	bcc.n	800a56c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d0:	4b38      	ldr	r3, [pc, #224]	; (800a5b4 <xTaskIncrementTick+0x158>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4da:	4b39      	ldr	r3, [pc, #228]	; (800a5c0 <xTaskIncrementTick+0x164>)
 800a4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4e0:	601a      	str	r2, [r3, #0]
                    break;
 800a4e2:	e043      	b.n	800a56c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e4:	4b33      	ldr	r3, [pc, #204]	; (800a5b4 <xTaskIncrementTick+0x158>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d203      	bcs.n	800a504 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a4fc:	4a30      	ldr	r2, [pc, #192]	; (800a5c0 <xTaskIncrementTick+0x164>)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a502:	e033      	b.n	800a56c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	3304      	adds	r3, #4
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe f9e3 	bl	80088d4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	2b00      	cmp	r3, #0
 800a514:	d004      	beq.n	800a520 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3318      	adds	r3, #24
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe f9da 	bl	80088d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4618      	mov	r0, r3
 800a524:	f002 faaa 	bl	800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4b25      	ldr	r3, [pc, #148]	; (800a5c4 <xTaskIncrementTick+0x168>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <xTaskIncrementTick+0xe0>
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	4a22      	ldr	r2, [pc, #136]	; (800a5c4 <xTaskIncrementTick+0x168>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4a1f      	ldr	r2, [pc, #124]	; (800a5c8 <xTaskIncrementTick+0x16c>)
 800a54a:	441a      	add	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fe f961 	bl	800881a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55c:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <xTaskIncrementTick+0x170>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a562:	429a      	cmp	r2, r3
 800a564:	d3b4      	bcc.n	800a4d0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800a566:	2301      	movs	r3, #1
 800a568:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a56a:	e7b1      	b.n	800a4d0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a56c:	4b17      	ldr	r3, [pc, #92]	; (800a5cc <xTaskIncrementTick+0x170>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	4915      	ldr	r1, [pc, #84]	; (800a5c8 <xTaskIncrementTick+0x16c>)
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d901      	bls.n	800a588 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a584:	2301      	movs	r3, #1
 800a586:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a588:	4b11      	ldr	r3, [pc, #68]	; (800a5d0 <xTaskIncrementTick+0x174>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	e004      	b.n	800a5a0 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a596:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <xTaskIncrementTick+0x178>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	4a0d      	ldr	r2, [pc, #52]	; (800a5d4 <xTaskIncrementTick+0x178>)
 800a59e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a5a0:	697b      	ldr	r3, [r7, #20]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20004edc 	.word	0x20004edc
 800a5b0:	20004eb8 	.word	0x20004eb8
 800a5b4:	20004e6c 	.word	0x20004e6c
 800a5b8:	20004e70 	.word	0x20004e70
 800a5bc:	20004ecc 	.word	0x20004ecc
 800a5c0:	20004ed4 	.word	0x20004ed4
 800a5c4:	20004ebc 	.word	0x20004ebc
 800a5c8:	200049e4 	.word	0x200049e4
 800a5cc:	200049e0 	.word	0x200049e0
 800a5d0:	20004ec8 	.word	0x20004ec8
 800a5d4:	20004ec4 	.word	0x20004ec4

0800a5d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5de:	4b41      	ldr	r3, [pc, #260]	; (800a6e4 <vTaskSwitchContext+0x10c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a5e6:	4b40      	ldr	r3, [pc, #256]	; (800a6e8 <vTaskSwitchContext+0x110>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a5ec:	e076      	b.n	800a6dc <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 800a5ee:	4b3e      	ldr	r3, [pc, #248]	; (800a6e8 <vTaskSwitchContext+0x110>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800a5f4:	4b3d      	ldr	r3, [pc, #244]	; (800a6ec <vTaskSwitchContext+0x114>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fa:	613b      	str	r3, [r7, #16]
 800a5fc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d111      	bne.n	800a630 <vTaskSwitchContext+0x58>
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	3304      	adds	r3, #4
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	429a      	cmp	r2, r3
 800a616:	d10b      	bne.n	800a630 <vTaskSwitchContext+0x58>
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	3308      	adds	r3, #8
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	429a      	cmp	r2, r3
 800a622:	d105      	bne.n	800a630 <vTaskSwitchContext+0x58>
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	330c      	adds	r3, #12
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d008      	beq.n	800a642 <vTaskSwitchContext+0x6a>
 800a630:	4b2e      	ldr	r3, [pc, #184]	; (800a6ec <vTaskSwitchContext+0x114>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	4b2d      	ldr	r3, [pc, #180]	; (800a6ec <vTaskSwitchContext+0x114>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3334      	adds	r3, #52	; 0x34
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f004 f83b 	bl	800e6b8 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a642:	4b2b      	ldr	r3, [pc, #172]	; (800a6f0 <vTaskSwitchContext+0x118>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e010      	b.n	800a66c <vTaskSwitchContext+0x94>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <vTaskSwitchContext+0x8e>
        __asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	607b      	str	r3, [r7, #4]
    }
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <vTaskSwitchContext+0x8c>
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	3b01      	subs	r3, #1
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	4921      	ldr	r1, [pc, #132]	; (800a6f4 <vTaskSwitchContext+0x11c>)
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	4613      	mov	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4413      	add	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	440b      	add	r3, r1
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0e4      	beq.n	800a64a <vTaskSwitchContext+0x72>
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <vTaskSwitchContext+0x11c>)
 800a68c:	4413      	add	r3, r2
 800a68e:	60bb      	str	r3, [r7, #8]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	605a      	str	r2, [r3, #4]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d104      	bne.n	800a6b0 <vTaskSwitchContext+0xd8>
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	605a      	str	r2, [r3, #4]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	4a0d      	ldr	r2, [pc, #52]	; (800a6ec <vTaskSwitchContext+0x114>)
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	4a0d      	ldr	r2, [pc, #52]	; (800a6f0 <vTaskSwitchContext+0x118>)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <vTaskSwitchContext+0x114>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <vTaskSwitchContext+0x120>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d102      	bne.n	800a6d2 <vTaskSwitchContext+0xfa>
 800a6cc:	f002 f936 	bl	800c93c <SEGGER_SYSVIEW_OnIdle>
}
 800a6d0:	e004      	b.n	800a6dc <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 800a6d2:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <vTaskSwitchContext+0x114>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f002 f98e 	bl	800c9f8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a6dc:	bf00      	nop
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20004edc 	.word	0x20004edc
 800a6e8:	20004ec8 	.word	0x20004ec8
 800a6ec:	200049e0 	.word	0x200049e0
 800a6f0:	20004ebc 	.word	0x20004ebc
 800a6f4:	200049e4 	.word	0x200049e4
 800a6f8:	20004ed8 	.word	0x20004ed8

0800a6fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10a      	bne.n	800a722 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	60fb      	str	r3, [r7, #12]
    }
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a722:	4b07      	ldr	r3, [pc, #28]	; (800a740 <vTaskPlaceOnEventList+0x44>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3318      	adds	r3, #24
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7fe f899 	bl	8008862 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a730:	2101      	movs	r1, #1
 800a732:	6838      	ldr	r0, [r7, #0]
 800a734:	f000 fbd2 	bl	800aedc <prvAddCurrentTaskToDelayedList>
}
 800a738:	bf00      	nop
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200049e0 	.word	0x200049e0

0800a744 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10a      	bne.n	800a76c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	617b      	str	r3, [r7, #20]
    }
 800a768:	bf00      	nop
 800a76a:	e7fe      	b.n	800a76a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <vTaskPlaceOnEventListRestricted+0x58>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3318      	adds	r3, #24
 800a772:	4619      	mov	r1, r3
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7fe f850 	bl	800881a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800a780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a784:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a786:	2024      	movs	r0, #36	; 0x24
 800a788:	f001 fbda 	bl	800bf40 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	68b8      	ldr	r0, [r7, #8]
 800a790:	f000 fba4 	bl	800aedc <prvAddCurrentTaskToDelayedList>
    }
 800a794:	bf00      	nop
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200049e0 	.word	0x200049e0

0800a7a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10a      	bne.n	800a7cc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60fb      	str	r3, [r7, #12]
    }
 800a7c8:	bf00      	nop
 800a7ca:	e7fe      	b.n	800a7ca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	3318      	adds	r3, #24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe f87f 	bl	80088d4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7d6:	4b20      	ldr	r3, [pc, #128]	; (800a858 <xTaskRemoveFromEventList+0xb8>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d121      	bne.n	800a822 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe f876 	bl	80088d4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f002 f946 	bl	800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f4:	4b19      	ldr	r3, [pc, #100]	; (800a85c <xTaskRemoveFromEventList+0xbc>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d903      	bls.n	800a804 <xTaskRemoveFromEventList+0x64>
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	4a16      	ldr	r2, [pc, #88]	; (800a85c <xTaskRemoveFromEventList+0xbc>)
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a808:	4613      	mov	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4a13      	ldr	r2, [pc, #76]	; (800a860 <xTaskRemoveFromEventList+0xc0>)
 800a812:	441a      	add	r2, r3
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	3304      	adds	r3, #4
 800a818:	4619      	mov	r1, r3
 800a81a:	4610      	mov	r0, r2
 800a81c:	f7fd fffd 	bl	800881a <vListInsertEnd>
 800a820:	e005      	b.n	800a82e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	3318      	adds	r3, #24
 800a826:	4619      	mov	r1, r3
 800a828:	480e      	ldr	r0, [pc, #56]	; (800a864 <xTaskRemoveFromEventList+0xc4>)
 800a82a:	f7fd fff6 	bl	800881a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a832:	4b0d      	ldr	r3, [pc, #52]	; (800a868 <xTaskRemoveFromEventList+0xc8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a838:	429a      	cmp	r2, r3
 800a83a:	d905      	bls.n	800a848 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a840:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <xTaskRemoveFromEventList+0xcc>)
 800a842:	2201      	movs	r2, #1
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	e001      	b.n	800a84c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a84c:	697b      	ldr	r3, [r7, #20]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20004edc 	.word	0x20004edc
 800a85c:	20004ebc 	.word	0x20004ebc
 800a860:	200049e4 	.word	0x200049e4
 800a864:	20004e74 	.word	0x20004e74
 800a868:	200049e0 	.word	0x200049e0
 800a86c:	20004ec8 	.word	0x20004ec8

0800a870 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a878:	4b06      	ldr	r3, [pc, #24]	; (800a894 <vTaskInternalSetTimeOutState+0x24>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a880:	4b05      	ldr	r3, [pc, #20]	; (800a898 <vTaskInternalSetTimeOutState+0x28>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	605a      	str	r2, [r3, #4]
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	20004ecc 	.word	0x20004ecc
 800a898:	20004eb8 	.word	0x20004eb8

0800a89c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	613b      	str	r3, [r7, #16]
    }
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10a      	bne.n	800a8de <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	60fb      	str	r3, [r7, #12]
    }
 800a8da:	bf00      	nop
 800a8dc:	e7fe      	b.n	800a8dc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800a8de:	f7fe f953 	bl	8008b88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a8e2:	4b1f      	ldr	r3, [pc, #124]	; (800a960 <xTaskCheckForTimeOut+0xc4>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8fa:	d102      	bne.n	800a902 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	e026      	b.n	800a950 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	4b17      	ldr	r3, [pc, #92]	; (800a964 <xTaskCheckForTimeOut+0xc8>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d00a      	beq.n	800a924 <xTaskCheckForTimeOut+0x88>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	429a      	cmp	r2, r3
 800a916:	d305      	bcc.n	800a924 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a918:	2301      	movs	r3, #1
 800a91a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	e015      	b.n	800a950 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d20b      	bcs.n	800a946 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	1ad2      	subs	r2, r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff ff98 	bl	800a870 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	61fb      	str	r3, [r7, #28]
 800a944:	e004      	b.n	800a950 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a94c:	2301      	movs	r3, #1
 800a94e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a950:	f7fe f94a 	bl	8008be8 <vPortExitCritical>

    return xReturn;
 800a954:	69fb      	ldr	r3, [r7, #28]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3720      	adds	r7, #32
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20004eb8 	.word	0x20004eb8
 800a964:	20004ecc 	.word	0x20004ecc

0800a968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a96c:	4b03      	ldr	r3, [pc, #12]	; (800a97c <vTaskMissedYield+0x14>)
 800a96e:	2201      	movs	r2, #1
 800a970:	601a      	str	r2, [r3, #0]
}
 800a972:	bf00      	nop
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	20004ec8 	.word	0x20004ec8

0800a980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a988:	f000 f852 	bl	800aa30 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a98c:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <prvIdleTask+0x28>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d9f9      	bls.n	800a988 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800a994:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <prvIdleTask+0x2c>)
 800a996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a9a4:	e7f0      	b.n	800a988 <prvIdleTask+0x8>
 800a9a6:	bf00      	nop
 800a9a8:	200049e4 	.word	0x200049e4
 800a9ac:	e000ed04 	.word	0xe000ed04

0800a9b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	e00c      	b.n	800a9d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4a12      	ldr	r2, [pc, #72]	; (800aa10 <prvInitialiseTaskLists+0x60>)
 800a9c8:	4413      	add	r3, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fd fef8 	bl	80087c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	607b      	str	r3, [r7, #4]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b37      	cmp	r3, #55	; 0x37
 800a9da:	d9ef      	bls.n	800a9bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a9dc:	480d      	ldr	r0, [pc, #52]	; (800aa14 <prvInitialiseTaskLists+0x64>)
 800a9de:	f7fd feef 	bl	80087c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a9e2:	480d      	ldr	r0, [pc, #52]	; (800aa18 <prvInitialiseTaskLists+0x68>)
 800a9e4:	f7fd feec 	bl	80087c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a9e8:	480c      	ldr	r0, [pc, #48]	; (800aa1c <prvInitialiseTaskLists+0x6c>)
 800a9ea:	f7fd fee9 	bl	80087c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800a9ee:	480c      	ldr	r0, [pc, #48]	; (800aa20 <prvInitialiseTaskLists+0x70>)
 800a9f0:	f7fd fee6 	bl	80087c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800a9f4:	480b      	ldr	r0, [pc, #44]	; (800aa24 <prvInitialiseTaskLists+0x74>)
 800a9f6:	f7fd fee3 	bl	80087c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a9fa:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <prvInitialiseTaskLists+0x78>)
 800a9fc:	4a05      	ldr	r2, [pc, #20]	; (800aa14 <prvInitialiseTaskLists+0x64>)
 800a9fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <prvInitialiseTaskLists+0x7c>)
 800aa02:	4a05      	ldr	r2, [pc, #20]	; (800aa18 <prvInitialiseTaskLists+0x68>)
 800aa04:	601a      	str	r2, [r3, #0]
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	200049e4 	.word	0x200049e4
 800aa14:	20004e44 	.word	0x20004e44
 800aa18:	20004e58 	.word	0x20004e58
 800aa1c:	20004e74 	.word	0x20004e74
 800aa20:	20004e88 	.word	0x20004e88
 800aa24:	20004ea0 	.word	0x20004ea0
 800aa28:	20004e6c 	.word	0x20004e6c
 800aa2c:	20004e70 	.word	0x20004e70

0800aa30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa36:	e019      	b.n	800aa6c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800aa38:	f7fe f8a6 	bl	8008b88 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa3c:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <prvCheckTasksWaitingTermination+0x50>)
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3304      	adds	r3, #4
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fd ff43 	bl	80088d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <prvCheckTasksWaitingTermination+0x54>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	4a0b      	ldr	r2, [pc, #44]	; (800aa84 <prvCheckTasksWaitingTermination+0x54>)
 800aa56:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800aa58:	4b0b      	ldr	r3, [pc, #44]	; (800aa88 <prvCheckTasksWaitingTermination+0x58>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	4a0a      	ldr	r2, [pc, #40]	; (800aa88 <prvCheckTasksWaitingTermination+0x58>)
 800aa60:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800aa62:	f7fe f8c1 	bl	8008be8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f848 	bl	800aafc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa6c:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <prvCheckTasksWaitingTermination+0x58>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e1      	bne.n	800aa38 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20004e88 	.word	0x20004e88
 800aa84:	20004eb4 	.word	0x20004eb4
 800aa88:	20004e9c 	.word	0x20004e9c

0800aa8c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aa98:	e005      	b.n	800aaa6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	607b      	str	r3, [r7, #4]
            ulCount++;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2ba5      	cmp	r3, #165	; 0xa5
 800aaac:	d0f5      	beq.n	800aa9a <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	089b      	lsrs	r3, r3, #2
 800aab2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	b29b      	uxth	r3, r3
    }
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <uxTaskGetStackHighWaterMark+0x14>
 800aad2:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <uxTaskGetStackHighWaterMark+0x34>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	e000      	b.n	800aada <uxTaskGetStackHighWaterMark+0x16>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae0:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800aae2:	6938      	ldr	r0, [r7, #16]
 800aae4:	f7ff ffd2 	bl	800aa8c <prvTaskCheckFreeStackSpace>
 800aae8:	4603      	mov	r3, r0
 800aaea:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 800aaec:	68fb      	ldr	r3, [r7, #12]
    }
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	200049e0 	.word	0x200049e0

0800aafc <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d108      	bne.n	800ab20 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fd fd36 	bl	8008584 <vPortFree>
                    vPortFree( pxTCB );
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7fd fd33 	bl	8008584 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ab1e:	e018      	b.n	800ab52 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d103      	bne.n	800ab32 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7fd fd2a 	bl	8008584 <vPortFree>
    }
 800ab30:	e00f      	b.n	800ab52 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d00a      	beq.n	800ab52 <prvDeleteTCB+0x56>
        __asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	60fb      	str	r3, [r7, #12]
    }
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <prvDeleteTCB+0x54>
    }
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
	...

0800ab5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <prvResetNextTaskUnblockTime+0x30>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <prvResetNextTaskUnblockTime+0x34>)
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ab72:	e005      	b.n	800ab80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <prvResetNextTaskUnblockTime+0x30>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a04      	ldr	r2, [pc, #16]	; (800ab90 <prvResetNextTaskUnblockTime+0x34>)
 800ab7e:	6013      	str	r3, [r2, #0]
}
 800ab80:	bf00      	nop
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	20004e6c 	.word	0x20004e6c
 800ab90:	20004ed4 	.word	0x20004ed4

0800ab94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800ab9a:	4b0b      	ldr	r3, [pc, #44]	; (800abc8 <xTaskGetSchedulerState+0x34>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d102      	bne.n	800aba8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800aba2:	2301      	movs	r3, #1
 800aba4:	607b      	str	r3, [r7, #4]
 800aba6:	e008      	b.n	800abba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aba8:	4b08      	ldr	r3, [pc, #32]	; (800abcc <xTaskGetSchedulerState+0x38>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d102      	bne.n	800abb6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800abb0:	2302      	movs	r3, #2
 800abb2:	607b      	str	r3, [r7, #4]
 800abb4:	e001      	b.n	800abba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800abb6:	2300      	movs	r3, #0
 800abb8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800abba:	687b      	ldr	r3, [r7, #4]
    }
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	20004ec0 	.word	0x20004ec0
 800abcc:	20004edc 	.word	0x20004edc

0800abd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d05a      	beq.n	800ac9c <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abea:	4b2f      	ldr	r3, [pc, #188]	; (800aca8 <xTaskPriorityInherit+0xd8>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d24a      	bcs.n	800ac8a <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	db06      	blt.n	800ac0a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abfc:	4b2a      	ldr	r3, [pc, #168]	; (800aca8 <xTaskPriorityInherit+0xd8>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6959      	ldr	r1, [r3, #20]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac12:	4613      	mov	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4a24      	ldr	r2, [pc, #144]	; (800acac <xTaskPriorityInherit+0xdc>)
 800ac1c:	4413      	add	r3, r2
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d126      	bne.n	800ac70 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fd fe54 	bl	80088d4 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac2c:	4b1e      	ldr	r3, [pc, #120]	; (800aca8 <xTaskPriorityInherit+0xd8>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f001 ff1f 	bl	800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac42:	4b1b      	ldr	r3, [pc, #108]	; (800acb0 <xTaskPriorityInherit+0xe0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d903      	bls.n	800ac52 <xTaskPriorityInherit+0x82>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	4a18      	ldr	r2, [pc, #96]	; (800acb0 <xTaskPriorityInherit+0xe0>)
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4a13      	ldr	r2, [pc, #76]	; (800acac <xTaskPriorityInherit+0xdc>)
 800ac60:	441a      	add	r2, r3
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	3304      	adds	r3, #4
 800ac66:	4619      	mov	r1, r3
 800ac68:	4610      	mov	r0, r2
 800ac6a:	f7fd fdd6 	bl	800881a <vListInsertEnd>
 800ac6e:	e004      	b.n	800ac7a <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac70:	4b0d      	ldr	r3, [pc, #52]	; (800aca8 <xTaskPriorityInherit+0xd8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	2049      	movs	r0, #73	; 0x49
 800ac80:	f001 f97c 	bl	800bf7c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800ac84:	2301      	movs	r3, #1
 800ac86:	60fb      	str	r3, [r7, #12]
 800ac88:	e008      	b.n	800ac9c <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac8e:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <xTaskPriorityInherit+0xd8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d201      	bcs.n	800ac9c <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
    }
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	200049e0 	.word	0x200049e0
 800acac:	200049e4 	.word	0x200049e4
 800acb0:	20004ebc 	.word	0x20004ebc

0800acb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800acc0:	2300      	movs	r3, #0
 800acc2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d05f      	beq.n	800ad8a <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800acca:	4b32      	ldr	r3, [pc, #200]	; (800ad94 <xTaskPriorityDisinherit+0xe0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d00a      	beq.n	800acea <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	60fb      	str	r3, [r7, #12]
    }
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10a      	bne.n	800ad08 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	60bb      	str	r3, [r7, #8]
    }
 800ad04:	bf00      	nop
 800ad06:	e7fe      	b.n	800ad06 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0c:	1e5a      	subs	r2, r3, #1
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d035      	beq.n	800ad8a <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d131      	bne.n	800ad8a <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	3304      	adds	r3, #4
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fd fdd2 	bl	80088d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4619      	mov	r1, r3
 800ad34:	204a      	movs	r0, #74	; 0x4a
 800ad36:	f001 f921 	bl	800bf7c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 fe93 	bl	800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5a:	4b0f      	ldr	r3, [pc, #60]	; (800ad98 <xTaskPriorityDisinherit+0xe4>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d903      	bls.n	800ad6a <xTaskPriorityDisinherit+0xb6>
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad66:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <xTaskPriorityDisinherit+0xe4>)
 800ad68:	6013      	str	r3, [r2, #0]
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4a09      	ldr	r2, [pc, #36]	; (800ad9c <xTaskPriorityDisinherit+0xe8>)
 800ad78:	441a      	add	r2, r3
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	4619      	mov	r1, r3
 800ad80:	4610      	mov	r0, r2
 800ad82:	f7fd fd4a 	bl	800881a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800ad86:	2301      	movs	r3, #1
 800ad88:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800ad8a:	697b      	ldr	r3, [r7, #20]
    }
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	200049e0 	.word	0x200049e0
 800ad98:	20004ebc 	.word	0x20004ebc
 800ad9c:	200049e4 	.word	0x200049e4

0800ada0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800adae:	2301      	movs	r3, #1
 800adb0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d073      	beq.n	800aea0 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10a      	bne.n	800add6 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	60fb      	str	r3, [r7, #12]
    }
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d902      	bls.n	800ade6 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	61fb      	str	r3, [r7, #28]
 800ade4:	e002      	b.n	800adec <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adea:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d054      	beq.n	800aea0 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d14f      	bne.n	800aea0 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800ae00:	4b29      	ldr	r3, [pc, #164]	; (800aea8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d10a      	bne.n	800ae20 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	60bb      	str	r3, [r7, #8]
    }
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4619      	mov	r1, r3
 800ae24:	204a      	movs	r0, #74	; 0x4a
 800ae26:	f001 f8a9 	bl	800bf7c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	db04      	blt.n	800ae48 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	6959      	ldr	r1, [r3, #20]
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4a15      	ldr	r2, [pc, #84]	; (800aeac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800ae58:	4413      	add	r3, r2
 800ae5a:	4299      	cmp	r1, r3
 800ae5c:	d120      	bne.n	800aea0 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	3304      	adds	r3, #4
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd fd36 	bl	80088d4 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 fe06 	bl	800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae74:	4b0e      	ldr	r3, [pc, #56]	; (800aeb0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d903      	bls.n	800ae84 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae80:	4a0b      	ldr	r2, [pc, #44]	; (800aeb0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ae82:	6013      	str	r3, [r2, #0]
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae88:	4613      	mov	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4a06      	ldr	r2, [pc, #24]	; (800aeac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800ae92:	441a      	add	r2, r3
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	3304      	adds	r3, #4
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4610      	mov	r0, r2
 800ae9c:	f7fd fcbd 	bl	800881a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800aea0:	bf00      	nop
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	200049e0 	.word	0x200049e0
 800aeac:	200049e4 	.word	0x200049e4
 800aeb0:	20004ebc 	.word	0x20004ebc

0800aeb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800aeb8:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aec6:	3201      	adds	r2, #1
 800aec8:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800aeca:	4b03      	ldr	r3, [pc, #12]	; (800aed8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aecc:	681b      	ldr	r3, [r3, #0]
    }
 800aece:	4618      	mov	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	200049e0 	.word	0x200049e0

0800aedc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800aee6:	4b27      	ldr	r3, [pc, #156]	; (800af84 <prvAddCurrentTaskToDelayedList+0xa8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeec:	4b26      	ldr	r3, [pc, #152]	; (800af88 <prvAddCurrentTaskToDelayedList+0xac>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3304      	adds	r3, #4
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fd fcee 	bl	80088d4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aefe:	d10a      	bne.n	800af16 <prvAddCurrentTaskToDelayedList+0x3a>
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af06:	4b20      	ldr	r3, [pc, #128]	; (800af88 <prvAddCurrentTaskToDelayedList+0xac>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4619      	mov	r1, r3
 800af0e:	481f      	ldr	r0, [pc, #124]	; (800af8c <prvAddCurrentTaskToDelayedList+0xb0>)
 800af10:	f7fd fc83 	bl	800881a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800af14:	e032      	b.n	800af7c <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4413      	add	r3, r2
 800af1c:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af1e:	4b1a      	ldr	r3, [pc, #104]	; (800af88 <prvAddCurrentTaskToDelayedList+0xac>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d20f      	bcs.n	800af4e <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800af2e:	4b16      	ldr	r3, [pc, #88]	; (800af88 <prvAddCurrentTaskToDelayedList+0xac>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2104      	movs	r1, #4
 800af34:	4618      	mov	r0, r3
 800af36:	f001 fde3 	bl	800cb00 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	4b12      	ldr	r3, [pc, #72]	; (800af88 <prvAddCurrentTaskToDelayedList+0xac>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3304      	adds	r3, #4
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7fd fc8b 	bl	8008862 <vListInsert>
}
 800af4c:	e016      	b.n	800af7c <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 800af4e:	4b0e      	ldr	r3, [pc, #56]	; (800af88 <prvAddCurrentTaskToDelayedList+0xac>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2104      	movs	r1, #4
 800af54:	4618      	mov	r0, r3
 800af56:	f001 fdd3 	bl	800cb00 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af5a:	4b0e      	ldr	r3, [pc, #56]	; (800af94 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <prvAddCurrentTaskToDelayedList+0xac>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3304      	adds	r3, #4
 800af64:	4619      	mov	r1, r3
 800af66:	4610      	mov	r0, r2
 800af68:	f7fd fc7b 	bl	8008862 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <prvAddCurrentTaskToDelayedList+0xbc>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	429a      	cmp	r2, r3
 800af74:	d202      	bcs.n	800af7c <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800af76:	4a08      	ldr	r2, [pc, #32]	; (800af98 <prvAddCurrentTaskToDelayedList+0xbc>)
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	6013      	str	r3, [r2, #0]
}
 800af7c:	bf00      	nop
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20004eb8 	.word	0x20004eb8
 800af88:	200049e0 	.word	0x200049e0
 800af8c:	20004ea0 	.word	0x20004ea0
 800af90:	20004e70 	.word	0x20004e70
 800af94:	20004e6c 	.word	0x20004e6c
 800af98:	20004ed4 	.word	0x20004ed4

0800af9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08a      	sub	sp, #40	; 0x28
 800afa0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800afa6:	f000 fb63 	bl	800b670 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800afaa:	4b1c      	ldr	r3, [pc, #112]	; (800b01c <xTimerCreateTimerTask+0x80>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d021      	beq.n	800aff6 <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800afb6:	2300      	movs	r3, #0
 800afb8:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afba:	1d3a      	adds	r2, r7, #4
 800afbc:	f107 0108 	add.w	r1, r7, #8
 800afc0:	f107 030c 	add.w	r3, r7, #12
 800afc4:	4618      	mov	r0, r3
 800afc6:	f003 fba1 	bl	800e70c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	9202      	str	r2, [sp, #8]
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	2305      	movs	r3, #5
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	2300      	movs	r3, #0
 800afda:	460a      	mov	r2, r1
 800afdc:	4910      	ldr	r1, [pc, #64]	; (800b020 <xTimerCreateTimerTask+0x84>)
 800afde:	4811      	ldr	r0, [pc, #68]	; (800b024 <xTimerCreateTimerTask+0x88>)
 800afe0:	f7fe fe9e 	bl	8009d20 <xTaskCreateStatic>
 800afe4:	4603      	mov	r3, r0
 800afe6:	4a10      	ldr	r2, [pc, #64]	; (800b028 <xTimerCreateTimerTask+0x8c>)
 800afe8:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800afea:	4b0f      	ldr	r3, [pc, #60]	; (800b028 <xTimerCreateTimerTask+0x8c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800aff2:	2301      	movs	r3, #1
 800aff4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10a      	bne.n	800b012 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	613b      	str	r3, [r7, #16]
    }
 800b00e:	bf00      	nop
 800b010:	e7fe      	b.n	800b010 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800b012:	697b      	ldr	r3, [r7, #20]
    }
 800b014:	4618      	mov	r0, r3
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20004f10 	.word	0x20004f10
 800b020:	08011404 	.word	0x08011404
 800b024:	0800b219 	.word	0x0800b219
 800b028:	20004f14 	.word	0x20004f14

0800b02c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af02      	add	r7, sp, #8
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b03a:	202c      	movs	r0, #44	; 0x2c
 800b03c:	f7fd f9be 	bl	80083bc <pvPortMalloc>
 800b040:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00d      	beq.n	800b064 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	9301      	str	r3, [sp, #4]
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f000 f805 	bl	800b06e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800b064:	697b      	ldr	r3, [r7, #20]
        }
 800b066:	4618      	mov	r0, r3
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800b06e:	b580      	push	{r7, lr}
 800b070:	b086      	sub	sp, #24
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
 800b07a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10a      	bne.n	800b098 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	617b      	str	r3, [r7, #20]
    }
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d01e      	beq.n	800b0dc <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800b09e:	f000 fae7 	bl	800b670 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	683a      	ldr	r2, [r7, #0]
 800b0b2:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	6a3a      	ldr	r2, [r7, #32]
 800b0b8:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fd fb9e 	bl	8008800 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d008      	beq.n	800b0dc <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0d0:	f043 0304 	orr.w	r3, r3, #4
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800b0dc:	bf00      	nop
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	; 0x28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10a      	bne.n	800b112 <xTimerGenericCommand+0x2e>
        __asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	623b      	str	r3, [r7, #32]
    }
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b112:	4b1a      	ldr	r3, [pc, #104]	; (800b17c <xTimerGenericCommand+0x98>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d02a      	beq.n	800b170 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b05      	cmp	r3, #5
 800b12a:	dc18      	bgt.n	800b15e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b12c:	f7ff fd32 	bl	800ab94 <xTaskGetSchedulerState>
 800b130:	4603      	mov	r3, r0
 800b132:	2b02      	cmp	r3, #2
 800b134:	d109      	bne.n	800b14a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b136:	4b11      	ldr	r3, [pc, #68]	; (800b17c <xTimerGenericCommand+0x98>)
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	f107 0110 	add.w	r1, r7, #16
 800b13e:	2300      	movs	r3, #0
 800b140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b142:	f7fe f82f 	bl	80091a4 <xQueueGenericSend>
 800b146:	6278      	str	r0, [r7, #36]	; 0x24
 800b148:	e012      	b.n	800b170 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b14a:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <xTimerGenericCommand+0x98>)
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	f107 0110 	add.w	r1, r7, #16
 800b152:	2300      	movs	r3, #0
 800b154:	2200      	movs	r2, #0
 800b156:	f7fe f825 	bl	80091a4 <xQueueGenericSend>
 800b15a:	6278      	str	r0, [r7, #36]	; 0x24
 800b15c:	e008      	b.n	800b170 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b15e:	4b07      	ldr	r3, [pc, #28]	; (800b17c <xTimerGenericCommand+0x98>)
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f107 0110 	add.w	r1, r7, #16
 800b166:	2300      	movs	r3, #0
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	f7fe f941 	bl	80093f0 <xQueueGenericSendFromISR>
 800b16e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b172:	4618      	mov	r0, r3
 800b174:	3728      	adds	r7, #40	; 0x28
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20004f10 	.word	0x20004f10

0800b180 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af02      	add	r7, sp, #8
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b18a:	4b22      	ldr	r3, [pc, #136]	; (800b214 <prvProcessExpiredTimer+0x94>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	3304      	adds	r3, #4
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fd fb9b 	bl	80088d4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d022      	beq.n	800b1f2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	18d1      	adds	r1, r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	6978      	ldr	r0, [r7, #20]
 800b1ba:	f000 f8d1 	bl	800b360 <prvInsertTimerInActiveList>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d01f      	beq.n	800b204 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	6978      	ldr	r0, [r7, #20]
 800b1d0:	f7ff ff88 	bl	800b0e4 <xTimerGenericCommand>
 800b1d4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d113      	bne.n	800b204 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	60fb      	str	r3, [r7, #12]
    }
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1f8:	f023 0301 	bic.w	r3, r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	6a1b      	ldr	r3, [r3, #32]
 800b208:	6978      	ldr	r0, [r7, #20]
 800b20a:	4798      	blx	r3
    }
 800b20c:	bf00      	nop
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20004f08 	.word	0x20004f08

0800b218 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b220:	f107 0308 	add.w	r3, r7, #8
 800b224:	4618      	mov	r0, r3
 800b226:	f000 f857 	bl	800b2d8 <prvGetNextExpireTime>
 800b22a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	4619      	mov	r1, r3
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 f803 	bl	800b23c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b236:	f000 f8d5 	bl	800b3e4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b23a:	e7f1      	b.n	800b220 <prvTimerTask+0x8>

0800b23c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b246:	f7ff f837 	bl	800a2b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 f866 	bl	800b320 <prvSampleTimeNow>
 800b254:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d130      	bne.n	800b2be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <prvProcessTimerOrBlockTask+0x3c>
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	429a      	cmp	r2, r3
 800b268:	d806      	bhi.n	800b278 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b26a:	f7ff f833 	bl	800a2d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b26e:	68f9      	ldr	r1, [r7, #12]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff ff85 	bl	800b180 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b276:	e024      	b.n	800b2c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d008      	beq.n	800b290 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <prvProcessTimerOrBlockTask+0x90>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <prvProcessTimerOrBlockTask+0x50>
 800b288:	2301      	movs	r3, #1
 800b28a:	e000      	b.n	800b28e <prvProcessTimerOrBlockTask+0x52>
 800b28c:	2300      	movs	r3, #0
 800b28e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b290:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <prvProcessTimerOrBlockTask+0x94>)
 800b292:	6818      	ldr	r0, [r3, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	4619      	mov	r1, r3
 800b29e:	f7fe fd0b 	bl	8009cb8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b2a2:	f7ff f817 	bl	800a2d4 <xTaskResumeAll>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10a      	bne.n	800b2c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b2ac:	4b09      	ldr	r3, [pc, #36]	; (800b2d4 <prvProcessTimerOrBlockTask+0x98>)
 800b2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	f3bf 8f6f 	isb	sy
    }
 800b2bc:	e001      	b.n	800b2c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b2be:	f7ff f809 	bl	800a2d4 <xTaskResumeAll>
    }
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20004f0c 	.word	0x20004f0c
 800b2d0:	20004f10 	.word	0x20004f10
 800b2d4:	e000ed04 	.word	0xe000ed04

0800b2d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b2e0:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <prvGetNextExpireTime+0x44>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <prvGetNextExpireTime+0x16>
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	e000      	b.n	800b2f0 <prvGetNextExpireTime+0x18>
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d105      	bne.n	800b308 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2fc:	4b07      	ldr	r3, [pc, #28]	; (800b31c <prvGetNextExpireTime+0x44>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	e001      	b.n	800b30c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b308:	2300      	movs	r3, #0
 800b30a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b30c:	68fb      	ldr	r3, [r7, #12]
    }
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20004f08 	.word	0x20004f08

0800b320 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b328:	f7ff f876 	bl	800a418 <xTaskGetTickCount>
 800b32c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b32e:	4b0b      	ldr	r3, [pc, #44]	; (800b35c <prvSampleTimeNow+0x3c>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	429a      	cmp	r2, r3
 800b336:	d205      	bcs.n	800b344 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b338:	f000 f936 	bl	800b5a8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	e002      	b.n	800b34a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b34a:	4a04      	ldr	r2, [pc, #16]	; (800b35c <prvSampleTimeNow+0x3c>)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b350:	68fb      	ldr	r3, [r7, #12]
    }
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20004f18 	.word	0x20004f18

0800b360 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	429a      	cmp	r2, r3
 800b384:	d812      	bhi.n	800b3ac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	1ad2      	subs	r2, r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	429a      	cmp	r2, r3
 800b392:	d302      	bcc.n	800b39a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b394:	2301      	movs	r3, #1
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e01b      	b.n	800b3d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b39a:	4b10      	ldr	r3, [pc, #64]	; (800b3dc <prvInsertTimerInActiveList+0x7c>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	f7fd fa5c 	bl	8008862 <vListInsert>
 800b3aa:	e012      	b.n	800b3d2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d206      	bcs.n	800b3c2 <prvInsertTimerInActiveList+0x62>
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d302      	bcc.n	800b3c2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	e007      	b.n	800b3d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3c2:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <prvInsertTimerInActiveList+0x80>)
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f7fd fa48 	bl	8008862 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b3d2:	697b      	ldr	r3, [r7, #20]
    }
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20004f0c 	.word	0x20004f0c
 800b3e0:	20004f08 	.word	0x20004f08

0800b3e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08e      	sub	sp, #56	; 0x38
 800b3e8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3ea:	e0ca      	b.n	800b582 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	da18      	bge.n	800b424 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b3f2:	1d3b      	adds	r3, r7, #4
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <prvProcessReceivedCommands+0x30>
        __asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	61fb      	str	r3, [r7, #28]
    }
 800b410:	bf00      	nop
 800b412:	e7fe      	b.n	800b412 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b41a:	6850      	ldr	r0, [r2, #4]
 800b41c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b41e:	6892      	ldr	r2, [r2, #8]
 800b420:	4611      	mov	r1, r2
 800b422:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f2c0 80aa 	blt.w	800b580 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	3304      	adds	r3, #4
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fd fa49 	bl	80088d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b442:	463b      	mov	r3, r7
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff ff6b 	bl	800b320 <prvSampleTimeNow>
 800b44a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b09      	cmp	r3, #9
 800b450:	f200 8097 	bhi.w	800b582 <prvProcessReceivedCommands+0x19e>
 800b454:	a201      	add	r2, pc, #4	; (adr r2, 800b45c <prvProcessReceivedCommands+0x78>)
 800b456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45a:	bf00      	nop
 800b45c:	0800b485 	.word	0x0800b485
 800b460:	0800b485 	.word	0x0800b485
 800b464:	0800b485 	.word	0x0800b485
 800b468:	0800b4f9 	.word	0x0800b4f9
 800b46c:	0800b50d 	.word	0x0800b50d
 800b470:	0800b557 	.word	0x0800b557
 800b474:	0800b485 	.word	0x0800b485
 800b478:	0800b485 	.word	0x0800b485
 800b47c:	0800b4f9 	.word	0x0800b4f9
 800b480:	0800b50d 	.word	0x0800b50d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b48a:	f043 0301 	orr.w	r3, r3, #1
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	18d1      	adds	r1, r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4a4:	f7ff ff5c 	bl	800b360 <prvInsertTimerInActiveList>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d069      	beq.n	800b582 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4b4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d05e      	beq.n	800b582 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	441a      	add	r2, r3
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4d6:	f7ff fe05 	bl	800b0e4 <xTimerGenericCommand>
 800b4da:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d14f      	bne.n	800b582 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	61bb      	str	r3, [r7, #24]
    }
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4fe:	f023 0301 	bic.w	r3, r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800b50a:	e03a      	b.n	800b582 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b512:	f043 0301 	orr.w	r3, r3, #1
 800b516:	b2da      	uxtb	r2, r3
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b522:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	617b      	str	r3, [r7, #20]
    }
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b544:	699a      	ldr	r2, [r3, #24]
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	18d1      	adds	r1, r2, r3
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b54e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b550:	f7ff ff06 	bl	800b360 <prvInsertTimerInActiveList>
                        break;
 800b554:	e015      	b.n	800b582 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b55c:	f003 0302 	and.w	r3, r3, #2
 800b560:	2b00      	cmp	r3, #0
 800b562:	d103      	bne.n	800b56c <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 800b564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b566:	f7fd f80d 	bl	8008584 <vPortFree>
 800b56a:	e00a      	b.n	800b582 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b572:	f023 0301 	bic.w	r3, r3, #1
 800b576:	b2da      	uxtb	r2, r3
 800b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b57e:	e000      	b.n	800b582 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800b580:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b582:	4b08      	ldr	r3, [pc, #32]	; (800b5a4 <prvProcessReceivedCommands+0x1c0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	1d39      	adds	r1, r7, #4
 800b588:	2200      	movs	r2, #0
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fd ffee 	bl	800956c <xQueueReceive>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	f47f af2a 	bne.w	800b3ec <prvProcessReceivedCommands+0x8>
        }
    }
 800b598:	bf00      	nop
 800b59a:	bf00      	nop
 800b59c:	3730      	adds	r7, #48	; 0x30
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20004f10 	.word	0x20004f10

0800b5a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5ae:	e048      	b.n	800b642 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5b0:	4b2d      	ldr	r3, [pc, #180]	; (800b668 <prvSwitchTimerLists+0xc0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ba:	4b2b      	ldr	r3, [pc, #172]	; (800b668 <prvSwitchTimerLists+0xc0>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fd f983 	bl	80088d4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5dc:	f003 0304 	and.w	r3, r3, #4
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d02e      	beq.n	800b642 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d90e      	bls.n	800b614 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b602:	4b19      	ldr	r3, [pc, #100]	; (800b668 <prvSwitchTimerLists+0xc0>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3304      	adds	r3, #4
 800b60a:	4619      	mov	r1, r3
 800b60c:	4610      	mov	r0, r2
 800b60e:	f7fd f928 	bl	8008862 <vListInsert>
 800b612:	e016      	b.n	800b642 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b614:	2300      	movs	r3, #0
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	2300      	movs	r3, #0
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	2100      	movs	r1, #0
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7ff fd60 	bl	800b0e4 <xTimerGenericCommand>
 800b624:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	603b      	str	r3, [r7, #0]
    }
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b642:	4b09      	ldr	r3, [pc, #36]	; (800b668 <prvSwitchTimerLists+0xc0>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1b1      	bne.n	800b5b0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <prvSwitchTimerLists+0xc0>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800b652:	4b06      	ldr	r3, [pc, #24]	; (800b66c <prvSwitchTimerLists+0xc4>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a04      	ldr	r2, [pc, #16]	; (800b668 <prvSwitchTimerLists+0xc0>)
 800b658:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b65a:	4a04      	ldr	r2, [pc, #16]	; (800b66c <prvSwitchTimerLists+0xc4>)
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	6013      	str	r3, [r2, #0]
    }
 800b660:	bf00      	nop
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	20004f08 	.word	0x20004f08
 800b66c:	20004f0c 	.word	0x20004f0c

0800b670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b676:	f7fd fa87 	bl	8008b88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b67a:	4b15      	ldr	r3, [pc, #84]	; (800b6d0 <prvCheckForValidListAndQueue+0x60>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d120      	bne.n	800b6c4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800b682:	4814      	ldr	r0, [pc, #80]	; (800b6d4 <prvCheckForValidListAndQueue+0x64>)
 800b684:	f7fd f89c 	bl	80087c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b688:	4813      	ldr	r0, [pc, #76]	; (800b6d8 <prvCheckForValidListAndQueue+0x68>)
 800b68a:	f7fd f899 	bl	80087c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b68e:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <prvCheckForValidListAndQueue+0x6c>)
 800b690:	4a10      	ldr	r2, [pc, #64]	; (800b6d4 <prvCheckForValidListAndQueue+0x64>)
 800b692:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b694:	4b12      	ldr	r3, [pc, #72]	; (800b6e0 <prvCheckForValidListAndQueue+0x70>)
 800b696:	4a10      	ldr	r2, [pc, #64]	; (800b6d8 <prvCheckForValidListAndQueue+0x68>)
 800b698:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b69a:	2300      	movs	r3, #0
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <prvCheckForValidListAndQueue+0x74>)
 800b6a0:	4a11      	ldr	r2, [pc, #68]	; (800b6e8 <prvCheckForValidListAndQueue+0x78>)
 800b6a2:	2110      	movs	r1, #16
 800b6a4:	200a      	movs	r0, #10
 800b6a6:	f7fd fc47 	bl	8008f38 <xQueueGenericCreateStatic>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	4a08      	ldr	r2, [pc, #32]	; (800b6d0 <prvCheckForValidListAndQueue+0x60>)
 800b6ae:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800b6b0:	4b07      	ldr	r3, [pc, #28]	; (800b6d0 <prvCheckForValidListAndQueue+0x60>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d005      	beq.n	800b6c4 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <prvCheckForValidListAndQueue+0x60>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	490b      	ldr	r1, [pc, #44]	; (800b6ec <prvCheckForValidListAndQueue+0x7c>)
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fac8 	bl	8009c54 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b6c4:	f7fd fa90 	bl	8008be8 <vPortExitCritical>
    }
 800b6c8:	bf00      	nop
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20004f10 	.word	0x20004f10
 800b6d4:	20004ee0 	.word	0x20004ee0
 800b6d8:	20004ef4 	.word	0x20004ef4
 800b6dc:	20004f08 	.word	0x20004f08
 800b6e0:	20004f0c 	.word	0x20004f0c
 800b6e4:	20004fbc 	.word	0x20004fbc
 800b6e8:	20004f1c 	.word	0x20004f1c
 800b6ec:	0801140c 	.word	0x0801140c

0800b6f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b6f6:	4b24      	ldr	r3, [pc, #144]	; (800b788 <_DoInit+0x98>)
 800b6f8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2203      	movs	r2, #3
 800b704:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a20      	ldr	r2, [pc, #128]	; (800b78c <_DoInit+0x9c>)
 800b70a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a20      	ldr	r2, [pc, #128]	; (800b790 <_DoInit+0xa0>)
 800b710:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b718:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a17      	ldr	r2, [pc, #92]	; (800b78c <_DoInit+0x9c>)
 800b730:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a17      	ldr	r2, [pc, #92]	; (800b794 <_DoInit+0xa4>)
 800b736:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2210      	movs	r2, #16
 800b73c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3307      	adds	r3, #7
 800b754:	4a10      	ldr	r2, [pc, #64]	; (800b798 <_DoInit+0xa8>)
 800b756:	6810      	ldr	r0, [r2, #0]
 800b758:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b75a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a0e      	ldr	r2, [pc, #56]	; (800b79c <_DoInit+0xac>)
 800b762:	6810      	ldr	r0, [r2, #0]
 800b764:	6018      	str	r0, [r3, #0]
 800b766:	8891      	ldrh	r1, [r2, #4]
 800b768:	7992      	ldrb	r2, [r2, #6]
 800b76a:	8099      	strh	r1, [r3, #4]
 800b76c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b76e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2220      	movs	r2, #32
 800b776:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b778:	f3bf 8f5f 	dmb	sy
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	2000500c 	.word	0x2000500c
 800b78c:	08011414 	.word	0x08011414
 800b790:	200050b4 	.word	0x200050b4
 800b794:	200060b4 	.word	0x200060b4
 800b798:	08011420 	.word	0x08011420
 800b79c:	08011424 	.word	0x08011424

0800b7a0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08c      	sub	sp, #48	; 0x30
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b7ac:	4b3e      	ldr	r3, [pc, #248]	; (800b8a8 <SEGGER_RTT_ReadNoLock+0x108>)
 800b7ae:	623b      	str	r3, [r7, #32]
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <SEGGER_RTT_ReadNoLock+0x1e>
 800b7ba:	f7ff ff99 	bl	800b6f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	4413      	add	r3, r2
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	3360      	adds	r3, #96	; 0x60
 800b7ca:	4a37      	ldr	r2, [pc, #220]	; (800b8a8 <SEGGER_RTT_ReadNoLock+0x108>)
 800b7cc:	4413      	add	r3, r2
 800b7ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d92b      	bls.n	800b844 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	689a      	ldr	r2, [r3, #8]
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	bf28      	it	cs
 800b7fe:	4613      	movcs	r3, r2
 800b800:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	685a      	ldr	r2, [r3, #4]
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	4413      	add	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	6939      	ldr	r1, [r7, #16]
 800b810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b812:	f005 f91d 	bl	8010a50 <memcpy>
    NumBytesRead += NumBytesRem;
 800b816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	4413      	add	r3, r2
 800b81c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	4413      	add	r3, r2
 800b824:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	4413      	add	r3, r2
 800b834:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d101      	bne.n	800b844 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b840:	2300      	movs	r3, #0
 800b842:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b844:	69ba      	ldr	r2, [r7, #24]
 800b846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4293      	cmp	r3, r2
 800b852:	bf28      	it	cs
 800b854:	4613      	movcs	r3, r2
 800b856:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d019      	beq.n	800b892 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	4413      	add	r3, r2
 800b866:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	6939      	ldr	r1, [r7, #16]
 800b86c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b86e:	f005 f8ef 	bl	8010a50 <memcpy>
    NumBytesRead += NumBytesRem;
 800b872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	4413      	add	r3, r2
 800b878:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	4413      	add	r3, r2
 800b880:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	4413      	add	r3, r2
 800b890:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3730      	adds	r7, #48	; 0x30
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	2000500c 	.word	0x2000500c

0800b8ac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b8ba:	4b3d      	ldr	r3, [pc, #244]	; (800b9b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b8bc:	61bb      	str	r3, [r7, #24]
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <SEGGER_RTT_AllocUpBuffer+0x20>
 800b8c8:	f7ff ff12 	bl	800b6f0 <_DoInit>
  SEGGER_RTT_LOCK();
 800b8cc:	f3ef 8311 	mrs	r3, BASEPRI
 800b8d0:	f04f 0120 	mov.w	r1, #32
 800b8d4:	f381 8811 	msr	BASEPRI, r1
 800b8d8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b8da:	4b35      	ldr	r3, [pc, #212]	; (800b9b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b8dc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800b8e2:	6939      	ldr	r1, [r7, #16]
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	4413      	add	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	440b      	add	r3, r1
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d008      	beq.n	800b90c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	429a      	cmp	r2, r3
 800b908:	dbeb      	blt.n	800b8e2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800b90a:	e000      	b.n	800b90e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800b90c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	429a      	cmp	r2, r3
 800b916:	da3f      	bge.n	800b998 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800b918:	6939      	ldr	r1, [r7, #16]
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	4613      	mov	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4413      	add	r3, r2
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	440b      	add	r3, r1
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b92c:	6939      	ldr	r1, [r7, #16]
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	4613      	mov	r3, r2
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	4413      	add	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	440b      	add	r3, r1
 800b93c:	3304      	adds	r3, #4
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b942:	6939      	ldr	r1, [r7, #16]
 800b944:	69fa      	ldr	r2, [r7, #28]
 800b946:	4613      	mov	r3, r2
 800b948:	005b      	lsls	r3, r3, #1
 800b94a:	4413      	add	r3, r2
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	440b      	add	r3, r1
 800b950:	3320      	adds	r3, #32
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800b956:	6939      	ldr	r1, [r7, #16]
 800b958:	69fa      	ldr	r2, [r7, #28]
 800b95a:	4613      	mov	r3, r2
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	4413      	add	r3, r2
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	440b      	add	r3, r1
 800b964:	3328      	adds	r3, #40	; 0x28
 800b966:	2200      	movs	r2, #0
 800b968:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800b96a:	6939      	ldr	r1, [r7, #16]
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	4613      	mov	r3, r2
 800b970:	005b      	lsls	r3, r3, #1
 800b972:	4413      	add	r3, r2
 800b974:	00db      	lsls	r3, r3, #3
 800b976:	440b      	add	r3, r1
 800b978:	3324      	adds	r3, #36	; 0x24
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800b97e:	6939      	ldr	r1, [r7, #16]
 800b980:	69fa      	ldr	r2, [r7, #28]
 800b982:	4613      	mov	r3, r2
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	4413      	add	r3, r2
 800b988:	00db      	lsls	r3, r3, #3
 800b98a:	440b      	add	r3, r1
 800b98c:	332c      	adds	r3, #44	; 0x2c
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b992:	f3bf 8f5f 	dmb	sy
 800b996:	e002      	b.n	800b99e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800b998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b99c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800b9a4:	69fb      	ldr	r3, [r7, #28]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3720      	adds	r7, #32
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	2000500c 	.word	0x2000500c

0800b9b4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08a      	sub	sp, #40	; 0x28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800b9c2:	4b21      	ldr	r3, [pc, #132]	; (800ba48 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b9c4:	623b      	str	r3, [r7, #32]
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800b9d0:	f7ff fe8e 	bl	800b6f0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b9d4:	4b1c      	ldr	r3, [pc, #112]	; (800ba48 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b9d6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d82c      	bhi.n	800ba38 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800b9de:	f3ef 8311 	mrs	r3, BASEPRI
 800b9e2:	f04f 0120 	mov.w	r1, #32
 800b9e6:	f381 8811 	msr	BASEPRI, r1
 800b9ea:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	4413      	add	r3, r2
 800b9f4:	00db      	lsls	r3, r3, #3
 800b9f6:	3360      	adds	r3, #96	; 0x60
 800b9f8:	69fa      	ldr	r2, [r7, #28]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00e      	beq.n	800ba22 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba26:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ba28:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	627b      	str	r3, [r7, #36]	; 0x24
 800ba36:	e002      	b.n	800ba3e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800ba38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3728      	adds	r7, #40	; 0x28
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	2000500c 	.word	0x2000500c

0800ba4c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00f      	beq.n	800ba82 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800ba62:	e002      	b.n	800ba6a <_EncodeStr+0x1e>
      Len++;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	3301      	adds	r3, #1
 800ba68:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	4413      	add	r3, r2
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1f6      	bne.n	800ba64 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d901      	bls.n	800ba82 <_EncodeStr+0x36>
      Len = Limit;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2bfe      	cmp	r3, #254	; 0xfe
 800ba86:	d806      	bhi.n	800ba96 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	60fa      	str	r2, [r7, #12]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	b2d2      	uxtb	r2, r2
 800ba92:	701a      	strb	r2, [r3, #0]
 800ba94:	e011      	b.n	800baba <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	60fa      	str	r2, [r7, #12]
 800ba9c:	22ff      	movs	r2, #255	; 0xff
 800ba9e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	60fa      	str	r2, [r7, #12]
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	b2d2      	uxtb	r2, r2
 800baaa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	0a19      	lsrs	r1, r3, #8
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	60fa      	str	r2, [r7, #12]
 800bab6:	b2ca      	uxtb	r2, r1
 800bab8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800babe:	e00a      	b.n	800bad6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	1c53      	adds	r3, r2, #1
 800bac4:	60bb      	str	r3, [r7, #8]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	1c59      	adds	r1, r3, #1
 800baca:	60f9      	str	r1, [r7, #12]
 800bacc:	7812      	ldrb	r2, [r2, #0]
 800bace:	701a      	strb	r2, [r3, #0]
    n++;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	3301      	adds	r3, #1
 800bad4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	429a      	cmp	r2, r3
 800badc:	d3f0      	bcc.n	800bac0 <_EncodeStr+0x74>
  }
  return pPayload;
 800bade:	68fb      	ldr	r3, [r7, #12]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	371c      	adds	r7, #28
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3304      	adds	r3, #4
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bb0a:	4b36      	ldr	r3, [pc, #216]	; (800bbe4 <_HandleIncomingPacket+0xe0>)
 800bb0c:	7e1b      	ldrb	r3, [r3, #24]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	1cfb      	adds	r3, r7, #3
 800bb12:	2201      	movs	r2, #1
 800bb14:	4619      	mov	r1, r3
 800bb16:	f7ff fe43 	bl	800b7a0 <SEGGER_RTT_ReadNoLock>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	dd54      	ble.n	800bbce <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	2b80      	cmp	r3, #128	; 0x80
 800bb28:	d032      	beq.n	800bb90 <_HandleIncomingPacket+0x8c>
 800bb2a:	2b80      	cmp	r3, #128	; 0x80
 800bb2c:	dc42      	bgt.n	800bbb4 <_HandleIncomingPacket+0xb0>
 800bb2e:	2b07      	cmp	r3, #7
 800bb30:	dc16      	bgt.n	800bb60 <_HandleIncomingPacket+0x5c>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	dd3e      	ble.n	800bbb4 <_HandleIncomingPacket+0xb0>
 800bb36:	3b01      	subs	r3, #1
 800bb38:	2b06      	cmp	r3, #6
 800bb3a:	d83b      	bhi.n	800bbb4 <_HandleIncomingPacket+0xb0>
 800bb3c:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <_HandleIncomingPacket+0x40>)
 800bb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb42:	bf00      	nop
 800bb44:	0800bb67 	.word	0x0800bb67
 800bb48:	0800bb6d 	.word	0x0800bb6d
 800bb4c:	0800bb73 	.word	0x0800bb73
 800bb50:	0800bb79 	.word	0x0800bb79
 800bb54:	0800bb7f 	.word	0x0800bb7f
 800bb58:	0800bb85 	.word	0x0800bb85
 800bb5c:	0800bb8b 	.word	0x0800bb8b
 800bb60:	2b7f      	cmp	r3, #127	; 0x7f
 800bb62:	d036      	beq.n	800bbd2 <_HandleIncomingPacket+0xce>
 800bb64:	e026      	b.n	800bbb4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800bb66:	f000 fba7 	bl	800c2b8 <SEGGER_SYSVIEW_Start>
      break;
 800bb6a:	e037      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800bb6c:	f000 fc5e 	bl	800c42c <SEGGER_SYSVIEW_Stop>
      break;
 800bb70:	e034      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800bb72:	f000 fe37 	bl	800c7e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800bb76:	e031      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800bb78:	f000 fdfc 	bl	800c774 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800bb7c:	e02e      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800bb7e:	f000 fc7b 	bl	800c478 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800bb82:	e02b      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800bb84:	f001 f8ca 	bl	800cd1c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800bb88:	e028      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800bb8a:	f001 f8a9 	bl	800cce0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800bb8e:	e025      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bb90:	4b14      	ldr	r3, [pc, #80]	; (800bbe4 <_HandleIncomingPacket+0xe0>)
 800bb92:	7e1b      	ldrb	r3, [r3, #24]
 800bb94:	4618      	mov	r0, r3
 800bb96:	1cfb      	adds	r3, r7, #3
 800bb98:	2201      	movs	r2, #1
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	f7ff fe00 	bl	800b7a0 <SEGGER_RTT_ReadNoLock>
 800bba0:	4603      	mov	r3, r0
 800bba2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dd15      	ble.n	800bbd6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 f817 	bl	800cbe0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800bbb2:	e010      	b.n	800bbd6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	b25b      	sxtb	r3, r3
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	da0e      	bge.n	800bbda <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bbbc:	4b09      	ldr	r3, [pc, #36]	; (800bbe4 <_HandleIncomingPacket+0xe0>)
 800bbbe:	7e1b      	ldrb	r3, [r3, #24]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	1cfb      	adds	r3, r7, #3
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	f7ff fdea 	bl	800b7a0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800bbcc:	e005      	b.n	800bbda <_HandleIncomingPacket+0xd6>
    }
  }
 800bbce:	bf00      	nop
 800bbd0:	e004      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
      break;
 800bbd2:	bf00      	nop
 800bbd4:	e002      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
      break;
 800bbd6:	bf00      	nop
 800bbd8:	e000      	b.n	800bbdc <_HandleIncomingPacket+0xd8>
      break;
 800bbda:	bf00      	nop
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	200064cc 	.word	0x200064cc

0800bbe8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08c      	sub	sp, #48	; 0x30
 800bbec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800bbee:	2301      	movs	r3, #1
 800bbf0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800bbf2:	1d3b      	adds	r3, r7, #4
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbfc:	4b31      	ldr	r3, [pc, #196]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc02:	e00b      	b.n	800bc1c <_TrySendOverflowPacket+0x34>
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	1c59      	adds	r1, r3, #1
 800bc0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bc0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc12:	b2d2      	uxtb	r2, r2
 800bc14:	701a      	strb	r2, [r3, #0]
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	09db      	lsrs	r3, r3, #7
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1e:	2b7f      	cmp	r3, #127	; 0x7f
 800bc20:	d8f0      	bhi.n	800bc04 <_TrySendOverflowPacket+0x1c>
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	1c5a      	adds	r2, r3, #1
 800bc26:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc2a:	b2d2      	uxtb	r2, r2
 800bc2c:	701a      	strb	r2, [r3, #0]
 800bc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc30:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bc32:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <_TrySendOverflowPacket+0xe0>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bc38:	4b22      	ldr	r3, [pc, #136]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	69ba      	ldr	r2, [r7, #24]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	627b      	str	r3, [r7, #36]	; 0x24
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	623b      	str	r3, [r7, #32]
 800bc4a:	e00b      	b.n	800bc64 <_TrySendOverflowPacket+0x7c>
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	1c59      	adds	r1, r3, #1
 800bc54:	6279      	str	r1, [r7, #36]	; 0x24
 800bc56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	701a      	strb	r2, [r3, #0]
 800bc5e:	6a3b      	ldr	r3, [r7, #32]
 800bc60:	09db      	lsrs	r3, r3, #7
 800bc62:	623b      	str	r3, [r7, #32]
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	2b7f      	cmp	r3, #127	; 0x7f
 800bc68:	d8f0      	bhi.n	800bc4c <_TrySendOverflowPacket+0x64>
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	627a      	str	r2, [r7, #36]	; 0x24
 800bc70:	6a3a      	ldr	r2, [r7, #32]
 800bc72:	b2d2      	uxtb	r2, r2
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800bc7a:	4b12      	ldr	r3, [pc, #72]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bc7c:	785b      	ldrb	r3, [r3, #1]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	1d3b      	adds	r3, r7, #4
 800bc82:	69fa      	ldr	r2, [r7, #28]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	461a      	mov	r2, r3
 800bc88:	1d3b      	adds	r3, r7, #4
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	f7f4 fab0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bc90:	4603      	mov	r3, r0
 800bc92:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d009      	beq.n	800bcae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bc9a:	4a0a      	ldr	r2, [pc, #40]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800bca0:	4b08      	ldr	r3, [pc, #32]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	e004      	b.n	800bcb8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800bcae:	4b05      	ldr	r3, [pc, #20]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	4a03      	ldr	r2, [pc, #12]	; (800bcc4 <_TrySendOverflowPacket+0xdc>)
 800bcb6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800bcb8:	693b      	ldr	r3, [r7, #16]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3730      	adds	r7, #48	; 0x30
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	200064cc 	.word	0x200064cc
 800bcc8:	e0001004 	.word	0xe0001004

0800bccc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08a      	sub	sp, #40	; 0x28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800bcd8:	4b6c      	ldr	r3, [pc, #432]	; (800be8c <_SendPacket+0x1c0>)
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d010      	beq.n	800bd02 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800bce0:	4b6a      	ldr	r3, [pc, #424]	; (800be8c <_SendPacket+0x1c0>)
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 80a3 	beq.w	800be30 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800bcea:	4b68      	ldr	r3, [pc, #416]	; (800be8c <_SendPacket+0x1c0>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d109      	bne.n	800bd06 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800bcf2:	f7ff ff79 	bl	800bbe8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800bcf6:	4b65      	ldr	r3, [pc, #404]	; (800be8c <_SendPacket+0x1c0>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	f040 809a 	bne.w	800be34 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800bd00:	e001      	b.n	800bd06 <_SendPacket+0x3a>
    goto Send;
 800bd02:	bf00      	nop
 800bd04:	e000      	b.n	800bd08 <_SendPacket+0x3c>
Send:
 800bd06:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b1f      	cmp	r3, #31
 800bd0c:	d809      	bhi.n	800bd22 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800bd0e:	4b5f      	ldr	r3, [pc, #380]	; (800be8c <_SendPacket+0x1c0>)
 800bd10:	69da      	ldr	r2, [r3, #28]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	fa22 f303 	lsr.w	r3, r2, r3
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f040 808b 	bne.w	800be38 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b17      	cmp	r3, #23
 800bd26:	d807      	bhi.n	800bd38 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	701a      	strb	r2, [r3, #0]
 800bd36:	e03d      	b.n	800bdb4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	2b7f      	cmp	r3, #127	; 0x7f
 800bd44:	d912      	bls.n	800bd6c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	09da      	lsrs	r2, r3, #7
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	b2d2      	uxtb	r2, r2
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	3a01      	subs	r2, #1
 800bd5e:	60fa      	str	r2, [r7, #12]
 800bd60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	701a      	strb	r2, [r3, #0]
 800bd6a:	e006      	b.n	800bd7a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	60fb      	str	r3, [r7, #12]
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b7f      	cmp	r3, #127	; 0x7f
 800bd7e:	d912      	bls.n	800bda6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	09da      	lsrs	r2, r3, #7
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	b2d2      	uxtb	r2, r2
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	3a01      	subs	r2, #1
 800bd98:	60fa      	str	r2, [r7, #12]
 800bd9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	e006      	b.n	800bdb4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	60fb      	str	r3, [r7, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bdb4:	4b36      	ldr	r3, [pc, #216]	; (800be90 <_SendPacket+0x1c4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bdba:	4b34      	ldr	r3, [pc, #208]	; (800be8c <_SendPacket+0x1c0>)
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	69ba      	ldr	r2, [r7, #24]
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	623b      	str	r3, [r7, #32]
 800bdcc:	e00b      	b.n	800bde6 <_SendPacket+0x11a>
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	1c59      	adds	r1, r3, #1
 800bdd6:	6279      	str	r1, [r7, #36]	; 0x24
 800bdd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	09db      	lsrs	r3, r3, #7
 800bde4:	623b      	str	r3, [r7, #32]
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	2b7f      	cmp	r3, #127	; 0x7f
 800bdea:	d8f0      	bhi.n	800bdce <_SendPacket+0x102>
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	627a      	str	r2, [r7, #36]	; 0x24
 800bdf2:	6a3a      	ldr	r2, [r7, #32]
 800bdf4:	b2d2      	uxtb	r2, r2
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800bdfc:	4b23      	ldr	r3, [pc, #140]	; (800be8c <_SendPacket+0x1c0>)
 800bdfe:	785b      	ldrb	r3, [r3, #1]
 800be00:	4618      	mov	r0, r3
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	461a      	mov	r2, r3
 800be0a:	68f9      	ldr	r1, [r7, #12]
 800be0c:	f7f4 f9f0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800be10:	4603      	mov	r3, r0
 800be12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800be1a:	4a1c      	ldr	r2, [pc, #112]	; (800be8c <_SendPacket+0x1c0>)
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	60d3      	str	r3, [r2, #12]
 800be20:	e00b      	b.n	800be3a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800be22:	4b1a      	ldr	r3, [pc, #104]	; (800be8c <_SendPacket+0x1c0>)
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	3301      	adds	r3, #1
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	4b18      	ldr	r3, [pc, #96]	; (800be8c <_SendPacket+0x1c0>)
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	e004      	b.n	800be3a <_SendPacket+0x16e>
    goto SendDone;
 800be30:	bf00      	nop
 800be32:	e002      	b.n	800be3a <_SendPacket+0x16e>
      goto SendDone;
 800be34:	bf00      	nop
 800be36:	e000      	b.n	800be3a <_SendPacket+0x16e>
      goto SendDone;
 800be38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800be3a:	4b14      	ldr	r3, [pc, #80]	; (800be8c <_SendPacket+0x1c0>)
 800be3c:	7e1b      	ldrb	r3, [r3, #24]
 800be3e:	4619      	mov	r1, r3
 800be40:	4a14      	ldr	r2, [pc, #80]	; (800be94 <_SendPacket+0x1c8>)
 800be42:	460b      	mov	r3, r1
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	440b      	add	r3, r1
 800be48:	00db      	lsls	r3, r3, #3
 800be4a:	4413      	add	r3, r2
 800be4c:	336c      	adds	r3, #108	; 0x6c
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <_SendPacket+0x1c0>)
 800be52:	7e1b      	ldrb	r3, [r3, #24]
 800be54:	4618      	mov	r0, r3
 800be56:	490f      	ldr	r1, [pc, #60]	; (800be94 <_SendPacket+0x1c8>)
 800be58:	4603      	mov	r3, r0
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	4403      	add	r3, r0
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	440b      	add	r3, r1
 800be62:	3370      	adds	r3, #112	; 0x70
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d00b      	beq.n	800be82 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800be6a:	4b08      	ldr	r3, [pc, #32]	; (800be8c <_SendPacket+0x1c0>)
 800be6c:	789b      	ldrb	r3, [r3, #2]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d107      	bne.n	800be82 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800be72:	4b06      	ldr	r3, [pc, #24]	; (800be8c <_SendPacket+0x1c0>)
 800be74:	2201      	movs	r2, #1
 800be76:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800be78:	f7ff fe44 	bl	800bb04 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800be7c:	4b03      	ldr	r3, [pc, #12]	; (800be8c <_SendPacket+0x1c0>)
 800be7e:	2200      	movs	r2, #0
 800be80:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800be82:	bf00      	nop
 800be84:	3728      	adds	r7, #40	; 0x28
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	200064cc 	.word	0x200064cc
 800be90:	e0001004 	.word	0xe0001004
 800be94:	2000500c 	.word	0x2000500c

0800be98 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800bea6:	2300      	movs	r3, #0
 800bea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800beac:	4917      	ldr	r1, [pc, #92]	; (800bf0c <SEGGER_SYSVIEW_Init+0x74>)
 800beae:	4818      	ldr	r0, [pc, #96]	; (800bf10 <SEGGER_SYSVIEW_Init+0x78>)
 800beb0:	f7ff fcfc 	bl	800b8ac <SEGGER_RTT_AllocUpBuffer>
 800beb4:	4603      	mov	r3, r0
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	4b16      	ldr	r3, [pc, #88]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800beba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800bebc:	4b15      	ldr	r3, [pc, #84]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800bebe:	785a      	ldrb	r2, [r3, #1]
 800bec0:	4b14      	ldr	r3, [pc, #80]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800bec2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800bec4:	4b13      	ldr	r3, [pc, #76]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800bec6:	7e1b      	ldrb	r3, [r3, #24]
 800bec8:	4618      	mov	r0, r3
 800beca:	2300      	movs	r3, #0
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	2308      	movs	r3, #8
 800bed0:	4a11      	ldr	r2, [pc, #68]	; (800bf18 <SEGGER_SYSVIEW_Init+0x80>)
 800bed2:	490f      	ldr	r1, [pc, #60]	; (800bf10 <SEGGER_SYSVIEW_Init+0x78>)
 800bed4:	f7ff fd6e 	bl	800b9b4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800bed8:	4b0e      	ldr	r3, [pc, #56]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800beda:	2200      	movs	r2, #0
 800bedc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bede:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <SEGGER_SYSVIEW_Init+0x84>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a0c      	ldr	r2, [pc, #48]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800bee4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800bee6:	4a0b      	ldr	r2, [pc, #44]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800beec:	4a09      	ldr	r2, [pc, #36]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800bef2:	4a08      	ldr	r2, [pc, #32]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800bef8:	4a06      	ldr	r2, [pc, #24]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800befe:	4b05      	ldr	r3, [pc, #20]	; (800bf14 <SEGGER_SYSVIEW_Init+0x7c>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800bf04:	bf00      	nop
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	200060c4 	.word	0x200060c4
 800bf10:	0801142c 	.word	0x0801142c
 800bf14:	200064cc 	.word	0x200064cc
 800bf18:	200064c4 	.word	0x200064c4
 800bf1c:	e0001004 	.word	0xe0001004

0800bf20 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800bf28:	4a04      	ldr	r2, [pc, #16]	; (800bf3c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6113      	str	r3, [r2, #16]
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	200064cc 	.word	0x200064cc

0800bf40 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bf48:	f3ef 8311 	mrs	r3, BASEPRI
 800bf4c:	f04f 0120 	mov.w	r1, #32
 800bf50:	f381 8811 	msr	BASEPRI, r1
 800bf54:	60fb      	str	r3, [r7, #12]
 800bf56:	4808      	ldr	r0, [pc, #32]	; (800bf78 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800bf58:	f7ff fdc8 	bl	800baec <_PreparePacket>
 800bf5c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	68b9      	ldr	r1, [r7, #8]
 800bf62:	68b8      	ldr	r0, [r7, #8]
 800bf64:	f7ff feb2 	bl	800bccc <_SendPacket>
  RECORD_END();
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f383 8811 	msr	BASEPRI, r3
}
 800bf6e:	bf00      	nop
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	200064fc 	.word	0x200064fc

0800bf7c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bf86:	f3ef 8311 	mrs	r3, BASEPRI
 800bf8a:	f04f 0120 	mov.w	r1, #32
 800bf8e:	f381 8811 	msr	BASEPRI, r1
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	4816      	ldr	r0, [pc, #88]	; (800bff0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800bf96:	f7ff fda9 	bl	800baec <_PreparePacket>
 800bf9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	61bb      	str	r3, [r7, #24]
 800bfa8:	e00b      	b.n	800bfc2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	1c59      	adds	r1, r3, #1
 800bfb2:	61f9      	str	r1, [r7, #28]
 800bfb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfb8:	b2d2      	uxtb	r2, r2
 800bfba:	701a      	strb	r2, [r3, #0]
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	09db      	lsrs	r3, r3, #7
 800bfc0:	61bb      	str	r3, [r7, #24]
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	2b7f      	cmp	r3, #127	; 0x7f
 800bfc6:	d8f0      	bhi.n	800bfaa <SEGGER_SYSVIEW_RecordU32+0x2e>
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	61fa      	str	r2, [r7, #28]
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	b2d2      	uxtb	r2, r2
 800bfd2:	701a      	strb	r2, [r3, #0]
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	68f9      	ldr	r1, [r7, #12]
 800bfdc:	6938      	ldr	r0, [r7, #16]
 800bfde:	f7ff fe75 	bl	800bccc <_SendPacket>
  RECORD_END();
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f383 8811 	msr	BASEPRI, r3
}
 800bfe8:	bf00      	nop
 800bfea:	3720      	adds	r7, #32
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	200064fc 	.word	0x200064fc

0800bff4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b08c      	sub	sp, #48	; 0x30
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c000:	f3ef 8311 	mrs	r3, BASEPRI
 800c004:	f04f 0120 	mov.w	r1, #32
 800c008:	f381 8811 	msr	BASEPRI, r1
 800c00c:	61fb      	str	r3, [r7, #28]
 800c00e:	4825      	ldr	r0, [pc, #148]	; (800c0a4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c010:	f7ff fd6c 	bl	800baec <_PreparePacket>
 800c014:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	62bb      	str	r3, [r7, #40]	; 0x28
 800c022:	e00b      	b.n	800c03c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	b2da      	uxtb	r2, r3
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	1c59      	adds	r1, r3, #1
 800c02c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c02e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	09db      	lsrs	r3, r3, #7
 800c03a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	2b7f      	cmp	r3, #127	; 0x7f
 800c040:	d8f0      	bhi.n	800c024 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	623b      	str	r3, [r7, #32]
 800c05a:	e00b      	b.n	800c074 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	1c59      	adds	r1, r3, #1
 800c064:	6279      	str	r1, [r7, #36]	; 0x24
 800c066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c06a:	b2d2      	uxtb	r2, r2
 800c06c:	701a      	strb	r2, [r3, #0]
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	09db      	lsrs	r3, r3, #7
 800c072:	623b      	str	r3, [r7, #32]
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	2b7f      	cmp	r3, #127	; 0x7f
 800c078:	d8f0      	bhi.n	800c05c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	627a      	str	r2, [r7, #36]	; 0x24
 800c080:	6a3a      	ldr	r2, [r7, #32]
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	701a      	strb	r2, [r3, #0]
 800c086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c088:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	6979      	ldr	r1, [r7, #20]
 800c08e:	69b8      	ldr	r0, [r7, #24]
 800c090:	f7ff fe1c 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	f383 8811 	msr	BASEPRI, r3
}
 800c09a:	bf00      	nop
 800c09c:	3730      	adds	r7, #48	; 0x30
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	200064fc 	.word	0x200064fc

0800c0a8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08e      	sub	sp, #56	; 0x38
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c0b6:	f3ef 8311 	mrs	r3, BASEPRI
 800c0ba:	f04f 0120 	mov.w	r1, #32
 800c0be:	f381 8811 	msr	BASEPRI, r1
 800c0c2:	61fb      	str	r3, [r7, #28]
 800c0c4:	4832      	ldr	r0, [pc, #200]	; (800c190 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c0c6:	f7ff fd11 	bl	800baec <_PreparePacket>
 800c0ca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	633b      	str	r3, [r7, #48]	; 0x30
 800c0d8:	e00b      	b.n	800c0f2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e0:	1c59      	adds	r1, r3, #1
 800c0e2:	6379      	str	r1, [r7, #52]	; 0x34
 800c0e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	09db      	lsrs	r3, r3, #7
 800c0f0:	633b      	str	r3, [r7, #48]	; 0x30
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	2b7f      	cmp	r3, #127	; 0x7f
 800c0f6:	d8f0      	bhi.n	800c0da <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	637a      	str	r2, [r7, #52]	; 0x34
 800c0fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c100:	b2d2      	uxtb	r2, r2
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c106:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c110:	e00b      	b.n	800c12a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	b2da      	uxtb	r2, r3
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	1c59      	adds	r1, r3, #1
 800c11a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c11c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c120:	b2d2      	uxtb	r2, r2
 800c122:	701a      	strb	r2, [r3, #0]
 800c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c126:	09db      	lsrs	r3, r3, #7
 800c128:	62bb      	str	r3, [r7, #40]	; 0x28
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	2b7f      	cmp	r3, #127	; 0x7f
 800c12e:	d8f0      	bhi.n	800c112 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c138:	b2d2      	uxtb	r2, r2
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	627b      	str	r3, [r7, #36]	; 0x24
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	623b      	str	r3, [r7, #32]
 800c148:	e00b      	b.n	800c162 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	1c59      	adds	r1, r3, #1
 800c152:	6279      	str	r1, [r7, #36]	; 0x24
 800c154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	701a      	strb	r2, [r3, #0]
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	09db      	lsrs	r3, r3, #7
 800c160:	623b      	str	r3, [r7, #32]
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	2b7f      	cmp	r3, #127	; 0x7f
 800c166:	d8f0      	bhi.n	800c14a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	627a      	str	r2, [r7, #36]	; 0x24
 800c16e:	6a3a      	ldr	r2, [r7, #32]
 800c170:	b2d2      	uxtb	r2, r2
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c176:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	6979      	ldr	r1, [r7, #20]
 800c17c:	69b8      	ldr	r0, [r7, #24]
 800c17e:	f7ff fda5 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	f383 8811 	msr	BASEPRI, r3
}
 800c188:	bf00      	nop
 800c18a:	3738      	adds	r7, #56	; 0x38
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	200064fc 	.word	0x200064fc

0800c194 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c194:	b580      	push	{r7, lr}
 800c196:	b090      	sub	sp, #64	; 0x40
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c1a2:	f3ef 8311 	mrs	r3, BASEPRI
 800c1a6:	f04f 0120 	mov.w	r1, #32
 800c1aa:	f381 8811 	msr	BASEPRI, r1
 800c1ae:	61fb      	str	r3, [r7, #28]
 800c1b0:	4840      	ldr	r0, [pc, #256]	; (800c2b4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c1b2:	f7ff fc9b 	bl	800baec <_PreparePacket>
 800c1b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1c4:	e00b      	b.n	800c1de <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1cc:	1c59      	adds	r1, r3, #1
 800c1ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c1d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1d4:	b2d2      	uxtb	r2, r2
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	09db      	lsrs	r3, r3, #7
 800c1dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	2b7f      	cmp	r3, #127	; 0x7f
 800c1e2:	d8f0      	bhi.n	800c1c6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ec:	b2d2      	uxtb	r2, r2
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	633b      	str	r3, [r7, #48]	; 0x30
 800c1fc:	e00b      	b.n	800c216 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	b2da      	uxtb	r2, r3
 800c202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c204:	1c59      	adds	r1, r3, #1
 800c206:	6379      	str	r1, [r7, #52]	; 0x34
 800c208:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c20c:	b2d2      	uxtb	r2, r2
 800c20e:	701a      	strb	r2, [r3, #0]
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	09db      	lsrs	r3, r3, #7
 800c214:	633b      	str	r3, [r7, #48]	; 0x30
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	2b7f      	cmp	r3, #127	; 0x7f
 800c21a:	d8f0      	bhi.n	800c1fe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	637a      	str	r2, [r7, #52]	; 0x34
 800c222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c224:	b2d2      	uxtb	r2, r2
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	62bb      	str	r3, [r7, #40]	; 0x28
 800c234:	e00b      	b.n	800c24e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	1c59      	adds	r1, r3, #1
 800c23e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c244:	b2d2      	uxtb	r2, r2
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24a:	09db      	lsrs	r3, r3, #7
 800c24c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c250:	2b7f      	cmp	r3, #127	; 0x7f
 800c252:	d8f0      	bhi.n	800c236 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c25c:	b2d2      	uxtb	r2, r2
 800c25e:	701a      	strb	r2, [r3, #0]
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
 800c268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c26a:	623b      	str	r3, [r7, #32]
 800c26c:	e00b      	b.n	800c286 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	b2da      	uxtb	r2, r3
 800c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c274:	1c59      	adds	r1, r3, #1
 800c276:	6279      	str	r1, [r7, #36]	; 0x24
 800c278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c27c:	b2d2      	uxtb	r2, r2
 800c27e:	701a      	strb	r2, [r3, #0]
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	09db      	lsrs	r3, r3, #7
 800c284:	623b      	str	r3, [r7, #32]
 800c286:	6a3b      	ldr	r3, [r7, #32]
 800c288:	2b7f      	cmp	r3, #127	; 0x7f
 800c28a:	d8f0      	bhi.n	800c26e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	1c5a      	adds	r2, r3, #1
 800c290:	627a      	str	r2, [r7, #36]	; 0x24
 800c292:	6a3a      	ldr	r2, [r7, #32]
 800c294:	b2d2      	uxtb	r2, r2
 800c296:	701a      	strb	r2, [r3, #0]
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	6979      	ldr	r1, [r7, #20]
 800c2a0:	69b8      	ldr	r0, [r7, #24]
 800c2a2:	f7ff fd13 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	f383 8811 	msr	BASEPRI, r3
}
 800c2ac:	bf00      	nop
 800c2ae:	3740      	adds	r7, #64	; 0x40
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	200064fc 	.word	0x200064fc

0800c2b8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08c      	sub	sp, #48	; 0x30
 800c2bc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c2be:	4b58      	ldr	r3, [pc, #352]	; (800c420 <SEGGER_SYSVIEW_Start+0x168>)
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c2c4:	f3ef 8311 	mrs	r3, BASEPRI
 800c2c8:	f04f 0120 	mov.w	r1, #32
 800c2cc:	f381 8811 	msr	BASEPRI, r1
 800c2d0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c2d2:	4b53      	ldr	r3, [pc, #332]	; (800c420 <SEGGER_SYSVIEW_Start+0x168>)
 800c2d4:	785b      	ldrb	r3, [r3, #1]
 800c2d6:	220a      	movs	r2, #10
 800c2d8:	4952      	ldr	r1, [pc, #328]	; (800c424 <SEGGER_SYSVIEW_Start+0x16c>)
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7f3 ff88 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c2e6:	200a      	movs	r0, #10
 800c2e8:	f7ff fe2a 	bl	800bf40 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c2ec:	f3ef 8311 	mrs	r3, BASEPRI
 800c2f0:	f04f 0120 	mov.w	r1, #32
 800c2f4:	f381 8811 	msr	BASEPRI, r1
 800c2f8:	60bb      	str	r3, [r7, #8]
 800c2fa:	484b      	ldr	r0, [pc, #300]	; (800c428 <SEGGER_SYSVIEW_Start+0x170>)
 800c2fc:	f7ff fbf6 	bl	800baec <_PreparePacket>
 800c300:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c30a:	4b45      	ldr	r3, [pc, #276]	; (800c420 <SEGGER_SYSVIEW_Start+0x168>)
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c310:	e00b      	b.n	800c32a <SEGGER_SYSVIEW_Start+0x72>
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	b2da      	uxtb	r2, r3
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	1c59      	adds	r1, r3, #1
 800c31a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c31c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c320:	b2d2      	uxtb	r2, r2
 800c322:	701a      	strb	r2, [r3, #0]
 800c324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c326:	09db      	lsrs	r3, r3, #7
 800c328:	62bb      	str	r3, [r7, #40]	; 0x28
 800c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32c:	2b7f      	cmp	r3, #127	; 0x7f
 800c32e:	d8f0      	bhi.n	800c312 <SEGGER_SYSVIEW_Start+0x5a>
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c338:	b2d2      	uxtb	r2, r2
 800c33a:	701a      	strb	r2, [r3, #0]
 800c33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	627b      	str	r3, [r7, #36]	; 0x24
 800c344:	4b36      	ldr	r3, [pc, #216]	; (800c420 <SEGGER_SYSVIEW_Start+0x168>)
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	623b      	str	r3, [r7, #32]
 800c34a:	e00b      	b.n	800c364 <SEGGER_SYSVIEW_Start+0xac>
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	1c59      	adds	r1, r3, #1
 800c354:	6279      	str	r1, [r7, #36]	; 0x24
 800c356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c35a:	b2d2      	uxtb	r2, r2
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	09db      	lsrs	r3, r3, #7
 800c362:	623b      	str	r3, [r7, #32]
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	2b7f      	cmp	r3, #127	; 0x7f
 800c368:	d8f0      	bhi.n	800c34c <SEGGER_SYSVIEW_Start+0x94>
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	1c5a      	adds	r2, r3, #1
 800c36e:	627a      	str	r2, [r7, #36]	; 0x24
 800c370:	6a3a      	ldr	r2, [r7, #32]
 800c372:	b2d2      	uxtb	r2, r2
 800c374:	701a      	strb	r2, [r3, #0]
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	61fb      	str	r3, [r7, #28]
 800c37e:	4b28      	ldr	r3, [pc, #160]	; (800c420 <SEGGER_SYSVIEW_Start+0x168>)
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	61bb      	str	r3, [r7, #24]
 800c384:	e00b      	b.n	800c39e <SEGGER_SYSVIEW_Start+0xe6>
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	1c59      	adds	r1, r3, #1
 800c38e:	61f9      	str	r1, [r7, #28]
 800c390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c394:	b2d2      	uxtb	r2, r2
 800c396:	701a      	strb	r2, [r3, #0]
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	09db      	lsrs	r3, r3, #7
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	2b7f      	cmp	r3, #127	; 0x7f
 800c3a2:	d8f0      	bhi.n	800c386 <SEGGER_SYSVIEW_Start+0xce>
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	1c5a      	adds	r2, r3, #1
 800c3a8:	61fa      	str	r2, [r7, #28]
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	b2d2      	uxtb	r2, r2
 800c3ae:	701a      	strb	r2, [r3, #0]
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	613b      	str	r3, [r7, #16]
 800c3bc:	e00b      	b.n	800c3d6 <SEGGER_SYSVIEW_Start+0x11e>
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	1c59      	adds	r1, r3, #1
 800c3c6:	6179      	str	r1, [r7, #20]
 800c3c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3cc:	b2d2      	uxtb	r2, r2
 800c3ce:	701a      	strb	r2, [r3, #0]
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	09db      	lsrs	r3, r3, #7
 800c3d4:	613b      	str	r3, [r7, #16]
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c3da:	d8f0      	bhi.n	800c3be <SEGGER_SYSVIEW_Start+0x106>
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	617a      	str	r2, [r7, #20]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	b2d2      	uxtb	r2, r2
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c3ec:	2218      	movs	r2, #24
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7ff fc6b 	bl	800bccc <_SendPacket>
      RECORD_END();
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c3fc:	4b08      	ldr	r3, [pc, #32]	; (800c420 <SEGGER_SYSVIEW_Start+0x168>)
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c404:	4b06      	ldr	r3, [pc, #24]	; (800c420 <SEGGER_SYSVIEW_Start+0x168>)
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c40a:	f000 f9eb 	bl	800c7e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c40e:	f000 f9b1 	bl	800c774 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c412:	f000 fc83 	bl	800cd1c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c416:	bf00      	nop
 800c418:	3730      	adds	r7, #48	; 0x30
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	200064cc 	.word	0x200064cc
 800c424:	08011bc4 	.word	0x08011bc4
 800c428:	200064fc 	.word	0x200064fc

0800c42c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c432:	f3ef 8311 	mrs	r3, BASEPRI
 800c436:	f04f 0120 	mov.w	r1, #32
 800c43a:	f381 8811 	msr	BASEPRI, r1
 800c43e:	607b      	str	r3, [r7, #4]
 800c440:	480b      	ldr	r0, [pc, #44]	; (800c470 <SEGGER_SYSVIEW_Stop+0x44>)
 800c442:	f7ff fb53 	bl	800baec <_PreparePacket>
 800c446:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c448:	4b0a      	ldr	r3, [pc, #40]	; (800c474 <SEGGER_SYSVIEW_Stop+0x48>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c450:	220b      	movs	r2, #11
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6838      	ldr	r0, [r7, #0]
 800c456:	f7ff fc39 	bl	800bccc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c45a:	4b06      	ldr	r3, [pc, #24]	; (800c474 <SEGGER_SYSVIEW_Stop+0x48>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f383 8811 	msr	BASEPRI, r3
}
 800c466:	bf00      	nop
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	200064fc 	.word	0x200064fc
 800c474:	200064cc 	.word	0x200064cc

0800c478 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08c      	sub	sp, #48	; 0x30
 800c47c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c47e:	f3ef 8311 	mrs	r3, BASEPRI
 800c482:	f04f 0120 	mov.w	r1, #32
 800c486:	f381 8811 	msr	BASEPRI, r1
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	4845      	ldr	r0, [pc, #276]	; (800c5a4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c48e:	f7ff fb2d 	bl	800baec <_PreparePacket>
 800c492:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c49c:	4b42      	ldr	r3, [pc, #264]	; (800c5a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4a2:	e00b      	b.n	800c4bc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	1c59      	adds	r1, r3, #1
 800c4ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c4ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4b2:	b2d2      	uxtb	r2, r2
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b8:	09db      	lsrs	r3, r3, #7
 800c4ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	2b7f      	cmp	r3, #127	; 0x7f
 800c4c0:	d8f0      	bhi.n	800c4a4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c4:	1c5a      	adds	r2, r3, #1
 800c4c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ca:	b2d2      	uxtb	r2, r2
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c4d6:	4b34      	ldr	r3, [pc, #208]	; (800c5a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	623b      	str	r3, [r7, #32]
 800c4dc:	e00b      	b.n	800c4f6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c4de:	6a3b      	ldr	r3, [r7, #32]
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	1c59      	adds	r1, r3, #1
 800c4e6:	6279      	str	r1, [r7, #36]	; 0x24
 800c4e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4ec:	b2d2      	uxtb	r2, r2
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	09db      	lsrs	r3, r3, #7
 800c4f4:	623b      	str	r3, [r7, #32]
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	2b7f      	cmp	r3, #127	; 0x7f
 800c4fa:	d8f0      	bhi.n	800c4de <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	1c5a      	adds	r2, r3, #1
 800c500:	627a      	str	r2, [r7, #36]	; 0x24
 800c502:	6a3a      	ldr	r2, [r7, #32]
 800c504:	b2d2      	uxtb	r2, r2
 800c506:	701a      	strb	r2, [r3, #0]
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	61fb      	str	r3, [r7, #28]
 800c510:	4b25      	ldr	r3, [pc, #148]	; (800c5a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	61bb      	str	r3, [r7, #24]
 800c516:	e00b      	b.n	800c530 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	1c59      	adds	r1, r3, #1
 800c520:	61f9      	str	r1, [r7, #28]
 800c522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c526:	b2d2      	uxtb	r2, r2
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	09db      	lsrs	r3, r3, #7
 800c52e:	61bb      	str	r3, [r7, #24]
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	2b7f      	cmp	r3, #127	; 0x7f
 800c534:	d8f0      	bhi.n	800c518 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	1c5a      	adds	r2, r3, #1
 800c53a:	61fa      	str	r2, [r7, #28]
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	701a      	strb	r2, [r3, #0]
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	617b      	str	r3, [r7, #20]
 800c54a:	2300      	movs	r3, #0
 800c54c:	613b      	str	r3, [r7, #16]
 800c54e:	e00b      	b.n	800c568 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	b2da      	uxtb	r2, r3
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	1c59      	adds	r1, r3, #1
 800c558:	6179      	str	r1, [r7, #20]
 800c55a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c55e:	b2d2      	uxtb	r2, r2
 800c560:	701a      	strb	r2, [r3, #0]
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	09db      	lsrs	r3, r3, #7
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	2b7f      	cmp	r3, #127	; 0x7f
 800c56c:	d8f0      	bhi.n	800c550 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	1c5a      	adds	r2, r3, #1
 800c572:	617a      	str	r2, [r7, #20]
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	b2d2      	uxtb	r2, r2
 800c578:	701a      	strb	r2, [r3, #0]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c57e:	2218      	movs	r2, #24
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	68b8      	ldr	r0, [r7, #8]
 800c584:	f7ff fba2 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c58e:	4b06      	ldr	r3, [pc, #24]	; (800c5a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c592:	2b00      	cmp	r3, #0
 800c594:	d002      	beq.n	800c59c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c596:	4b04      	ldr	r3, [pc, #16]	; (800c5a8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59a:	4798      	blx	r3
  }
}
 800c59c:	bf00      	nop
 800c59e:	3730      	adds	r7, #48	; 0x30
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	200064fc 	.word	0x200064fc
 800c5a8:	200064cc 	.word	0x200064cc

0800c5ac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b092      	sub	sp, #72	; 0x48
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c5b4:	f3ef 8311 	mrs	r3, BASEPRI
 800c5b8:	f04f 0120 	mov.w	r1, #32
 800c5bc:	f381 8811 	msr	BASEPRI, r1
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	486a      	ldr	r0, [pc, #424]	; (800c76c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c5c4:	f7ff fa92 	bl	800baec <_PreparePacket>
 800c5c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	647b      	str	r3, [r7, #68]	; 0x44
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	4b66      	ldr	r3, [pc, #408]	; (800c770 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c5de:	e00b      	b.n	800c5f8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e6:	1c59      	adds	r1, r3, #1
 800c5e8:	6479      	str	r1, [r7, #68]	; 0x44
 800c5ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f4:	09db      	lsrs	r3, r3, #7
 800c5f6:	643b      	str	r3, [r7, #64]	; 0x40
 800c5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fa:	2b7f      	cmp	r3, #127	; 0x7f
 800c5fc:	d8f0      	bhi.n	800c5e0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c5fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	647a      	str	r2, [r7, #68]	; 0x44
 800c604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c606:	b2d2      	uxtb	r2, r2
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c60c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	63bb      	str	r3, [r7, #56]	; 0x38
 800c618:	e00b      	b.n	800c632 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c620:	1c59      	adds	r1, r3, #1
 800c622:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c628:	b2d2      	uxtb	r2, r2
 800c62a:	701a      	strb	r2, [r3, #0]
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	09db      	lsrs	r3, r3, #7
 800c630:	63bb      	str	r3, [r7, #56]	; 0x38
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	2b7f      	cmp	r3, #127	; 0x7f
 800c636:	d8f0      	bhi.n	800c61a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c63e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c640:	b2d2      	uxtb	r2, r2
 800c642:	701a      	strb	r2, [r3, #0]
 800c644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c646:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	2220      	movs	r2, #32
 800c64e:	4619      	mov	r1, r3
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff f9fb 	bl	800ba4c <_EncodeStr>
 800c656:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c658:	2209      	movs	r2, #9
 800c65a:	68f9      	ldr	r1, [r7, #12]
 800c65c:	6938      	ldr	r0, [r7, #16]
 800c65e:	f7ff fb35 	bl	800bccc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	637b      	str	r3, [r7, #52]	; 0x34
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	4b40      	ldr	r3, [pc, #256]	; (800c770 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	633b      	str	r3, [r7, #48]	; 0x30
 800c676:	e00b      	b.n	800c690 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67e:	1c59      	adds	r1, r3, #1
 800c680:	6379      	str	r1, [r7, #52]	; 0x34
 800c682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c686:	b2d2      	uxtb	r2, r2
 800c688:	701a      	strb	r2, [r3, #0]
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	09db      	lsrs	r3, r3, #7
 800c68e:	633b      	str	r3, [r7, #48]	; 0x30
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	2b7f      	cmp	r3, #127	; 0x7f
 800c694:	d8f0      	bhi.n	800c678 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	637a      	str	r2, [r7, #52]	; 0x34
 800c69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69e:	b2d2      	uxtb	r2, r2
 800c6a0:	701a      	strb	r2, [r3, #0]
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6b0:	e00b      	b.n	800c6ca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	1c59      	adds	r1, r3, #1
 800c6ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c6bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	09db      	lsrs	r3, r3, #7
 800c6c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	2b7f      	cmp	r3, #127	; 0x7f
 800c6ce:	d8f0      	bhi.n	800c6b2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	623b      	str	r3, [r7, #32]
 800c6ea:	e00b      	b.n	800c704 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	1c59      	adds	r1, r3, #1
 800c6f4:	6279      	str	r1, [r7, #36]	; 0x24
 800c6f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6fa:	b2d2      	uxtb	r2, r2
 800c6fc:	701a      	strb	r2, [r3, #0]
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	09db      	lsrs	r3, r3, #7
 800c702:	623b      	str	r3, [r7, #32]
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	2b7f      	cmp	r3, #127	; 0x7f
 800c708:	d8f0      	bhi.n	800c6ec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	627a      	str	r2, [r7, #36]	; 0x24
 800c710:	6a3a      	ldr	r2, [r7, #32]
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c718:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	61fb      	str	r3, [r7, #28]
 800c71e:	2300      	movs	r3, #0
 800c720:	61bb      	str	r3, [r7, #24]
 800c722:	e00b      	b.n	800c73c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	b2da      	uxtb	r2, r3
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	1c59      	adds	r1, r3, #1
 800c72c:	61f9      	str	r1, [r7, #28]
 800c72e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c732:	b2d2      	uxtb	r2, r2
 800c734:	701a      	strb	r2, [r3, #0]
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	09db      	lsrs	r3, r3, #7
 800c73a:	61bb      	str	r3, [r7, #24]
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	2b7f      	cmp	r3, #127	; 0x7f
 800c740:	d8f0      	bhi.n	800c724 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	1c5a      	adds	r2, r3, #1
 800c746:	61fa      	str	r2, [r7, #28]
 800c748:	69ba      	ldr	r2, [r7, #24]
 800c74a:	b2d2      	uxtb	r2, r2
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c752:	2215      	movs	r2, #21
 800c754:	68f9      	ldr	r1, [r7, #12]
 800c756:	6938      	ldr	r0, [r7, #16]
 800c758:	f7ff fab8 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f383 8811 	msr	BASEPRI, r3
}
 800c762:	bf00      	nop
 800c764:	3748      	adds	r7, #72	; 0x48
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	200064fc 	.word	0x200064fc
 800c770:	200064cc 	.word	0x200064cc

0800c774 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c774:	b580      	push	{r7, lr}
 800c776:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c778:	4b07      	ldr	r3, [pc, #28]	; (800c798 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c77a:	6a1b      	ldr	r3, [r3, #32]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d008      	beq.n	800c792 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c782:	6a1b      	ldr	r3, [r3, #32]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c78a:	4b03      	ldr	r3, [pc, #12]	; (800c798 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c78c:	6a1b      	ldr	r3, [r3, #32]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	4798      	blx	r3
  }
}
 800c792:	bf00      	nop
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	200064cc 	.word	0x200064cc

0800c79c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c7a4:	f3ef 8311 	mrs	r3, BASEPRI
 800c7a8:	f04f 0120 	mov.w	r1, #32
 800c7ac:	f381 8811 	msr	BASEPRI, r1
 800c7b0:	617b      	str	r3, [r7, #20]
 800c7b2:	480b      	ldr	r0, [pc, #44]	; (800c7e0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c7b4:	f7ff f99a 	bl	800baec <_PreparePacket>
 800c7b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c7ba:	2280      	movs	r2, #128	; 0x80
 800c7bc:	6879      	ldr	r1, [r7, #4]
 800c7be:	6938      	ldr	r0, [r7, #16]
 800c7c0:	f7ff f944 	bl	800ba4c <_EncodeStr>
 800c7c4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c7c6:	220e      	movs	r2, #14
 800c7c8:	68f9      	ldr	r1, [r7, #12]
 800c7ca:	6938      	ldr	r0, [r7, #16]
 800c7cc:	f7ff fa7e 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f383 8811 	msr	BASEPRI, r3
}
 800c7d6:	bf00      	nop
 800c7d8:	3718      	adds	r7, #24
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	200064fc 	.word	0x200064fc

0800c7e4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c7ea:	4b15      	ldr	r3, [pc, #84]	; (800c840 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d01a      	beq.n	800c828 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c7f2:	4b13      	ldr	r3, [pc, #76]	; (800c840 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d015      	beq.n	800c828 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c7fc:	4b10      	ldr	r3, [pc, #64]	; (800c840 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c7fe:	6a1b      	ldr	r3, [r3, #32]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4798      	blx	r3
 800c804:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c808:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c80a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c80e:	f04f 0200 	mov.w	r2, #0
 800c812:	f04f 0300 	mov.w	r3, #0
 800c816:	000a      	movs	r2, r1
 800c818:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c81a:	4613      	mov	r3, r2
 800c81c:	461a      	mov	r2, r3
 800c81e:	4621      	mov	r1, r4
 800c820:	200d      	movs	r0, #13
 800c822:	f7ff fbe7 	bl	800bff4 <SEGGER_SYSVIEW_RecordU32x2>
 800c826:	e006      	b.n	800c836 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c828:	4b06      	ldr	r3, [pc, #24]	; (800c844 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4619      	mov	r1, r3
 800c82e:	200c      	movs	r0, #12
 800c830:	f7ff fba4 	bl	800bf7c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd90      	pop	{r4, r7, pc}
 800c83e:	bf00      	nop
 800c840:	200064cc 	.word	0x200064cc
 800c844:	e0001004 	.word	0xe0001004

0800c848 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c84e:	f3ef 8311 	mrs	r3, BASEPRI
 800c852:	f04f 0120 	mov.w	r1, #32
 800c856:	f381 8811 	msr	BASEPRI, r1
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	4819      	ldr	r0, [pc, #100]	; (800c8c4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c85e:	f7ff f945 	bl	800baec <_PreparePacket>
 800c862:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c868:	4b17      	ldr	r3, [pc, #92]	; (800c8c8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c870:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	617b      	str	r3, [r7, #20]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	613b      	str	r3, [r7, #16]
 800c87a:	e00b      	b.n	800c894 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	1c59      	adds	r1, r3, #1
 800c884:	6179      	str	r1, [r7, #20]
 800c886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c88a:	b2d2      	uxtb	r2, r2
 800c88c:	701a      	strb	r2, [r3, #0]
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	09db      	lsrs	r3, r3, #7
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	2b7f      	cmp	r3, #127	; 0x7f
 800c898:	d8f0      	bhi.n	800c87c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	617a      	str	r2, [r7, #20]
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	701a      	strb	r2, [r3, #0]
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	68b8      	ldr	r0, [r7, #8]
 800c8b0:	f7ff fa0c 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f383 8811 	msr	BASEPRI, r3
}
 800c8ba:	bf00      	nop
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	200064fc 	.word	0x200064fc
 800c8c8:	e000ed04 	.word	0xe000ed04

0800c8cc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c8d2:	f3ef 8311 	mrs	r3, BASEPRI
 800c8d6:	f04f 0120 	mov.w	r1, #32
 800c8da:	f381 8811 	msr	BASEPRI, r1
 800c8de:	607b      	str	r3, [r7, #4]
 800c8e0:	4807      	ldr	r0, [pc, #28]	; (800c900 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c8e2:	f7ff f903 	bl	800baec <_PreparePacket>
 800c8e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c8e8:	2203      	movs	r2, #3
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6838      	ldr	r0, [r7, #0]
 800c8ee:	f7ff f9ed 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f383 8811 	msr	BASEPRI, r3
}
 800c8f8:	bf00      	nop
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	200064fc 	.word	0x200064fc

0800c904 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c90a:	f3ef 8311 	mrs	r3, BASEPRI
 800c90e:	f04f 0120 	mov.w	r1, #32
 800c912:	f381 8811 	msr	BASEPRI, r1
 800c916:	607b      	str	r3, [r7, #4]
 800c918:	4807      	ldr	r0, [pc, #28]	; (800c938 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c91a:	f7ff f8e7 	bl	800baec <_PreparePacket>
 800c91e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c920:	2212      	movs	r2, #18
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6838      	ldr	r0, [r7, #0]
 800c926:	f7ff f9d1 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f383 8811 	msr	BASEPRI, r3
}
 800c930:	bf00      	nop
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	200064fc 	.word	0x200064fc

0800c93c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c942:	f3ef 8311 	mrs	r3, BASEPRI
 800c946:	f04f 0120 	mov.w	r1, #32
 800c94a:	f381 8811 	msr	BASEPRI, r1
 800c94e:	607b      	str	r3, [r7, #4]
 800c950:	4807      	ldr	r0, [pc, #28]	; (800c970 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c952:	f7ff f8cb 	bl	800baec <_PreparePacket>
 800c956:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c958:	2211      	movs	r2, #17
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6838      	ldr	r0, [r7, #0]
 800c95e:	f7ff f9b5 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f383 8811 	msr	BASEPRI, r3
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	200064fc 	.word	0x200064fc

0800c974 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c974:	b580      	push	{r7, lr}
 800c976:	b088      	sub	sp, #32
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c97c:	f3ef 8311 	mrs	r3, BASEPRI
 800c980:	f04f 0120 	mov.w	r1, #32
 800c984:	f381 8811 	msr	BASEPRI, r1
 800c988:	617b      	str	r3, [r7, #20]
 800c98a:	4819      	ldr	r0, [pc, #100]	; (800c9f0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c98c:	f7ff f8ae 	bl	800baec <_PreparePacket>
 800c990:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c996:	4b17      	ldr	r3, [pc, #92]	; (800c9f4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	61fb      	str	r3, [r7, #28]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	61bb      	str	r3, [r7, #24]
 800c9a8:	e00b      	b.n	800c9c2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	1c59      	adds	r1, r3, #1
 800c9b2:	61f9      	str	r1, [r7, #28]
 800c9b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	09db      	lsrs	r3, r3, #7
 800c9c0:	61bb      	str	r3, [r7, #24]
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c9c6:	d8f0      	bhi.n	800c9aa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	61fa      	str	r2, [r7, #28]
 800c9ce:	69ba      	ldr	r2, [r7, #24]
 800c9d0:	b2d2      	uxtb	r2, r2
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c9d8:	2208      	movs	r2, #8
 800c9da:	68f9      	ldr	r1, [r7, #12]
 800c9dc:	6938      	ldr	r0, [r7, #16]
 800c9de:	f7ff f975 	bl	800bccc <_SendPacket>
  RECORD_END();
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f383 8811 	msr	BASEPRI, r3
}
 800c9e8:	bf00      	nop
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	200064fc 	.word	0x200064fc
 800c9f4:	200064cc 	.word	0x200064cc

0800c9f8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b088      	sub	sp, #32
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca00:	f3ef 8311 	mrs	r3, BASEPRI
 800ca04:	f04f 0120 	mov.w	r1, #32
 800ca08:	f381 8811 	msr	BASEPRI, r1
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	4819      	ldr	r0, [pc, #100]	; (800ca74 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800ca10:	f7ff f86c 	bl	800baec <_PreparePacket>
 800ca14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ca1a:	4b17      	ldr	r3, [pc, #92]	; (800ca78 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	61fb      	str	r3, [r7, #28]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	61bb      	str	r3, [r7, #24]
 800ca2c:	e00b      	b.n	800ca46 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	1c59      	adds	r1, r3, #1
 800ca36:	61f9      	str	r1, [r7, #28]
 800ca38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca3c:	b2d2      	uxtb	r2, r2
 800ca3e:	701a      	strb	r2, [r3, #0]
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	09db      	lsrs	r3, r3, #7
 800ca44:	61bb      	str	r3, [r7, #24]
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	2b7f      	cmp	r3, #127	; 0x7f
 800ca4a:	d8f0      	bhi.n	800ca2e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	61fa      	str	r2, [r7, #28]
 800ca52:	69ba      	ldr	r2, [r7, #24]
 800ca54:	b2d2      	uxtb	r2, r2
 800ca56:	701a      	strb	r2, [r3, #0]
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800ca5c:	2204      	movs	r2, #4
 800ca5e:	68f9      	ldr	r1, [r7, #12]
 800ca60:	6938      	ldr	r0, [r7, #16]
 800ca62:	f7ff f933 	bl	800bccc <_SendPacket>
  RECORD_END();
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f383 8811 	msr	BASEPRI, r3
}
 800ca6c:	bf00      	nop
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	200064fc 	.word	0x200064fc
 800ca78:	200064cc 	.word	0x200064cc

0800ca7c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca84:	f3ef 8311 	mrs	r3, BASEPRI
 800ca88:	f04f 0120 	mov.w	r1, #32
 800ca8c:	f381 8811 	msr	BASEPRI, r1
 800ca90:	617b      	str	r3, [r7, #20]
 800ca92:	4819      	ldr	r0, [pc, #100]	; (800caf8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800ca94:	f7ff f82a 	bl	800baec <_PreparePacket>
 800ca98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ca9e:	4b17      	ldr	r3, [pc, #92]	; (800cafc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	61bb      	str	r3, [r7, #24]
 800cab0:	e00b      	b.n	800caca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	1c59      	adds	r1, r3, #1
 800caba:	61f9      	str	r1, [r7, #28]
 800cabc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cac0:	b2d2      	uxtb	r2, r2
 800cac2:	701a      	strb	r2, [r3, #0]
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	09db      	lsrs	r3, r3, #7
 800cac8:	61bb      	str	r3, [r7, #24]
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	2b7f      	cmp	r3, #127	; 0x7f
 800cace:	d8f0      	bhi.n	800cab2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	61fa      	str	r2, [r7, #28]
 800cad6:	69ba      	ldr	r2, [r7, #24]
 800cad8:	b2d2      	uxtb	r2, r2
 800cada:	701a      	strb	r2, [r3, #0]
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800cae0:	2206      	movs	r2, #6
 800cae2:	68f9      	ldr	r1, [r7, #12]
 800cae4:	6938      	ldr	r0, [r7, #16]
 800cae6:	f7ff f8f1 	bl	800bccc <_SendPacket>
  RECORD_END();
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f383 8811 	msr	BASEPRI, r3
}
 800caf0:	bf00      	nop
 800caf2:	3720      	adds	r7, #32
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	200064fc 	.word	0x200064fc
 800cafc:	200064cc 	.word	0x200064cc

0800cb00 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08a      	sub	sp, #40	; 0x28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800cb0a:	f3ef 8311 	mrs	r3, BASEPRI
 800cb0e:	f04f 0120 	mov.w	r1, #32
 800cb12:	f381 8811 	msr	BASEPRI, r1
 800cb16:	617b      	str	r3, [r7, #20]
 800cb18:	4827      	ldr	r0, [pc, #156]	; (800cbb8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800cb1a:	f7fe ffe7 	bl	800baec <_PreparePacket>
 800cb1e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cb24:	4b25      	ldr	r3, [pc, #148]	; (800cbbc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	623b      	str	r3, [r7, #32]
 800cb36:	e00b      	b.n	800cb50 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	1c59      	adds	r1, r3, #1
 800cb40:	6279      	str	r1, [r7, #36]	; 0x24
 800cb42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	701a      	strb	r2, [r3, #0]
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	09db      	lsrs	r3, r3, #7
 800cb4e:	623b      	str	r3, [r7, #32]
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	2b7f      	cmp	r3, #127	; 0x7f
 800cb54:	d8f0      	bhi.n	800cb38 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	627a      	str	r2, [r7, #36]	; 0x24
 800cb5c:	6a3a      	ldr	r2, [r7, #32]
 800cb5e:	b2d2      	uxtb	r2, r2
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	e00b      	b.n	800cb88 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	1c59      	adds	r1, r3, #1
 800cb78:	61f9      	str	r1, [r7, #28]
 800cb7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb7e:	b2d2      	uxtb	r2, r2
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	09db      	lsrs	r3, r3, #7
 800cb86:	61bb      	str	r3, [r7, #24]
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	2b7f      	cmp	r3, #127	; 0x7f
 800cb8c:	d8f0      	bhi.n	800cb70 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	61fa      	str	r2, [r7, #28]
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	b2d2      	uxtb	r2, r2
 800cb98:	701a      	strb	r2, [r3, #0]
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800cb9e:	2207      	movs	r2, #7
 800cba0:	68f9      	ldr	r1, [r7, #12]
 800cba2:	6938      	ldr	r0, [r7, #16]
 800cba4:	f7ff f892 	bl	800bccc <_SendPacket>
  RECORD_END();
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
}
 800cbae:	bf00      	nop
 800cbb0:	3728      	adds	r7, #40	; 0x28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	200064fc 	.word	0x200064fc
 800cbbc:	200064cc 	.word	0x200064cc

0800cbc0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800cbc8:	4b04      	ldr	r3, [pc, #16]	; (800cbdc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	1ad3      	subs	r3, r2, r3
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	200064cc 	.word	0x200064cc

0800cbe0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08c      	sub	sp, #48	; 0x30
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800cbea:	4b3b      	ldr	r3, [pc, #236]	; (800ccd8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d06d      	beq.n	800ccce <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800cbf2:	4b39      	ldr	r3, [pc, #228]	; (800ccd8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbfc:	e008      	b.n	800cc10 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d007      	beq.n	800cc1a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800cc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d3f2      	bcc.n	800cbfe <SEGGER_SYSVIEW_SendModule+0x1e>
 800cc18:	e000      	b.n	800cc1c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800cc1a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d055      	beq.n	800ccce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cc22:	f3ef 8311 	mrs	r3, BASEPRI
 800cc26:	f04f 0120 	mov.w	r1, #32
 800cc2a:	f381 8811 	msr	BASEPRI, r1
 800cc2e:	617b      	str	r3, [r7, #20]
 800cc30:	482a      	ldr	r0, [pc, #168]	; (800ccdc <SEGGER_SYSVIEW_SendModule+0xfc>)
 800cc32:	f7fe ff5b 	bl	800baec <_PreparePacket>
 800cc36:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	623b      	str	r3, [r7, #32]
 800cc44:	e00b      	b.n	800cc5e <SEGGER_SYSVIEW_SendModule+0x7e>
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4c:	1c59      	adds	r1, r3, #1
 800cc4e:	6279      	str	r1, [r7, #36]	; 0x24
 800cc50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc54:	b2d2      	uxtb	r2, r2
 800cc56:	701a      	strb	r2, [r3, #0]
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	09db      	lsrs	r3, r3, #7
 800cc5c:	623b      	str	r3, [r7, #32]
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	2b7f      	cmp	r3, #127	; 0x7f
 800cc62:	d8f0      	bhi.n	800cc46 <SEGGER_SYSVIEW_SendModule+0x66>
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	627a      	str	r2, [r7, #36]	; 0x24
 800cc6a:	6a3a      	ldr	r2, [r7, #32]
 800cc6c:	b2d2      	uxtb	r2, r2
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	61fb      	str	r3, [r7, #28]
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	e00b      	b.n	800cc98 <SEGGER_SYSVIEW_SendModule+0xb8>
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	1c59      	adds	r1, r3, #1
 800cc88:	61f9      	str	r1, [r7, #28]
 800cc8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc8e:	b2d2      	uxtb	r2, r2
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	09db      	lsrs	r3, r3, #7
 800cc96:	61bb      	str	r3, [r7, #24]
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc9c:	d8f0      	bhi.n	800cc80 <SEGGER_SYSVIEW_SendModule+0xa0>
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	1c5a      	adds	r2, r3, #1
 800cca2:	61fa      	str	r2, [r7, #28]
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	b2d2      	uxtb	r2, r2
 800cca8:	701a      	strb	r2, [r3, #0]
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2280      	movs	r2, #128	; 0x80
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7fe fec8 	bl	800ba4c <_EncodeStr>
 800ccbc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ccbe:	2216      	movs	r2, #22
 800ccc0:	68f9      	ldr	r1, [r7, #12]
 800ccc2:	6938      	ldr	r0, [r7, #16]
 800ccc4:	f7ff f802 	bl	800bccc <_SendPacket>
      RECORD_END();
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800ccce:	bf00      	nop
 800ccd0:	3730      	adds	r7, #48	; 0x30
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	200064f4 	.word	0x200064f4
 800ccdc:	200064fc 	.word	0x200064fc

0800cce0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800cce6:	4b0c      	ldr	r3, [pc, #48]	; (800cd18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00f      	beq.n	800cd0e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800ccee:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1f2      	bne.n	800ccf4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800cd0e:	bf00      	nop
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	200064f4 	.word	0x200064f4

0800cd1c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800cd22:	f3ef 8311 	mrs	r3, BASEPRI
 800cd26:	f04f 0120 	mov.w	r1, #32
 800cd2a:	f381 8811 	msr	BASEPRI, r1
 800cd2e:	60fb      	str	r3, [r7, #12]
 800cd30:	4817      	ldr	r0, [pc, #92]	; (800cd90 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800cd32:	f7fe fedb 	bl	800baec <_PreparePacket>
 800cd36:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	613b      	str	r3, [r7, #16]
 800cd46:	e00b      	b.n	800cd60 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	1c59      	adds	r1, r3, #1
 800cd50:	6179      	str	r1, [r7, #20]
 800cd52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd56:	b2d2      	uxtb	r2, r2
 800cd58:	701a      	strb	r2, [r3, #0]
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	09db      	lsrs	r3, r3, #7
 800cd5e:	613b      	str	r3, [r7, #16]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	2b7f      	cmp	r3, #127	; 0x7f
 800cd64:	d8f0      	bhi.n	800cd48 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	1c5a      	adds	r2, r3, #1
 800cd6a:	617a      	str	r2, [r7, #20]
 800cd6c:	693a      	ldr	r2, [r7, #16]
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800cd76:	221b      	movs	r2, #27
 800cd78:	6879      	ldr	r1, [r7, #4]
 800cd7a:	68b8      	ldr	r0, [r7, #8]
 800cd7c:	f7fe ffa6 	bl	800bccc <_SendPacket>
  RECORD_END();
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f383 8811 	msr	BASEPRI, r3
}
 800cd86:	bf00      	nop
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	200064fc 	.word	0x200064fc
 800cd94:	200064f8 	.word	0x200064f8

0800cd98 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cda0:	f3ef 8311 	mrs	r3, BASEPRI
 800cda4:	f04f 0120 	mov.w	r1, #32
 800cda8:	f381 8811 	msr	BASEPRI, r1
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	4827      	ldr	r0, [pc, #156]	; (800ce4c <SEGGER_SYSVIEW_Warn+0xb4>)
 800cdb0:	f7fe fe9c 	bl	800baec <_PreparePacket>
 800cdb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cdb6:	2280      	movs	r2, #128	; 0x80
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	6938      	ldr	r0, [r7, #16]
 800cdbc:	f7fe fe46 	bl	800ba4c <_EncodeStr>
 800cdc0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	623b      	str	r3, [r7, #32]
 800cdca:	e00b      	b.n	800cde4 <SEGGER_SYSVIEW_Warn+0x4c>
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	1c59      	adds	r1, r3, #1
 800cdd4:	6279      	str	r1, [r7, #36]	; 0x24
 800cdd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cdda:	b2d2      	uxtb	r2, r2
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	09db      	lsrs	r3, r3, #7
 800cde2:	623b      	str	r3, [r7, #32]
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	2b7f      	cmp	r3, #127	; 0x7f
 800cde8:	d8f0      	bhi.n	800cdcc <SEGGER_SYSVIEW_Warn+0x34>
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	627a      	str	r2, [r7, #36]	; 0x24
 800cdf0:	6a3a      	ldr	r2, [r7, #32]
 800cdf2:	b2d2      	uxtb	r2, r2
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	61fb      	str	r3, [r7, #28]
 800cdfe:	2300      	movs	r3, #0
 800ce00:	61bb      	str	r3, [r7, #24]
 800ce02:	e00b      	b.n	800ce1c <SEGGER_SYSVIEW_Warn+0x84>
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	1c59      	adds	r1, r3, #1
 800ce0c:	61f9      	str	r1, [r7, #28]
 800ce0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce12:	b2d2      	uxtb	r2, r2
 800ce14:	701a      	strb	r2, [r3, #0]
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	09db      	lsrs	r3, r3, #7
 800ce1a:	61bb      	str	r3, [r7, #24]
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	2b7f      	cmp	r3, #127	; 0x7f
 800ce20:	d8f0      	bhi.n	800ce04 <SEGGER_SYSVIEW_Warn+0x6c>
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	1c5a      	adds	r2, r3, #1
 800ce26:	61fa      	str	r2, [r7, #28]
 800ce28:	69ba      	ldr	r2, [r7, #24]
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	701a      	strb	r2, [r3, #0]
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800ce32:	221a      	movs	r2, #26
 800ce34:	68f9      	ldr	r1, [r7, #12]
 800ce36:	6938      	ldr	r0, [r7, #16]
 800ce38:	f7fe ff48 	bl	800bccc <_SendPacket>
  RECORD_END();
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f383 8811 	msr	BASEPRI, r3
}
 800ce42:	bf00      	nop
 800ce44:	3728      	adds	r7, #40	; 0x28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200064fc 	.word	0x200064fc

0800ce50 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800ce54:	4803      	ldr	r0, [pc, #12]	; (800ce64 <_cbSendSystemDesc+0x14>)
 800ce56:	f7ff fca1 	bl	800c79c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800ce5a:	4803      	ldr	r0, [pc, #12]	; (800ce68 <_cbSendSystemDesc+0x18>)
 800ce5c:	f7ff fc9e 	bl	800c79c <SEGGER_SYSVIEW_SendSysDesc>
}
 800ce60:	bf00      	nop
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	08011434 	.word	0x08011434
 800ce68:	08011468 	.word	0x08011468

0800ce6c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800ce70:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <SEGGER_SYSVIEW_Conf+0x20>)
 800ce72:	6818      	ldr	r0, [r3, #0]
 800ce74:	4b05      	ldr	r3, [pc, #20]	; (800ce8c <SEGGER_SYSVIEW_Conf+0x20>)
 800ce76:	6819      	ldr	r1, [r3, #0]
 800ce78:	4b05      	ldr	r3, [pc, #20]	; (800ce90 <SEGGER_SYSVIEW_Conf+0x24>)
 800ce7a:	4a06      	ldr	r2, [pc, #24]	; (800ce94 <SEGGER_SYSVIEW_Conf+0x28>)
 800ce7c:	f7ff f80c 	bl	800be98 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800ce80:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ce84:	f7ff f84c 	bl	800bf20 <SEGGER_SYSVIEW_SetRAMBase>
}
 800ce88:	bf00      	nop
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	20000014 	.word	0x20000014
 800ce90:	0800ce51 	.word	0x0800ce51
 800ce94:	08011bd0 	.word	0x08011bd0

0800ce98 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800ce98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800ce9e:	2300      	movs	r3, #0
 800cea0:	607b      	str	r3, [r7, #4]
 800cea2:	e048      	b.n	800cf36 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800cea4:	4929      	ldr	r1, [pc, #164]	; (800cf4c <_cbSendTaskList+0xb4>)
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4413      	add	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	440b      	add	r3, r1
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fd fe05 	bl	800aac4 <uxTaskGetStackHighWaterMark>
 800ceba:	4601      	mov	r1, r0
 800cebc:	4823      	ldr	r0, [pc, #140]	; (800cf4c <_cbSendTaskList+0xb4>)
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	4613      	mov	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4403      	add	r3, r0
 800ceca:	3310      	adds	r3, #16
 800cecc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800cece:	491f      	ldr	r1, [pc, #124]	; (800cf4c <_cbSendTaskList+0xb4>)
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	4613      	mov	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	440b      	add	r3, r1
 800cedc:	6818      	ldr	r0, [r3, #0]
 800cede:	491b      	ldr	r1, [pc, #108]	; (800cf4c <_cbSendTaskList+0xb4>)
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	4613      	mov	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	4413      	add	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	440b      	add	r3, r1
 800ceec:	3304      	adds	r3, #4
 800ceee:	6819      	ldr	r1, [r3, #0]
 800cef0:	4c16      	ldr	r4, [pc, #88]	; (800cf4c <_cbSendTaskList+0xb4>)
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	4613      	mov	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4423      	add	r3, r4
 800cefe:	3308      	adds	r3, #8
 800cf00:	681c      	ldr	r4, [r3, #0]
 800cf02:	4d12      	ldr	r5, [pc, #72]	; (800cf4c <_cbSendTaskList+0xb4>)
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	4613      	mov	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	442b      	add	r3, r5
 800cf10:	330c      	adds	r3, #12
 800cf12:	681d      	ldr	r5, [r3, #0]
 800cf14:	4e0d      	ldr	r6, [pc, #52]	; (800cf4c <_cbSendTaskList+0xb4>)
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4433      	add	r3, r6
 800cf22:	3310      	adds	r3, #16
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	462b      	mov	r3, r5
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	f000 f97a 	bl	800d224 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3301      	adds	r3, #1
 800cf34:	607b      	str	r3, [r7, #4]
 800cf36:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <_cbSendTaskList+0xb8>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d3b1      	bcc.n	800cea4 <_cbSendTaskList+0xc>
  }
}
 800cf40:	bf00      	nop
 800cf42:	bf00      	nop
 800cf44:	370c      	adds	r7, #12
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	200065e0 	.word	0x200065e0
 800cf50:	20006680 	.word	0x20006680

0800cf54 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800cf54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800cf5c:	f7fd fa6c 	bl	800a438 <xTaskGetTickCountFromISR>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2200      	movs	r2, #0
 800cf64:	469a      	mov	sl, r3
 800cf66:	4693      	mov	fp, r2
 800cf68:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800cf6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	f04f 0a00 	mov.w	sl, #0
 800cf78:	f04f 0b00 	mov.w	fp, #0
 800cf7c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800cf80:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800cf84:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800cf88:	4652      	mov	r2, sl
 800cf8a:	465b      	mov	r3, fp
 800cf8c:	1a14      	subs	r4, r2, r0
 800cf8e:	eb63 0501 	sbc.w	r5, r3, r1
 800cf92:	f04f 0200 	mov.w	r2, #0
 800cf96:	f04f 0300 	mov.w	r3, #0
 800cf9a:	00ab      	lsls	r3, r5, #2
 800cf9c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800cfa0:	00a2      	lsls	r2, r4, #2
 800cfa2:	4614      	mov	r4, r2
 800cfa4:	461d      	mov	r5, r3
 800cfa6:	eb14 0800 	adds.w	r8, r4, r0
 800cfaa:	eb45 0901 	adc.w	r9, r5, r1
 800cfae:	f04f 0200 	mov.w	r2, #0
 800cfb2:	f04f 0300 	mov.w	r3, #0
 800cfb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfc2:	4690      	mov	r8, r2
 800cfc4:	4699      	mov	r9, r3
 800cfc6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800cfca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800cfce:	4610      	mov	r0, r2
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800cfdc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af02      	add	r7, sp, #8
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800cfea:	2205      	movs	r2, #5
 800cfec:	492b      	ldr	r1, [pc, #172]	; (800d09c <SYSVIEW_AddTask+0xc0>)
 800cfee:	68b8      	ldr	r0, [r7, #8]
 800cff0:	f003 fd1e 	bl	8010a30 <memcmp>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d04b      	beq.n	800d092 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800cffa:	4b29      	ldr	r3, [pc, #164]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b07      	cmp	r3, #7
 800d000:	d903      	bls.n	800d00a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800d002:	4828      	ldr	r0, [pc, #160]	; (800d0a4 <SYSVIEW_AddTask+0xc8>)
 800d004:	f7ff fec8 	bl	800cd98 <SEGGER_SYSVIEW_Warn>
    return;
 800d008:	e044      	b.n	800d094 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800d00a:	4b25      	ldr	r3, [pc, #148]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	4926      	ldr	r1, [pc, #152]	; (800d0a8 <SYSVIEW_AddTask+0xcc>)
 800d010:	4613      	mov	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	440b      	add	r3, r1
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800d01e:	4b20      	ldr	r3, [pc, #128]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	4921      	ldr	r1, [pc, #132]	; (800d0a8 <SYSVIEW_AddTask+0xcc>)
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	440b      	add	r3, r1
 800d02e:	3304      	adds	r3, #4
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800d034:	4b1a      	ldr	r3, [pc, #104]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	491b      	ldr	r1, [pc, #108]	; (800d0a8 <SYSVIEW_AddTask+0xcc>)
 800d03a:	4613      	mov	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	440b      	add	r3, r1
 800d044:	3308      	adds	r3, #8
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800d04a:	4b15      	ldr	r3, [pc, #84]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	4916      	ldr	r1, [pc, #88]	; (800d0a8 <SYSVIEW_AddTask+0xcc>)
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	440b      	add	r3, r1
 800d05a:	330c      	adds	r3, #12
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800d060:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	4910      	ldr	r1, [pc, #64]	; (800d0a8 <SYSVIEW_AddTask+0xcc>)
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	440b      	add	r3, r1
 800d070:	3310      	adds	r3, #16
 800d072:	69ba      	ldr	r2, [r7, #24]
 800d074:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800d076:	4b0a      	ldr	r3, [pc, #40]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3301      	adds	r3, #1
 800d07c:	4a08      	ldr	r2, [pc, #32]	; (800d0a0 <SYSVIEW_AddTask+0xc4>)
 800d07e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	9300      	str	r3, [sp, #0]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	68b9      	ldr	r1, [r7, #8]
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f000 f8ca 	bl	800d224 <SYSVIEW_SendTaskInfo>
 800d090:	e000      	b.n	800d094 <SYSVIEW_AddTask+0xb8>
    return;
 800d092:	bf00      	nop

}
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	08011478 	.word	0x08011478
 800d0a0:	20006680 	.word	0x20006680
 800d0a4:	08011480 	.word	0x08011480
 800d0a8:	200065e0 	.word	0x200065e0

0800d0ac <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800d0b4:	4b59      	ldr	r3, [pc, #356]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80ab 	beq.w	800d214 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800d0be:	2300      	movs	r3, #0
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	e00d      	b.n	800d0e0 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800d0c4:	4956      	ldr	r1, [pc, #344]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	4413      	add	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	440b      	add	r3, r1
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d008      	beq.n	800d0ec <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	4b4e      	ldr	r3, [pc, #312]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d3ec      	bcc.n	800d0c4 <SYSVIEW_DeleteTask+0x18>
 800d0ea:	e000      	b.n	800d0ee <SYSVIEW_DeleteTask+0x42>
      break;
 800d0ec:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800d0ee:	4b4b      	ldr	r3, [pc, #300]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d111      	bne.n	800d11e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4a46      	ldr	r2, [pc, #280]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d106:	4413      	add	r3, r2
 800d108:	2214      	movs	r2, #20
 800d10a:	2100      	movs	r1, #0
 800d10c:	4618      	mov	r0, r3
 800d10e:	f003 fcad 	bl	8010a6c <memset>
    _NumTasks--;
 800d112:	4b42      	ldr	r3, [pc, #264]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	3b01      	subs	r3, #1
 800d118:	4a40      	ldr	r2, [pc, #256]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	e07b      	b.n	800d216 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800d11e:	4b3f      	ldr	r3, [pc, #252]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	429a      	cmp	r2, r3
 800d126:	d276      	bcs.n	800d216 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800d128:	4b3c      	ldr	r3, [pc, #240]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	1e5a      	subs	r2, r3, #1
 800d12e:	493c      	ldr	r1, [pc, #240]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d130:	4613      	mov	r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4413      	add	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	440b      	add	r3, r1
 800d13a:	6819      	ldr	r1, [r3, #0]
 800d13c:	4838      	ldr	r0, [pc, #224]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	4613      	mov	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	4403      	add	r3, r0
 800d14a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800d14c:	4b33      	ldr	r3, [pc, #204]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	1e5a      	subs	r2, r3, #1
 800d152:	4933      	ldr	r1, [pc, #204]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d154:	4613      	mov	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	440b      	add	r3, r1
 800d15e:	3304      	adds	r3, #4
 800d160:	6819      	ldr	r1, [r3, #0]
 800d162:	482f      	ldr	r0, [pc, #188]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	4613      	mov	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	4413      	add	r3, r2
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	4403      	add	r3, r0
 800d170:	3304      	adds	r3, #4
 800d172:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800d174:	4b29      	ldr	r3, [pc, #164]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	1e5a      	subs	r2, r3, #1
 800d17a:	4929      	ldr	r1, [pc, #164]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	3308      	adds	r3, #8
 800d188:	6819      	ldr	r1, [r3, #0]
 800d18a:	4825      	ldr	r0, [pc, #148]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	4613      	mov	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4403      	add	r3, r0
 800d198:	3308      	adds	r3, #8
 800d19a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800d19c:	4b1f      	ldr	r3, [pc, #124]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	1e5a      	subs	r2, r3, #1
 800d1a2:	491f      	ldr	r1, [pc, #124]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	440b      	add	r3, r1
 800d1ae:	330c      	adds	r3, #12
 800d1b0:	6819      	ldr	r1, [r3, #0]
 800d1b2:	481b      	ldr	r0, [pc, #108]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4403      	add	r3, r0
 800d1c0:	330c      	adds	r3, #12
 800d1c2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800d1c4:	4b15      	ldr	r3, [pc, #84]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	1e5a      	subs	r2, r3, #1
 800d1ca:	4915      	ldr	r1, [pc, #84]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	4413      	add	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	440b      	add	r3, r1
 800d1d6:	3310      	adds	r3, #16
 800d1d8:	6819      	ldr	r1, [r3, #0]
 800d1da:	4811      	ldr	r0, [pc, #68]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4403      	add	r3, r0
 800d1e8:	3310      	adds	r3, #16
 800d1ea:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800d1ec:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	1e5a      	subs	r2, r3, #1
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	4413      	add	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4a09      	ldr	r2, [pc, #36]	; (800d220 <SYSVIEW_DeleteTask+0x174>)
 800d1fc:	4413      	add	r3, r2
 800d1fe:	2214      	movs	r2, #20
 800d200:	2100      	movs	r1, #0
 800d202:	4618      	mov	r0, r3
 800d204:	f003 fc32 	bl	8010a6c <memset>
    _NumTasks--;
 800d208:	4b04      	ldr	r3, [pc, #16]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4a03      	ldr	r2, [pc, #12]	; (800d21c <SYSVIEW_DeleteTask+0x170>)
 800d210:	6013      	str	r3, [r2, #0]
 800d212:	e000      	b.n	800d216 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800d214:	bf00      	nop
  }
}
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	20006680 	.word	0x20006680
 800d220:	200065e0 	.word	0x200065e0

0800d224 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800d224:	b580      	push	{r7, lr}
 800d226:	b08a      	sub	sp, #40	; 0x28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
 800d230:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800d232:	f107 0314 	add.w	r3, r7, #20
 800d236:	2214      	movs	r2, #20
 800d238:	2100      	movs	r1, #0
 800d23a:	4618      	mov	r0, r3
 800d23c:	f003 fc16 	bl	8010a6c <memset>
  TaskInfo.TaskID     = TaskID;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800d254:	f107 0314 	add.w	r3, r7, #20
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff f9a7 	bl	800c5ac <SEGGER_SYSVIEW_SendTaskInfo>
}
 800d25e:	bf00      	nop
 800d260:	3728      	adds	r7, #40	; 0x28
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <LL_ADC_REG_SetSequencerRanks>:
{
 800d266:	b480      	push	{r7}
 800d268:	b089      	sub	sp, #36	; 0x24
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	60f8      	str	r0, [r7, #12]
 800d26e:	60b9      	str	r1, [r7, #8]
 800d270:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	332c      	adds	r3, #44	; 0x2c
 800d276:	4619      	mov	r1, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d27e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	fa92 f2a2 	rbit	r2, r2
 800d28a:	617a      	str	r2, [r7, #20]
  return result;
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	fab2 f282 	clz	r2, r2
 800d292:	b2d2      	uxtb	r2, r2
 800d294:	40d3      	lsrs	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	440b      	add	r3, r1
 800d29a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f003 031f 	and.w	r3, r3, #31
 800d2a6:	211f      	movs	r1, #31
 800d2a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ac:	43db      	mvns	r3, r3
 800d2ae:	401a      	ands	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f003 011f 	and.w	r1, r3, #31
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	f003 031f 	and.w	r3, r3, #31
 800d2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d2c0:	431a      	orrs	r2, r3
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	601a      	str	r2, [r3, #0]
}
 800d2c6:	bf00      	nop
 800d2c8:	3724      	adds	r7, #36	; 0x24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	609a      	str	r2, [r3, #8]
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <LL_ADC_SetChannelSamplingTime>:
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b08d      	sub	sp, #52	; 0x34
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	330c      	adds	r3, #12
 800d308:	4619      	mov	r1, r3
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d314:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	fa92 f2a2 	rbit	r2, r2
 800d31c:	617a      	str	r2, [r7, #20]
  return result;
 800d31e:	697a      	ldr	r2, [r7, #20]
 800d320:	fab2 f282 	clz	r2, r2
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	40d3      	lsrs	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	440b      	add	r3, r1
 800d32c:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800d338:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800d33c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d33e:	6a39      	ldr	r1, [r7, #32]
 800d340:	fa91 f1a1 	rbit	r1, r1
 800d344:	61f9      	str	r1, [r7, #28]
  return result;
 800d346:	69f9      	ldr	r1, [r7, #28]
 800d348:	fab1 f181 	clz	r1, r1
 800d34c:	b2c9      	uxtb	r1, r1
 800d34e:	40cb      	lsrs	r3, r1
 800d350:	2107      	movs	r1, #7
 800d352:	fa01 f303 	lsl.w	r3, r1, r3
 800d356:	43db      	mvns	r3, r3
 800d358:	401a      	ands	r2, r3
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800d360:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800d364:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d368:	fa91 f1a1 	rbit	r1, r1
 800d36c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800d36e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d370:	fab1 f181 	clz	r1, r1
 800d374:	b2c9      	uxtb	r1, r1
 800d376:	40cb      	lsrs	r3, r1
 800d378:	6879      	ldr	r1, [r7, #4]
 800d37a:	fa01 f303 	lsl.w	r3, r1, r3
 800d37e:	431a      	orrs	r2, r3
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	601a      	str	r2, [r3, #0]
}
 800d384:	bf00      	nop
 800d386:	3734      	adds	r7, #52	; 0x34
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <LL_ADC_Enable>:
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f043 0201 	orr.w	r2, r3, #1
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	609a      	str	r2, [r3, #8]
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	609a      	str	r2, [r3, #8]
}
 800d3c4:	bf00      	nop
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3dc:	b29b      	uxth	r3, r3
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b083      	sub	sp, #12
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 0302 	and.w	r3, r3, #2
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	bf0c      	ite	eq
 800d3fe:	2301      	moveq	r3, #1
 800d400:	2300      	movne	r3, #0
 800d402:	b2db      	uxtb	r3, r3
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <adc_init>:

#define ADC1_CONVERSION_TIMEOUT 1000

static void adc1_init(void);

void adc_init(AdcID id) {
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	4603      	mov	r3, r0
 800d418:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 800d41a:	79fb      	ldrb	r3, [r7, #7]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d108      	bne.n	800d432 <adc_init+0x22>
	case AdcId1:
		adc1_init();
 800d420:	f000 f85c 	bl	800d4dc <adc1_init>
		LL_ADC_Enable(ADC1);
 800d424:	4808      	ldr	r0, [pc, #32]	; (800d448 <adc_init+0x38>)
 800d426:	f7ff ffb3 	bl	800d390 <LL_ADC_Enable>
		hal_cli_printf("adc1 init");
 800d42a:	4808      	ldr	r0, [pc, #32]	; (800d44c <adc_init+0x3c>)
 800d42c:	f000 f99e 	bl	800d76c <hal_cli_printf>
		break;
 800d430:	e005      	b.n	800d43e <adc_init+0x2e>

	default:
		hal_cli_printf("adc%d not exist",id);
 800d432:	79fb      	ldrb	r3, [r7, #7]
 800d434:	4619      	mov	r1, r3
 800d436:	4806      	ldr	r0, [pc, #24]	; (800d450 <adc_init+0x40>)
 800d438:	f000 f998 	bl	800d76c <hal_cli_printf>
		break;
 800d43c:	bf00      	nop
	}
}
 800d43e:	bf00      	nop
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	40012000 	.word	0x40012000
 800d44c:	080114d0 	.word	0x080114d0
 800d450:	080114dc 	.word	0x080114dc

0800d454 <hal_adc_getdata>:

bool hal_adc_getdata(AdcID id, uint32_t* data) {
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
 800d45a:	4603      	mov	r3, r0
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	73fb      	strb	r3, [r7, #15]
	coretex_timer timer;
	timer = hal_get_delay_timer(ADC1_CONVERSION_TIMEOUT);
 800d460:	463b      	mov	r3, r7
 800d462:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d466:	4618      	mov	r0, r3
 800d468:	f000 fc3a 	bl	800dce0 <hal_get_delay_timer>
 800d46c:	f107 0310 	add.w	r3, r7, #16
 800d470:	463a      	mov	r2, r7
 800d472:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d476:	e883 0003 	stmia.w	r3, {r0, r1}

	switch(id) {
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d11d      	bne.n	800d4bc <hal_adc_getdata+0x68>
		case AdcId1:
			LL_ADC_REG_StartConversionSWStart(ADC1);
 800d480:	4813      	ldr	r0, [pc, #76]	; (800d4d0 <hal_adc_getdata+0x7c>)
 800d482:	f7ff ff95 	bl	800d3b0 <LL_ADC_REG_StartConversionSWStart>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800d486:	e009      	b.n	800d49c <hal_adc_getdata+0x48>
				if(hal_delay_timer_is_expired(&timer))
 800d488:	f107 0310 	add.w	r3, r7, #16
 800d48c:	4618      	mov	r0, r3
 800d48e:	f000 fc4d 	bl	800dd2c <hal_delay_timer_is_expired>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d001      	beq.n	800d49c <hal_adc_getdata+0x48>
					return false;
 800d498:	2300      	movs	r3, #0
 800d49a:	e015      	b.n	800d4c8 <hal_adc_getdata+0x74>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800d49c:	480c      	ldr	r0, [pc, #48]	; (800d4d0 <hal_adc_getdata+0x7c>)
 800d49e:	f7ff ffa4 	bl	800d3ea <LL_ADC_IsActiveFlag_EOCS>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d0ef      	beq.n	800d488 <hal_adc_getdata+0x34>
			}
			*data = LL_ADC_REG_ReadConversionData12(ADC1);
 800d4a8:	4809      	ldr	r0, [pc, #36]	; (800d4d0 <hal_adc_getdata+0x7c>)
 800d4aa:	f7ff ff91 	bl	800d3d0 <LL_ADC_REG_ReadConversionData12>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	601a      	str	r2, [r3, #0]
			break;
 800d4b6:	bf00      	nop
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
			return false;
			break;
	}

	return true;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e005      	b.n	800d4c8 <hal_adc_getdata+0x74>
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
 800d4bc:	2229      	movs	r2, #41	; 0x29
 800d4be:	4905      	ldr	r1, [pc, #20]	; (800d4d4 <hal_adc_getdata+0x80>)
 800d4c0:	4805      	ldr	r0, [pc, #20]	; (800d4d8 <hal_adc_getdata+0x84>)
 800d4c2:	f000 f953 	bl	800d76c <hal_cli_printf>
			return false;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	40012000 	.word	0x40012000
 800d4d4:	080114ec 	.word	0x080114ec
 800d4d8:	080114fc 	.word	0x080114fc

0800d4dc <adc1_init>:

static void adc1_init(void)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b08c      	sub	sp, #48	; 0x30
 800d4e0:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800d4e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	605a      	str	r2, [r3, #4]
 800d4ec:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800d4ee:	f107 0310 	add.w	r3, r7, #16
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	605a      	str	r2, [r3, #4]
 800d4f8:	609a      	str	r2, [r3, #8]
 800d4fa:	60da      	str	r2, [r3, #12]
 800d4fc:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800d4fe:	463b      	mov	r3, r7
 800d500:	2200      	movs	r2, #0
 800d502:	601a      	str	r2, [r3, #0]
 800d504:	605a      	str	r2, [r3, #4]
 800d506:	609a      	str	r2, [r3, #8]
 800d508:	60da      	str	r2, [r3, #12]

  hal_gpio_init(&gpio_adc1_channel7, GpioModeAnalog, GpioPullNo, GpioSpeedFreqLow);
 800d50a:	2300      	movs	r3, #0
 800d50c:	2200      	movs	r2, #0
 800d50e:	2105      	movs	r1, #5
 800d510:	481e      	ldr	r0, [pc, #120]	; (800d58c <adc1_init+0xb0>)
 800d512:	f000 fe33 	bl	800e17c <hal_gpio_init>

  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800d516:	2300      	movs	r3, #0
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800d51a:	2300      	movs	r3, #0
 800d51c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800d51e:	2300      	movs	r3, #0
 800d520:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800d522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d526:	4619      	mov	r1, r3
 800d528:	4819      	ldr	r0, [pc, #100]	; (800d590 <adc1_init+0xb4>)
 800d52a:	f7f5 ffc9 	bl	80034c0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800d52e:	2300      	movs	r3, #0
 800d530:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800d532:	2300      	movs	r3, #0
 800d534:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800d536:	2300      	movs	r3, #0
 800d538:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800d53e:	2300      	movs	r3, #0
 800d540:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800d542:	f107 0310 	add.w	r3, r7, #16
 800d546:	4619      	mov	r1, r3
 800d548:	4811      	ldr	r0, [pc, #68]	; (800d590 <adc1_init+0xb4>)
 800d54a:	f7f5 ffe5 	bl	8003518 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800d54e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d552:	480f      	ldr	r0, [pc, #60]	; (800d590 <adc1_init+0xb4>)
 800d554:	f7ff febd 	bl	800d2d2 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800d558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d55c:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800d55e:	2300      	movs	r3, #0
 800d560:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800d562:	463b      	mov	r3, r7
 800d564:	4619      	mov	r1, r3
 800d566:	480b      	ldr	r0, [pc, #44]	; (800d594 <adc1_init+0xb8>)
 800d568:	f7f5 ff62 	bl	8003430 <LL_ADC_CommonInit>


  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800d56c:	4a0a      	ldr	r2, [pc, #40]	; (800d598 <adc1_init+0xbc>)
 800d56e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d572:	4807      	ldr	r0, [pc, #28]	; (800d590 <adc1_init+0xb4>)
 800d574:	f7ff fe77 	bl	800d266 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 800d578:	2200      	movs	r2, #0
 800d57a:	4907      	ldr	r1, [pc, #28]	; (800d598 <adc1_init+0xbc>)
 800d57c:	4804      	ldr	r0, [pc, #16]	; (800d590 <adc1_init+0xb4>)
 800d57e:	f7ff febb 	bl	800d2f8 <LL_ADC_SetChannelSamplingTime>
}
 800d582:	bf00      	nop
 800d584:	3730      	adds	r7, #48	; 0x30
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	08011bf8 	.word	0x08011bf8
 800d590:	40012000 	.word	0x40012000
 800d594:	40012300 	.word	0x40012300
 800d598:	03500007 	.word	0x03500007

0800d59c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b089      	sub	sp, #36	; 0x24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	330c      	adds	r3, #12
 800d5a8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	e853 3f00 	ldrex	r3, [r3]
 800d5b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f043 0310 	orr.w	r3, r3, #16
 800d5b8:	61fb      	str	r3, [r7, #28]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	330c      	adds	r3, #12
 800d5be:	69fa      	ldr	r2, [r7, #28]
 800d5c0:	61ba      	str	r2, [r7, #24]
 800d5c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c4:	6979      	ldr	r1, [r7, #20]
 800d5c6:	69ba      	ldr	r2, [r7, #24]
 800d5c8:	e841 2300 	strex	r3, r2, [r1]
 800d5cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1e7      	bne.n	800d5a4 <LL_USART_EnableIT_IDLE+0x8>
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop
 800d5d8:	3724      	adds	r7, #36	; 0x24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b089      	sub	sp, #36	; 0x24
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	3314      	adds	r3, #20
 800d5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	e853 3f00 	ldrex	r3, [r3]
 800d5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5fe:	61fb      	str	r3, [r7, #28]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3314      	adds	r3, #20
 800d604:	69fa      	ldr	r2, [r7, #28]
 800d606:	61ba      	str	r2, [r7, #24]
 800d608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	6979      	ldr	r1, [r7, #20]
 800d60c:	69ba      	ldr	r2, [r7, #24]
 800d60e:	e841 2300 	strex	r3, r2, [r1]
 800d612:	613b      	str	r3, [r7, #16]
   return(result);
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1e7      	bne.n	800d5ea <LL_USART_EnableDMAReq_RX+0x8>
}
 800d61a:	bf00      	nop
 800d61c:	bf00      	nop
 800d61e:	3724      	adds	r7, #36	; 0x24
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800d632:	4a0c      	ldr	r2, [pc, #48]	; (800d664 <LL_DMA_EnableStream+0x3c>)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	4413      	add	r3, r2
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4413      	add	r3, r2
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4908      	ldr	r1, [pc, #32]	; (800d664 <LL_DMA_EnableStream+0x3c>)
 800d644:	683a      	ldr	r2, [r7, #0]
 800d646:	440a      	add	r2, r1
 800d648:	7812      	ldrb	r2, [r2, #0]
 800d64a:	4611      	mov	r1, r2
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	440a      	add	r2, r1
 800d650:	f043 0301 	orr.w	r3, r3, #1
 800d654:	6013      	str	r3, [r2, #0]
}
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	08011bd8 	.word	0x08011bd8

0800d668 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800d674:	4a0d      	ldr	r2, [pc, #52]	; (800d6ac <LL_DMA_SetDataLength+0x44>)
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	4413      	add	r3, r2
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	461a      	mov	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	4413      	add	r3, r2
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	0c1b      	lsrs	r3, r3, #16
 800d686:	041b      	lsls	r3, r3, #16
 800d688:	4908      	ldr	r1, [pc, #32]	; (800d6ac <LL_DMA_SetDataLength+0x44>)
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	440a      	add	r2, r1
 800d68e:	7812      	ldrb	r2, [r2, #0]
 800d690:	4611      	mov	r1, r2
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	440a      	add	r2, r1
 800d696:	4611      	mov	r1, r2
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	604b      	str	r3, [r1, #4]
}
 800d69e:	bf00      	nop
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	08011bd8 	.word	0x08011bd8

0800d6b0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800d6bc:	4a07      	ldr	r2, [pc, #28]	; (800d6dc <LL_DMA_SetMemoryAddress+0x2c>)
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	60d3      	str	r3, [r2, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	08011bd8 	.word	0x08011bd8

0800d6e0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800d6ec:	4a07      	ldr	r2, [pc, #28]	; (800d70c <LL_DMA_SetPeriphAddress+0x2c>)
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6093      	str	r3, [r2, #8]
}
 800d700:	bf00      	nop
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	08011bd8 	.word	0x08011bd8

0800d710 <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 800d716:	f7fc fe7f 	bl	800a418 <xTaskGetTickCount>
 800d71a:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4a10      	ldr	r2, [pc, #64]	; (800d760 <print_boottime+0x50>)
 800d720:	fba2 2303 	umull	r2, r3, r2, r3
 800d724:	099b      	lsrs	r3, r3, #6
 800d726:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	4a0d      	ldr	r2, [pc, #52]	; (800d760 <print_boottime+0x50>)
 800d72c:	fba2 1203 	umull	r1, r2, r2, r3
 800d730:	0992      	lsrs	r2, r2, #6
 800d732:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d736:	fb01 f202 	mul.w	r2, r1, r2
 800d73a:	1a9b      	subs	r3, r3, r2
 800d73c:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	4908      	ldr	r1, [pc, #32]	; (800d764 <print_boottime+0x54>)
 800d744:	4808      	ldr	r0, [pc, #32]	; (800d768 <print_boottime+0x58>)
 800d746:	f003 f999 	bl	8010a7c <siprintf>
 800d74a:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	461a      	mov	r2, r3
 800d750:	4905      	ldr	r1, [pc, #20]	; (800d768 <print_boottime+0x58>)
 800d752:	2000      	movs	r0, #0
 800d754:	f002 fff0 	bl	8010738 <hal_uart_transfer>
}
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	10624dd3 	.word	0x10624dd3
 800d764:	0801150c 	.word	0x0801150c
 800d768:	20006688 	.word	0x20006688

0800d76c <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 800d76c:	b40f      	push	{r0, r1, r2, r3}
 800d76e:	b580      	push	{r7, lr}
 800d770:	b082      	sub	sp, #8
 800d772:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 800d774:	4b17      	ldr	r3, [pc, #92]	; (800d7d4 <hal_cli_printf+0x68>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fc f805 	bl	800978c <xQueueSemaphoreTake>
 800d782:	4603      	mov	r3, r0
 800d784:	2b01      	cmp	r3, #1
 800d786:	d11d      	bne.n	800d7c4 <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 800d788:	f7ff ffc2 	bl	800d710 <print_boottime>

	va_start(valist, fmt);
 800d78c:	f107 0314 	add.w	r3, r7, #20
 800d790:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	6939      	ldr	r1, [r7, #16]
 800d796:	4810      	ldr	r0, [pc, #64]	; (800d7d8 <hal_cli_printf+0x6c>)
 800d798:	f003 f9a6 	bl	8010ae8 <vsiprintf>
 800d79c:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	490d      	ldr	r1, [pc, #52]	; (800d7d8 <hal_cli_printf+0x6c>)
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	f002 ffc7 	bl	8010738 <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 800d7aa:	2202      	movs	r2, #2
 800d7ac:	490b      	ldr	r1, [pc, #44]	; (800d7dc <hal_cli_printf+0x70>)
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	f002 ffc2 	bl	8010738 <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 800d7b4:	4b07      	ldr	r3, [pc, #28]	; (800d7d4 <hal_cli_printf+0x68>)
 800d7b6:	6818      	ldr	r0, [r3, #0]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2100      	movs	r1, #0
 800d7be:	f7fb fcf1 	bl	80091a4 <xQueueGenericSend>
 800d7c2:	e000      	b.n	800d7c6 <hal_cli_printf+0x5a>
		return;
 800d7c4:	bf00      	nop
}
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7ce:	b004      	add	sp, #16
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	20006684 	.word	0x20006684
 800d7d8:	20006688 	.word	0x20006688
 800d7dc:	08011518 	.word	0x08011518

0800d7e0 <hal_cli_init>:

void hal_cli_init(void) {
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 800d7e4:	4b17      	ldr	r3, [pc, #92]	; (800d844 <hal_cli_init+0x64>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 800d7ec:	4b15      	ldr	r3, [pc, #84]	; (800d844 <hal_cli_init+0x64>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 800d7f4:	4b13      	ldr	r3, [pc, #76]	; (800d844 <hal_cli_init+0x64>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 800d7fc:	2001      	movs	r0, #1
 800d7fe:	f7fb fcb9 	bl	8009174 <xQueueCreateMutex>
 800d802:	4603      	mov	r3, r0
 800d804:	4a10      	ldr	r2, [pc, #64]	; (800d848 <hal_cli_init+0x68>)
 800d806:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 800d808:	4b10      	ldr	r3, [pc, #64]	; (800d84c <hal_cli_init+0x6c>)
 800d80a:	461a      	mov	r2, r3
 800d80c:	2102      	movs	r1, #2
 800d80e:	4810      	ldr	r0, [pc, #64]	; (800d850 <hal_cli_init+0x70>)
 800d810:	f7ff ff4e 	bl	800d6b0 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800d814:	4a0f      	ldr	r2, [pc, #60]	; (800d854 <hal_cli_init+0x74>)
 800d816:	2102      	movs	r1, #2
 800d818:	480d      	ldr	r0, [pc, #52]	; (800d850 <hal_cli_init+0x70>)
 800d81a:	f7ff ff61 	bl	800d6e0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 800d81e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d822:	2102      	movs	r1, #2
 800d824:	480a      	ldr	r0, [pc, #40]	; (800d850 <hal_cli_init+0x70>)
 800d826:	f7ff ff1f 	bl	800d668 <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 800d82a:	480b      	ldr	r0, [pc, #44]	; (800d858 <hal_cli_init+0x78>)
 800d82c:	f7ff fed9 	bl	800d5e2 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800d830:	2102      	movs	r1, #2
 800d832:	4807      	ldr	r0, [pc, #28]	; (800d850 <hal_cli_init+0x70>)
 800d834:	f7ff fef8 	bl	800d628 <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 800d838:	4807      	ldr	r0, [pc, #28]	; (800d858 <hal_cli_init+0x78>)
 800d83a:	f7ff feaf 	bl	800d59c <LL_USART_EnableIT_IDLE>
}
 800d83e:	bf00      	nop
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	20006688 	.word	0x20006688
 800d848:	20006684 	.word	0x20006684
 800d84c:	20006788 	.word	0x20006788
 800d850:	40026400 	.word	0x40026400
 800d854:	40011004 	.word	0x40011004
 800d858:	40011000 	.word	0x40011000

0800d85c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800d864:	4b08      	ldr	r3, [pc, #32]	; (800d888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800d866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d868:	4907      	ldr	r1, [pc, #28]	; (800d888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800d870:	4b05      	ldr	r3, [pc, #20]	; (800d888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800d872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4013      	ands	r3, r2
 800d878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d87a:	68fb      	ldr	r3, [r7, #12]
}
 800d87c:	bf00      	nop
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	40023800 	.word	0x40023800

0800d88c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800d894:	4b08      	ldr	r3, [pc, #32]	; (800d8b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800d896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d898:	4907      	ldr	r1, [pc, #28]	; (800d8b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800d8a0:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800d8a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
}
 800d8ac:	bf00      	nop
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	40023800 	.word	0x40023800

0800d8bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800d8c4:	4b08      	ldr	r3, [pc, #32]	; (800d8e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800d8c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8c8:	4907      	ldr	r1, [pc, #28]	; (800d8e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800d8d0:	4b05      	ldr	r3, [pc, #20]	; (800d8e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800d8d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d8da:	68fb      	ldr	r3, [r7, #12]
}
 800d8dc:	bf00      	nop
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	40023800 	.word	0x40023800

0800d8ec <LL_RCC_HSE_Enable>:
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800d8f0:	4b05      	ldr	r3, [pc, #20]	; (800d908 <LL_RCC_HSE_Enable+0x1c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a04      	ldr	r2, [pc, #16]	; (800d908 <LL_RCC_HSE_Enable+0x1c>)
 800d8f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8fa:	6013      	str	r3, [r2, #0]
}
 800d8fc:	bf00      	nop
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	40023800 	.word	0x40023800

0800d90c <LL_RCC_HSE_IsReady>:
{
 800d90c:	b480      	push	{r7}
 800d90e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800d910:	4b07      	ldr	r3, [pc, #28]	; (800d930 <LL_RCC_HSE_IsReady+0x24>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d91c:	bf0c      	ite	eq
 800d91e:	2301      	moveq	r3, #1
 800d920:	2300      	movne	r3, #0
 800d922:	b2db      	uxtb	r3, r3
}
 800d924:	4618      	mov	r0, r3
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	40023800 	.word	0x40023800

0800d934 <LL_RCC_SetSysClkSource>:
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d93c:	4b06      	ldr	r3, [pc, #24]	; (800d958 <LL_RCC_SetSysClkSource+0x24>)
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	f023 0203 	bic.w	r2, r3, #3
 800d944:	4904      	ldr	r1, [pc, #16]	; (800d958 <LL_RCC_SetSysClkSource+0x24>)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4313      	orrs	r3, r2
 800d94a:	608b      	str	r3, [r1, #8]
}
 800d94c:	bf00      	nop
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	40023800 	.word	0x40023800

0800d95c <LL_RCC_GetSysClkSource>:
{
 800d95c:	b480      	push	{r7}
 800d95e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d960:	4b04      	ldr	r3, [pc, #16]	; (800d974 <LL_RCC_GetSysClkSource+0x18>)
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	f003 030c 	and.w	r3, r3, #12
}
 800d968:	4618      	mov	r0, r3
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	40023800 	.word	0x40023800

0800d978 <LL_RCC_SetAHBPrescaler>:
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d980:	4b06      	ldr	r3, [pc, #24]	; (800d99c <LL_RCC_SetAHBPrescaler+0x24>)
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d988:	4904      	ldr	r1, [pc, #16]	; (800d99c <LL_RCC_SetAHBPrescaler+0x24>)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	608b      	str	r3, [r1, #8]
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	40023800 	.word	0x40023800

0800d9a0 <LL_RCC_SetAPB1Prescaler>:
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d9a8:	4b06      	ldr	r3, [pc, #24]	; (800d9c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d9b0:	4904      	ldr	r1, [pc, #16]	; (800d9c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	608b      	str	r3, [r1, #8]
}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	40023800 	.word	0x40023800

0800d9c8 <LL_RCC_SetAPB2Prescaler>:
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d9d0:	4b06      	ldr	r3, [pc, #24]	; (800d9ec <LL_RCC_SetAPB2Prescaler+0x24>)
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d9d8:	4904      	ldr	r1, [pc, #16]	; (800d9ec <LL_RCC_SetAPB2Prescaler+0x24>)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	608b      	str	r3, [r1, #8]
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	40023800 	.word	0x40023800

0800d9f0 <LL_RCC_SetTIMPrescaler>:
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800d9f8:	4b07      	ldr	r3, [pc, #28]	; (800da18 <LL_RCC_SetTIMPrescaler+0x28>)
 800d9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800da02:	4905      	ldr	r1, [pc, #20]	; (800da18 <LL_RCC_SetTIMPrescaler+0x28>)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4313      	orrs	r3, r2
 800da08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	40023800 	.word	0x40023800

0800da1c <LL_RCC_PLL_Enable>:
{
 800da1c:	b480      	push	{r7}
 800da1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800da20:	4b05      	ldr	r3, [pc, #20]	; (800da38 <LL_RCC_PLL_Enable+0x1c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a04      	ldr	r2, [pc, #16]	; (800da38 <LL_RCC_PLL_Enable+0x1c>)
 800da26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da2a:	6013      	str	r3, [r2, #0]
}
 800da2c:	bf00      	nop
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	40023800 	.word	0x40023800

0800da3c <LL_RCC_PLL_IsReady>:
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800da40:	4b07      	ldr	r3, [pc, #28]	; (800da60 <LL_RCC_PLL_IsReady+0x24>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da4c:	bf0c      	ite	eq
 800da4e:	2301      	moveq	r3, #1
 800da50:	2300      	movne	r3, #0
 800da52:	b2db      	uxtb	r3, r3
}
 800da54:	4618      	mov	r0, r3
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	40023800 	.word	0x40023800

0800da64 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800da72:	4b0d      	ldr	r3, [pc, #52]	; (800daa8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800da74:	685a      	ldr	r2, [r3, #4]
 800da76:	4b0d      	ldr	r3, [pc, #52]	; (800daac <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800da78:	4013      	ands	r3, r2
 800da7a:	68f9      	ldr	r1, [r7, #12]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	4311      	orrs	r1, r2
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	0192      	lsls	r2, r2, #6
 800da84:	430a      	orrs	r2, r1
 800da86:	4908      	ldr	r1, [pc, #32]	; (800daa8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800da88:	4313      	orrs	r3, r2
 800da8a:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800da8c:	4b06      	ldr	r3, [pc, #24]	; (800daa8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800da94:	4904      	ldr	r1, [pc, #16]	; (800daa8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	4313      	orrs	r3, r2
 800da9a:	604b      	str	r3, [r1, #4]
}
 800da9c:	bf00      	nop
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	40023800 	.word	0x40023800
 800daac:	ffbf8000 	.word	0xffbf8000

0800dab0 <LL_RCC_PLL_ConfigDomain_48M>:
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
 800dabc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800dabe:	4b0a      	ldr	r3, [pc, #40]	; (800dae8 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	4b0a      	ldr	r3, [pc, #40]	; (800daec <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 800dac4:	4013      	ands	r3, r2
 800dac6:	68f9      	ldr	r1, [r7, #12]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	4311      	orrs	r1, r2
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	0192      	lsls	r2, r2, #6
 800dad0:	4311      	orrs	r1, r2
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	430a      	orrs	r2, r1
 800dad6:	4904      	ldr	r1, [pc, #16]	; (800dae8 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800dad8:	4313      	orrs	r3, r2
 800dada:	604b      	str	r3, [r1, #4]
}
 800dadc:	bf00      	nop
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	40023800 	.word	0x40023800
 800daec:	f0bf8000 	.word	0xf0bf8000

0800daf0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800daf8:	4b06      	ldr	r3, [pc, #24]	; (800db14 <LL_FLASH_SetLatency+0x24>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f023 020f 	bic.w	r2, r3, #15
 800db00:	4904      	ldr	r1, [pc, #16]	; (800db14 <LL_FLASH_SetLatency+0x24>)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4313      	orrs	r3, r2
 800db06:	600b      	str	r3, [r1, #0]
}
 800db08:	bf00      	nop
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	40023c00 	.word	0x40023c00

0800db18 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800db18:	b480      	push	{r7}
 800db1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800db1c:	4b04      	ldr	r3, [pc, #16]	; (800db30 <LL_FLASH_GetLatency+0x18>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 030f 	and.w	r3, r3, #15
}
 800db24:	4618      	mov	r0, r3
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	40023c00 	.word	0x40023c00

0800db34 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800db34:	b480      	push	{r7}
 800db36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800db38:	4b05      	ldr	r3, [pc, #20]	; (800db50 <LL_PWR_EnableOverDriveMode+0x1c>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a04      	ldr	r2, [pc, #16]	; (800db50 <LL_PWR_EnableOverDriveMode+0x1c>)
 800db3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db42:	6013      	str	r3, [r2, #0]
}
 800db44:	bf00      	nop
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	40007000 	.word	0x40007000

0800db54 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800db5c:	4b06      	ldr	r3, [pc, #24]	; (800db78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800db64:	4904      	ldr	r1, [pc, #16]	; (800db78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4313      	orrs	r3, r2
 800db6a:	600b      	str	r3, [r1, #0]
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr
 800db78:	40007000 	.word	0x40007000

0800db7c <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 800db7c:	b580      	push	{r7, lr}
 800db7e:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800db80:	2001      	movs	r0, #1
 800db82:	f7ff fe6b 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800db86:	2002      	movs	r0, #2
 800db88:	f7ff fe68 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800db8c:	2004      	movs	r0, #4
 800db8e:	f7ff fe65 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800db92:	2008      	movs	r0, #8
 800db94:	f7ff fe62 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800db98:	2010      	movs	r0, #16
 800db9a:	f7ff fe5f 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800db9e:	2020      	movs	r0, #32
 800dba0:	f7ff fe5c 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800dba4:	2040      	movs	r0, #64	; 0x40
 800dba6:	f7ff fe59 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800dbaa:	2080      	movs	r0, #128	; 0x80
 800dbac:	f7ff fe56 	bl	800d85c <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800dbb0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dbb4:	f7ff fe52 	bl	800d85c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800dbb8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dbbc:	f7ff fe4e 	bl	800d85c <LL_AHB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800dbc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dbc4:	f7ff fe7a 	bl	800d8bc <LL_APB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800dbc8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dbcc:	f7ff fe5e 	bl	800d88c <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800dbd0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dbd4:	f7ff fe5a 	bl	800d88c <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800dbd8:	2010      	movs	r0, #16
 800dbda:	f7ff fe6f 	bl	800d8bc <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800dbde:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800dbe2:	f7ff fe53 	bl	800d88c <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800dbe6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800dbea:	f7ff fe4f 	bl	800d88c <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 800dbee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dbf2:	f7ff fe63 	bl	800d8bc <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 800dbf6:	bf00      	nop
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800dc02:	2005      	movs	r0, #5
 800dc04:	f7ff ff74 	bl	800daf0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800dc08:	bf00      	nop
 800dc0a:	f7ff ff85 	bl	800db18 <LL_FLASH_GetLatency>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b05      	cmp	r3, #5
 800dc12:	d1fa      	bne.n	800dc0a <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800dc14:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800dc18:	f7ff ff9c 	bl	800db54 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800dc1c:	f7ff ff8a 	bl	800db34 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800dc20:	f7ff fe64 	bl	800d8ec <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800dc24:	bf00      	nop
 800dc26:	f7ff fe71 	bl	800d90c <LL_RCC_HSE_IsReady>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d1fa      	bne.n	800dc26 <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800dc30:	2300      	movs	r3, #0
 800dc32:	22b4      	movs	r2, #180	; 0xb4
 800dc34:	2104      	movs	r1, #4
 800dc36:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dc3a:	f7ff ff13 	bl	800da64 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 800dc3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc42:	22b4      	movs	r2, #180	; 0xb4
 800dc44:	2104      	movs	r1, #4
 800dc46:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dc4a:	f7ff ff31 	bl	800dab0 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 800dc4e:	f7ff fee5 	bl	800da1c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800dc52:	bf00      	nop
 800dc54:	f7ff fef2 	bl	800da3c <LL_RCC_PLL_IsReady>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d1fa      	bne.n	800dc54 <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800dc5e:	2000      	movs	r0, #0
 800dc60:	f7ff fe8a 	bl	800d978 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800dc64:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800dc68:	f7ff fe9a 	bl	800d9a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800dc6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800dc70:	f7ff feaa 	bl	800d9c8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800dc74:	2002      	movs	r0, #2
 800dc76:	f7ff fe5d 	bl	800d934 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800dc7a:	bf00      	nop
 800dc7c:	f7ff fe6e 	bl	800d95c <LL_RCC_GetSysClkSource>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b08      	cmp	r3, #8
 800dc84:	d1fa      	bne.n	800dc7c <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 800dc86:	4808      	ldr	r0, [pc, #32]	; (800dca8 <hal_clock_init_early+0xac>)
 800dc88:	f7f7 f946 	bl	8004f18 <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800dc8c:	463b      	mov	r3, r7
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7f5 ffb2 	bl	8003bf8 <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800dc94:	2005      	movs	r0, #5
 800dc96:	f002 f967 	bl	800ff68 <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	f7ff fea8 	bl	800d9f0 <LL_RCC_SetTIMPrescaler>
}
 800dca0:	bf00      	nop
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	0aba9500 	.word	0x0aba9500

0800dcac <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 800dcac:	b480      	push	{r7}
 800dcae:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800dcb0:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <hal_dwt_init_early+0x2c>)
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	4a08      	ldr	r2, [pc, #32]	; (800dcd8 <hal_dwt_init_early+0x2c>)
 800dcb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dcba:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800dcbc:	4b07      	ldr	r3, [pc, #28]	; (800dcdc <hal_dwt_init_early+0x30>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a06      	ldr	r2, [pc, #24]	; (800dcdc <hal_dwt_init_early+0x30>)
 800dcc2:	f043 0301 	orr.w	r3, r3, #1
 800dcc6:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 800dcc8:	4b04      	ldr	r3, [pc, #16]	; (800dcdc <hal_dwt_init_early+0x30>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	605a      	str	r2, [r3, #4]
}
 800dcce:	bf00      	nop
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	e000edf0 	.word	0xe000edf0
 800dcdc:	e0001000 	.word	0xe0001000

0800dce0 <hal_get_delay_timer>:
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
    while((DWT->CYCCNT - start) < time_ticks) {
    };
}

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 800dcea:	4b0d      	ldr	r3, [pc, #52]	; (800dd20 <hal_get_delay_timer+0x40>)
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000) * timeout;
 800dcf0:	4b0c      	ldr	r3, [pc, #48]	; (800dd24 <hal_get_delay_timer+0x44>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a0c      	ldr	r2, [pc, #48]	; (800dd28 <hal_get_delay_timer+0x48>)
 800dcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcfa:	099b      	lsrs	r3, r3, #6
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	fb02 f303 	mul.w	r3, r2, r3
 800dd02:	60fb      	str	r3, [r7, #12]
	return tmp;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	461a      	mov	r2, r3
 800dd08:	f107 0308 	add.w	r3, r7, #8
 800dd0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd10:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	e0001000 	.word	0xe0001000
 800dd24:	20000014 	.word	0x20000014
 800dd28:	10624dd3 	.word	0x10624dd3

0800dd2c <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 800dd34:	4b08      	ldr	r3, [pc, #32]	; (800dd58 <hal_delay_timer_is_expired+0x2c>)
 800dd36:	685a      	ldr	r2, [r3, #4]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	1ad2      	subs	r2, r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	bf2c      	ite	cs
 800dd46:	2301      	movcs	r3, #1
 800dd48:	2300      	movcc	r3, #0
 800dd4a:	b2db      	uxtb	r3, r3
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	e0001000 	.word	0xe0001000

0800dd5c <LL_GPIO_SetPinMode>:
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b089      	sub	sp, #36	; 0x24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	fa93 f3a3 	rbit	r3, r3
 800dd76:	613b      	str	r3, [r7, #16]
  return result;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	fab3 f383 	clz	r3, r3
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	005b      	lsls	r3, r3, #1
 800dd82:	2103      	movs	r1, #3
 800dd84:	fa01 f303 	lsl.w	r3, r1, r3
 800dd88:	43db      	mvns	r3, r3
 800dd8a:	401a      	ands	r2, r3
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	fa93 f3a3 	rbit	r3, r3
 800dd96:	61bb      	str	r3, [r7, #24]
  return result;
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	fab3 f383 	clz	r3, r3
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	6879      	ldr	r1, [r7, #4]
 800dda4:	fa01 f303 	lsl.w	r3, r1, r3
 800dda8:	431a      	orrs	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	601a      	str	r2, [r3, #0]
}
 800ddae:	bf00      	nop
 800ddb0:	3724      	adds	r7, #36	; 0x24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <LL_GPIO_SetPinOutputType>:
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b085      	sub	sp, #20
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	60b9      	str	r1, [r7, #8]
 800ddc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	685a      	ldr	r2, [r3, #4]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	43db      	mvns	r3, r3
 800ddce:	401a      	ands	r2, r3
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	6879      	ldr	r1, [r7, #4]
 800ddd4:	fb01 f303 	mul.w	r3, r1, r3
 800ddd8:	431a      	orrs	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	605a      	str	r2, [r3, #4]
}
 800ddde:	bf00      	nop
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <LL_GPIO_SetPinSpeed>:
{
 800ddea:	b480      	push	{r7}
 800ddec:	b089      	sub	sp, #36	; 0x24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	60b9      	str	r1, [r7, #8]
 800ddf4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	689a      	ldr	r2, [r3, #8]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	fa93 f3a3 	rbit	r3, r3
 800de04:	613b      	str	r3, [r7, #16]
  return result;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	fab3 f383 	clz	r3, r3
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	005b      	lsls	r3, r3, #1
 800de10:	2103      	movs	r1, #3
 800de12:	fa01 f303 	lsl.w	r3, r1, r3
 800de16:	43db      	mvns	r3, r3
 800de18:	401a      	ands	r2, r3
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	fa93 f3a3 	rbit	r3, r3
 800de24:	61bb      	str	r3, [r7, #24]
  return result;
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	fab3 f383 	clz	r3, r3
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	6879      	ldr	r1, [r7, #4]
 800de32:	fa01 f303 	lsl.w	r3, r1, r3
 800de36:	431a      	orrs	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	609a      	str	r2, [r3, #8]
}
 800de3c:	bf00      	nop
 800de3e:	3724      	adds	r7, #36	; 0x24
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <LL_GPIO_SetPinPull>:
{
 800de48:	b480      	push	{r7}
 800de4a:	b089      	sub	sp, #36	; 0x24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68da      	ldr	r2, [r3, #12]
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	fa93 f3a3 	rbit	r3, r3
 800de62:	613b      	str	r3, [r7, #16]
  return result;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	fab3 f383 	clz	r3, r3
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	2103      	movs	r1, #3
 800de70:	fa01 f303 	lsl.w	r3, r1, r3
 800de74:	43db      	mvns	r3, r3
 800de76:	401a      	ands	r2, r3
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	fa93 f3a3 	rbit	r3, r3
 800de82:	61bb      	str	r3, [r7, #24]
  return result;
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	fab3 f383 	clz	r3, r3
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	fa01 f303 	lsl.w	r3, r1, r3
 800de94:	431a      	orrs	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	60da      	str	r2, [r3, #12]
}
 800de9a:	bf00      	nop
 800de9c:	3724      	adds	r7, #36	; 0x24
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <LL_GPIO_SetAFPin_0_7>:
{
 800dea6:	b480      	push	{r7}
 800dea8:	b089      	sub	sp, #36	; 0x24
 800deaa:	af00      	add	r7, sp, #0
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6a1a      	ldr	r2, [r3, #32]
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	fa93 f3a3 	rbit	r3, r3
 800dec0:	613b      	str	r3, [r7, #16]
  return result;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	fab3 f383 	clz	r3, r3
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	210f      	movs	r1, #15
 800dece:	fa01 f303 	lsl.w	r3, r1, r3
 800ded2:	43db      	mvns	r3, r3
 800ded4:	401a      	ands	r2, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	fa93 f3a3 	rbit	r3, r3
 800dee0:	61bb      	str	r3, [r7, #24]
  return result;
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	fab3 f383 	clz	r3, r3
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	6879      	ldr	r1, [r7, #4]
 800deee:	fa01 f303 	lsl.w	r3, r1, r3
 800def2:	431a      	orrs	r2, r3
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	621a      	str	r2, [r3, #32]
}
 800def8:	bf00      	nop
 800defa:	3724      	adds	r7, #36	; 0x24
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <LL_GPIO_SetAFPin_8_15>:
{
 800df04:	b480      	push	{r7}
 800df06:	b089      	sub	sp, #36	; 0x24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	0a1b      	lsrs	r3, r3, #8
 800df18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	fa93 f3a3 	rbit	r3, r3
 800df20:	613b      	str	r3, [r7, #16]
  return result;
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	fab3 f383 	clz	r3, r3
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	210f      	movs	r1, #15
 800df2e:	fa01 f303 	lsl.w	r3, r1, r3
 800df32:	43db      	mvns	r3, r3
 800df34:	401a      	ands	r2, r3
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	0a1b      	lsrs	r3, r3, #8
 800df3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	fa93 f3a3 	rbit	r3, r3
 800df42:	61bb      	str	r3, [r7, #24]
  return result;
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	fab3 f383 	clz	r3, r3
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	6879      	ldr	r1, [r7, #4]
 800df50:	fa01 f303 	lsl.w	r3, r1, r3
 800df54:	431a      	orrs	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	625a      	str	r2, [r3, #36]	; 0x24
}
 800df5a:	bf00      	nop
 800df5c:	3724      	adds	r7, #36	; 0x24
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
	...

0800df68 <LL_SYSCFG_SetEXTISource>:
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800df72:	4a13      	ldr	r2, [pc, #76]	; (800dfc0 <LL_SYSCFG_SetEXTISource+0x58>)
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	3302      	adds	r3, #2
 800df7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	0c1b      	lsrs	r3, r3, #16
 800df82:	43db      	mvns	r3, r3
 800df84:	ea02 0103 	and.w	r1, r2, r3
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	0c1b      	lsrs	r3, r3, #16
 800df8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	fa93 f3a3 	rbit	r3, r3
 800df94:	60bb      	str	r3, [r7, #8]
  return result;
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	fab3 f383 	clz	r3, r3
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	461a      	mov	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	fa03 f202 	lsl.w	r2, r3, r2
 800dfa6:	4806      	ldr	r0, [pc, #24]	; (800dfc0 <LL_SYSCFG_SetEXTISource+0x58>)
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	430a      	orrs	r2, r1
 800dfae:	3302      	adds	r3, #2
 800dfb0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800dfb4:	bf00      	nop
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	40013800 	.word	0x40013800

0800dfc4 <LL_SYSCFG_GetEXTISource>:
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800dfcc:	4a0d      	ldr	r2, [pc, #52]	; (800e004 <LL_SYSCFG_GetEXTISource+0x40>)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	3302      	adds	r3, #2
 800dfd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	0c1b      	lsrs	r3, r3, #16
 800dfdc:	4013      	ands	r3, r2
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	0c12      	lsrs	r2, r2, #16
 800dfe2:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	fa92 f2a2 	rbit	r2, r2
 800dfea:	60ba      	str	r2, [r7, #8]
  return result;
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	fab2 f282 	clz	r2, r2
 800dff2:	b2d2      	uxtb	r2, r2
 800dff4:	40d3      	lsrs	r3, r2
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3714      	adds	r7, #20
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	40013800 	.word	0x40013800

0800e008 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800e010:	4b05      	ldr	r3, [pc, #20]	; (800e028 <LL_EXTI_EnableIT_0_31+0x20>)
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	4904      	ldr	r1, [pc, #16]	; (800e028 <LL_EXTI_EnableIT_0_31+0x20>)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4313      	orrs	r3, r2
 800e01a:	600b      	str	r3, [r1, #0]
}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	40013c00 	.word	0x40013c00

0800e02c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800e034:	4b06      	ldr	r3, [pc, #24]	; (800e050 <LL_EXTI_DisableIT_0_31+0x24>)
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	43db      	mvns	r3, r3
 800e03c:	4904      	ldr	r1, [pc, #16]	; (800e050 <LL_EXTI_DisableIT_0_31+0x24>)
 800e03e:	4013      	ands	r3, r2
 800e040:	600b      	str	r3, [r1, #0]
}
 800e042:	bf00      	nop
 800e044:	370c      	adds	r7, #12
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop
 800e050:	40013c00 	.word	0x40013c00

0800e054 <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 800e05c:	4b07      	ldr	r3, [pc, #28]	; (800e07c <LL_EXTI_IsEnabledIT_0_31+0x28>)
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4013      	ands	r3, r2
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	429a      	cmp	r2, r3
 800e068:	bf0c      	ite	eq
 800e06a:	2301      	moveq	r3, #1
 800e06c:	2300      	movne	r3, #0
 800e06e:	b2db      	uxtb	r3, r3
}
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	40013c00 	.word	0x40013c00

0800e080 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800e088:	4b05      	ldr	r3, [pc, #20]	; (800e0a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800e08a:	685a      	ldr	r2, [r3, #4]
 800e08c:	4904      	ldr	r1, [pc, #16]	; (800e0a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4313      	orrs	r3, r2
 800e092:	604b      	str	r3, [r1, #4]

}
 800e094:	bf00      	nop
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	40013c00 	.word	0x40013c00

0800e0a4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800e0ac:	4b05      	ldr	r3, [pc, #20]	; (800e0c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800e0ae:	689a      	ldr	r2, [r3, #8]
 800e0b0:	4904      	ldr	r1, [pc, #16]	; (800e0c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	608b      	str	r3, [r1, #8]

}
 800e0b8:	bf00      	nop
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	40013c00 	.word	0x40013c00

0800e0c8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800e0d0:	4b06      	ldr	r3, [pc, #24]	; (800e0ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800e0d2:	689a      	ldr	r2, [r3, #8]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	43db      	mvns	r3, r3
 800e0d8:	4904      	ldr	r1, [pc, #16]	; (800e0ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800e0da:	4013      	ands	r3, r2
 800e0dc:	608b      	str	r3, [r1, #8]

}
 800e0de:	bf00      	nop
 800e0e0:	370c      	adds	r7, #12
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	40013c00 	.word	0x40013c00

0800e0f0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800e0f8:	4b05      	ldr	r3, [pc, #20]	; (800e110 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800e0fa:	68da      	ldr	r2, [r3, #12]
 800e0fc:	4904      	ldr	r1, [pc, #16]	; (800e110 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4313      	orrs	r3, r2
 800e102:	60cb      	str	r3, [r1, #12]
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	40013c00 	.word	0x40013c00

0800e114 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800e11c:	4b06      	ldr	r3, [pc, #24]	; (800e138 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800e11e:	68da      	ldr	r2, [r3, #12]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	43db      	mvns	r3, r3
 800e124:	4904      	ldr	r1, [pc, #16]	; (800e138 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800e126:	4013      	ands	r3, r2
 800e128:	60cb      	str	r3, [r1, #12]
}
 800e12a:	bf00      	nop
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	40013c00 	.word	0x40013c00

0800e13c <hal_gpio_get_pin_number>:
#define GET_SYSCFG_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_SYSCFG_EXTI_LINE)
#define GET_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_EXTI_LINE_)

static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800e144:	2300      	movs	r3, #0
 800e146:	73fb      	strb	r3, [r7, #15]
 800e148:	e00c      	b.n	800e164 <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	889b      	ldrh	r3, [r3, #4]
 800e14e:	461a      	mov	r2, r3
 800e150:	7bfb      	ldrb	r3, [r7, #15]
 800e152:	fa42 f303 	asr.w	r3, r2, r3
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d106      	bne.n	800e16c <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
 800e160:	3301      	adds	r3, #1
 800e162:	73fb      	strb	r3, [r7, #15]
 800e164:	7bfb      	ldrb	r3, [r7, #15]
 800e166:	2b0f      	cmp	r3, #15
 800e168:	d9ef      	bls.n	800e14a <hal_gpio_get_pin_number+0xe>
 800e16a:	e000      	b.n	800e16e <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 800e16c:	bf00      	nop
	}
	return pin_number;
 800e16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af02      	add	r7, sp, #8
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	4608      	mov	r0, r1
 800e186:	4611      	mov	r1, r2
 800e188:	461a      	mov	r2, r3
 800e18a:	4603      	mov	r3, r0
 800e18c:	70fb      	strb	r3, [r7, #3]
 800e18e:	460b      	mov	r3, r1
 800e190:	70bb      	strb	r3, [r7, #2]
 800e192:	4613      	mov	r3, r2
 800e194:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 800e196:	787b      	ldrb	r3, [r7, #1]
 800e198:	78ba      	ldrb	r2, [r7, #2]
 800e19a:	78f9      	ldrb	r1, [r7, #3]
 800e19c:	2010      	movs	r0, #16
 800e19e:	9000      	str	r0, [sp, #0]
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 f805 	bl	800e1b0 <hal_gpio_init_alt>
}
 800e1a6:	bf00      	nop
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b086      	sub	sp, #24
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	4608      	mov	r0, r1
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	461a      	mov	r2, r3
 800e1be:	4603      	mov	r3, r0
 800e1c0:	70fb      	strb	r3, [r7, #3]
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	70bb      	strb	r3, [r7, #2]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a8d      	ldr	r2, [pc, #564]	; (800e404 <hal_gpio_init_alt+0x254>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d02b      	beq.n	800e22c <hal_gpio_init_alt+0x7c>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a8b      	ldr	r2, [pc, #556]	; (800e408 <hal_gpio_init_alt+0x258>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d024      	beq.n	800e228 <hal_gpio_init_alt+0x78>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a8a      	ldr	r2, [pc, #552]	; (800e40c <hal_gpio_init_alt+0x25c>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d01d      	beq.n	800e224 <hal_gpio_init_alt+0x74>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a88      	ldr	r2, [pc, #544]	; (800e410 <hal_gpio_init_alt+0x260>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d016      	beq.n	800e220 <hal_gpio_init_alt+0x70>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a87      	ldr	r2, [pc, #540]	; (800e414 <hal_gpio_init_alt+0x264>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d00f      	beq.n	800e21c <hal_gpio_init_alt+0x6c>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a85      	ldr	r2, [pc, #532]	; (800e418 <hal_gpio_init_alt+0x268>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d008      	beq.n	800e218 <hal_gpio_init_alt+0x68>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a84      	ldr	r2, [pc, #528]	; (800e41c <hal_gpio_init_alt+0x26c>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d101      	bne.n	800e214 <hal_gpio_init_alt+0x64>
 800e210:	2306      	movs	r3, #6
 800e212:	e00c      	b.n	800e22e <hal_gpio_init_alt+0x7e>
 800e214:	2307      	movs	r3, #7
 800e216:	e00a      	b.n	800e22e <hal_gpio_init_alt+0x7e>
 800e218:	2305      	movs	r3, #5
 800e21a:	e008      	b.n	800e22e <hal_gpio_init_alt+0x7e>
 800e21c:	2304      	movs	r3, #4
 800e21e:	e006      	b.n	800e22e <hal_gpio_init_alt+0x7e>
 800e220:	2303      	movs	r3, #3
 800e222:	e004      	b.n	800e22e <hal_gpio_init_alt+0x7e>
 800e224:	2302      	movs	r3, #2
 800e226:	e002      	b.n	800e22e <hal_gpio_init_alt+0x7e>
 800e228:	2301      	movs	r3, #1
 800e22a:	e000      	b.n	800e22e <hal_gpio_init_alt+0x7e>
 800e22c:	2300      	movs	r3, #0
 800e22e:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	889b      	ldrh	r3, [r3, #4]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d05f      	beq.n	800e2f8 <hal_gpio_init_alt+0x148>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	889b      	ldrh	r3, [r3, #4]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d058      	beq.n	800e2f2 <hal_gpio_init_alt+0x142>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	889b      	ldrh	r3, [r3, #4]
 800e244:	2b04      	cmp	r3, #4
 800e246:	d051      	beq.n	800e2ec <hal_gpio_init_alt+0x13c>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	889b      	ldrh	r3, [r3, #4]
 800e24c:	2b08      	cmp	r3, #8
 800e24e:	d04a      	beq.n	800e2e6 <hal_gpio_init_alt+0x136>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	889b      	ldrh	r3, [r3, #4]
 800e254:	2b10      	cmp	r3, #16
 800e256:	d044      	beq.n	800e2e2 <hal_gpio_init_alt+0x132>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	889b      	ldrh	r3, [r3, #4]
 800e25c:	2b20      	cmp	r3, #32
 800e25e:	d03e      	beq.n	800e2de <hal_gpio_init_alt+0x12e>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	889b      	ldrh	r3, [r3, #4]
 800e264:	2b40      	cmp	r3, #64	; 0x40
 800e266:	d038      	beq.n	800e2da <hal_gpio_init_alt+0x12a>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	889b      	ldrh	r3, [r3, #4]
 800e26c:	2b80      	cmp	r3, #128	; 0x80
 800e26e:	d032      	beq.n	800e2d6 <hal_gpio_init_alt+0x126>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	889b      	ldrh	r3, [r3, #4]
 800e274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e278:	d02b      	beq.n	800e2d2 <hal_gpio_init_alt+0x122>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	889b      	ldrh	r3, [r3, #4]
 800e27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e282:	d024      	beq.n	800e2ce <hal_gpio_init_alt+0x11e>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	889b      	ldrh	r3, [r3, #4]
 800e288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e28c:	d01d      	beq.n	800e2ca <hal_gpio_init_alt+0x11a>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	889b      	ldrh	r3, [r3, #4]
 800e292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e296:	d016      	beq.n	800e2c6 <hal_gpio_init_alt+0x116>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	889b      	ldrh	r3, [r3, #4]
 800e29c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2a0:	d00f      	beq.n	800e2c2 <hal_gpio_init_alt+0x112>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	889b      	ldrh	r3, [r3, #4]
 800e2a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2aa:	d008      	beq.n	800e2be <hal_gpio_init_alt+0x10e>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	889b      	ldrh	r3, [r3, #4]
 800e2b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2b4:	d101      	bne.n	800e2ba <hal_gpio_init_alt+0x10a>
 800e2b6:	4b5a      	ldr	r3, [pc, #360]	; (800e420 <hal_gpio_init_alt+0x270>)
 800e2b8:	e020      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2ba:	4b5a      	ldr	r3, [pc, #360]	; (800e424 <hal_gpio_init_alt+0x274>)
 800e2bc:	e01e      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2be:	4b5a      	ldr	r3, [pc, #360]	; (800e428 <hal_gpio_init_alt+0x278>)
 800e2c0:	e01c      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2c2:	4b5a      	ldr	r3, [pc, #360]	; (800e42c <hal_gpio_init_alt+0x27c>)
 800e2c4:	e01a      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2c6:	4b5a      	ldr	r3, [pc, #360]	; (800e430 <hal_gpio_init_alt+0x280>)
 800e2c8:	e018      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2ca:	4b5a      	ldr	r3, [pc, #360]	; (800e434 <hal_gpio_init_alt+0x284>)
 800e2cc:	e016      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2ce:	4b5a      	ldr	r3, [pc, #360]	; (800e438 <hal_gpio_init_alt+0x288>)
 800e2d0:	e014      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2d2:	4b5a      	ldr	r3, [pc, #360]	; (800e43c <hal_gpio_init_alt+0x28c>)
 800e2d4:	e012      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2d6:	4b5a      	ldr	r3, [pc, #360]	; (800e440 <hal_gpio_init_alt+0x290>)
 800e2d8:	e010      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2da:	4b5a      	ldr	r3, [pc, #360]	; (800e444 <hal_gpio_init_alt+0x294>)
 800e2dc:	e00e      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2de:	4b5a      	ldr	r3, [pc, #360]	; (800e448 <hal_gpio_init_alt+0x298>)
 800e2e0:	e00c      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2e2:	4b5a      	ldr	r3, [pc, #360]	; (800e44c <hal_gpio_init_alt+0x29c>)
 800e2e4:	e00a      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2e6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800e2ea:	e007      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2ec:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800e2f0:	e004      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2f2:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800e2f6:	e001      	b.n	800e2fc <hal_gpio_init_alt+0x14c>
 800e2f8:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800e2fc:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	889b      	ldrh	r3, [r3, #4]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d064      	beq.n	800e3d0 <hal_gpio_init_alt+0x220>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	889b      	ldrh	r3, [r3, #4]
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d05e      	beq.n	800e3cc <hal_gpio_init_alt+0x21c>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	889b      	ldrh	r3, [r3, #4]
 800e312:	2b04      	cmp	r3, #4
 800e314:	d058      	beq.n	800e3c8 <hal_gpio_init_alt+0x218>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	889b      	ldrh	r3, [r3, #4]
 800e31a:	2b08      	cmp	r3, #8
 800e31c:	d052      	beq.n	800e3c4 <hal_gpio_init_alt+0x214>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	889b      	ldrh	r3, [r3, #4]
 800e322:	2b10      	cmp	r3, #16
 800e324:	d04c      	beq.n	800e3c0 <hal_gpio_init_alt+0x210>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	889b      	ldrh	r3, [r3, #4]
 800e32a:	2b20      	cmp	r3, #32
 800e32c:	d046      	beq.n	800e3bc <hal_gpio_init_alt+0x20c>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	889b      	ldrh	r3, [r3, #4]
 800e332:	2b40      	cmp	r3, #64	; 0x40
 800e334:	d040      	beq.n	800e3b8 <hal_gpio_init_alt+0x208>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	889b      	ldrh	r3, [r3, #4]
 800e33a:	2b80      	cmp	r3, #128	; 0x80
 800e33c:	d03a      	beq.n	800e3b4 <hal_gpio_init_alt+0x204>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	889b      	ldrh	r3, [r3, #4]
 800e342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e346:	d032      	beq.n	800e3ae <hal_gpio_init_alt+0x1fe>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	889b      	ldrh	r3, [r3, #4]
 800e34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e350:	d02a      	beq.n	800e3a8 <hal_gpio_init_alt+0x1f8>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	889b      	ldrh	r3, [r3, #4]
 800e356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e35a:	d022      	beq.n	800e3a2 <hal_gpio_init_alt+0x1f2>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	889b      	ldrh	r3, [r3, #4]
 800e360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e364:	d01a      	beq.n	800e39c <hal_gpio_init_alt+0x1ec>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	889b      	ldrh	r3, [r3, #4]
 800e36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e36e:	d012      	beq.n	800e396 <hal_gpio_init_alt+0x1e6>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	889b      	ldrh	r3, [r3, #4]
 800e374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e378:	d00a      	beq.n	800e390 <hal_gpio_init_alt+0x1e0>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	889b      	ldrh	r3, [r3, #4]
 800e37e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e382:	d102      	bne.n	800e38a <hal_gpio_init_alt+0x1da>
 800e384:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e388:	e023      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e38a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e38e:	e020      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e394:	e01d      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e39a:	e01a      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e39c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3a0:	e017      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a6:	e014      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3ac:	e011      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3b2:	e00e      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3b4:	2380      	movs	r3, #128	; 0x80
 800e3b6:	e00c      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3b8:	2340      	movs	r3, #64	; 0x40
 800e3ba:	e00a      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3bc:	2320      	movs	r3, #32
 800e3be:	e008      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3c0:	2310      	movs	r3, #16
 800e3c2:	e006      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3c4:	2308      	movs	r3, #8
 800e3c6:	e004      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3c8:	2304      	movs	r3, #4
 800e3ca:	e002      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3cc:	2302      	movs	r3, #2
 800e3ce:	e000      	b.n	800e3d2 <hal_gpio_init_alt+0x222>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 800e3d4:	787b      	ldrb	r3, [r7, #1]
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	d855      	bhi.n	800e486 <hal_gpio_init_alt+0x2d6>
 800e3da:	a201      	add	r2, pc, #4	; (adr r2, 800e3e0 <hal_gpio_init_alt+0x230>)
 800e3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e0:	0800e3f1 	.word	0x0800e3f1
 800e3e4:	0800e451 	.word	0x0800e451
 800e3e8:	0800e463 	.word	0x0800e463
 800e3ec:	0800e475 	.word	0x0800e475
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6818      	ldr	r0, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	889b      	ldrh	r3, [r3, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	f7ff fcf5 	bl	800ddea <LL_GPIO_SetPinSpeed>
		break;
 800e400:	e041      	b.n	800e486 <hal_gpio_init_alt+0x2d6>
 800e402:	bf00      	nop
 800e404:	40020000 	.word	0x40020000
 800e408:	40020400 	.word	0x40020400
 800e40c:	40020800 	.word	0x40020800
 800e410:	40020c00 	.word	0x40020c00
 800e414:	40021000 	.word	0x40021000
 800e418:	40021400 	.word	0x40021400
 800e41c:	40021800 	.word	0x40021800
 800e420:	0f000003 	.word	0x0f000003
 800e424:	f0000003 	.word	0xf0000003
 800e428:	00f00003 	.word	0x00f00003
 800e42c:	000f0003 	.word	0x000f0003
 800e430:	f0000002 	.word	0xf0000002
 800e434:	0f000002 	.word	0x0f000002
 800e438:	00f00002 	.word	0x00f00002
 800e43c:	000f0002 	.word	0x000f0002
 800e440:	f0000001 	.word	0xf0000001
 800e444:	0f000001 	.word	0x0f000001
 800e448:	00f00001 	.word	0x00f00001
 800e44c:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6818      	ldr	r0, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	889b      	ldrh	r3, [r3, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	4619      	mov	r1, r3
 800e45c:	f7ff fcc5 	bl	800ddea <LL_GPIO_SetPinSpeed>
		break;
 800e460:	e011      	b.n	800e486 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6818      	ldr	r0, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	889b      	ldrh	r3, [r3, #4]
 800e46a:	2202      	movs	r2, #2
 800e46c:	4619      	mov	r1, r3
 800e46e:	f7ff fcbc 	bl	800ddea <LL_GPIO_SetPinSpeed>
		break;
 800e472:	e008      	b.n	800e486 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6818      	ldr	r0, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	889b      	ldrh	r3, [r3, #4]
 800e47c:	2203      	movs	r2, #3
 800e47e:	4619      	mov	r1, r3
 800e480:	f7ff fcb3 	bl	800ddea <LL_GPIO_SetPinSpeed>
		break;
 800e484:	bf00      	nop
	}

	switch(pull) {
 800e486:	78bb      	ldrb	r3, [r7, #2]
 800e488:	2b02      	cmp	r3, #2
 800e48a:	d018      	beq.n	800e4be <hal_gpio_init_alt+0x30e>
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	dc1f      	bgt.n	800e4d0 <hal_gpio_init_alt+0x320>
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <hal_gpio_init_alt+0x2ea>
 800e494:	2b01      	cmp	r3, #1
 800e496:	d009      	beq.n	800e4ac <hal_gpio_init_alt+0x2fc>
 800e498:	e01a      	b.n	800e4d0 <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	889b      	ldrh	r3, [r3, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	f7ff fccf 	bl	800de48 <LL_GPIO_SetPinPull>
		break;
 800e4aa:	e011      	b.n	800e4d0 <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6818      	ldr	r0, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	889b      	ldrh	r3, [r3, #4]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	f7ff fcc6 	bl	800de48 <LL_GPIO_SetPinPull>
		break;
 800e4bc:	e008      	b.n	800e4d0 <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	889b      	ldrh	r3, [r3, #4]
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	f7ff fcbd 	bl	800de48 <LL_GPIO_SetPinPull>
		break;
 800e4ce:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 800e4d0:	78fb      	ldrb	r3, [r7, #3]
 800e4d2:	2b05      	cmp	r3, #5
 800e4d4:	d93d      	bls.n	800e552 <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	889b      	ldrh	r3, [r3, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f7ff fc3b 	bl	800dd5c <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 800e4e6:	6939      	ldr	r1, [r7, #16]
 800e4e8:	6978      	ldr	r0, [r7, #20]
 800e4ea:	f7ff fd3d 	bl	800df68 <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 800e4ee:	78fb      	ldrb	r3, [r7, #3]
 800e4f0:	2b06      	cmp	r3, #6
 800e4f2:	d002      	beq.n	800e4fa <hal_gpio_init_alt+0x34a>
 800e4f4:	78fb      	ldrb	r3, [r7, #3]
 800e4f6:	2b08      	cmp	r3, #8
 800e4f8:	d105      	bne.n	800e506 <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f7ff fd84 	bl	800e008 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f7ff fdcf 	bl	800e0a4 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 800e506:	78fb      	ldrb	r3, [r7, #3]
 800e508:	2b07      	cmp	r3, #7
 800e50a:	d002      	beq.n	800e512 <hal_gpio_init_alt+0x362>
 800e50c:	78fb      	ldrb	r3, [r7, #3]
 800e50e:	2b08      	cmp	r3, #8
 800e510:	d105      	bne.n	800e51e <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f7ff fd78 	bl	800e008 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f7ff fde9 	bl	800e0f0 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 800e51e:	78fb      	ldrb	r3, [r7, #3]
 800e520:	2b09      	cmp	r3, #9
 800e522:	d002      	beq.n	800e52a <hal_gpio_init_alt+0x37a>
 800e524:	78fb      	ldrb	r3, [r7, #3]
 800e526:	2b0b      	cmp	r3, #11
 800e528:	d105      	bne.n	800e536 <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f7ff fda8 	bl	800e080 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f7ff fdb7 	bl	800e0a4 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 800e536:	78fb      	ldrb	r3, [r7, #3]
 800e538:	2b0a      	cmp	r3, #10
 800e53a:	d003      	beq.n	800e544 <hal_gpio_init_alt+0x394>
 800e53c:	78fb      	ldrb	r3, [r7, #3]
 800e53e:	2b0b      	cmp	r3, #11
 800e540:	f040 80a7 	bne.w	800e692 <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f7ff fd5f 	bl	800e008 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f7ff fdd0 	bl	800e0f0 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 800e550:	e09f      	b.n	800e692 <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800e552:	6938      	ldr	r0, [r7, #16]
 800e554:	f7ff fd36 	bl	800dfc4 <LL_SYSCFG_GetEXTISource>
 800e558:	4602      	mov	r2, r0
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d10e      	bne.n	800e57e <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f7ff fd77 	bl	800e054 <LL_EXTI_IsEnabledIT_0_31>
 800e566:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d008      	beq.n	800e57e <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f7ff fd5d 	bl	800e02c <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f7ff fdce 	bl	800e114 <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7ff fda5 	bl	800e0c8 <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 800e57e:	78fb      	ldrb	r3, [r7, #3]
 800e580:	2b03      	cmp	r3, #3
 800e582:	d002      	beq.n	800e58a <hal_gpio_init_alt+0x3da>
 800e584:	78fb      	ldrb	r3, [r7, #3]
 800e586:	2b04      	cmp	r3, #4
 800e588:	d11a      	bne.n	800e5c0 <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7ff fdd6 	bl	800e13c <hal_gpio_get_pin_number>
 800e590:	4603      	mov	r3, r0
 800e592:	2b07      	cmp	r3, #7
 800e594:	d80a      	bhi.n	800e5ac <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6818      	ldr	r0, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	889b      	ldrh	r3, [r3, #4]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	f7ff fc7e 	bl	800dea6 <LL_GPIO_SetAFPin_0_7>
 800e5aa:	e009      	b.n	800e5c0 <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6818      	ldr	r0, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	889b      	ldrh	r3, [r3, #4]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	f7ff fca2 	bl	800df04 <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 800e5c0:	78fb      	ldrb	r3, [r7, #3]
 800e5c2:	2b05      	cmp	r3, #5
 800e5c4:	d864      	bhi.n	800e690 <hal_gpio_init_alt+0x4e0>
 800e5c6:	a201      	add	r2, pc, #4	; (adr r2, 800e5cc <hal_gpio_init_alt+0x41c>)
 800e5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5cc:	0800e5e5 	.word	0x0800e5e5
 800e5d0:	0800e5f7 	.word	0x0800e5f7
 800e5d4:	0800e619 	.word	0x0800e619
 800e5d8:	0800e63b 	.word	0x0800e63b
 800e5dc:	0800e65d 	.word	0x0800e65d
 800e5e0:	0800e67f 	.word	0x0800e67f
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6818      	ldr	r0, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	889b      	ldrh	r3, [r3, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	f7ff fbb4 	bl	800dd5c <LL_GPIO_SetPinMode>
			break;
 800e5f4:	e04d      	b.n	800e692 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6818      	ldr	r0, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	889b      	ldrh	r3, [r3, #4]
 800e5fe:	2201      	movs	r2, #1
 800e600:	4619      	mov	r1, r3
 800e602:	f7ff fbab 	bl	800dd5c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6818      	ldr	r0, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	889b      	ldrh	r3, [r3, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	4619      	mov	r1, r3
 800e612:	f7ff fbd2 	bl	800ddba <LL_GPIO_SetPinOutputType>
			break;
 800e616:	e03c      	b.n	800e692 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6818      	ldr	r0, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	889b      	ldrh	r3, [r3, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	4619      	mov	r1, r3
 800e624:	f7ff fb9a 	bl	800dd5c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6818      	ldr	r0, [r3, #0]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	889b      	ldrh	r3, [r3, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	4619      	mov	r1, r3
 800e634:	f7ff fbc1 	bl	800ddba <LL_GPIO_SetPinOutputType>
			break;
 800e638:	e02b      	b.n	800e692 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6818      	ldr	r0, [r3, #0]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	889b      	ldrh	r3, [r3, #4]
 800e642:	2202      	movs	r2, #2
 800e644:	4619      	mov	r1, r3
 800e646:	f7ff fb89 	bl	800dd5c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6818      	ldr	r0, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	889b      	ldrh	r3, [r3, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	4619      	mov	r1, r3
 800e656:	f7ff fbb0 	bl	800ddba <LL_GPIO_SetPinOutputType>
			break;
 800e65a:	e01a      	b.n	800e692 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6818      	ldr	r0, [r3, #0]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	889b      	ldrh	r3, [r3, #4]
 800e664:	2202      	movs	r2, #2
 800e666:	4619      	mov	r1, r3
 800e668:	f7ff fb78 	bl	800dd5c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6818      	ldr	r0, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	889b      	ldrh	r3, [r3, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	4619      	mov	r1, r3
 800e678:	f7ff fb9f 	bl	800ddba <LL_GPIO_SetPinOutputType>
			break;
 800e67c:	e009      	b.n	800e692 <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6818      	ldr	r0, [r3, #0]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	889b      	ldrh	r3, [r3, #4]
 800e686:	2203      	movs	r2, #3
 800e688:	4619      	mov	r1, r3
 800e68a:	f7ff fb67 	bl	800dd5c <LL_GPIO_SetPinMode>
			break;
 800e68e:	e000      	b.n	800e692 <hal_gpio_init_alt+0x4e2>
			break;
 800e690:	bf00      	nop
}
 800e692:	bf00      	nop
 800e694:	3718      	adds	r7, #24
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop

0800e69c <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
        __asm volatile
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	607b      	str	r3, [r7, #4]
    }
 800e6b4:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800e6b6:	e7fe      	b.n	800e6b6 <vApplicationMallocFailedHook+0x1a>

0800e6b8 <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
        __asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	60fb      	str	r3, [r7, #12]
    }
 800e6d4:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800e6d6:	e7fe      	b.n	800e6d6 <vApplicationStackOverflowHook+0x1e>

0800e6d8 <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	4a07      	ldr	r2, [pc, #28]	; (800e704 <vApplicationGetIdleTaskMemory+0x2c>)
 800e6e8:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	4a06      	ldr	r2, [pc, #24]	; (800e708 <vApplicationGetIdleTaskMemory+0x30>)
 800e6ee:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6f6:	601a      	str	r2, [r3, #0]
}
 800e6f8:	bf00      	nop
 800e6fa:	3714      	adds	r7, #20
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr
 800e704:	2000689c 	.word	0x2000689c
 800e708:	200068f8 	.word	0x200068f8

0800e70c <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	4a07      	ldr	r2, [pc, #28]	; (800e738 <vApplicationGetTimerTaskMemory+0x2c>)
 800e71c:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	4a06      	ldr	r2, [pc, #24]	; (800e73c <vApplicationGetTimerTaskMemory+0x30>)
 800e722:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e72a:	601a      	str	r2, [r3, #0]
}
 800e72c:	bf00      	nop
 800e72e:	3714      	adds	r7, #20
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr
 800e738:	200070f8 	.word	0x200070f8
 800e73c:	20007154 	.word	0x20007154

0800e740 <__NVIC_GetPriorityGrouping>:
{
 800e740:	b480      	push	{r7}
 800e742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e744:	4b04      	ldr	r3, [pc, #16]	; (800e758 <__NVIC_GetPriorityGrouping+0x18>)
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	0a1b      	lsrs	r3, r3, #8
 800e74a:	f003 0307 	and.w	r3, r3, #7
}
 800e74e:	4618      	mov	r0, r3
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	e000ed00 	.word	0xe000ed00

0800e75c <__NVIC_EnableIRQ>:
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	4603      	mov	r3, r0
 800e764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	db0b      	blt.n	800e786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	f003 021f 	and.w	r2, r3, #31
 800e774:	4907      	ldr	r1, [pc, #28]	; (800e794 <__NVIC_EnableIRQ+0x38>)
 800e776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e77a:	095b      	lsrs	r3, r3, #5
 800e77c:	2001      	movs	r0, #1
 800e77e:	fa00 f202 	lsl.w	r2, r0, r2
 800e782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e786:	bf00      	nop
 800e788:	370c      	adds	r7, #12
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	e000e100 	.word	0xe000e100

0800e798 <__NVIC_SetPriority>:
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	6039      	str	r1, [r7, #0]
 800e7a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	db0a      	blt.n	800e7c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	490c      	ldr	r1, [pc, #48]	; (800e7e4 <__NVIC_SetPriority+0x4c>)
 800e7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7b6:	0112      	lsls	r2, r2, #4
 800e7b8:	b2d2      	uxtb	r2, r2
 800e7ba:	440b      	add	r3, r1
 800e7bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7c0:	e00a      	b.n	800e7d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	4908      	ldr	r1, [pc, #32]	; (800e7e8 <__NVIC_SetPriority+0x50>)
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	f003 030f 	and.w	r3, r3, #15
 800e7ce:	3b04      	subs	r3, #4
 800e7d0:	0112      	lsls	r2, r2, #4
 800e7d2:	b2d2      	uxtb	r2, r2
 800e7d4:	440b      	add	r3, r1
 800e7d6:	761a      	strb	r2, [r3, #24]
}
 800e7d8:	bf00      	nop
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr
 800e7e4:	e000e100 	.word	0xe000e100
 800e7e8:	e000ed00 	.word	0xe000ed00

0800e7ec <NVIC_EncodePriority>:
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b089      	sub	sp, #36	; 0x24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f003 0307 	and.w	r3, r3, #7
 800e7fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	f1c3 0307 	rsb	r3, r3, #7
 800e806:	2b04      	cmp	r3, #4
 800e808:	bf28      	it	cs
 800e80a:	2304      	movcs	r3, #4
 800e80c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	3304      	adds	r3, #4
 800e812:	2b06      	cmp	r3, #6
 800e814:	d902      	bls.n	800e81c <NVIC_EncodePriority+0x30>
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	3b03      	subs	r3, #3
 800e81a:	e000      	b.n	800e81e <NVIC_EncodePriority+0x32>
 800e81c:	2300      	movs	r3, #0
 800e81e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	fa02 f303 	lsl.w	r3, r2, r3
 800e82a:	43da      	mvns	r2, r3
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	401a      	ands	r2, r3
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	fa01 f303 	lsl.w	r3, r1, r3
 800e83e:	43d9      	mvns	r1, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e844:	4313      	orrs	r3, r2
}
 800e846:	4618      	mov	r0, r3
 800e848:	3724      	adds	r7, #36	; 0x24
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr

0800e852 <LL_I2C_EnableClockStretching>:
{
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	601a      	str	r2, [r3, #0]
}
 800e866:	bf00      	nop
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <LL_I2C_DisableGeneralCall>:
{
 800e872:	b480      	push	{r7}
 800e874:	b083      	sub	sp, #12
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	601a      	str	r2, [r3, #0]
}
 800e886:	bf00      	nop
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <LL_I2C_SetOwnAddress2>:
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	431a      	orrs	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	60da      	str	r2, [r3, #12]
}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <LL_I2C_DisableOwnAddress2>:
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	f023 0201 	bic.w	r2, r3, #1
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	60da      	str	r2, [r3, #12]
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <LL_DMA_SetDataTransferDirection>:
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800e8e4:	4a0d      	ldr	r2, [pc, #52]	; (800e91c <LL_DMA_SetDataTransferDirection+0x44>)
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e8f8:	4908      	ldr	r1, [pc, #32]	; (800e91c <LL_DMA_SetDataTransferDirection+0x44>)
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	440b      	add	r3, r1
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	4619      	mov	r1, r3
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	440b      	add	r3, r1
 800e906:	4619      	mov	r1, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	600b      	str	r3, [r1, #0]
}
 800e90e:	bf00      	nop
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	08011be0 	.word	0x08011be0

0800e920 <LL_DMA_SetMode>:
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800e92c:	4a0d      	ldr	r2, [pc, #52]	; (800e964 <LL_DMA_SetMode+0x44>)
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	4413      	add	r3, r2
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	461a      	mov	r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	4413      	add	r3, r2
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800e940:	4908      	ldr	r1, [pc, #32]	; (800e964 <LL_DMA_SetMode+0x44>)
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	440b      	add	r3, r1
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	4619      	mov	r1, r3
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	440b      	add	r3, r1
 800e94e:	4619      	mov	r1, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4313      	orrs	r3, r2
 800e954:	600b      	str	r3, [r1, #0]
}
 800e956:	bf00      	nop
 800e958:	3714      	adds	r7, #20
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	08011be0 	.word	0x08011be0

0800e968 <LL_DMA_SetPeriphIncMode>:
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800e974:	4a0d      	ldr	r2, [pc, #52]	; (800e9ac <LL_DMA_SetPeriphIncMode+0x44>)
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	4413      	add	r3, r2
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	4413      	add	r3, r2
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e988:	4908      	ldr	r1, [pc, #32]	; (800e9ac <LL_DMA_SetPeriphIncMode+0x44>)
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	440b      	add	r3, r1
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	4619      	mov	r1, r3
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	440b      	add	r3, r1
 800e996:	4619      	mov	r1, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	600b      	str	r3, [r1, #0]
}
 800e99e:	bf00      	nop
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	08011be0 	.word	0x08011be0

0800e9b0 <LL_DMA_SetMemoryIncMode>:
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800e9bc:	4a0d      	ldr	r2, [pc, #52]	; (800e9f4 <LL_DMA_SetMemoryIncMode+0x44>)
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e9d0:	4908      	ldr	r1, [pc, #32]	; (800e9f4 <LL_DMA_SetMemoryIncMode+0x44>)
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	440b      	add	r3, r1
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	440b      	add	r3, r1
 800e9de:	4619      	mov	r1, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	600b      	str	r3, [r1, #0]
}
 800e9e6:	bf00      	nop
 800e9e8:	3714      	adds	r7, #20
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	08011be0 	.word	0x08011be0

0800e9f8 <LL_DMA_SetPeriphSize>:
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b085      	sub	sp, #20
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800ea04:	4a0d      	ldr	r2, [pc, #52]	; (800ea3c <LL_DMA_SetPeriphSize+0x44>)
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	4413      	add	r3, r2
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	4413      	add	r3, r2
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ea18:	4908      	ldr	r1, [pc, #32]	; (800ea3c <LL_DMA_SetPeriphSize+0x44>)
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	440b      	add	r3, r1
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	4619      	mov	r1, r3
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	440b      	add	r3, r1
 800ea26:	4619      	mov	r1, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	600b      	str	r3, [r1, #0]
}
 800ea2e:	bf00      	nop
 800ea30:	3714      	adds	r7, #20
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	08011be0 	.word	0x08011be0

0800ea40 <LL_DMA_SetMemorySize>:
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800ea4c:	4a0d      	ldr	r2, [pc, #52]	; (800ea84 <LL_DMA_SetMemorySize+0x44>)
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	4413      	add	r3, r2
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	461a      	mov	r2, r3
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	4413      	add	r3, r2
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800ea60:	4908      	ldr	r1, [pc, #32]	; (800ea84 <LL_DMA_SetMemorySize+0x44>)
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	440b      	add	r3, r1
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	4619      	mov	r1, r3
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	440b      	add	r3, r1
 800ea6e:	4619      	mov	r1, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4313      	orrs	r3, r2
 800ea74:	600b      	str	r3, [r1, #0]
}
 800ea76:	bf00      	nop
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	08011be0 	.word	0x08011be0

0800ea88 <LL_DMA_SetStreamPriorityLevel>:
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800ea94:	4a0d      	ldr	r2, [pc, #52]	; (800eacc <LL_DMA_SetStreamPriorityLevel+0x44>)
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	4413      	add	r3, r2
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800eaa8:	4908      	ldr	r1, [pc, #32]	; (800eacc <LL_DMA_SetStreamPriorityLevel+0x44>)
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	440b      	add	r3, r1
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	4619      	mov	r1, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	440b      	add	r3, r1
 800eab6:	4619      	mov	r1, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4313      	orrs	r3, r2
 800eabc:	600b      	str	r3, [r1, #0]
}
 800eabe:	bf00      	nop
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	08011be0 	.word	0x08011be0

0800ead0 <LL_DMA_SetChannelSelection>:
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800eadc:	4a0d      	ldr	r2, [pc, #52]	; (800eb14 <LL_DMA_SetChannelSelection+0x44>)
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	4413      	add	r3, r2
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	461a      	mov	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	4413      	add	r3, r2
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800eaf0:	4908      	ldr	r1, [pc, #32]	; (800eb14 <LL_DMA_SetChannelSelection+0x44>)
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	440b      	add	r3, r1
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	440b      	add	r3, r1
 800eafe:	4619      	mov	r1, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4313      	orrs	r3, r2
 800eb04:	600b      	str	r3, [r1, #0]
}
 800eb06:	bf00      	nop
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	08011be0 	.word	0x08011be0

0800eb18 <LL_DMA_DisableFifoMode>:
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800eb22:	4a0c      	ldr	r2, [pc, #48]	; (800eb54 <LL_DMA_DisableFifoMode+0x3c>)
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	4413      	add	r3, r2
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4413      	add	r3, r2
 800eb30:	695b      	ldr	r3, [r3, #20]
 800eb32:	4908      	ldr	r1, [pc, #32]	; (800eb54 <LL_DMA_DisableFifoMode+0x3c>)
 800eb34:	683a      	ldr	r2, [r7, #0]
 800eb36:	440a      	add	r2, r1
 800eb38:	7812      	ldrb	r2, [r2, #0]
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	440a      	add	r2, r1
 800eb40:	f023 0304 	bic.w	r3, r3, #4
 800eb44:	6153      	str	r3, [r2, #20]
}
 800eb46:	bf00      	nop
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	08011be0 	.word	0x08011be0

0800eb58 <i2c_init>:

#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	4603      	mov	r3, r0
 800eb60:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 800eb62:	f7fa f811 	bl	8008b88 <vPortEnterCritical>

	switch(i2c_id) {
 800eb66:	79fb      	ldrb	r3, [r7, #7]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d002      	beq.n	800eb72 <i2c_init+0x1a>
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	d00f      	beq.n	800eb90 <i2c_init+0x38>
 800eb70:	e01d      	b.n	800ebae <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 800eb72:	f000 f835 	bl	800ebe0 <i2c1_init>
		i2c1drv.i2c = I2C1;
 800eb76:	4b13      	ldr	r3, [pc, #76]	; (800ebc4 <i2c_init+0x6c>)
 800eb78:	4a13      	ldr	r2, [pc, #76]	; (800ebc8 <i2c_init+0x70>)
 800eb7a:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 800eb7c:	2001      	movs	r0, #1
 800eb7e:	f7fa faf9 	bl	8009174 <xQueueCreateMutex>
 800eb82:	4603      	mov	r3, r0
 800eb84:	4a0f      	ldr	r2, [pc, #60]	; (800ebc4 <i2c_init+0x6c>)
 800eb86:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 800eb88:	4810      	ldr	r0, [pc, #64]	; (800ebcc <i2c_init+0x74>)
 800eb8a:	f7fe fdef 	bl	800d76c <hal_cli_printf>
		break;
 800eb8e:	e012      	b.n	800ebb6 <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 800eb90:	f000 f8ee 	bl	800ed70 <i2c3_init>
		i2c3drv.i2c = I2C3;
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <i2c_init+0x78>)
 800eb96:	4a0f      	ldr	r2, [pc, #60]	; (800ebd4 <i2c_init+0x7c>)
 800eb98:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	f7fa faea 	bl	8009174 <xQueueCreateMutex>
 800eba0:	4603      	mov	r3, r0
 800eba2:	4a0b      	ldr	r2, [pc, #44]	; (800ebd0 <i2c_init+0x78>)
 800eba4:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 800eba6:	480c      	ldr	r0, [pc, #48]	; (800ebd8 <i2c_init+0x80>)
 800eba8:	f7fe fde0 	bl	800d76c <hal_cli_printf>
		break;
 800ebac:	e003      	b.n	800ebb6 <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 800ebae:	480b      	ldr	r0, [pc, #44]	; (800ebdc <i2c_init+0x84>)
 800ebb0:	f7fe fddc 	bl	800d76c <hal_cli_printf>
		break;
 800ebb4:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 800ebb6:	f7fa f817 	bl	8008be8 <vPortExitCritical>
}
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20007554 	.word	0x20007554
 800ebc8:	40005400 	.word	0x40005400
 800ebcc:	0801151c 	.word	0x0801151c
 800ebd0:	2000755c 	.word	0x2000755c
 800ebd4:	40005c00 	.word	0x40005c00
 800ebd8:	08011528 	.word	0x08011528
 800ebdc:	08011534 	.word	0x08011534

0800ebe0 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b08a      	sub	sp, #40	; 0x28
 800ebe4:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	2220      	movs	r2, #32
 800ebea:	2100      	movs	r1, #0
 800ebec:	4618      	mov	r0, r3
 800ebee:	f001 ff3d 	bl	8010a6c <memset>

	hal_gpio_init_alt(
 800ebf2:	2304      	movs	r3, #4
 800ebf4:	9300      	str	r3, [sp, #0]
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	2104      	movs	r1, #4
 800ebfc:	4857      	ldr	r0, [pc, #348]	; (800ed5c <i2c1_init+0x17c>)
 800ebfe:	f7ff fad7 	bl	800e1b0 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 800ec02:	2304      	movs	r3, #4
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	2303      	movs	r3, #3
 800ec08:	2200      	movs	r2, #0
 800ec0a:	2104      	movs	r1, #4
 800ec0c:	4854      	ldr	r0, [pc, #336]	; (800ed60 <i2c1_init+0x180>)
 800ec0e:	f7ff facf 	bl	800e1b0 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_TX_STREAM, DMA_I2C1_TX_CHANNEL);
 800ec12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ec16:	2106      	movs	r1, #6
 800ec18:	4852      	ldr	r0, [pc, #328]	; (800ed64 <i2c1_init+0x184>)
 800ec1a:	f7ff ff59 	bl	800ead0 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800ec1e:	2240      	movs	r2, #64	; 0x40
 800ec20:	2106      	movs	r1, #6
 800ec22:	4850      	ldr	r0, [pc, #320]	; (800ed64 <i2c1_init+0x184>)
 800ec24:	f7ff fe58 	bl	800e8d8 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2106      	movs	r1, #6
 800ec2c:	484d      	ldr	r0, [pc, #308]	; (800ed64 <i2c1_init+0x184>)
 800ec2e:	f7ff ff2b 	bl	800ea88 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MODE_NORMAL);
 800ec32:	2200      	movs	r2, #0
 800ec34:	2106      	movs	r1, #6
 800ec36:	484b      	ldr	r0, [pc, #300]	; (800ed64 <i2c1_init+0x184>)
 800ec38:	f7ff fe72 	bl	800e920 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2106      	movs	r1, #6
 800ec40:	4848      	ldr	r0, [pc, #288]	; (800ed64 <i2c1_init+0x184>)
 800ec42:	f7ff fe91 	bl	800e968 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800ec46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ec4a:	2106      	movs	r1, #6
 800ec4c:	4845      	ldr	r0, [pc, #276]	; (800ed64 <i2c1_init+0x184>)
 800ec4e:	f7ff feaf 	bl	800e9b0 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800ec52:	2200      	movs	r2, #0
 800ec54:	2106      	movs	r1, #6
 800ec56:	4843      	ldr	r0, [pc, #268]	; (800ed64 <i2c1_init+0x184>)
 800ec58:	f7ff fece 	bl	800e9f8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	2106      	movs	r1, #6
 800ec60:	4840      	ldr	r0, [pc, #256]	; (800ed64 <i2c1_init+0x184>)
 800ec62:	f7ff feed 	bl	800ea40 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_TX_STREAM);
 800ec66:	2106      	movs	r1, #6
 800ec68:	483e      	ldr	r0, [pc, #248]	; (800ed64 <i2c1_init+0x184>)
 800ec6a:	f7ff ff55 	bl	800eb18 <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_RX_STREAM, DMA_I2C1_RX_CHANNEL);
 800ec6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ec72:	2100      	movs	r1, #0
 800ec74:	483b      	ldr	r0, [pc, #236]	; (800ed64 <i2c1_init+0x184>)
 800ec76:	f7ff ff2b 	bl	800ead0 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	4839      	ldr	r0, [pc, #228]	; (800ed64 <i2c1_init+0x184>)
 800ec80:	f7ff fe2a 	bl	800e8d8 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 800ec84:	2200      	movs	r2, #0
 800ec86:	2100      	movs	r1, #0
 800ec88:	4836      	ldr	r0, [pc, #216]	; (800ed64 <i2c1_init+0x184>)
 800ec8a:	f7ff fefd 	bl	800ea88 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MODE_NORMAL);
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2100      	movs	r1, #0
 800ec92:	4834      	ldr	r0, [pc, #208]	; (800ed64 <i2c1_init+0x184>)
 800ec94:	f7ff fe44 	bl	800e920 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	4831      	ldr	r0, [pc, #196]	; (800ed64 <i2c1_init+0x184>)
 800ec9e:	f7ff fe63 	bl	800e968 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800eca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eca6:	2100      	movs	r1, #0
 800eca8:	482e      	ldr	r0, [pc, #184]	; (800ed64 <i2c1_init+0x184>)
 800ecaa:	f7ff fe81 	bl	800e9b0 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800ecae:	2200      	movs	r2, #0
 800ecb0:	2100      	movs	r1, #0
 800ecb2:	482c      	ldr	r0, [pc, #176]	; (800ed64 <i2c1_init+0x184>)
 800ecb4:	f7ff fea0 	bl	800e9f8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800ecb8:	2200      	movs	r2, #0
 800ecba:	2100      	movs	r1, #0
 800ecbc:	4829      	ldr	r0, [pc, #164]	; (800ed64 <i2c1_init+0x184>)
 800ecbe:	f7ff febf 	bl	800ea40 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_RX_STREAM);
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4827      	ldr	r0, [pc, #156]	; (800ed64 <i2c1_init+0x184>)
 800ecc6:	f7ff ff27 	bl	800eb18 <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800ecca:	f7ff fd39 	bl	800e740 <__NVIC_GetPriorityGrouping>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	2105      	movs	r1, #5
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7ff fd89 	bl	800e7ec <NVIC_EncodePriority>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	4619      	mov	r1, r3
 800ecde:	201f      	movs	r0, #31
 800ece0:	f7ff fd5a 	bl	800e798 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800ece4:	201f      	movs	r0, #31
 800ece6:	f7ff fd39 	bl	800e75c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800ecea:	f7ff fd29 	bl	800e740 <__NVIC_GetPriorityGrouping>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2105      	movs	r1, #5
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff fd79 	bl	800e7ec <NVIC_EncodePriority>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	2020      	movs	r0, #32
 800ed00:	f7ff fd4a 	bl	800e798 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 800ed04:	2020      	movs	r0, #32
 800ed06:	f7ff fd29 	bl	800e75c <__NVIC_EnableIRQ>

  /* I2C Initialization */
  LL_I2C_DisableOwnAddress2(I2C1);
 800ed0a:	4817      	ldr	r0, [pc, #92]	; (800ed68 <i2c1_init+0x188>)
 800ed0c:	f7ff fdd4 	bl	800e8b8 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800ed10:	4815      	ldr	r0, [pc, #84]	; (800ed68 <i2c1_init+0x188>)
 800ed12:	f7ff fdae 	bl	800e872 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800ed16:	4814      	ldr	r0, [pc, #80]	; (800ed68 <i2c1_init+0x188>)
 800ed18:	f7ff fd9b 	bl	800e852 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 800ed20:	4b12      	ldr	r3, [pc, #72]	; (800ed6c <i2c1_init+0x18c>)
 800ed22:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800ed24:	2300      	movs	r3, #0
 800ed26:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800ed34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed38:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800ed3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed3e:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800ed40:	463b      	mov	r3, r7
 800ed42:	4619      	mov	r1, r3
 800ed44:	4808      	ldr	r0, [pc, #32]	; (800ed68 <i2c1_init+0x188>)
 800ed46:	f7f4 fead 	bl	8003aa4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	4806      	ldr	r0, [pc, #24]	; (800ed68 <i2c1_init+0x188>)
 800ed4e:	f7ff fda0 	bl	800e892 <LL_I2C_SetOwnAddress2>
}
 800ed52:	bf00      	nop
 800ed54:	3720      	adds	r7, #32
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	08011c10 	.word	0x08011c10
 800ed60:	08011c18 	.word	0x08011c18
 800ed64:	40026000 	.word	0x40026000
 800ed68:	40005400 	.word	0x40005400
 800ed6c:	000186a0 	.word	0x000186a0

0800ed70 <i2c3_init>:

static void i2c3_init(void)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	; 0x28
 800ed74:	af02      	add	r7, sp, #8
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800ed76:	463b      	mov	r3, r7
 800ed78:	2220      	movs	r2, #32
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f001 fe75 	bl	8010a6c <memset>

	hal_gpio_init_alt(
 800ed82:	2304      	movs	r3, #4
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	2303      	movs	r3, #3
 800ed88:	2200      	movs	r2, #0
 800ed8a:	2104      	movs	r1, #4
 800ed8c:	4829      	ldr	r0, [pc, #164]	; (800ee34 <i2c3_init+0xc4>)
 800ed8e:	f7ff fa0f 	bl	800e1b0 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

	hal_gpio_init_alt(
 800ed92:	2304      	movs	r3, #4
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	2303      	movs	r3, #3
 800ed98:	2200      	movs	r2, #0
 800ed9a:	2104      	movs	r1, #4
 800ed9c:	4826      	ldr	r0, [pc, #152]	; (800ee38 <i2c3_init+0xc8>)
 800ed9e:	f7ff fa07 	bl	800e1b0 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800eda2:	f7ff fccd 	bl	800e740 <__NVIC_GetPriorityGrouping>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2200      	movs	r2, #0
 800edaa:	2105      	movs	r1, #5
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff fd1d 	bl	800e7ec <NVIC_EncodePriority>
 800edb2:	4603      	mov	r3, r0
 800edb4:	4619      	mov	r1, r3
 800edb6:	2048      	movs	r0, #72	; 0x48
 800edb8:	f7ff fcee 	bl	800e798 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 800edbc:	2048      	movs	r0, #72	; 0x48
 800edbe:	f7ff fccd 	bl	800e75c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800edc2:	f7ff fcbd 	bl	800e740 <__NVIC_GetPriorityGrouping>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2200      	movs	r2, #0
 800edca:	2105      	movs	r1, #5
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff fd0d 	bl	800e7ec <NVIC_EncodePriority>
 800edd2:	4603      	mov	r3, r0
 800edd4:	4619      	mov	r1, r3
 800edd6:	2049      	movs	r0, #73	; 0x49
 800edd8:	f7ff fcde 	bl	800e798 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 800eddc:	2049      	movs	r0, #73	; 0x49
 800edde:	f7ff fcbd 	bl	800e75c <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 800ede2:	4816      	ldr	r0, [pc, #88]	; (800ee3c <i2c3_init+0xcc>)
 800ede4:	f7ff fd68 	bl	800e8b8 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800ede8:	4814      	ldr	r0, [pc, #80]	; (800ee3c <i2c3_init+0xcc>)
 800edea:	f7ff fd42 	bl	800e872 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800edee:	4813      	ldr	r0, [pc, #76]	; (800ee3c <i2c3_init+0xcc>)
 800edf0:	f7ff fd2f 	bl	800e852 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800edf4:	2300      	movs	r3, #0
 800edf6:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 800edf8:	4b11      	ldr	r3, [pc, #68]	; (800ee40 <i2c3_init+0xd0>)
 800edfa:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800edfc:	2300      	movs	r3, #0
 800edfe:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800ee00:	2300      	movs	r3, #0
 800ee02:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800ee0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee10:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800ee12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ee16:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800ee18:	463b      	mov	r3, r7
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4807      	ldr	r0, [pc, #28]	; (800ee3c <i2c3_init+0xcc>)
 800ee1e:	f7f4 fe41 	bl	8003aa4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800ee22:	2100      	movs	r1, #0
 800ee24:	4805      	ldr	r0, [pc, #20]	; (800ee3c <i2c3_init+0xcc>)
 800ee26:	f7ff fd34 	bl	800e892 <LL_I2C_SetOwnAddress2>
}
 800ee2a:	bf00      	nop
 800ee2c:	3720      	adds	r7, #32
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	08011c20 	.word	0x08011c20
 800ee38:	08011c28 	.word	0x08011c28
 800ee3c:	40005c00 	.word	0x40005c00
 800ee40:	000186a0 	.word	0x000186a0

0800ee44 <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 800ee44:	b480      	push	{r7}
 800ee46:	af00      	add	r7, sp, #0

}
 800ee48:	bf00      	nop
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800ee52:	b480      	push	{r7}
 800ee54:	af00      	add	r7, sp, #0

}
 800ee56:	bf00      	nop
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 800ee60:	b480      	push	{r7}
 800ee62:	af00      	add	r7, sp, #0

}
 800ee64:	bf00      	nop
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	af00      	add	r7, sp, #0

}
 800ee72:	bf00      	nop
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	af00      	add	r7, sp, #0

}
 800ee80:	bf00      	nop
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 800ee8a:	b480      	push	{r7}
 800ee8c:	af00      	add	r7, sp, #0

}
 800ee8e:	bf00      	nop
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <initThread>:
#include "mp3_app.h"

#include "timers.h"


static void initThread(void* param) {
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af02      	add	r7, sp, #8
 800ee9e:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter mainthread");
 800eea0:	4814      	ldr	r0, [pc, #80]	; (800eef4 <initThread+0x5c>)
 800eea2:	f7fe fc63 	bl	800d76c <hal_cli_printf>

	sdio_init();
 800eea6:	f000 f8e5 	bl	800f074 <sdio_init>
	MX_FATFS_Init();
 800eeaa:	f7f6 fa45 	bl	8005338 <MX_FATFS_Init>

	i2c_init(I2cId1);
 800eeae:	2001      	movs	r0, #1
 800eeb0:	f7ff fe52 	bl	800eb58 <i2c_init>
	i2c_init(I2cId3);
 800eeb4:	2003      	movs	r0, #3
 800eeb6:	f7ff fe4f 	bl	800eb58 <i2c_init>

	spi_init(SpiId2);
 800eeba:	2002      	movs	r0, #2
 800eebc:	f000 fc40 	bl	800f740 <spi_init>
	spi_init(SpiId4);
 800eec0:	2004      	movs	r0, #4
 800eec2:	f000 fc3d 	bl	800f740 <spi_init>

	adc_init(AdcId1);
 800eec6:	2001      	movs	r0, #1
 800eec8:	f7fe faa2 	bl	800d410 <adc_init>

	hal_resources_init();
 800eecc:	f000 f87e 	bl	800efcc <hal_resources_init>

	xTaskCreate(mp3Thread, "mp3_app", 512, NULL, 3, NULL);
 800eed0:	2300      	movs	r3, #0
 800eed2:	9301      	str	r3, [sp, #4]
 800eed4:	2303      	movs	r3, #3
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	2300      	movs	r3, #0
 800eeda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eede:	4906      	ldr	r1, [pc, #24]	; (800eef8 <initThread+0x60>)
 800eee0:	4806      	ldr	r0, [pc, #24]	; (800eefc <initThread+0x64>)
 800eee2:	f7fa ff7a 	bl	8009dda <xTaskCreate>
	vTaskDelete(NULL);
 800eee6:	2000      	movs	r0, #0
 800eee8:	f7fb f8e0 	bl	800a0ac <vTaskDelete>
}
 800eeec:	bf00      	nop
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	0801163c 	.word	0x0801163c
 800eef8:	08011650 	.word	0x08011650
 800eefc:	08010881 	.word	0x08010881

0800ef00 <main>:

int main(void) {
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af02      	add	r7, sp, #8
	HAL_Init();
 800ef06:	f7f1 ffab 	bl	8000e60 <HAL_Init>

	hal_bus_init_early();
 800ef0a:	f7fe fe37 	bl	800db7c <hal_bus_init_early>
	hal_clock_init_early();
 800ef0e:	f7fe fe75 	bl	800dbfc <hal_clock_init_early>
	hal_dwt_init_early();
 800ef12:	f7fe fecb 	bl	800dcac <hal_dwt_init_early>

	hal_resources_init_early();
 800ef16:	f000 f83d 	bl	800ef94 <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 800ef1a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ef1e:	2000      	movs	r0, #0
 800ef20:	f001 fbfa 	bl	8010718 <hal_uart_init>
	hal_cli_init();
 800ef24:	f7fe fc5c 	bl	800d7e0 <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 800ef28:	4809      	ldr	r0, [pc, #36]	; (800ef50 <main+0x50>)
 800ef2a:	f7fe fc1f 	bl	800d76c <hal_cli_printf>

	traceSTART();
 800ef2e:	f7fd ff9d 	bl	800ce6c <SEGGER_SYSVIEW_Conf>
	xTaskCreate(initThread, "init", 512, NULL, 3, NULL);
 800ef32:	2300      	movs	r3, #0
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	2303      	movs	r3, #3
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef40:	4904      	ldr	r1, [pc, #16]	; (800ef54 <main+0x54>)
 800ef42:	4805      	ldr	r0, [pc, #20]	; (800ef58 <main+0x58>)
 800ef44:	f7fa ff49 	bl	8009dda <xTaskCreate>
	vTaskStartScheduler();
 800ef48:	f7fb f93c 	bl	800a1c4 <vTaskStartScheduler>

	for(;;);
 800ef4c:	e7fe      	b.n	800ef4c <main+0x4c>
 800ef4e:	bf00      	nop
 800ef50:	08011658 	.word	0x08011658
 800ef54:	08011670 	.word	0x08011670
 800ef58:	0800ee99 	.word	0x0800ee99

0800ef5c <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 800ef68:	78fb      	ldrb	r3, [r7, #3]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d005      	beq.n	800ef7a <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	889a      	ldrh	r2, [r3, #4]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 800ef78:	e006      	b.n	800ef88 <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	889b      	ldrh	r3, [r3, #4]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	0412      	lsls	r2, r2, #16
 800ef86:	619a      	str	r2, [r3, #24]
}
 800ef88:	bf00      	nop
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <hal_resources_init_early>:
const GpioPin gpio_vs1053_dcs = {.port = VS1053_DCS_GPIO_PORT, .pin = VS1053_DCS_PIN};
const GpioPin gpio_vs1053_rst = {.port = VS1053_RST_GPIO_PORT, .pin = VS1053_RST_PIN};
const GpioPin gpio_vs1053_dreq = {.port = VS1053_DREQ_GPIO_PORT, .pin = VS1053_DREQ_PIN};


void hal_resources_init_early(void) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800ef98:	2300      	movs	r3, #0
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	4809      	ldr	r0, [pc, #36]	; (800efc4 <hal_resources_init_early+0x30>)
 800efa0:	f7ff f8ec 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 800efa4:	2101      	movs	r1, #1
 800efa6:	4807      	ldr	r0, [pc, #28]	; (800efc4 <hal_resources_init_early+0x30>)
 800efa8:	f7ff ffd8 	bl	800ef5c <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800efac:	2300      	movs	r3, #0
 800efae:	2201      	movs	r2, #1
 800efb0:	2101      	movs	r1, #1
 800efb2:	4805      	ldr	r0, [pc, #20]	; (800efc8 <hal_resources_init_early+0x34>)
 800efb4:	f7ff f8e2 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 800efb8:	2101      	movs	r1, #1
 800efba:	4803      	ldr	r0, [pc, #12]	; (800efc8 <hal_resources_init_early+0x34>)
 800efbc:	f7ff ffce 	bl	800ef5c <hal_gpio_write>
}
 800efc0:	bf00      	nop
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	08011be8 	.word	0x08011be8
 800efc8:	08011bf0 	.word	0x08011bf0

0800efcc <hal_resources_init>:

void hal_resources_init(void) {
 800efcc:	b580      	push	{r7, lr}
 800efce:	af00      	add	r7, sp, #0
	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800efd0:	2300      	movs	r3, #0
 800efd2:	2201      	movs	r2, #1
 800efd4:	2101      	movs	r1, #1
 800efd6:	4820      	ldr	r0, [pc, #128]	; (800f058 <hal_resources_init+0x8c>)
 800efd8:	f7ff f8d0 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 800efdc:	2101      	movs	r1, #1
 800efde:	481e      	ldr	r0, [pc, #120]	; (800f058 <hal_resources_init+0x8c>)
 800efe0:	f7ff ffbc 	bl	800ef5c <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800efe4:	2300      	movs	r3, #0
 800efe6:	2201      	movs	r2, #1
 800efe8:	2101      	movs	r1, #1
 800efea:	481c      	ldr	r0, [pc, #112]	; (800f05c <hal_resources_init+0x90>)
 800efec:	f7ff f8c6 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 800eff0:	2101      	movs	r1, #1
 800eff2:	481a      	ldr	r0, [pc, #104]	; (800f05c <hal_resources_init+0x90>)
 800eff4:	f7ff ffb2 	bl	800ef5c <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800eff8:	2300      	movs	r3, #0
 800effa:	2201      	movs	r2, #1
 800effc:	2101      	movs	r1, #1
 800effe:	4818      	ldr	r0, [pc, #96]	; (800f060 <hal_resources_init+0x94>)
 800f000:	f7ff f8bc 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 800f004:	2101      	movs	r1, #1
 800f006:	4816      	ldr	r0, [pc, #88]	; (800f060 <hal_resources_init+0x94>)
 800f008:	f7ff ffa8 	bl	800ef5c <hal_gpio_write>

	/* vs1053 */
	hal_gpio_init(&gpio_vs1053_cs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 800f00c:	2300      	movs	r3, #0
 800f00e:	2200      	movs	r2, #0
 800f010:	2101      	movs	r1, #1
 800f012:	4814      	ldr	r0, [pc, #80]	; (800f064 <hal_resources_init+0x98>)
 800f014:	f7ff f8b2 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_cs, 1);
 800f018:	2101      	movs	r1, #1
 800f01a:	4812      	ldr	r0, [pc, #72]	; (800f064 <hal_resources_init+0x98>)
 800f01c:	f7ff ff9e 	bl	800ef5c <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dcs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 800f020:	2300      	movs	r3, #0
 800f022:	2200      	movs	r2, #0
 800f024:	2101      	movs	r1, #1
 800f026:	4810      	ldr	r0, [pc, #64]	; (800f068 <hal_resources_init+0x9c>)
 800f028:	f7ff f8a8 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 800f02c:	2101      	movs	r1, #1
 800f02e:	480e      	ldr	r0, [pc, #56]	; (800f068 <hal_resources_init+0x9c>)
 800f030:	f7ff ff94 	bl	800ef5c <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_rst, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 800f034:	2300      	movs	r3, #0
 800f036:	2200      	movs	r2, #0
 800f038:	2101      	movs	r1, #1
 800f03a:	480c      	ldr	r0, [pc, #48]	; (800f06c <hal_resources_init+0xa0>)
 800f03c:	f7ff f89e 	bl	800e17c <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_rst, 1);
 800f040:	2101      	movs	r1, #1
 800f042:	480a      	ldr	r0, [pc, #40]	; (800f06c <hal_resources_init+0xa0>)
 800f044:	f7ff ff8a 	bl	800ef5c <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dreq, GpioModeInput, GpioPullNo, GpioSpeedFreqLow);
 800f048:	2300      	movs	r3, #0
 800f04a:	2200      	movs	r2, #0
 800f04c:	2100      	movs	r1, #0
 800f04e:	4808      	ldr	r0, [pc, #32]	; (800f070 <hal_resources_init+0xa4>)
 800f050:	f7ff f894 	bl	800e17c <hal_gpio_init>

	/* button */
}
 800f054:	bf00      	nop
 800f056:	bd80      	pop	{r7, pc}
 800f058:	08011c58 	.word	0x08011c58
 800f05c:	08011c60 	.word	0x08011c60
 800f060:	08011c68 	.word	0x08011c68
 800f064:	08011c70 	.word	0x08011c70
 800f068:	08011c78 	.word	0x08011c78
 800f06c:	08011c80 	.word	0x08011c80
 800f070:	08011c88 	.word	0x08011c88

0800f074 <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 800f074:	b480      	push	{r7}
 800f076:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 800f078:	4b0c      	ldr	r3, [pc, #48]	; (800f0ac <sdio_init+0x38>)
 800f07a:	4a0d      	ldr	r2, [pc, #52]	; (800f0b0 <sdio_init+0x3c>)
 800f07c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800f07e:	4b0b      	ldr	r3, [pc, #44]	; (800f0ac <sdio_init+0x38>)
 800f080:	2200      	movs	r2, #0
 800f082:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800f084:	4b09      	ldr	r3, [pc, #36]	; (800f0ac <sdio_init+0x38>)
 800f086:	2200      	movs	r2, #0
 800f088:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800f08a:	4b08      	ldr	r3, [pc, #32]	; (800f0ac <sdio_init+0x38>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800f090:	4b06      	ldr	r3, [pc, #24]	; (800f0ac <sdio_init+0x38>)
 800f092:	2200      	movs	r2, #0
 800f094:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800f096:	4b05      	ldr	r3, [pc, #20]	; (800f0ac <sdio_init+0x38>)
 800f098:	2200      	movs	r2, #0
 800f09a:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 800f09c:	4b03      	ldr	r3, [pc, #12]	; (800f0ac <sdio_init+0x38>)
 800f09e:	2200      	movs	r2, #0
 800f0a0:	619a      	str	r2, [r3, #24]
}
 800f0a2:	bf00      	nop
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr
 800f0ac:	20007564 	.word	0x20007564
 800f0b0:	40012c00 	.word	0x40012c00

0800f0b4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b08c      	sub	sp, #48	; 0x30
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800f0bc:	2300      	movs	r3, #0
 800f0be:	61bb      	str	r3, [r7, #24]
 800f0c0:	4b60      	ldr	r3, [pc, #384]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c4:	4a5f      	ldr	r2, [pc, #380]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f0c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f0ca:	6313      	str	r3, [r2, #48]	; 0x30
 800f0cc:	4b5d      	ldr	r3, [pc, #372]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0d4:	61bb      	str	r3, [r7, #24]
 800f0d6:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2100      	movs	r1, #0
 800f0dc:	203b      	movs	r0, #59	; 0x3b
 800f0de:	f7f1 ffdd 	bl	800109c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800f0e2:	203b      	movs	r0, #59	; 0x3b
 800f0e4:	f7f1 fff6 	bl	80010d4 <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0e8:	f107 031c 	add.w	r3, r7, #28
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	601a      	str	r2, [r3, #0]
 800f0f0:	605a      	str	r2, [r3, #4]
 800f0f2:	609a      	str	r2, [r3, #8]
 800f0f4:	60da      	str	r2, [r3, #12]
 800f0f6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a52      	ldr	r2, [pc, #328]	; (800f248 <HAL_SD_MspInit+0x194>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	f040 809c 	bne.w	800f23c <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 800f104:	2300      	movs	r3, #0
 800f106:	617b      	str	r3, [r7, #20]
 800f108:	4b4e      	ldr	r3, [pc, #312]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f10c:	4a4d      	ldr	r2, [pc, #308]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f10e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f112:	6453      	str	r3, [r2, #68]	; 0x44
 800f114:	4b4b      	ldr	r3, [pc, #300]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f11c:	617b      	str	r3, [r7, #20]
 800f11e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f120:	2300      	movs	r3, #0
 800f122:	613b      	str	r3, [r7, #16]
 800f124:	4b47      	ldr	r3, [pc, #284]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f128:	4a46      	ldr	r2, [pc, #280]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f12a:	f043 0304 	orr.w	r3, r3, #4
 800f12e:	6313      	str	r3, [r2, #48]	; 0x30
 800f130:	4b44      	ldr	r3, [pc, #272]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f134:	f003 0304 	and.w	r3, r3, #4
 800f138:	613b      	str	r3, [r7, #16]
 800f13a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f13c:	2300      	movs	r3, #0
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	4b40      	ldr	r3, [pc, #256]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f144:	4a3f      	ldr	r2, [pc, #252]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f146:	f043 0308 	orr.w	r3, r3, #8
 800f14a:	6313      	str	r3, [r2, #48]	; 0x30
 800f14c:	4b3d      	ldr	r3, [pc, #244]	; (800f244 <HAL_SD_MspInit+0x190>)
 800f14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f150:	f003 0308 	and.w	r3, r3, #8
 800f154:	60fb      	str	r3, [r7, #12]
 800f156:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800f158:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800f15c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f15e:	2302      	movs	r3, #2
 800f160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f162:	2300      	movs	r3, #0
 800f164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f166:	2303      	movs	r3, #3
 800f168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800f16a:	230c      	movs	r3, #12
 800f16c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f16e:	f107 031c 	add.w	r3, r7, #28
 800f172:	4619      	mov	r1, r3
 800f174:	4835      	ldr	r0, [pc, #212]	; (800f24c <HAL_SD_MspInit+0x198>)
 800f176:	f7f2 fb59 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f17a:	2304      	movs	r3, #4
 800f17c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f17e:	2302      	movs	r3, #2
 800f180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f182:	2300      	movs	r3, #0
 800f184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f186:	2303      	movs	r3, #3
 800f188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800f18a:	230c      	movs	r3, #12
 800f18c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f18e:	f107 031c 	add.w	r3, r7, #28
 800f192:	4619      	mov	r1, r3
 800f194:	482e      	ldr	r0, [pc, #184]	; (800f250 <HAL_SD_MspInit+0x19c>)
 800f196:	f7f2 fb49 	bl	800182c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800f19a:	2200      	movs	r2, #0
 800f19c:	2105      	movs	r1, #5
 800f19e:	203b      	movs	r0, #59	; 0x3b
 800f1a0:	f7f1 ff7c 	bl	800109c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800f1a4:	203b      	movs	r0, #59	; 0x3b
 800f1a6:	f7f1 ff95 	bl	80010d4 <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 800f1aa:	4b2a      	ldr	r3, [pc, #168]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1ac:	4a2a      	ldr	r2, [pc, #168]	; (800f258 <HAL_SD_MspInit+0x1a4>)
 800f1ae:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 800f1b0:	4b28      	ldr	r3, [pc, #160]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f1b6:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f1b8:	4b26      	ldr	r3, [pc, #152]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 800f1be:	4b25      	ldr	r3, [pc, #148]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 800f1c4:	4b23      	ldr	r3, [pc, #140]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1ca:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f1cc:	4b21      	ldr	r3, [pc, #132]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f1d2:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f1d4:	4b1f      	ldr	r3, [pc, #124]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f1da:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 800f1dc:	4b1d      	ldr	r3, [pc, #116]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1de:	2220      	movs	r2, #32
 800f1e0:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 800f1e2:	4b1c      	ldr	r3, [pc, #112]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800f1e8:	4b1a      	ldr	r3, [pc, #104]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1ea:	2204      	movs	r2, #4
 800f1ec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800f1ee:	4b19      	ldr	r3, [pc, #100]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1f0:	2203      	movs	r2, #3
 800f1f2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 800f1f4:	4b17      	ldr	r3, [pc, #92]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f1fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 800f1fc:	4b15      	ldr	r3, [pc, #84]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f1fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f202:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 800f204:	4813      	ldr	r0, [pc, #76]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f206:	f7f1 ff73 	bl	80010f0 <HAL_DMA_Init>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d001      	beq.n	800f214 <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 800f210:	f001 fbb6 	bl	8010980 <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a0f      	ldr	r2, [pc, #60]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f218:	641a      	str	r2, [r3, #64]	; 0x40
 800f21a:	4a0e      	ldr	r2, [pc, #56]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	4a0c      	ldr	r2, [pc, #48]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f224:	63da      	str	r2, [r3, #60]	; 0x3c
 800f226:	4a0b      	ldr	r2, [pc, #44]	; (800f254 <HAL_SD_MspInit+0x1a0>)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800f22c:	2200      	movs	r2, #0
 800f22e:	2105      	movs	r1, #5
 800f230:	2031      	movs	r0, #49	; 0x31
 800f232:	f7f1 ff33 	bl	800109c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800f236:	2031      	movs	r0, #49	; 0x31
 800f238:	f7f1 ff4c 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800f23c:	bf00      	nop
 800f23e:	3730      	adds	r7, #48	; 0x30
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	40023800 	.word	0x40023800
 800f248:	40012c00 	.word	0x40012c00
 800f24c:	40020800 	.word	0x40020800
 800f250:	40020c00 	.word	0x40020c00
 800f254:	200075e8 	.word	0x200075e8
 800f258:	40026458 	.word	0x40026458

0800f25c <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 800f260:	4802      	ldr	r0, [pc, #8]	; (800f26c <DMA2_Stream3_IRQHandler+0x10>)
 800f262:	f7f2 f86d 	bl	8001340 <HAL_DMA_IRQHandler>
}
 800f266:	bf00      	nop
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	200075e8 	.word	0x200075e8

0800f270 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 800f274:	4802      	ldr	r0, [pc, #8]	; (800f280 <SDIO_IRQHandler+0x10>)
 800f276:	f7f2 ff4f 	bl	8002118 <HAL_SD_IRQHandler>
}
 800f27a:	bf00      	nop
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	20007564 	.word	0x20007564

0800f284 <__NVIC_GetPriorityGrouping>:
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f288:	4b04      	ldr	r3, [pc, #16]	; (800f29c <__NVIC_GetPriorityGrouping+0x18>)
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	0a1b      	lsrs	r3, r3, #8
 800f28e:	f003 0307 	and.w	r3, r3, #7
}
 800f292:	4618      	mov	r0, r3
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr
 800f29c:	e000ed00 	.word	0xe000ed00

0800f2a0 <__NVIC_EnableIRQ>:
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	db0b      	blt.n	800f2ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	f003 021f 	and.w	r2, r3, #31
 800f2b8:	4907      	ldr	r1, [pc, #28]	; (800f2d8 <__NVIC_EnableIRQ+0x38>)
 800f2ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2be:	095b      	lsrs	r3, r3, #5
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	fa00 f202 	lsl.w	r2, r0, r2
 800f2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f2ca:	bf00      	nop
 800f2cc:	370c      	adds	r7, #12
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	e000e100 	.word	0xe000e100

0800f2dc <__NVIC_SetPriority>:
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	6039      	str	r1, [r7, #0]
 800f2e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f2e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	db0a      	blt.n	800f306 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	b2da      	uxtb	r2, r3
 800f2f4:	490c      	ldr	r1, [pc, #48]	; (800f328 <__NVIC_SetPriority+0x4c>)
 800f2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2fa:	0112      	lsls	r2, r2, #4
 800f2fc:	b2d2      	uxtb	r2, r2
 800f2fe:	440b      	add	r3, r1
 800f300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f304:	e00a      	b.n	800f31c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	b2da      	uxtb	r2, r3
 800f30a:	4908      	ldr	r1, [pc, #32]	; (800f32c <__NVIC_SetPriority+0x50>)
 800f30c:	79fb      	ldrb	r3, [r7, #7]
 800f30e:	f003 030f 	and.w	r3, r3, #15
 800f312:	3b04      	subs	r3, #4
 800f314:	0112      	lsls	r2, r2, #4
 800f316:	b2d2      	uxtb	r2, r2
 800f318:	440b      	add	r3, r1
 800f31a:	761a      	strb	r2, [r3, #24]
}
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	e000e100 	.word	0xe000e100
 800f32c:	e000ed00 	.word	0xe000ed00

0800f330 <NVIC_EncodePriority>:
{
 800f330:	b480      	push	{r7}
 800f332:	b089      	sub	sp, #36	; 0x24
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f003 0307 	and.w	r3, r3, #7
 800f342:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	f1c3 0307 	rsb	r3, r3, #7
 800f34a:	2b04      	cmp	r3, #4
 800f34c:	bf28      	it	cs
 800f34e:	2304      	movcs	r3, #4
 800f350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	3304      	adds	r3, #4
 800f356:	2b06      	cmp	r3, #6
 800f358:	d902      	bls.n	800f360 <NVIC_EncodePriority+0x30>
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	3b03      	subs	r3, #3
 800f35e:	e000      	b.n	800f362 <NVIC_EncodePriority+0x32>
 800f360:	2300      	movs	r3, #0
 800f362:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	fa02 f303 	lsl.w	r3, r2, r3
 800f36e:	43da      	mvns	r2, r3
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	401a      	ands	r2, r3
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	fa01 f303 	lsl.w	r3, r1, r3
 800f382:	43d9      	mvns	r1, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f388:	4313      	orrs	r3, r2
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3724      	adds	r7, #36	; 0x24
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <LL_SPI_Enable>:
{
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	601a      	str	r2, [r3, #0]
}
 800f3aa:	bf00      	nop
 800f3ac:	370c      	adds	r7, #12
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <LL_SPI_SetStandard>:
{
 800f3b6:	b480      	push	{r7}
 800f3b8:	b083      	sub	sp, #12
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
 800f3be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	f023 0210 	bic.w	r2, r3, #16
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	431a      	orrs	r2, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	605a      	str	r2, [r3, #4]
}
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	f003 0301 	and.w	r3, r3, #1
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d101      	bne.n	800f3f4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e000      	b.n	800f3f6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	f003 0302 	and.w	r3, r3, #2
 800f412:	2b02      	cmp	r3, #2
 800f414:	d101      	bne.n	800f41a <LL_SPI_IsActiveFlag_TXE+0x18>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <LL_SPI_IsActiveFlag_TXE+0x1a>
 800f41a:	2300      	movs	r3, #0
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f438:	2b80      	cmp	r3, #128	; 0x80
 800f43a:	d101      	bne.n	800f440 <LL_SPI_IsActiveFlag_BSY+0x18>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e000      	b.n	800f442 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	370c      	adds	r7, #12
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800f44e:	b480      	push	{r7}
 800f450:	b083      	sub	sp, #12
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	330c      	adds	r3, #12
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	b2db      	uxtb	r3, r3
}
 800f45e:	4618      	mov	r0, r3
 800f460:	370c      	adds	r7, #12
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800f46a:	b480      	push	{r7}
 800f46c:	b085      	sub	sp, #20
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	460b      	mov	r3, r1
 800f474:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	330c      	adds	r3, #12
 800f47a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	78fa      	ldrb	r2, [r7, #3]
 800f480:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800f482:	bf00      	nop
 800f484:	3714      	adds	r7, #20
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr
	...

0800f490 <LL_DMA_SetDataTransferDirection>:
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800f49c:	4a0d      	ldr	r2, [pc, #52]	; (800f4d4 <LL_DMA_SetDataTransferDirection+0x44>)
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f4b0:	4908      	ldr	r1, [pc, #32]	; (800f4d4 <LL_DMA_SetDataTransferDirection+0x44>)
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	440b      	add	r3, r1
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	440b      	add	r3, r1
 800f4be:	4619      	mov	r1, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	600b      	str	r3, [r1, #0]
}
 800f4c6:	bf00      	nop
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	08011c90 	.word	0x08011c90

0800f4d8 <LL_DMA_SetMode>:
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b085      	sub	sp, #20
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800f4e4:	4a0d      	ldr	r2, [pc, #52]	; (800f51c <LL_DMA_SetMode+0x44>)
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800f4f8:	4908      	ldr	r1, [pc, #32]	; (800f51c <LL_DMA_SetMode+0x44>)
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	440b      	add	r3, r1
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	4619      	mov	r1, r3
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	440b      	add	r3, r1
 800f506:	4619      	mov	r1, r3
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4313      	orrs	r3, r2
 800f50c:	600b      	str	r3, [r1, #0]
}
 800f50e:	bf00      	nop
 800f510:	3714      	adds	r7, #20
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	08011c90 	.word	0x08011c90

0800f520 <LL_DMA_SetPeriphIncMode>:
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800f52c:	4a0d      	ldr	r2, [pc, #52]	; (800f564 <LL_DMA_SetPeriphIncMode+0x44>)
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	4413      	add	r3, r2
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	461a      	mov	r2, r3
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	4413      	add	r3, r2
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f540:	4908      	ldr	r1, [pc, #32]	; (800f564 <LL_DMA_SetPeriphIncMode+0x44>)
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	440b      	add	r3, r1
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	4619      	mov	r1, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	440b      	add	r3, r1
 800f54e:	4619      	mov	r1, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4313      	orrs	r3, r2
 800f554:	600b      	str	r3, [r1, #0]
}
 800f556:	bf00      	nop
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	08011c90 	.word	0x08011c90

0800f568 <LL_DMA_SetMemoryIncMode>:
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800f574:	4a0d      	ldr	r2, [pc, #52]	; (800f5ac <LL_DMA_SetMemoryIncMode+0x44>)
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	4413      	add	r3, r2
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	461a      	mov	r2, r3
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	4413      	add	r3, r2
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f588:	4908      	ldr	r1, [pc, #32]	; (800f5ac <LL_DMA_SetMemoryIncMode+0x44>)
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	440b      	add	r3, r1
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	4619      	mov	r1, r3
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	440b      	add	r3, r1
 800f596:	4619      	mov	r1, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	600b      	str	r3, [r1, #0]
}
 800f59e:	bf00      	nop
 800f5a0:	3714      	adds	r7, #20
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	08011c90 	.word	0x08011c90

0800f5b0 <LL_DMA_SetPeriphSize>:
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800f5bc:	4a0d      	ldr	r2, [pc, #52]	; (800f5f4 <LL_DMA_SetPeriphSize+0x44>)
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f5d0:	4908      	ldr	r1, [pc, #32]	; (800f5f4 <LL_DMA_SetPeriphSize+0x44>)
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	440b      	add	r3, r1
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	4619      	mov	r1, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	440b      	add	r3, r1
 800f5de:	4619      	mov	r1, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	600b      	str	r3, [r1, #0]
}
 800f5e6:	bf00      	nop
 800f5e8:	3714      	adds	r7, #20
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	08011c90 	.word	0x08011c90

0800f5f8 <LL_DMA_SetMemorySize>:
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800f604:	4a0d      	ldr	r2, [pc, #52]	; (800f63c <LL_DMA_SetMemorySize+0x44>)
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	4413      	add	r3, r2
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	4413      	add	r3, r2
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800f618:	4908      	ldr	r1, [pc, #32]	; (800f63c <LL_DMA_SetMemorySize+0x44>)
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	440b      	add	r3, r1
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	4619      	mov	r1, r3
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	440b      	add	r3, r1
 800f626:	4619      	mov	r1, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	600b      	str	r3, [r1, #0]
}
 800f62e:	bf00      	nop
 800f630:	3714      	adds	r7, #20
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	08011c90 	.word	0x08011c90

0800f640 <LL_DMA_SetStreamPriorityLevel>:
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800f64c:	4a0d      	ldr	r2, [pc, #52]	; (800f684 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	4413      	add	r3, r2
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	461a      	mov	r2, r3
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	4413      	add	r3, r2
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f660:	4908      	ldr	r1, [pc, #32]	; (800f684 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	440b      	add	r3, r1
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	4619      	mov	r1, r3
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	440b      	add	r3, r1
 800f66e:	4619      	mov	r1, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4313      	orrs	r3, r2
 800f674:	600b      	str	r3, [r1, #0]
}
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	08011c90 	.word	0x08011c90

0800f688 <LL_DMA_SetChannelSelection>:
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800f694:	4a0d      	ldr	r2, [pc, #52]	; (800f6cc <LL_DMA_SetChannelSelection+0x44>)
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	4413      	add	r3, r2
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	461a      	mov	r2, r3
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800f6a8:	4908      	ldr	r1, [pc, #32]	; (800f6cc <LL_DMA_SetChannelSelection+0x44>)
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	440b      	add	r3, r1
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	440b      	add	r3, r1
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	600b      	str	r3, [r1, #0]
}
 800f6be:	bf00      	nop
 800f6c0:	3714      	adds	r7, #20
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	08011c90 	.word	0x08011c90

0800f6d0 <LL_DMA_DisableFifoMode>:
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800f6da:	4a0c      	ldr	r2, [pc, #48]	; (800f70c <LL_DMA_DisableFifoMode+0x3c>)
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	4413      	add	r3, r2
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	4908      	ldr	r1, [pc, #32]	; (800f70c <LL_DMA_DisableFifoMode+0x3c>)
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	440a      	add	r2, r1
 800f6f0:	7812      	ldrb	r2, [r2, #0]
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	440a      	add	r2, r1
 800f6f8:	f023 0304 	bic.w	r3, r3, #4
 800f6fc:	6153      	str	r3, [r2, #20]
}
 800f6fe:	bf00      	nop
 800f700:	370c      	adds	r7, #12
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	08011c90 	.word	0x08011c90

0800f710 <LL_APB2_GRP1_EnableClock>:
{
 800f710:	b480      	push	{r7}
 800f712:	b085      	sub	sp, #20
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800f718:	4b08      	ldr	r3, [pc, #32]	; (800f73c <LL_APB2_GRP1_EnableClock+0x2c>)
 800f71a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f71c:	4907      	ldr	r1, [pc, #28]	; (800f73c <LL_APB2_GRP1_EnableClock+0x2c>)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4313      	orrs	r3, r2
 800f722:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800f724:	4b05      	ldr	r3, [pc, #20]	; (800f73c <LL_APB2_GRP1_EnableClock+0x2c>)
 800f726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4013      	ands	r3, r2
 800f72c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f72e:	68fb      	ldr	r3, [r7, #12]
}
 800f730:	bf00      	nop
 800f732:	3714      	adds	r7, #20
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	40023800 	.word	0x40023800

0800f740 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 800f74a:	f7f9 fa1d 	bl	8008b88 <vPortEnterCritical>

	switch(spi_id) {
 800f74e:	79fb      	ldrb	r3, [r7, #7]
 800f750:	2b05      	cmp	r3, #5
 800f752:	d014      	beq.n	800f77e <spi_init+0x3e>
 800f754:	2b05      	cmp	r3, #5
 800f756:	dc19      	bgt.n	800f78c <spi_init+0x4c>
 800f758:	2b02      	cmp	r3, #2
 800f75a:	d002      	beq.n	800f762 <spi_init+0x22>
 800f75c:	2b04      	cmp	r3, #4
 800f75e:	d007      	beq.n	800f770 <spi_init+0x30>
 800f760:	e014      	b.n	800f78c <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 800f762:	480f      	ldr	r0, [pc, #60]	; (800f7a0 <spi_init+0x60>)
 800f764:	f000 f900 	bl	800f968 <spi2_init>
		hal_cli_printf("spi2 init");
 800f768:	480e      	ldr	r0, [pc, #56]	; (800f7a4 <spi_init+0x64>)
 800f76a:	f7fd ffff 	bl	800d76c <hal_cli_printf>
		break;
 800f76e:	e011      	b.n	800f794 <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 800f770:	480d      	ldr	r0, [pc, #52]	; (800f7a8 <spi_init+0x68>)
 800f772:	f000 f921 	bl	800f9b8 <spi4_init>
		hal_cli_printf("spi4 init");
 800f776:	480d      	ldr	r0, [pc, #52]	; (800f7ac <spi_init+0x6c>)
 800f778:	f7fd fff8 	bl	800d76c <hal_cli_printf>
		break;
 800f77c:	e00a      	b.n	800f794 <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 800f77e:	480c      	ldr	r0, [pc, #48]	; (800f7b0 <spi_init+0x70>)
 800f780:	f000 f942 	bl	800fa08 <spi5_init>
		hal_cli_printf("spi5 init");
 800f784:	480b      	ldr	r0, [pc, #44]	; (800f7b4 <spi_init+0x74>)
 800f786:	f7fd fff1 	bl	800d76c <hal_cli_printf>
		break;
 800f78a:	e003      	b.n	800f794 <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 800f78c:	480a      	ldr	r0, [pc, #40]	; (800f7b8 <spi_init+0x78>)
 800f78e:	f7fd ffed 	bl	800d76c <hal_cli_printf>
		break;
 800f792:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 800f794:	f7f9 fa28 	bl	8008be8 <vPortExitCritical>
}
 800f798:	bf00      	nop
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	20007648 	.word	0x20007648
 800f7a4:	08011678 	.word	0x08011678
 800f7a8:	2000765c 	.word	0x2000765c
 800f7ac:	08011684 	.word	0x08011684
 800f7b0:	20007670 	.word	0x20007670
 800f7b4:	08011690 	.word	0x08011690
 800f7b8:	0801169c 	.word	0x0801169c

0800f7bc <hal_spi_transfer>:

bool hal_spi_transfer(spidrv_t* drv, uint8_t* data, uint32_t size, uint32_t timeout)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b088      	sub	sp, #32
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6178      	str	r0, [r7, #20]
 800f7c4:	6139      	str	r1, [r7, #16]
 800f7c6:	60fa      	str	r2, [r7, #12]
 800f7c8:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 800f7ca:	463b      	mov	r3, r7
 800f7cc:	68b9      	ldr	r1, [r7, #8]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fe fa86 	bl	800dce0 <hal_get_delay_timer>
 800f7d4:	f107 0318 	add.w	r3, r7, #24
 800f7d8:	463a      	mov	r2, r7
 800f7da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7de:	e883 0003 	stmia.w	r3, {r0, r1}

	while(size > 0) {
 800f7e2:	e023      	b.n	800f82c <hal_spi_transfer+0x70>
		LL_SPI_TransmitData8(drv->spi, *data);
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	f7ff fe3b 	bl	800f46a <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 800f7f4:	e00c      	b.n	800f810 <hal_spi_transfer+0x54>
			if(hal_delay_timer_is_expired(&timer)) {
 800f7f6:	f107 0318 	add.w	r3, r7, #24
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fe fa96 	bl	800dd2c <hal_delay_timer_is_expired>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d004      	beq.n	800f810 <hal_spi_transfer+0x54>
				hal_cli_printf("spi txe flag failed");
 800f806:	4818      	ldr	r0, [pc, #96]	; (800f868 <hal_spi_transfer+0xac>)
 800f808:	f7fd ffb0 	bl	800d76c <hal_cli_printf>
				return false;
 800f80c:	2300      	movs	r3, #0
 800f80e:	e027      	b.n	800f860 <hal_spi_transfer+0xa4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff fdf4 	bl	800f402 <LL_SPI_IsActiveFlag_TXE>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d0ea      	beq.n	800f7f6 <hal_spi_transfer+0x3a>
			}
		}
		size--;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	3b01      	subs	r3, #1
 800f824:	60fb      	str	r3, [r7, #12]
		data++;
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	3301      	adds	r3, #1
 800f82a:	613b      	str	r3, [r7, #16]
	while(size > 0) {
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1d8      	bne.n	800f7e4 <hal_spi_transfer+0x28>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 800f832:	e00c      	b.n	800f84e <hal_spi_transfer+0x92>
		if(hal_delay_timer_is_expired(&timer)) {
 800f834:	f107 0318 	add.w	r3, r7, #24
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fe fa77 	bl	800dd2c <hal_delay_timer_is_expired>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d004      	beq.n	800f84e <hal_spi_transfer+0x92>
			hal_cli_printf("spi busy flag failed");
 800f844:	4809      	ldr	r0, [pc, #36]	; (800f86c <hal_spi_transfer+0xb0>)
 800f846:	f7fd ff91 	bl	800d76c <hal_cli_printf>
			return false;
 800f84a:	2300      	movs	r3, #0
 800f84c:	e008      	b.n	800f860 <hal_spi_transfer+0xa4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff fde8 	bl	800f428 <LL_SPI_IsActiveFlag_BSY>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d1ea      	bne.n	800f834 <hal_spi_transfer+0x78>
		}
	}

	return true;
 800f85e:	2301      	movs	r3, #1
}
 800f860:	4618      	mov	r0, r3
 800f862:	3720      	adds	r7, #32
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	080116b0 	.word	0x080116b0
 800f86c:	080116c4 	.word	0x080116c4

0800f870 <hal_spi_txrx>:

	return true;
}

bool hal_spi_txrx(spidrv_t* drv, uint8_t* tx, uint8_t* rx, uint32_t size, uint32_t timeout)
{
 800f870:	b590      	push	{r4, r7, lr}
 800f872:	b08b      	sub	sp, #44	; 0x2c
 800f874:	af00      	add	r7, sp, #0
 800f876:	6178      	str	r0, [r7, #20]
 800f878:	6139      	str	r1, [r7, #16]
 800f87a:	60fa      	str	r2, [r7, #12]
 800f87c:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 800f87e:	463b      	mov	r3, r7
 800f880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe fa2c 	bl	800dce0 <hal_get_delay_timer>
 800f888:	f107 031c 	add.w	r3, r7, #28
 800f88c:	463a      	mov	r2, r7
 800f88e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f892:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int i = 0; i < size; i++) {
 800f896:	2300      	movs	r3, #0
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
 800f89a:	e040      	b.n	800f91e <hal_spi_txrx+0xae>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
			if(hal_delay_timer_is_expired(&timer)) {
 800f89c:	f107 031c 	add.w	r3, r7, #28
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fe fa43 	bl	800dd2c <hal_delay_timer_is_expired>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d004      	beq.n	800f8b6 <hal_spi_txrx+0x46>
				hal_cli_printf("spi txe flag failed");
 800f8ac:	482b      	ldr	r0, [pc, #172]	; (800f95c <hal_spi_txrx+0xec>)
 800f8ae:	f7fd ff5d 	bl	800d76c <hal_cli_printf>
				return false;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	e04e      	b.n	800f954 <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff fda1 	bl	800f402 <LL_SPI_IsActiveFlag_TXE>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d0ea      	beq.n	800f89c <hal_spi_txrx+0x2c>
			}
		}
		LL_SPI_TransmitData8(drv->spi, tx[i]);
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	6818      	ldr	r0, [r3, #0]
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	f7ff fdc9 	bl	800f46a <LL_SPI_TransmitData8>

		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 800f8d8:	e00c      	b.n	800f8f4 <hal_spi_txrx+0x84>
			if(hal_delay_timer_is_expired(&timer)) {
 800f8da:	f107 031c 	add.w	r3, r7, #28
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fe fa24 	bl	800dd2c <hal_delay_timer_is_expired>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d004      	beq.n	800f8f4 <hal_spi_txrx+0x84>
				hal_cli_printf("spi rxne flag failed");
 800f8ea:	481d      	ldr	r0, [pc, #116]	; (800f960 <hal_spi_txrx+0xf0>)
 800f8ec:	f7fd ff3e 	bl	800d76c <hal_cli_printf>
				return false;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	e02f      	b.n	800f954 <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7ff fd6f 	bl	800f3dc <LL_SPI_IsActiveFlag_RXNE>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d0ea      	beq.n	800f8da <hal_spi_txrx+0x6a>
			}
		}
		rx[i] = LL_SPI_ReceiveData8(drv->spi);
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	6819      	ldr	r1, [r3, #0]
 800f908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	18d4      	adds	r4, r2, r3
 800f90e:	4608      	mov	r0, r1
 800f910:	f7ff fd9d 	bl	800f44e <LL_SPI_ReceiveData8>
 800f914:	4603      	mov	r3, r0
 800f916:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < size; i++) {
 800f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91a:	3301      	adds	r3, #1
 800f91c:	627b      	str	r3, [r7, #36]	; 0x24
 800f91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f920:	68ba      	ldr	r2, [r7, #8]
 800f922:	429a      	cmp	r2, r3
 800f924:	d8c7      	bhi.n	800f8b6 <hal_spi_txrx+0x46>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 800f926:	e00c      	b.n	800f942 <hal_spi_txrx+0xd2>
		if(hal_delay_timer_is_expired(&timer)) {
 800f928:	f107 031c 	add.w	r3, r7, #28
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fe f9fd 	bl	800dd2c <hal_delay_timer_is_expired>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d004      	beq.n	800f942 <hal_spi_txrx+0xd2>
			hal_cli_printf("spi busy flag failed");
 800f938:	480a      	ldr	r0, [pc, #40]	; (800f964 <hal_spi_txrx+0xf4>)
 800f93a:	f7fd ff17 	bl	800d76c <hal_cli_printf>
			return false;
 800f93e:	2300      	movs	r3, #0
 800f940:	e008      	b.n	800f954 <hal_spi_txrx+0xe4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4618      	mov	r0, r3
 800f948:	f7ff fd6e 	bl	800f428 <LL_SPI_IsActiveFlag_BSY>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1ea      	bne.n	800f928 <hal_spi_txrx+0xb8>
		}
	}
	return true;
 800f952:	2301      	movs	r3, #1
}
 800f954:	4618      	mov	r0, r3
 800f956:	372c      	adds	r7, #44	; 0x2c
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd90      	pop	{r4, r7, pc}
 800f95c:	080116b0 	.word	0x080116b0
 800f960:	080116dc 	.word	0x080116dc
 800f964:	080116c4 	.word	0x080116c4

0800f968 <spi2_init>:


static void spi2_init(spidrv_t* drv)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 800f970:	f000 f872 	bl	800fa58 <spi2_pin_conf>
	spi2_dma_init();
 800f974:	f000 f88a 	bl	800fa8c <spi2_dma_init>
	spi2_config();
 800f978:	f000 f8cc 	bl	800fb14 <spi2_config>

	LL_SPI_Enable(SPI2);
 800f97c:	480c      	ldr	r0, [pc, #48]	; (800f9b0 <spi2_init+0x48>)
 800f97e:	f7ff fd0a 	bl	800f396 <LL_SPI_Enable>

	drv->spi = SPI2;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4a0a      	ldr	r2, [pc, #40]	; (800f9b0 <spi2_init+0x48>)
 800f986:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a0a      	ldr	r2, [pc, #40]	; (800f9b4 <spi2_init+0x4c>)
 800f98c:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2204      	movs	r2, #4
 800f992:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2200      	movs	r2, #0
 800f998:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800f99a:	2001      	movs	r0, #1
 800f99c:	f7f9 fbea 	bl	8009174 <xQueueCreateMutex>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	605a      	str	r2, [r3, #4]
}
 800f9a6:	bf00      	nop
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	40003800 	.word	0x40003800
 800f9b4:	40026000 	.word	0x40026000

0800f9b8 <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 800f9c0:	f000 f8e6 	bl	800fb90 <spi4_pin_conf>
	spi4_dma_init();
 800f9c4:	f000 f908 	bl	800fbd8 <spi4_dma_init>
	spi4_config();
 800f9c8:	f000 f988 	bl	800fcdc <spi4_config>

	LL_SPI_Enable(SPI4);
 800f9cc:	480c      	ldr	r0, [pc, #48]	; (800fa00 <spi4_init+0x48>)
 800f9ce:	f7ff fce2 	bl	800f396 <LL_SPI_Enable>

	drv->spi = SPI4;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a0a      	ldr	r2, [pc, #40]	; (800fa00 <spi4_init+0x48>)
 800f9d6:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a0a      	ldr	r2, [pc, #40]	; (800fa04 <spi4_init+0x4c>)
 800f9dc:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800f9ea:	2001      	movs	r0, #1
 800f9ec:	f7f9 fbc2 	bl	8009174 <xQueueCreateMutex>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	605a      	str	r2, [r3, #4]
}
 800f9f6:	bf00      	nop
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	40013400 	.word	0x40013400
 800fa04:	40026400 	.word	0x40026400

0800fa08 <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 800fa10:	f000 f9a2 	bl	800fd58 <spi5_pin_conf>
	spi5_dma_init();
 800fa14:	f000 f9c4 	bl	800fda0 <spi5_dma_init>
	spi5_config();
 800fa18:	f000 fa06 	bl	800fe28 <spi5_config>

	LL_SPI_Enable(SPI5);
 800fa1c:	480c      	ldr	r0, [pc, #48]	; (800fa50 <spi5_init+0x48>)
 800fa1e:	f7ff fcba 	bl	800f396 <LL_SPI_Enable>

	drv->spi = SPI5;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a0a      	ldr	r2, [pc, #40]	; (800fa50 <spi5_init+0x48>)
 800fa26:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4a0a      	ldr	r2, [pc, #40]	; (800fa54 <spi5_init+0x4c>)
 800fa2c:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2204      	movs	r2, #4
 800fa32:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800fa3a:	2001      	movs	r0, #1
 800fa3c:	f7f9 fb9a 	bl	8009174 <xQueueCreateMutex>
 800fa40:	4602      	mov	r2, r0
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	605a      	str	r2, [r3, #4]
}
 800fa46:	bf00      	nop
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	40015000 	.word	0x40015000
 800fa54:	40026400 	.word	0x40026400

0800fa58 <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 800fa5e:	2305      	movs	r3, #5
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	2303      	movs	r3, #3
 800fa64:	2200      	movs	r2, #0
 800fa66:	2103      	movs	r1, #3
 800fa68:	4806      	ldr	r0, [pc, #24]	; (800fa84 <spi2_pin_conf+0x2c>)
 800fa6a:	f7fe fba1 	bl	800e1b0 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 800fa6e:	2305      	movs	r3, #5
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	2303      	movs	r3, #3
 800fa74:	2200      	movs	r2, #0
 800fa76:	2103      	movs	r1, #3
 800fa78:	4803      	ldr	r0, [pc, #12]	; (800fa88 <spi2_pin_conf+0x30>)
 800fa7a:	f7fe fb99 	bl	800e1b0 <hal_gpio_init_alt>
		&gpio_spi2_mosi,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 800fa7e:	bf00      	nop
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	08011c30 	.word	0x08011c30
 800fa88:	08011c38 	.word	0x08011c38

0800fa8c <spi2_dma_init>:

static void spi2_dma_init(void)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800fa90:	f7ff fbf8 	bl	800f284 <__NVIC_GetPriorityGrouping>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2200      	movs	r2, #0
 800fa98:	2105      	movs	r1, #5
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7ff fc48 	bl	800f330 <NVIC_EncodePriority>
 800faa0:	4603      	mov	r3, r0
 800faa2:	4619      	mov	r1, r3
 800faa4:	200f      	movs	r0, #15
 800faa6:	f7ff fc19 	bl	800f2dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800faaa:	200f      	movs	r0, #15
 800faac:	f7ff fbf8 	bl	800f2a0 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, DMA_SPI2_TX_STREAM, DMA_SPI2_TX_CHANNEL);
 800fab0:	2200      	movs	r2, #0
 800fab2:	2104      	movs	r1, #4
 800fab4:	4816      	ldr	r0, [pc, #88]	; (800fb10 <spi2_dma_init+0x84>)
 800fab6:	f7ff fde7 	bl	800f688 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800faba:	2240      	movs	r2, #64	; 0x40
 800fabc:	2104      	movs	r1, #4
 800fabe:	4814      	ldr	r0, [pc, #80]	; (800fb10 <spi2_dma_init+0x84>)
 800fac0:	f7ff fce6 	bl	800f490 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800fac4:	2200      	movs	r2, #0
 800fac6:	2104      	movs	r1, #4
 800fac8:	4811      	ldr	r0, [pc, #68]	; (800fb10 <spi2_dma_init+0x84>)
 800faca:	f7ff fdb9 	bl	800f640 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MODE_NORMAL);
 800face:	2200      	movs	r2, #0
 800fad0:	2104      	movs	r1, #4
 800fad2:	480f      	ldr	r0, [pc, #60]	; (800fb10 <spi2_dma_init+0x84>)
 800fad4:	f7ff fd00 	bl	800f4d8 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800fad8:	2200      	movs	r2, #0
 800fada:	2104      	movs	r1, #4
 800fadc:	480c      	ldr	r0, [pc, #48]	; (800fb10 <spi2_dma_init+0x84>)
 800fade:	f7ff fd1f 	bl	800f520 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800fae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fae6:	2104      	movs	r1, #4
 800fae8:	4809      	ldr	r0, [pc, #36]	; (800fb10 <spi2_dma_init+0x84>)
 800faea:	f7ff fd3d 	bl	800f568 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800faee:	2200      	movs	r2, #0
 800faf0:	2104      	movs	r1, #4
 800faf2:	4807      	ldr	r0, [pc, #28]	; (800fb10 <spi2_dma_init+0x84>)
 800faf4:	f7ff fd5c 	bl	800f5b0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800faf8:	2200      	movs	r2, #0
 800fafa:	2104      	movs	r1, #4
 800fafc:	4804      	ldr	r0, [pc, #16]	; (800fb10 <spi2_dma_init+0x84>)
 800fafe:	f7ff fd7b 	bl	800f5f8 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, DMA_SPI2_TX_STREAM);
 800fb02:	2104      	movs	r1, #4
 800fb04:	4802      	ldr	r0, [pc, #8]	; (800fb10 <spi2_dma_init+0x84>)
 800fb06:	f7ff fde3 	bl	800f6d0 <LL_DMA_DisableFifoMode>
}
 800fb0a:	bf00      	nop
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	40026000 	.word	0x40026000

0800fb14 <spi2_config>:

static void spi2_config(void)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b08a      	sub	sp, #40	; 0x28
 800fb18:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800fb1a:	463b      	mov	r3, r7
 800fb1c:	2228      	movs	r2, #40	; 0x28
 800fb1e:	2100      	movs	r1, #0
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 ffa3 	bl	8010a6c <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800fb26:	f7ff fbad 	bl	800f284 <__NVIC_GetPriorityGrouping>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	2105      	movs	r1, #5
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff fbfd 	bl	800f330 <NVIC_EncodePriority>
 800fb36:	4603      	mov	r3, r0
 800fb38:	4619      	mov	r1, r3
 800fb3a:	2024      	movs	r0, #36	; 0x24
 800fb3c:	f7ff fbce 	bl	800f2dc <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 800fb40:	2024      	movs	r0, #36	; 0x24
 800fb42:	f7ff fbad 	bl	800f2a0 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800fb46:	2300      	movs	r3, #0
 800fb48:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800fb4a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800fb4e:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800fb50:	2300      	movs	r3, #0
 800fb52:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800fb54:	2300      	movs	r3, #0
 800fb56:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800fb5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb60:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800fb62:	2318      	movs	r3, #24
 800fb64:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800fb66:	2300      	movs	r3, #0
 800fb68:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 800fb6e:	230a      	movs	r3, #10
 800fb70:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 800fb72:	463b      	mov	r3, r7
 800fb74:	4619      	mov	r1, r3
 800fb76:	4805      	ldr	r0, [pc, #20]	; (800fb8c <spi2_config+0x78>)
 800fb78:	f7f4 fe5d 	bl	8004836 <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	4803      	ldr	r0, [pc, #12]	; (800fb8c <spi2_config+0x78>)
 800fb80:	f7ff fc19 	bl	800f3b6 <LL_SPI_SetStandard>
}
 800fb84:	bf00      	nop
 800fb86:	3728      	adds	r7, #40	; 0x28
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	40003800 	.word	0x40003800

0800fb90 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 800fb96:	2305      	movs	r3, #5
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	2103      	movs	r1, #3
 800fba0:	480a      	ldr	r0, [pc, #40]	; (800fbcc <spi4_pin_conf+0x3c>)
 800fba2:	f7fe fb05 	bl	800e1b0 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 800fba6:	2305      	movs	r3, #5
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	2303      	movs	r3, #3
 800fbac:	2200      	movs	r2, #0
 800fbae:	2103      	movs	r1, #3
 800fbb0:	4807      	ldr	r0, [pc, #28]	; (800fbd0 <spi4_pin_conf+0x40>)
 800fbb2:	f7fe fafd 	bl	800e1b0 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 800fbb6:	2305      	movs	r3, #5
 800fbb8:	9300      	str	r3, [sp, #0]
 800fbba:	2303      	movs	r3, #3
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	2103      	movs	r1, #3
 800fbc0:	4804      	ldr	r0, [pc, #16]	; (800fbd4 <spi4_pin_conf+0x44>)
 800fbc2:	f7fe faf5 	bl	800e1b0 <hal_gpio_init_alt>
		&gpio_spi4_miso,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 800fbc6:	bf00      	nop
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	08011c40 	.word	0x08011c40
 800fbd0:	08011c48 	.word	0x08011c48
 800fbd4:	08011c50 	.word	0x08011c50

0800fbd8 <spi4_dma_init>:

static void spi4_dma_init(void)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800fbdc:	f7ff fb52 	bl	800f284 <__NVIC_GetPriorityGrouping>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	2105      	movs	r1, #5
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff fba2 	bl	800f330 <NVIC_EncodePriority>
 800fbec:	4603      	mov	r3, r0
 800fbee:	4619      	mov	r1, r3
 800fbf0:	2038      	movs	r0, #56	; 0x38
 800fbf2:	f7ff fb73 	bl	800f2dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fbf6:	2038      	movs	r0, #56	; 0x38
 800fbf8:	f7ff fb52 	bl	800f2a0 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800fbfc:	f7ff fb42 	bl	800f284 <__NVIC_GetPriorityGrouping>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2200      	movs	r2, #0
 800fc04:	2105      	movs	r1, #5
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7ff fb92 	bl	800f330 <NVIC_EncodePriority>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	4619      	mov	r1, r3
 800fc10:	2039      	movs	r0, #57	; 0x39
 800fc12:	f7ff fb63 	bl	800f2dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800fc16:	2039      	movs	r0, #57	; 0x39
 800fc18:	f7ff fb42 	bl	800f2a0 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_RX_STREAM, DMA_SPI4_RX_CHANNEL);
 800fc1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fc20:	2100      	movs	r1, #0
 800fc22:	482d      	ldr	r0, [pc, #180]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc24:	f7ff fd30 	bl	800f688 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800fc28:	2200      	movs	r2, #0
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	482a      	ldr	r0, [pc, #168]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc2e:	f7ff fc2f 	bl	800f490 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PRIORITY_LOW);
 800fc32:	2200      	movs	r2, #0
 800fc34:	2100      	movs	r1, #0
 800fc36:	4828      	ldr	r0, [pc, #160]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc38:	f7ff fd02 	bl	800f640 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MODE_NORMAL);
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2100      	movs	r1, #0
 800fc40:	4825      	ldr	r0, [pc, #148]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc42:	f7ff fc49 	bl	800f4d8 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800fc46:	2200      	movs	r2, #0
 800fc48:	2100      	movs	r1, #0
 800fc4a:	4823      	ldr	r0, [pc, #140]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc4c:	f7ff fc68 	bl	800f520 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800fc50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fc54:	2100      	movs	r1, #0
 800fc56:	4820      	ldr	r0, [pc, #128]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc58:	f7ff fc86 	bl	800f568 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	2100      	movs	r1, #0
 800fc60:	481d      	ldr	r0, [pc, #116]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc62:	f7ff fca5 	bl	800f5b0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800fc66:	2200      	movs	r2, #0
 800fc68:	2100      	movs	r1, #0
 800fc6a:	481b      	ldr	r0, [pc, #108]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc6c:	f7ff fcc4 	bl	800f5f8 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_RX_STREAM);
 800fc70:	2100      	movs	r1, #0
 800fc72:	4819      	ldr	r0, [pc, #100]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc74:	f7ff fd2c 	bl	800f6d0 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_TX_STREAM, DMA_SPI4_TX_CHANNEL);
 800fc78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fc7c:	2101      	movs	r1, #1
 800fc7e:	4816      	ldr	r0, [pc, #88]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc80:	f7ff fd02 	bl	800f688 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800fc84:	2240      	movs	r2, #64	; 0x40
 800fc86:	2101      	movs	r1, #1
 800fc88:	4813      	ldr	r0, [pc, #76]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc8a:	f7ff fc01 	bl	800f490 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800fc8e:	2200      	movs	r2, #0
 800fc90:	2101      	movs	r1, #1
 800fc92:	4811      	ldr	r0, [pc, #68]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc94:	f7ff fcd4 	bl	800f640 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MODE_NORMAL);
 800fc98:	2200      	movs	r2, #0
 800fc9a:	2101      	movs	r1, #1
 800fc9c:	480e      	ldr	r0, [pc, #56]	; (800fcd8 <spi4_dma_init+0x100>)
 800fc9e:	f7ff fc1b 	bl	800f4d8 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800fca2:	2200      	movs	r2, #0
 800fca4:	2101      	movs	r1, #1
 800fca6:	480c      	ldr	r0, [pc, #48]	; (800fcd8 <spi4_dma_init+0x100>)
 800fca8:	f7ff fc3a 	bl	800f520 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800fcac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fcb0:	2101      	movs	r1, #1
 800fcb2:	4809      	ldr	r0, [pc, #36]	; (800fcd8 <spi4_dma_init+0x100>)
 800fcb4:	f7ff fc58 	bl	800f568 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2101      	movs	r1, #1
 800fcbc:	4806      	ldr	r0, [pc, #24]	; (800fcd8 <spi4_dma_init+0x100>)
 800fcbe:	f7ff fc77 	bl	800f5b0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	4804      	ldr	r0, [pc, #16]	; (800fcd8 <spi4_dma_init+0x100>)
 800fcc8:	f7ff fc96 	bl	800f5f8 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_TX_STREAM);
 800fccc:	2101      	movs	r1, #1
 800fcce:	4802      	ldr	r0, [pc, #8]	; (800fcd8 <spi4_dma_init+0x100>)
 800fcd0:	f7ff fcfe 	bl	800f6d0 <LL_DMA_DisableFifoMode>
}
 800fcd4:	bf00      	nop
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	40026400 	.word	0x40026400

0800fcdc <spi4_config>:

static void spi4_config(void)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b08a      	sub	sp, #40	; 0x28
 800fce0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800fce2:	463b      	mov	r3, r7
 800fce4:	2228      	movs	r2, #40	; 0x28
 800fce6:	2100      	movs	r1, #0
 800fce8:	4618      	mov	r0, r3
 800fcea:	f000 febf 	bl	8010a6c <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800fcee:	f7ff fac9 	bl	800f284 <__NVIC_GetPriorityGrouping>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2105      	movs	r1, #5
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff fb19 	bl	800f330 <NVIC_EncodePriority>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	4619      	mov	r1, r3
 800fd02:	2054      	movs	r0, #84	; 0x54
 800fd04:	f7ff faea 	bl	800f2dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 800fd08:	2054      	movs	r0, #84	; 0x54
 800fd0a:	f7ff fac9 	bl	800f2a0 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800fd12:	f44f 7382 	mov.w	r3, #260	; 0x104
 800fd16:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800fd20:	2300      	movs	r3, #0
 800fd22:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800fd24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd28:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 800fd2a:	2328      	movs	r3, #40	; 0x28
 800fd2c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800fd32:	2300      	movs	r3, #0
 800fd34:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 800fd36:	230a      	movs	r3, #10
 800fd38:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 800fd3a:	463b      	mov	r3, r7
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	4805      	ldr	r0, [pc, #20]	; (800fd54 <spi4_config+0x78>)
 800fd40:	f7f4 fd79 	bl	8004836 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 800fd44:	2100      	movs	r1, #0
 800fd46:	4803      	ldr	r0, [pc, #12]	; (800fd54 <spi4_config+0x78>)
 800fd48:	f7ff fb35 	bl	800f3b6 <LL_SPI_SetStandard>
}
 800fd4c:	bf00      	nop
 800fd4e:	3728      	adds	r7, #40	; 0x28
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	40013400 	.word	0x40013400

0800fd58 <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b086      	sub	sp, #24
 800fd5c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd5e:	463b      	mov	r3, r7
 800fd60:	2200      	movs	r2, #0
 800fd62:	601a      	str	r2, [r3, #0]
 800fd64:	605a      	str	r2, [r3, #4]
 800fd66:	609a      	str	r2, [r3, #8]
 800fd68:	60da      	str	r2, [r3, #12]
 800fd6a:	611a      	str	r2, [r3, #16]
 800fd6c:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800fd6e:	f44f 7360 	mov.w	r3, #896	; 0x380
 800fd72:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800fd74:	2302      	movs	r3, #2
 800fd76:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800fd78:	2303      	movs	r3, #3
 800fd7a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800fd80:	2300      	movs	r3, #0
 800fd82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800fd84:	2305      	movs	r3, #5
 800fd86:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800fd88:	463b      	mov	r3, r7
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	4803      	ldr	r0, [pc, #12]	; (800fd9c <spi5_pin_conf+0x44>)
 800fd8e:	f7f3 fd0a 	bl	80037a6 <LL_GPIO_Init>
}
 800fd92:	bf00      	nop
 800fd94:	3718      	adds	r7, #24
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	40021400 	.word	0x40021400

0800fda0 <spi5_dma_init>:

static void spi5_dma_init(void)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800fda4:	f7ff fa6e 	bl	800f284 <__NVIC_GetPriorityGrouping>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2200      	movs	r2, #0
 800fdac:	2105      	movs	r1, #5
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff fabe 	bl	800f330 <NVIC_EncodePriority>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	203c      	movs	r0, #60	; 0x3c
 800fdba:	f7ff fa8f 	bl	800f2dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800fdbe:	203c      	movs	r0, #60	; 0x3c
 800fdc0:	f7ff fa6e 	bl	800f2a0 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 800fdc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fdc8:	2104      	movs	r1, #4
 800fdca:	4816      	ldr	r0, [pc, #88]	; (800fe24 <spi5_dma_init+0x84>)
 800fdcc:	f7ff fc5c 	bl	800f688 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800fdd0:	2240      	movs	r2, #64	; 0x40
 800fdd2:	2104      	movs	r1, #4
 800fdd4:	4813      	ldr	r0, [pc, #76]	; (800fe24 <spi5_dma_init+0x84>)
 800fdd6:	f7ff fb5b 	bl	800f490 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 800fdda:	2200      	movs	r2, #0
 800fddc:	2104      	movs	r1, #4
 800fdde:	4811      	ldr	r0, [pc, #68]	; (800fe24 <spi5_dma_init+0x84>)
 800fde0:	f7ff fc2e 	bl	800f640 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800fde4:	2200      	movs	r2, #0
 800fde6:	2104      	movs	r1, #4
 800fde8:	480e      	ldr	r0, [pc, #56]	; (800fe24 <spi5_dma_init+0x84>)
 800fdea:	f7ff fb75 	bl	800f4d8 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 800fdee:	2200      	movs	r2, #0
 800fdf0:	2104      	movs	r1, #4
 800fdf2:	480c      	ldr	r0, [pc, #48]	; (800fe24 <spi5_dma_init+0x84>)
 800fdf4:	f7ff fb94 	bl	800f520 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 800fdf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fdfc:	2104      	movs	r1, #4
 800fdfe:	4809      	ldr	r0, [pc, #36]	; (800fe24 <spi5_dma_init+0x84>)
 800fe00:	f7ff fbb2 	bl	800f568 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800fe04:	2200      	movs	r2, #0
 800fe06:	2104      	movs	r1, #4
 800fe08:	4806      	ldr	r0, [pc, #24]	; (800fe24 <spi5_dma_init+0x84>)
 800fe0a:	f7ff fbd1 	bl	800f5b0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2104      	movs	r1, #4
 800fe12:	4804      	ldr	r0, [pc, #16]	; (800fe24 <spi5_dma_init+0x84>)
 800fe14:	f7ff fbf0 	bl	800f5f8 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 800fe18:	2104      	movs	r1, #4
 800fe1a:	4802      	ldr	r0, [pc, #8]	; (800fe24 <spi5_dma_init+0x84>)
 800fe1c:	f7ff fc58 	bl	800f6d0 <LL_DMA_DisableFifoMode>
}
 800fe20:	bf00      	nop
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	40026400 	.word	0x40026400

0800fe28 <spi5_config>:

static void spi5_config(void)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b08a      	sub	sp, #40	; 0x28
 800fe2c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800fe2e:	463b      	mov	r3, r7
 800fe30:	2228      	movs	r2, #40	; 0x28
 800fe32:	2100      	movs	r1, #0
 800fe34:	4618      	mov	r0, r3
 800fe36:	f000 fe19 	bl	8010a6c <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 800fe3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fe3e:	f7ff fc67 	bl	800f710 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800fe42:	f7ff fa1f 	bl	800f284 <__NVIC_GetPriorityGrouping>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2200      	movs	r2, #0
 800fe4a:	2105      	movs	r1, #5
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7ff fa6f 	bl	800f330 <NVIC_EncodePriority>
 800fe52:	4603      	mov	r3, r0
 800fe54:	4619      	mov	r1, r3
 800fe56:	2055      	movs	r0, #85	; 0x55
 800fe58:	f7ff fa40 	bl	800f2dc <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 800fe5c:	2055      	movs	r0, #85	; 0x55
 800fe5e:	f7ff fa1f 	bl	800f2a0 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800fe62:	2300      	movs	r3, #0
 800fe64:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800fe66:	f44f 7382 	mov.w	r3, #260	; 0x104
 800fe6a:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800fe70:	2300      	movs	r3, #0
 800fe72:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800fe74:	2300      	movs	r3, #0
 800fe76:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800fe78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe7c:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800fe7e:	2318      	movs	r3, #24
 800fe80:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800fe82:	2300      	movs	r3, #0
 800fe84:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800fe86:	2300      	movs	r3, #0
 800fe88:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 800fe8a:	230a      	movs	r3, #10
 800fe8c:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 800fe8e:	463b      	mov	r3, r7
 800fe90:	4619      	mov	r1, r3
 800fe92:	4805      	ldr	r0, [pc, #20]	; (800fea8 <spi5_config+0x80>)
 800fe94:	f7f4 fccf 	bl	8004836 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 800fe98:	2100      	movs	r1, #0
 800fe9a:	4803      	ldr	r0, [pc, #12]	; (800fea8 <spi5_config+0x80>)
 800fe9c:	f7ff fa8b 	bl	800f3b6 <LL_SPI_SetStandard>
}
 800fea0:	bf00      	nop
 800fea2:	3728      	adds	r7, #40	; 0x28
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	40015000 	.word	0x40015000

0800feac <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800feac:	b480      	push	{r7}
 800feae:	af00      	add	r7, sp, #0

}
 800feb0:	bf00      	nop
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr

0800feba <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 800feba:	b480      	push	{r7}
 800febc:	af00      	add	r7, sp, #0

}
 800febe:	bf00      	nop
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 800fec8:	b480      	push	{r7}
 800feca:	af00      	add	r7, sp, #0

}
 800fecc:	bf00      	nop
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr

0800fed6 <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 800fed6:	b480      	push	{r7}
 800fed8:	af00      	add	r7, sp, #0

}
 800feda:	bf00      	nop
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 800fee4:	b480      	push	{r7}
 800fee6:	af00      	add	r7, sp, #0

}
 800fee8:	bf00      	nop
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr

0800fef2 <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 800fef2:	b480      	push	{r7}
 800fef4:	af00      	add	r7, sp, #0

}
 800fef6:	bf00      	nop
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 800ff00:	b480      	push	{r7}
 800ff02:	af00      	add	r7, sp, #0

}
 800ff04:	bf00      	nop
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
	...

0800ff10 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff16:	2300      	movs	r3, #0
 800ff18:	607b      	str	r3, [r7, #4]
 800ff1a:	4b12      	ldr	r3, [pc, #72]	; (800ff64 <HAL_MspInit+0x54>)
 800ff1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff1e:	4a11      	ldr	r2, [pc, #68]	; (800ff64 <HAL_MspInit+0x54>)
 800ff20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff24:	6453      	str	r3, [r2, #68]	; 0x44
 800ff26:	4b0f      	ldr	r3, [pc, #60]	; (800ff64 <HAL_MspInit+0x54>)
 800ff28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff2e:	607b      	str	r3, [r7, #4]
 800ff30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ff32:	2300      	movs	r3, #0
 800ff34:	603b      	str	r3, [r7, #0]
 800ff36:	4b0b      	ldr	r3, [pc, #44]	; (800ff64 <HAL_MspInit+0x54>)
 800ff38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff3a:	4a0a      	ldr	r2, [pc, #40]	; (800ff64 <HAL_MspInit+0x54>)
 800ff3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff40:	6413      	str	r3, [r2, #64]	; 0x40
 800ff42:	4b08      	ldr	r3, [pc, #32]	; (800ff64 <HAL_MspInit+0x54>)
 800ff44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff4a:	603b      	str	r3, [r7, #0]
 800ff4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ff4e:	2200      	movs	r2, #0
 800ff50:	210f      	movs	r1, #15
 800ff52:	f06f 0001 	mvn.w	r0, #1
 800ff56:	f7f1 f8a1 	bl	800109c <HAL_NVIC_SetPriority>
}
 800ff5a:	bf00      	nop
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	40023800 	.word	0x40023800

0800ff68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b08e      	sub	sp, #56	; 0x38
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800ff70:	2300      	movs	r3, #0
 800ff72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800ff74:	2300      	movs	r3, #0
 800ff76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60fb      	str	r3, [r7, #12]
 800ff7c:	4b33      	ldr	r3, [pc, #204]	; (801004c <HAL_InitTick+0xe4>)
 800ff7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff80:	4a32      	ldr	r2, [pc, #200]	; (801004c <HAL_InitTick+0xe4>)
 800ff82:	f043 0310 	orr.w	r3, r3, #16
 800ff86:	6413      	str	r3, [r2, #64]	; 0x40
 800ff88:	4b30      	ldr	r3, [pc, #192]	; (801004c <HAL_InitTick+0xe4>)
 800ff8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff8c:	f003 0310 	and.w	r3, r3, #16
 800ff90:	60fb      	str	r3, [r7, #12]
 800ff92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ff94:	f107 0210 	add.w	r2, r7, #16
 800ff98:	f107 0314 	add.w	r3, r7, #20
 800ff9c:	4611      	mov	r1, r2
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7f1 fe10 	bl	8001bc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800ffa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d103      	bne.n	800ffb6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800ffae:	f7f1 fdf5 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 800ffb2:	6378      	str	r0, [r7, #52]	; 0x34
 800ffb4:	e004      	b.n	800ffc0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800ffb6:	f7f1 fdf1 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ffc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc2:	4a23      	ldr	r2, [pc, #140]	; (8010050 <HAL_InitTick+0xe8>)
 800ffc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ffc8:	0c9b      	lsrs	r3, r3, #18
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ffce:	4b21      	ldr	r3, [pc, #132]	; (8010054 <HAL_InitTick+0xec>)
 800ffd0:	4a21      	ldr	r2, [pc, #132]	; (8010058 <HAL_InitTick+0xf0>)
 800ffd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ffd4:	4b1f      	ldr	r3, [pc, #124]	; (8010054 <HAL_InitTick+0xec>)
 800ffd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ffda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ffdc:	4a1d      	ldr	r2, [pc, #116]	; (8010054 <HAL_InitTick+0xec>)
 800ffde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ffe2:	4b1c      	ldr	r3, [pc, #112]	; (8010054 <HAL_InitTick+0xec>)
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ffe8:	4b1a      	ldr	r3, [pc, #104]	; (8010054 <HAL_InitTick+0xec>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ffee:	4b19      	ldr	r3, [pc, #100]	; (8010054 <HAL_InitTick+0xec>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800fff4:	4817      	ldr	r0, [pc, #92]	; (8010054 <HAL_InitTick+0xec>)
 800fff6:	f7f2 ff47 	bl	8002e88 <HAL_TIM_Base_Init>
 800fffa:	4603      	mov	r3, r0
 800fffc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8010000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010004:	2b00      	cmp	r3, #0
 8010006:	d11b      	bne.n	8010040 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8010008:	4812      	ldr	r0, [pc, #72]	; (8010054 <HAL_InitTick+0xec>)
 801000a:	f7f2 ff97 	bl	8002f3c <HAL_TIM_Base_Start_IT>
 801000e:	4603      	mov	r3, r0
 8010010:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8010014:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010018:	2b00      	cmp	r3, #0
 801001a:	d111      	bne.n	8010040 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801001c:	2036      	movs	r0, #54	; 0x36
 801001e:	f7f1 f859 	bl	80010d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b0f      	cmp	r3, #15
 8010026:	d808      	bhi.n	801003a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8010028:	2200      	movs	r2, #0
 801002a:	6879      	ldr	r1, [r7, #4]
 801002c:	2036      	movs	r0, #54	; 0x36
 801002e:	f7f1 f835 	bl	800109c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8010032:	4a0a      	ldr	r2, [pc, #40]	; (801005c <HAL_InitTick+0xf4>)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6013      	str	r3, [r2, #0]
 8010038:	e002      	b.n	8010040 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 801003a:	2301      	movs	r3, #1
 801003c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8010040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8010044:	4618      	mov	r0, r3
 8010046:	3738      	adds	r7, #56	; 0x38
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	40023800 	.word	0x40023800
 8010050:	431bde83 	.word	0x431bde83
 8010054:	20007684 	.word	0x20007684
 8010058:	40001000 	.word	0x40001000
 801005c:	20000004 	.word	0x20000004

08010060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010060:	b480      	push	{r7}
 8010062:	af00      	add	r7, sp, #0
  while (1)
 8010064:	e7fe      	b.n	8010064 <NMI_Handler+0x4>

08010066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010066:	b480      	push	{r7}
 8010068:	af00      	add	r7, sp, #0
  while (1)
 801006a:	e7fe      	b.n	801006a <HardFault_Handler+0x4>

0801006c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801006c:	b480      	push	{r7}
 801006e:	af00      	add	r7, sp, #0
  while (1)
 8010070:	e7fe      	b.n	8010070 <MemManage_Handler+0x4>

08010072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010072:	b480      	push	{r7}
 8010074:	af00      	add	r7, sp, #0
  while (1)
 8010076:	e7fe      	b.n	8010076 <BusFault_Handler+0x4>

08010078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010078:	b480      	push	{r7}
 801007a:	af00      	add	r7, sp, #0
  while (1)
 801007c:	e7fe      	b.n	801007c <UsageFault_Handler+0x4>

0801007e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801007e:	b480      	push	{r7}
 8010080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010082:	bf00      	nop
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr

0801008c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010090:	4802      	ldr	r0, [pc, #8]	; (801009c <TIM6_DAC_IRQHandler+0x10>)
 8010092:	f7f2 ffc3 	bl	800301c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8010096:	bf00      	nop
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	20007684 	.word	0x20007684

080100a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4a04      	ldr	r2, [pc, #16]	; (80100c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d101      	bne.n	80100b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80100b2:	f7f0 fef7 	bl	8000ea4 <HAL_IncTick>
  }
}
 80100b6:	bf00      	nop
 80100b8:	3708      	adds	r7, #8
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	40001000 	.word	0x40001000

080100c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80100c4:	b480      	push	{r7}
 80100c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80100c8:	4b06      	ldr	r3, [pc, #24]	; (80100e4 <SystemInit+0x20>)
 80100ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100ce:	4a05      	ldr	r2, [pc, #20]	; (80100e4 <SystemInit+0x20>)
 80100d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80100d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80100d8:	bf00      	nop
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	e000ed00 	.word	0xe000ed00

080100e8 <__NVIC_GetPriorityGrouping>:
{
 80100e8:	b480      	push	{r7}
 80100ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80100ec:	4b04      	ldr	r3, [pc, #16]	; (8010100 <__NVIC_GetPriorityGrouping+0x18>)
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	0a1b      	lsrs	r3, r3, #8
 80100f2:	f003 0307 	and.w	r3, r3, #7
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr
 8010100:	e000ed00 	.word	0xe000ed00

08010104 <__NVIC_EnableIRQ>:
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	4603      	mov	r3, r0
 801010c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801010e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010112:	2b00      	cmp	r3, #0
 8010114:	db0b      	blt.n	801012e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010116:	79fb      	ldrb	r3, [r7, #7]
 8010118:	f003 021f 	and.w	r2, r3, #31
 801011c:	4907      	ldr	r1, [pc, #28]	; (801013c <__NVIC_EnableIRQ+0x38>)
 801011e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010122:	095b      	lsrs	r3, r3, #5
 8010124:	2001      	movs	r0, #1
 8010126:	fa00 f202 	lsl.w	r2, r0, r2
 801012a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801012e:	bf00      	nop
 8010130:	370c      	adds	r7, #12
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	e000e100 	.word	0xe000e100

08010140 <__NVIC_SetPriority>:
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	6039      	str	r1, [r7, #0]
 801014a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801014c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010150:	2b00      	cmp	r3, #0
 8010152:	db0a      	blt.n	801016a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	b2da      	uxtb	r2, r3
 8010158:	490c      	ldr	r1, [pc, #48]	; (801018c <__NVIC_SetPriority+0x4c>)
 801015a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801015e:	0112      	lsls	r2, r2, #4
 8010160:	b2d2      	uxtb	r2, r2
 8010162:	440b      	add	r3, r1
 8010164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010168:	e00a      	b.n	8010180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	b2da      	uxtb	r2, r3
 801016e:	4908      	ldr	r1, [pc, #32]	; (8010190 <__NVIC_SetPriority+0x50>)
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	f003 030f 	and.w	r3, r3, #15
 8010176:	3b04      	subs	r3, #4
 8010178:	0112      	lsls	r2, r2, #4
 801017a:	b2d2      	uxtb	r2, r2
 801017c:	440b      	add	r3, r1
 801017e:	761a      	strb	r2, [r3, #24]
}
 8010180:	bf00      	nop
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr
 801018c:	e000e100 	.word	0xe000e100
 8010190:	e000ed00 	.word	0xe000ed00

08010194 <NVIC_EncodePriority>:
{
 8010194:	b480      	push	{r7}
 8010196:	b089      	sub	sp, #36	; 0x24
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	60b9      	str	r1, [r7, #8]
 801019e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	f1c3 0307 	rsb	r3, r3, #7
 80101ae:	2b04      	cmp	r3, #4
 80101b0:	bf28      	it	cs
 80101b2:	2304      	movcs	r3, #4
 80101b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	3304      	adds	r3, #4
 80101ba:	2b06      	cmp	r3, #6
 80101bc:	d902      	bls.n	80101c4 <NVIC_EncodePriority+0x30>
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	3b03      	subs	r3, #3
 80101c2:	e000      	b.n	80101c6 <NVIC_EncodePriority+0x32>
 80101c4:	2300      	movs	r3, #0
 80101c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80101c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	fa02 f303 	lsl.w	r3, r2, r3
 80101d2:	43da      	mvns	r2, r3
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	401a      	ands	r2, r3
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80101dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	fa01 f303 	lsl.w	r3, r1, r3
 80101e6:	43d9      	mvns	r1, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80101ec:	4313      	orrs	r3, r2
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3724      	adds	r7, #36	; 0x24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr

080101fa <LL_USART_Enable>:
{
 80101fa:	b480      	push	{r7}
 80101fc:	b083      	sub	sp, #12
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	60da      	str	r2, [r3, #12]
}
 801020e:	bf00      	nop
 8010210:	370c      	adds	r7, #12
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr

0801021a <LL_USART_IsEnabled>:
{
 801021a:	b480      	push	{r7}
 801021c:	b083      	sub	sp, #12
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801022a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801022e:	bf0c      	ite	eq
 8010230:	2301      	moveq	r3, #1
 8010232:	2300      	movne	r3, #0
 8010234:	b2db      	uxtb	r3, r3
}
 8010236:	4618      	mov	r0, r3
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <LL_USART_ConfigAsyncMode>:
{
 8010242:	b480      	push	{r7}
 8010244:	b083      	sub	sp, #12
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	695b      	ldr	r3, [r3, #20]
 801025a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	615a      	str	r2, [r3, #20]
}
 8010262:	bf00      	nop
 8010264:	370c      	adds	r7, #12
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr

0801026e <LL_USART_IsActiveFlag_IDLE>:
{
 801026e:	b480      	push	{r7}
 8010270:	b083      	sub	sp, #12
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f003 0310 	and.w	r3, r3, #16
 801027e:	2b10      	cmp	r3, #16
 8010280:	bf0c      	ite	eq
 8010282:	2301      	moveq	r3, #1
 8010284:	2300      	movne	r3, #0
 8010286:	b2db      	uxtb	r3, r3
}
 8010288:	4618      	mov	r0, r3
 801028a:	370c      	adds	r7, #12
 801028c:	46bd      	mov	sp, r7
 801028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010292:	4770      	bx	lr

08010294 <LL_USART_IsActiveFlag_TXE>:
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102a4:	2b80      	cmp	r3, #128	; 0x80
 80102a6:	bf0c      	ite	eq
 80102a8:	2301      	moveq	r3, #1
 80102aa:	2300      	movne	r3, #0
 80102ac:	b2db      	uxtb	r3, r3
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	370c      	adds	r7, #12
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <LL_USART_ClearFlag_IDLE>:
{
 80102ba:	b480      	push	{r7}
 80102bc:	b085      	sub	sp, #20
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80102c8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80102d0:	68fb      	ldr	r3, [r7, #12]
}
 80102d2:	bf00      	nop
 80102d4:	3714      	adds	r7, #20
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80102de:	b480      	push	{r7}
 80102e0:	b083      	sub	sp, #12
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	460b      	mov	r3, r1
 80102e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80102ea:	78fa      	ldrb	r2, [r7, #3]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	605a      	str	r2, [r3, #4]
}
 80102f0:	bf00      	nop
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <LL_DMA_SetDataTransferDirection>:
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8010308:	4a0d      	ldr	r2, [pc, #52]	; (8010340 <LL_DMA_SetDataTransferDirection+0x44>)
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	4413      	add	r3, r2
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	461a      	mov	r2, r3
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	4413      	add	r3, r2
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801031c:	4908      	ldr	r1, [pc, #32]	; (8010340 <LL_DMA_SetDataTransferDirection+0x44>)
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	440b      	add	r3, r1
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	4619      	mov	r1, r3
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	440b      	add	r3, r1
 801032a:	4619      	mov	r1, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	4313      	orrs	r3, r2
 8010330:	600b      	str	r3, [r1, #0]
}
 8010332:	bf00      	nop
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop
 8010340:	08011cb0 	.word	0x08011cb0

08010344 <LL_DMA_SetMode>:
{
 8010344:	b480      	push	{r7}
 8010346:	b085      	sub	sp, #20
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8010350:	4a0d      	ldr	r2, [pc, #52]	; (8010388 <LL_DMA_SetMode+0x44>)
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	4413      	add	r3, r2
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	461a      	mov	r2, r3
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	4413      	add	r3, r2
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8010364:	4908      	ldr	r1, [pc, #32]	; (8010388 <LL_DMA_SetMode+0x44>)
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	440b      	add	r3, r1
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	4619      	mov	r1, r3
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	440b      	add	r3, r1
 8010372:	4619      	mov	r1, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	4313      	orrs	r3, r2
 8010378:	600b      	str	r3, [r1, #0]
}
 801037a:	bf00      	nop
 801037c:	3714      	adds	r7, #20
 801037e:	46bd      	mov	sp, r7
 8010380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop
 8010388:	08011cb0 	.word	0x08011cb0

0801038c <LL_DMA_SetPeriphIncMode>:
{
 801038c:	b480      	push	{r7}
 801038e:	b085      	sub	sp, #20
 8010390:	af00      	add	r7, sp, #0
 8010392:	60f8      	str	r0, [r7, #12]
 8010394:	60b9      	str	r1, [r7, #8]
 8010396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8010398:	4a0d      	ldr	r2, [pc, #52]	; (80103d0 <LL_DMA_SetPeriphIncMode+0x44>)
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	4413      	add	r3, r2
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	461a      	mov	r2, r3
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	4413      	add	r3, r2
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80103ac:	4908      	ldr	r1, [pc, #32]	; (80103d0 <LL_DMA_SetPeriphIncMode+0x44>)
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	440b      	add	r3, r1
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	4619      	mov	r1, r3
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	440b      	add	r3, r1
 80103ba:	4619      	mov	r1, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4313      	orrs	r3, r2
 80103c0:	600b      	str	r3, [r1, #0]
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	08011cb0 	.word	0x08011cb0

080103d4 <LL_DMA_SetMemoryIncMode>:
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80103e0:	4a0d      	ldr	r2, [pc, #52]	; (8010418 <LL_DMA_SetMemoryIncMode+0x44>)
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	4413      	add	r3, r2
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	461a      	mov	r2, r3
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	4413      	add	r3, r2
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80103f4:	4908      	ldr	r1, [pc, #32]	; (8010418 <LL_DMA_SetMemoryIncMode+0x44>)
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	440b      	add	r3, r1
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	4619      	mov	r1, r3
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	440b      	add	r3, r1
 8010402:	4619      	mov	r1, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4313      	orrs	r3, r2
 8010408:	600b      	str	r3, [r1, #0]
}
 801040a:	bf00      	nop
 801040c:	3714      	adds	r7, #20
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr
 8010416:	bf00      	nop
 8010418:	08011cb0 	.word	0x08011cb0

0801041c <LL_DMA_SetPeriphSize>:
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8010428:	4a0d      	ldr	r2, [pc, #52]	; (8010460 <LL_DMA_SetPeriphSize+0x44>)
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	4413      	add	r3, r2
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	461a      	mov	r2, r3
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	4413      	add	r3, r2
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801043c:	4908      	ldr	r1, [pc, #32]	; (8010460 <LL_DMA_SetPeriphSize+0x44>)
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	440b      	add	r3, r1
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	4619      	mov	r1, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	440b      	add	r3, r1
 801044a:	4619      	mov	r1, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4313      	orrs	r3, r2
 8010450:	600b      	str	r3, [r1, #0]
}
 8010452:	bf00      	nop
 8010454:	3714      	adds	r7, #20
 8010456:	46bd      	mov	sp, r7
 8010458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045c:	4770      	bx	lr
 801045e:	bf00      	nop
 8010460:	08011cb0 	.word	0x08011cb0

08010464 <LL_DMA_SetMemorySize>:
{
 8010464:	b480      	push	{r7}
 8010466:	b085      	sub	sp, #20
 8010468:	af00      	add	r7, sp, #0
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	60b9      	str	r1, [r7, #8]
 801046e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8010470:	4a0d      	ldr	r2, [pc, #52]	; (80104a8 <LL_DMA_SetMemorySize+0x44>)
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	4413      	add	r3, r2
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	461a      	mov	r2, r3
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	4413      	add	r3, r2
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8010484:	4908      	ldr	r1, [pc, #32]	; (80104a8 <LL_DMA_SetMemorySize+0x44>)
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	440b      	add	r3, r1
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	4619      	mov	r1, r3
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	440b      	add	r3, r1
 8010492:	4619      	mov	r1, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	4313      	orrs	r3, r2
 8010498:	600b      	str	r3, [r1, #0]
}
 801049a:	bf00      	nop
 801049c:	3714      	adds	r7, #20
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr
 80104a6:	bf00      	nop
 80104a8:	08011cb0 	.word	0x08011cb0

080104ac <LL_DMA_SetStreamPriorityLevel>:
{
 80104ac:	b480      	push	{r7}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80104b8:	4a0d      	ldr	r2, [pc, #52]	; (80104f0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	4413      	add	r3, r2
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	461a      	mov	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	4413      	add	r3, r2
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80104cc:	4908      	ldr	r1, [pc, #32]	; (80104f0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	440b      	add	r3, r1
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	4619      	mov	r1, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	440b      	add	r3, r1
 80104da:	4619      	mov	r1, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	4313      	orrs	r3, r2
 80104e0:	600b      	str	r3, [r1, #0]
}
 80104e2:	bf00      	nop
 80104e4:	3714      	adds	r7, #20
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop
 80104f0:	08011cb0 	.word	0x08011cb0

080104f4 <LL_DMA_GetDataLength>:
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 80104fe:	4a07      	ldr	r2, [pc, #28]	; (801051c <LL_DMA_GetDataLength+0x28>)
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	4413      	add	r3, r2
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	461a      	mov	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	4413      	add	r3, r2
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	b29b      	uxth	r3, r3
}
 8010510:	4618      	mov	r0, r3
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr
 801051c:	08011cb0 	.word	0x08011cb0

08010520 <LL_DMA_SetChannelSelection>:
{
 8010520:	b480      	push	{r7}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 801052c:	4a0d      	ldr	r2, [pc, #52]	; (8010564 <LL_DMA_SetChannelSelection+0x44>)
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	4413      	add	r3, r2
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	461a      	mov	r2, r3
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	4413      	add	r3, r2
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8010540:	4908      	ldr	r1, [pc, #32]	; (8010564 <LL_DMA_SetChannelSelection+0x44>)
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	440b      	add	r3, r1
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	4619      	mov	r1, r3
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	440b      	add	r3, r1
 801054e:	4619      	mov	r1, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4313      	orrs	r3, r2
 8010554:	600b      	str	r3, [r1, #0]
}
 8010556:	bf00      	nop
 8010558:	3714      	adds	r7, #20
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	08011cb0 	.word	0x08011cb0

08010568 <LL_DMA_DisableFifoMode>:
{
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8010572:	4a0c      	ldr	r2, [pc, #48]	; (80105a4 <LL_DMA_DisableFifoMode+0x3c>)
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	4413      	add	r3, r2
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4413      	add	r3, r2
 8010580:	695b      	ldr	r3, [r3, #20]
 8010582:	4908      	ldr	r1, [pc, #32]	; (80105a4 <LL_DMA_DisableFifoMode+0x3c>)
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	440a      	add	r2, r1
 8010588:	7812      	ldrb	r2, [r2, #0]
 801058a:	4611      	mov	r1, r2
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	440a      	add	r2, r1
 8010590:	f023 0304 	bic.w	r3, r3, #4
 8010594:	6153      	str	r3, [r2, #20]
}
 8010596:	bf00      	nop
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	08011cb0 	.word	0x08011cb0

080105a8 <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b08c      	sub	sp, #48	; 0x30
 80105ac:	af02      	add	r7, sp, #8
 80105ae:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 80105b0:	2307      	movs	r3, #7
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	2303      	movs	r3, #3
 80105b6:	2200      	movs	r2, #0
 80105b8:	2103      	movs	r1, #3
 80105ba:	4853      	ldr	r0, [pc, #332]	; (8010708 <hal_uart1_init+0x160>)
 80105bc:	f7fd fdf8 	bl	800e1b0 <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 80105c0:	2307      	movs	r3, #7
 80105c2:	9300      	str	r3, [sp, #0]
 80105c4:	2303      	movs	r3, #3
 80105c6:	2200      	movs	r2, #0
 80105c8:	2103      	movs	r1, #3
 80105ca:	4850      	ldr	r0, [pc, #320]	; (801070c <hal_uart1_init+0x164>)
 80105cc:	f7fd fdf0 	bl	800e1b0 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80105d0:	2200      	movs	r2, #0
 80105d2:	2105      	movs	r1, #5
 80105d4:	203a      	movs	r0, #58	; 0x3a
 80105d6:	f7f0 fd61 	bl	800109c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80105da:	203a      	movs	r0, #58	; 0x3a
 80105dc:	f7f0 fd7a 	bl	80010d4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80105e0:	2200      	movs	r2, #0
 80105e2:	2105      	movs	r1, #5
 80105e4:	2046      	movs	r0, #70	; 0x46
 80105e6:	f7f0 fd59 	bl	800109c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80105ea:	2046      	movs	r0, #70	; 0x46
 80105ec:	f7f0 fd72 	bl	80010d4 <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 80105f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80105f4:	2102      	movs	r1, #2
 80105f6:	4846      	ldr	r0, [pc, #280]	; (8010710 <hal_uart1_init+0x168>)
 80105f8:	f7ff ff92 	bl	8010520 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80105fc:	2200      	movs	r2, #0
 80105fe:	2102      	movs	r1, #2
 8010600:	4843      	ldr	r0, [pc, #268]	; (8010710 <hal_uart1_init+0x168>)
 8010602:	f7ff fe7b 	bl	80102fc <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8010606:	2200      	movs	r2, #0
 8010608:	2102      	movs	r1, #2
 801060a:	4841      	ldr	r0, [pc, #260]	; (8010710 <hal_uart1_init+0x168>)
 801060c:	f7ff ff4e 	bl	80104ac <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 8010610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010614:	2102      	movs	r1, #2
 8010616:	483e      	ldr	r0, [pc, #248]	; (8010710 <hal_uart1_init+0x168>)
 8010618:	f7ff fe94 	bl	8010344 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 801061c:	2200      	movs	r2, #0
 801061e:	2102      	movs	r1, #2
 8010620:	483b      	ldr	r0, [pc, #236]	; (8010710 <hal_uart1_init+0x168>)
 8010622:	f7ff feb3 	bl	801038c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8010626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801062a:	2102      	movs	r1, #2
 801062c:	4838      	ldr	r0, [pc, #224]	; (8010710 <hal_uart1_init+0x168>)
 801062e:	f7ff fed1 	bl	80103d4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8010632:	2200      	movs	r2, #0
 8010634:	2102      	movs	r1, #2
 8010636:	4836      	ldr	r0, [pc, #216]	; (8010710 <hal_uart1_init+0x168>)
 8010638:	f7ff fef0 	bl	801041c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 801063c:	2200      	movs	r2, #0
 801063e:	2102      	movs	r1, #2
 8010640:	4833      	ldr	r0, [pc, #204]	; (8010710 <hal_uart1_init+0x168>)
 8010642:	f7ff ff0f 	bl	8010464 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 8010646:	2102      	movs	r1, #2
 8010648:	4831      	ldr	r0, [pc, #196]	; (8010710 <hal_uart1_init+0x168>)
 801064a:	f7ff ff8d 	bl	8010568 <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 801064e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010652:	2107      	movs	r1, #7
 8010654:	482e      	ldr	r0, [pc, #184]	; (8010710 <hal_uart1_init+0x168>)
 8010656:	f7ff ff63 	bl	8010520 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 801065a:	2240      	movs	r2, #64	; 0x40
 801065c:	2107      	movs	r1, #7
 801065e:	482c      	ldr	r0, [pc, #176]	; (8010710 <hal_uart1_init+0x168>)
 8010660:	f7ff fe4c 	bl	80102fc <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8010664:	2200      	movs	r2, #0
 8010666:	2107      	movs	r1, #7
 8010668:	4829      	ldr	r0, [pc, #164]	; (8010710 <hal_uart1_init+0x168>)
 801066a:	f7ff ff1f 	bl	80104ac <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 801066e:	2200      	movs	r2, #0
 8010670:	2107      	movs	r1, #7
 8010672:	4827      	ldr	r0, [pc, #156]	; (8010710 <hal_uart1_init+0x168>)
 8010674:	f7ff fe66 	bl	8010344 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8010678:	2200      	movs	r2, #0
 801067a:	2107      	movs	r1, #7
 801067c:	4824      	ldr	r0, [pc, #144]	; (8010710 <hal_uart1_init+0x168>)
 801067e:	f7ff fe85 	bl	801038c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8010682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010686:	2107      	movs	r1, #7
 8010688:	4821      	ldr	r0, [pc, #132]	; (8010710 <hal_uart1_init+0x168>)
 801068a:	f7ff fea3 	bl	80103d4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 801068e:	2200      	movs	r2, #0
 8010690:	2107      	movs	r1, #7
 8010692:	481f      	ldr	r0, [pc, #124]	; (8010710 <hal_uart1_init+0x168>)
 8010694:	f7ff fec2 	bl	801041c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8010698:	2200      	movs	r2, #0
 801069a:	2107      	movs	r1, #7
 801069c:	481c      	ldr	r0, [pc, #112]	; (8010710 <hal_uart1_init+0x168>)
 801069e:	f7ff fee1 	bl	8010464 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 80106a2:	2107      	movs	r1, #7
 80106a4:	481a      	ldr	r0, [pc, #104]	; (8010710 <hal_uart1_init+0x168>)
 80106a6:	f7ff ff5f 	bl	8010568 <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80106ae:	2300      	movs	r3, #0
 80106b0:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80106b2:	2300      	movs	r3, #0
 80106b4:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80106b6:	2300      	movs	r3, #0
 80106b8:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80106ba:	230c      	movs	r3, #12
 80106bc:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80106be:	2300      	movs	r3, #0
 80106c0:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80106c2:	2300      	movs	r3, #0
 80106c4:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 80106c6:	f107 030c 	add.w	r3, r7, #12
 80106ca:	4619      	mov	r1, r3
 80106cc:	4811      	ldr	r0, [pc, #68]	; (8010714 <hal_uart1_init+0x16c>)
 80106ce:	f7f4 fb6b 	bl	8004da8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 80106d2:	4810      	ldr	r0, [pc, #64]	; (8010714 <hal_uart1_init+0x16c>)
 80106d4:	f7ff fdb5 	bl	8010242 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 80106d8:	480e      	ldr	r0, [pc, #56]	; (8010714 <hal_uart1_init+0x16c>)
 80106da:	f7ff fd8e 	bl	80101fa <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80106de:	f7ff fd03 	bl	80100e8 <__NVIC_GetPriorityGrouping>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2200      	movs	r2, #0
 80106e6:	2105      	movs	r1, #5
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ff fd53 	bl	8010194 <NVIC_EncodePriority>
 80106ee:	4603      	mov	r3, r0
 80106f0:	4619      	mov	r1, r3
 80106f2:	2025      	movs	r0, #37	; 0x25
 80106f4:	f7ff fd24 	bl	8010140 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80106f8:	2025      	movs	r0, #37	; 0x25
 80106fa:	f7ff fd03 	bl	8010104 <__NVIC_EnableIRQ>
}
 80106fe:	bf00      	nop
 8010700:	3728      	adds	r7, #40	; 0x28
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	08011c00 	.word	0x08011c00
 801070c:	08011c08 	.word	0x08011c08
 8010710:	40026400 	.word	0x40026400
 8010714:	40011000 	.word	0x40011000

08010718 <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	6039      	str	r1, [r7, #0]
 8010722:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 8010724:	79fb      	ldrb	r3, [r7, #7]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d102      	bne.n	8010730 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 801072a:	6838      	ldr	r0, [r7, #0]
 801072c:	f7ff ff3c 	bl	80105a8 <hal_uart1_init>
}
 8010730:	bf00      	nop
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	4603      	mov	r3, r0
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 8010746:	7bfb      	ldrb	r3, [r7, #15]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d11e      	bne.n	801078a <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 801074c:	4810      	ldr	r0, [pc, #64]	; (8010790 <hal_uart_transfer+0x58>)
 801074e:	f7ff fd64 	bl	801021a <LL_USART_IsEnabled>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d017      	beq.n	8010788 <hal_uart_transfer+0x50>

        while(size > 0) {
 8010758:	e012      	b.n	8010780 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 801075a:	bf00      	nop
 801075c:	480c      	ldr	r0, [pc, #48]	; (8010790 <hal_uart_transfer+0x58>)
 801075e:	f7ff fd99 	bl	8010294 <LL_USART_IsActiveFlag_TXE>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d0f9      	beq.n	801075c <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	4619      	mov	r1, r3
 801076e:	4808      	ldr	r0, [pc, #32]	; (8010790 <hal_uart_transfer+0x58>)
 8010770:	f7ff fdb5 	bl	80102de <LL_USART_TransmitData8>
            buf++;
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	3301      	adds	r3, #1
 8010778:	60bb      	str	r3, [r7, #8]
            size--;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	3b01      	subs	r3, #1
 801077e:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d1e9      	bne.n	801075a <hal_uart_transfer+0x22>
 8010786:	e000      	b.n	801078a <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8010788:	bf00      	nop
        }
    }
}
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	40011000 	.word	0x40011000

08010794 <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 8010794:	b590      	push	{r4, r7, lr}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 801079a:	2300      	movs	r3, #0
 801079c:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 801079e:	4813      	ldr	r0, [pc, #76]	; (80107ec <USART1_IRQHandler+0x58>)
 80107a0:	f7ff fd65 	bl	801026e <LL_USART_IsActiveFlag_IDLE>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d01c      	beq.n	80107e4 <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 80107aa:	4810      	ldr	r0, [pc, #64]	; (80107ec <USART1_IRQHandler+0x58>)
 80107ac:	f7ff fd85 	bl	80102ba <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 80107b0:	4b0f      	ldr	r3, [pc, #60]	; (80107f0 <USART1_IRQHandler+0x5c>)
 80107b2:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80107b6:	2102      	movs	r1, #2
 80107b8:	480e      	ldr	r0, [pc, #56]	; (80107f4 <USART1_IRQHandler+0x60>)
 80107ba:	f7ff fe9b 	bl	80104f4 <LL_DMA_GetDataLength>
 80107be:	4603      	mov	r3, r0
 80107c0:	4423      	add	r3, r4
 80107c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	bfb8      	it	lt
 80107ca:	425b      	neglt	r3, r3
 80107cc:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 80107ce:	4b08      	ldr	r3, [pc, #32]	; (80107f0 <USART1_IRQHandler+0x5c>)
 80107d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4413      	add	r3, r2
 80107d8:	2bff      	cmp	r3, #255	; 0xff
 80107da:	d903      	bls.n	80107e4 <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 80107dc:	4b04      	ldr	r3, [pc, #16]	; (80107f0 <USART1_IRQHandler+0x5c>)
 80107de:	2201      	movs	r2, #1
 80107e0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd90      	pop	{r4, r7, pc}
 80107ec:	40011000 	.word	0x40011000
 80107f0:	20006688 	.word	0x20006688
 80107f4:	40026400 	.word	0x40026400

080107f8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80107f8:	b480      	push	{r7}
 80107fa:	af00      	add	r7, sp, #0

}
 80107fc:	bf00      	nop
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr

08010806 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8010806:	b480      	push	{r7}
 8010808:	af00      	add	r7, sp, #0

}
 801080a:	bf00      	nop
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <volume_control_timercb>:
static TimerHandle_t vs1053_volume_timer;
static VolumeLevel prev_volume = VOLUME_OFF;

static uint8_t convert_volume_level(VolumeLevel vol);

static void volume_control_timercb( TimerHandle_t xTimer ) {
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
	uint32_t potentiometer = 0;
 801081c:	2300      	movs	r3, #0
 801081e:	60bb      	str	r3, [r7, #8]
	uint8_t volume = 0xFF;
 8010820:	23ff      	movs	r3, #255	; 0xff
 8010822:	73fb      	strb	r3, [r7, #15]

	hal_adc_getdata(1, &potentiometer);
 8010824:	f107 0308 	add.w	r3, r7, #8
 8010828:	4619      	mov	r1, r3
 801082a:	2001      	movs	r0, #1
 801082c:	f7fc fe12 	bl	800d454 <hal_adc_getdata>
	potentiometer >>= 9;
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	0a5b      	lsrs	r3, r3, #9
 8010834:	60bb      	str	r3, [r7, #8]

	if(prev_volume != potentiometer) {
 8010836:	4b10      	ldr	r3, [pc, #64]	; (8010878 <volume_control_timercb+0x64>)
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	429a      	cmp	r2, r3
 8010840:	d00c      	beq.n	801085c <volume_control_timercb+0x48>
		volume = convert_volume_level(potentiometer);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	b2db      	uxtb	r3, r3
 8010846:	4618      	mov	r0, r3
 8010848:	f000 f85c 	bl	8010904 <convert_volume_level>
 801084c:	4603      	mov	r3, r0
 801084e:	73fb      	strb	r3, [r7, #15]
		VS1053_SetVolume(volume, volume);
 8010850:	7bfa      	ldrb	r2, [r7, #15]
 8010852:	7bfb      	ldrb	r3, [r7, #15]
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f7f0 f910 	bl	8000a7c <VS1053_SetVolume>
	}

	prev_volume = potentiometer;
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	b2da      	uxtb	r2, r3
 8010860:	4b05      	ldr	r3, [pc, #20]	; (8010878 <volume_control_timercb+0x64>)
 8010862:	701a      	strb	r2, [r3, #0]

	hal_cli_printf("%d",potentiometer);
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	4619      	mov	r1, r3
 8010868:	4804      	ldr	r0, [pc, #16]	; (801087c <volume_control_timercb+0x68>)
 801086a:	f7fc ff7f 	bl	800d76c <hal_cli_printf>
}
 801086e:	bf00      	nop
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	200076d0 	.word	0x200076d0
 801087c:	080116f4 	.word	0x080116f4

08010880 <mp3Thread>:

void mp3Thread(void* param) {
 8010880:	b590      	push	{r4, r7, lr}
 8010882:	b085      	sub	sp, #20
 8010884:	af02      	add	r7, sp, #8
 8010886:	6078      	str	r0, [r7, #4]
	MP3_Init();
 8010888:	f7ef fed4 	bl	8000634 <MP3_Init>
	MP3_Play("/mp3/Mercy.mp3");
 801088c:	4817      	ldr	r0, [pc, #92]	; (80108ec <mp3Thread+0x6c>)
 801088e:	f7ef feef 	bl	8000670 <MP3_Play>

	vs1053_volume_timer = xTimerCreate(
 8010892:	4b17      	ldr	r3, [pc, #92]	; (80108f0 <mp3Thread+0x70>)
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	2300      	movs	r3, #0
 8010898:	2201      	movs	r2, #1
 801089a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801089e:	4815      	ldr	r0, [pc, #84]	; (80108f4 <mp3Thread+0x74>)
 80108a0:	f7fa fbc4 	bl	800b02c <xTimerCreate>
 80108a4:	4603      	mov	r3, r0
 80108a6:	4a14      	ldr	r2, [pc, #80]	; (80108f8 <mp3Thread+0x78>)
 80108a8:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(VS1053_VOLUME_PERIOD),
							pdTRUE,
							(void*)0,
							volume_control_timercb);

	if(!vs1053_volume_timer) {
 80108aa:	4b13      	ldr	r3, [pc, #76]	; (80108f8 <mp3Thread+0x78>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d103      	bne.n	80108ba <mp3Thread+0x3a>
		hal_cli_printf("mp3 volume timer create failed");
 80108b2:	4812      	ldr	r0, [pc, #72]	; (80108fc <mp3Thread+0x7c>)
 80108b4:	f7fc ff5a 	bl	800d76c <hal_cli_printf>
		return;
 80108b8:	e015      	b.n	80108e6 <mp3Thread+0x66>
	} else {
		if(xTimerStart(vs1053_volume_timer, 0) != pdPASS) {
 80108ba:	4b0f      	ldr	r3, [pc, #60]	; (80108f8 <mp3Thread+0x78>)
 80108bc:	681c      	ldr	r4, [r3, #0]
 80108be:	f7f9 fdab 	bl	800a418 <xTaskGetTickCount>
 80108c2:	4602      	mov	r2, r0
 80108c4:	2300      	movs	r3, #0
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	2300      	movs	r3, #0
 80108ca:	2101      	movs	r1, #1
 80108cc:	4620      	mov	r0, r4
 80108ce:	f7fa fc09 	bl	800b0e4 <xTimerGenericCommand>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d003      	beq.n	80108e0 <mp3Thread+0x60>
			hal_cli_printf("mp3 volume timer start failed");
 80108d8:	4809      	ldr	r0, [pc, #36]	; (8010900 <mp3Thread+0x80>)
 80108da:	f7fc ff47 	bl	800d76c <hal_cli_printf>
			return;
 80108de:	e002      	b.n	80108e6 <mp3Thread+0x66>
		}
	}

	while(1) {
		MP3_Feeder();
 80108e0:	f7ef ff4e 	bl	8000780 <MP3_Feeder>
 80108e4:	e7fc      	b.n	80108e0 <mp3Thread+0x60>
	}
}
 80108e6:	370c      	adds	r7, #12
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd90      	pop	{r4, r7, pc}
 80108ec:	080116f8 	.word	0x080116f8
 80108f0:	08010815 	.word	0x08010815
 80108f4:	08011708 	.word	0x08011708
 80108f8:	200076cc 	.word	0x200076cc
 80108fc:	08011714 	.word	0x08011714
 8010900:	08011734 	.word	0x08011734

08010904 <convert_volume_level>:


static uint8_t convert_volume_level(VolumeLevel vol) {
 8010904:	b480      	push	{r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	4603      	mov	r3, r0
 801090c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch(vol) {
 801090e:	79fb      	ldrb	r3, [r7, #7]
 8010910:	2b07      	cmp	r3, #7
 8010912:	d82b      	bhi.n	801096c <convert_volume_level+0x68>
 8010914:	a201      	add	r2, pc, #4	; (adr r2, 801091c <convert_volume_level+0x18>)
 8010916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801091a:	bf00      	nop
 801091c:	08010967 	.word	0x08010967
 8010920:	0801093d 	.word	0x0801093d
 8010924:	08010943 	.word	0x08010943
 8010928:	08010949 	.word	0x08010949
 801092c:	0801094f 	.word	0x0801094f
 8010930:	08010955 	.word	0x08010955
 8010934:	0801095b 	.word	0x0801095b
 8010938:	08010961 	.word	0x08010961
	case VOLUME_LEVEL_1:
		value = 0x0C;
 801093c:	230c      	movs	r3, #12
 801093e:	73fb      	strb	r3, [r7, #15]
		break;
 8010940:	e017      	b.n	8010972 <convert_volume_level+0x6e>
	case VOLUME_LEVEL_2:
		value = 0x0A;
 8010942:	230a      	movs	r3, #10
 8010944:	73fb      	strb	r3, [r7, #15]
		break;
 8010946:	e014      	b.n	8010972 <convert_volume_level+0x6e>
	case VOLUME_LEVEL_3:
		value = 0x08;
 8010948:	2308      	movs	r3, #8
 801094a:	73fb      	strb	r3, [r7, #15]
		break;
 801094c:	e011      	b.n	8010972 <convert_volume_level+0x6e>
	case VOLUME_LEVEL_4:
		value = 0x06;
 801094e:	2306      	movs	r3, #6
 8010950:	73fb      	strb	r3, [r7, #15]
		break;
 8010952:	e00e      	b.n	8010972 <convert_volume_level+0x6e>
	case VOLUME_LEVEL_5:
		value = 0x04;
 8010954:	2304      	movs	r3, #4
 8010956:	73fb      	strb	r3, [r7, #15]
		break;
 8010958:	e00b      	b.n	8010972 <convert_volume_level+0x6e>
	case VOLUME_LEVEL_6:
		value = 0x02;
 801095a:	2302      	movs	r3, #2
 801095c:	73fb      	strb	r3, [r7, #15]
		break;
 801095e:	e008      	b.n	8010972 <convert_volume_level+0x6e>
	case VOLUME_LEVEL_7:
		value = 0x00;
 8010960:	2300      	movs	r3, #0
 8010962:	73fb      	strb	r3, [r7, #15]
		break;
 8010964:	e005      	b.n	8010972 <convert_volume_level+0x6e>
	case VOLUME_OFF:
		value = 0xFF;
 8010966:	23ff      	movs	r3, #255	; 0xff
 8010968:	73fb      	strb	r3, [r7, #15]
		break;
 801096a:	e002      	b.n	8010972 <convert_volume_level+0x6e>
	default:
		value = 0xFF;
 801096c:	23ff      	movs	r3, #255	; 0xff
 801096e:	73fb      	strb	r3, [r7, #15]
		break;
 8010970:	bf00      	nop

	}

	return value;
 8010972:	7bfb      	ldrb	r3, [r7, #15]
}
 8010974:	4618      	mov	r0, r3
 8010976:	3714      	adds	r7, #20
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8010984:	b672      	cpsid	i
}
 8010986:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 8010988:	4801      	ldr	r0, [pc, #4]	; (8010990 <ErrorHandler+0x10>)
 801098a:	f7fc feef 	bl	800d76c <hal_cli_printf>
  while (1)
 801098e:	e7fe      	b.n	801098e <ErrorHandler+0xe>
 8010990:	08011754 	.word	0x08011754

08010994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8010994:	480d      	ldr	r0, [pc, #52]	; (80109cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8010996:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8010998:	f7ff fb94 	bl	80100c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801099c:	480c      	ldr	r0, [pc, #48]	; (80109d0 <LoopForever+0x6>)
  ldr r1, =_edata
 801099e:	490d      	ldr	r1, [pc, #52]	; (80109d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80109a0:	4a0d      	ldr	r2, [pc, #52]	; (80109d8 <LoopForever+0xe>)
  movs r3, #0
 80109a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80109a4:	e002      	b.n	80109ac <LoopCopyDataInit>

080109a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80109a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80109a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80109aa:	3304      	adds	r3, #4

080109ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80109ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80109ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80109b0:	d3f9      	bcc.n	80109a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80109b2:	4a0a      	ldr	r2, [pc, #40]	; (80109dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80109b4:	4c0a      	ldr	r4, [pc, #40]	; (80109e0 <LoopForever+0x16>)
  movs r3, #0
 80109b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80109b8:	e001      	b.n	80109be <LoopFillZerobss>

080109ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80109ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80109bc:	3204      	adds	r2, #4

080109be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80109be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80109c0:	d3fb      	bcc.n	80109ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80109c2:	f000 f811 	bl	80109e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80109c6:	f7fe fa9b 	bl	800ef00 <main>

080109ca <LoopForever>:

LoopForever:
    b LoopForever
 80109ca:	e7fe      	b.n	80109ca <LoopForever>
  ldr   r0, =_estack
 80109cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80109d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80109d4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80109d8:	08011d5c 	.word	0x08011d5c
  ldr r2, =_sbss
 80109dc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80109e0:	200076e4 	.word	0x200076e4

080109e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80109e4:	e7fe      	b.n	80109e4 <ADC_IRQHandler>
	...

080109e8 <__libc_init_array>:
 80109e8:	b570      	push	{r4, r5, r6, lr}
 80109ea:	4d0d      	ldr	r5, [pc, #52]	; (8010a20 <__libc_init_array+0x38>)
 80109ec:	4c0d      	ldr	r4, [pc, #52]	; (8010a24 <__libc_init_array+0x3c>)
 80109ee:	1b64      	subs	r4, r4, r5
 80109f0:	10a4      	asrs	r4, r4, #2
 80109f2:	2600      	movs	r6, #0
 80109f4:	42a6      	cmp	r6, r4
 80109f6:	d109      	bne.n	8010a0c <__libc_init_array+0x24>
 80109f8:	4d0b      	ldr	r5, [pc, #44]	; (8010a28 <__libc_init_array+0x40>)
 80109fa:	4c0c      	ldr	r4, [pc, #48]	; (8010a2c <__libc_init_array+0x44>)
 80109fc:	f000 fccc 	bl	8011398 <_init>
 8010a00:	1b64      	subs	r4, r4, r5
 8010a02:	10a4      	asrs	r4, r4, #2
 8010a04:	2600      	movs	r6, #0
 8010a06:	42a6      	cmp	r6, r4
 8010a08:	d105      	bne.n	8010a16 <__libc_init_array+0x2e>
 8010a0a:	bd70      	pop	{r4, r5, r6, pc}
 8010a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a10:	4798      	blx	r3
 8010a12:	3601      	adds	r6, #1
 8010a14:	e7ee      	b.n	80109f4 <__libc_init_array+0xc>
 8010a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a1a:	4798      	blx	r3
 8010a1c:	3601      	adds	r6, #1
 8010a1e:	e7f2      	b.n	8010a06 <__libc_init_array+0x1e>
 8010a20:	08011d54 	.word	0x08011d54
 8010a24:	08011d54 	.word	0x08011d54
 8010a28:	08011d54 	.word	0x08011d54
 8010a2c:	08011d58 	.word	0x08011d58

08010a30 <memcmp>:
 8010a30:	b510      	push	{r4, lr}
 8010a32:	3901      	subs	r1, #1
 8010a34:	4402      	add	r2, r0
 8010a36:	4290      	cmp	r0, r2
 8010a38:	d101      	bne.n	8010a3e <memcmp+0xe>
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	e005      	b.n	8010a4a <memcmp+0x1a>
 8010a3e:	7803      	ldrb	r3, [r0, #0]
 8010a40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010a44:	42a3      	cmp	r3, r4
 8010a46:	d001      	beq.n	8010a4c <memcmp+0x1c>
 8010a48:	1b18      	subs	r0, r3, r4
 8010a4a:	bd10      	pop	{r4, pc}
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	e7f2      	b.n	8010a36 <memcmp+0x6>

08010a50 <memcpy>:
 8010a50:	440a      	add	r2, r1
 8010a52:	4291      	cmp	r1, r2
 8010a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010a58:	d100      	bne.n	8010a5c <memcpy+0xc>
 8010a5a:	4770      	bx	lr
 8010a5c:	b510      	push	{r4, lr}
 8010a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a66:	4291      	cmp	r1, r2
 8010a68:	d1f9      	bne.n	8010a5e <memcpy+0xe>
 8010a6a:	bd10      	pop	{r4, pc}

08010a6c <memset>:
 8010a6c:	4402      	add	r2, r0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d100      	bne.n	8010a76 <memset+0xa>
 8010a74:	4770      	bx	lr
 8010a76:	f803 1b01 	strb.w	r1, [r3], #1
 8010a7a:	e7f9      	b.n	8010a70 <memset+0x4>

08010a7c <siprintf>:
 8010a7c:	b40e      	push	{r1, r2, r3}
 8010a7e:	b500      	push	{lr}
 8010a80:	b09c      	sub	sp, #112	; 0x70
 8010a82:	ab1d      	add	r3, sp, #116	; 0x74
 8010a84:	9002      	str	r0, [sp, #8]
 8010a86:	9006      	str	r0, [sp, #24]
 8010a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a8c:	4809      	ldr	r0, [pc, #36]	; (8010ab4 <siprintf+0x38>)
 8010a8e:	9107      	str	r1, [sp, #28]
 8010a90:	9104      	str	r1, [sp, #16]
 8010a92:	4909      	ldr	r1, [pc, #36]	; (8010ab8 <siprintf+0x3c>)
 8010a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a98:	9105      	str	r1, [sp, #20]
 8010a9a:	6800      	ldr	r0, [r0, #0]
 8010a9c:	9301      	str	r3, [sp, #4]
 8010a9e:	a902      	add	r1, sp, #8
 8010aa0:	f000 f91e 	bl	8010ce0 <_svfiprintf_r>
 8010aa4:	9b02      	ldr	r3, [sp, #8]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	701a      	strb	r2, [r3, #0]
 8010aaa:	b01c      	add	sp, #112	; 0x70
 8010aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ab0:	b003      	add	sp, #12
 8010ab2:	4770      	bx	lr
 8010ab4:	20000018 	.word	0x20000018
 8010ab8:	ffff0208 	.word	0xffff0208

08010abc <_vsiprintf_r>:
 8010abc:	b500      	push	{lr}
 8010abe:	b09b      	sub	sp, #108	; 0x6c
 8010ac0:	9100      	str	r1, [sp, #0]
 8010ac2:	9104      	str	r1, [sp, #16]
 8010ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ac8:	9105      	str	r1, [sp, #20]
 8010aca:	9102      	str	r1, [sp, #8]
 8010acc:	4905      	ldr	r1, [pc, #20]	; (8010ae4 <_vsiprintf_r+0x28>)
 8010ace:	9103      	str	r1, [sp, #12]
 8010ad0:	4669      	mov	r1, sp
 8010ad2:	f000 f905 	bl	8010ce0 <_svfiprintf_r>
 8010ad6:	9b00      	ldr	r3, [sp, #0]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	701a      	strb	r2, [r3, #0]
 8010adc:	b01b      	add	sp, #108	; 0x6c
 8010ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ae2:	bf00      	nop
 8010ae4:	ffff0208 	.word	0xffff0208

08010ae8 <vsiprintf>:
 8010ae8:	4613      	mov	r3, r2
 8010aea:	460a      	mov	r2, r1
 8010aec:	4601      	mov	r1, r0
 8010aee:	4802      	ldr	r0, [pc, #8]	; (8010af8 <vsiprintf+0x10>)
 8010af0:	6800      	ldr	r0, [r0, #0]
 8010af2:	f7ff bfe3 	b.w	8010abc <_vsiprintf_r>
 8010af6:	bf00      	nop
 8010af8:	20000018 	.word	0x20000018

08010afc <__retarget_lock_acquire_recursive>:
 8010afc:	4770      	bx	lr

08010afe <__retarget_lock_release_recursive>:
 8010afe:	4770      	bx	lr

08010b00 <sbrk_aligned>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	4e0e      	ldr	r6, [pc, #56]	; (8010b3c <sbrk_aligned+0x3c>)
 8010b04:	460c      	mov	r4, r1
 8010b06:	6831      	ldr	r1, [r6, #0]
 8010b08:	4605      	mov	r5, r0
 8010b0a:	b911      	cbnz	r1, 8010b12 <sbrk_aligned+0x12>
 8010b0c:	f000 fb7c 	bl	8011208 <_sbrk_r>
 8010b10:	6030      	str	r0, [r6, #0]
 8010b12:	4621      	mov	r1, r4
 8010b14:	4628      	mov	r0, r5
 8010b16:	f000 fb77 	bl	8011208 <_sbrk_r>
 8010b1a:	1c43      	adds	r3, r0, #1
 8010b1c:	d00a      	beq.n	8010b34 <sbrk_aligned+0x34>
 8010b1e:	1cc4      	adds	r4, r0, #3
 8010b20:	f024 0403 	bic.w	r4, r4, #3
 8010b24:	42a0      	cmp	r0, r4
 8010b26:	d007      	beq.n	8010b38 <sbrk_aligned+0x38>
 8010b28:	1a21      	subs	r1, r4, r0
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	f000 fb6c 	bl	8011208 <_sbrk_r>
 8010b30:	3001      	adds	r0, #1
 8010b32:	d101      	bne.n	8010b38 <sbrk_aligned+0x38>
 8010b34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010b38:	4620      	mov	r0, r4
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	200076d8 	.word	0x200076d8

08010b40 <_malloc_r>:
 8010b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b44:	1ccd      	adds	r5, r1, #3
 8010b46:	f025 0503 	bic.w	r5, r5, #3
 8010b4a:	3508      	adds	r5, #8
 8010b4c:	2d0c      	cmp	r5, #12
 8010b4e:	bf38      	it	cc
 8010b50:	250c      	movcc	r5, #12
 8010b52:	2d00      	cmp	r5, #0
 8010b54:	4607      	mov	r7, r0
 8010b56:	db01      	blt.n	8010b5c <_malloc_r+0x1c>
 8010b58:	42a9      	cmp	r1, r5
 8010b5a:	d905      	bls.n	8010b68 <_malloc_r+0x28>
 8010b5c:	230c      	movs	r3, #12
 8010b5e:	603b      	str	r3, [r7, #0]
 8010b60:	2600      	movs	r6, #0
 8010b62:	4630      	mov	r0, r6
 8010b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b68:	4e2e      	ldr	r6, [pc, #184]	; (8010c24 <_malloc_r+0xe4>)
 8010b6a:	f000 fb77 	bl	801125c <__malloc_lock>
 8010b6e:	6833      	ldr	r3, [r6, #0]
 8010b70:	461c      	mov	r4, r3
 8010b72:	bb34      	cbnz	r4, 8010bc2 <_malloc_r+0x82>
 8010b74:	4629      	mov	r1, r5
 8010b76:	4638      	mov	r0, r7
 8010b78:	f7ff ffc2 	bl	8010b00 <sbrk_aligned>
 8010b7c:	1c43      	adds	r3, r0, #1
 8010b7e:	4604      	mov	r4, r0
 8010b80:	d14d      	bne.n	8010c1e <_malloc_r+0xde>
 8010b82:	6834      	ldr	r4, [r6, #0]
 8010b84:	4626      	mov	r6, r4
 8010b86:	2e00      	cmp	r6, #0
 8010b88:	d140      	bne.n	8010c0c <_malloc_r+0xcc>
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	4631      	mov	r1, r6
 8010b8e:	4638      	mov	r0, r7
 8010b90:	eb04 0803 	add.w	r8, r4, r3
 8010b94:	f000 fb38 	bl	8011208 <_sbrk_r>
 8010b98:	4580      	cmp	r8, r0
 8010b9a:	d13a      	bne.n	8010c12 <_malloc_r+0xd2>
 8010b9c:	6821      	ldr	r1, [r4, #0]
 8010b9e:	3503      	adds	r5, #3
 8010ba0:	1a6d      	subs	r5, r5, r1
 8010ba2:	f025 0503 	bic.w	r5, r5, #3
 8010ba6:	3508      	adds	r5, #8
 8010ba8:	2d0c      	cmp	r5, #12
 8010baa:	bf38      	it	cc
 8010bac:	250c      	movcc	r5, #12
 8010bae:	4629      	mov	r1, r5
 8010bb0:	4638      	mov	r0, r7
 8010bb2:	f7ff ffa5 	bl	8010b00 <sbrk_aligned>
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	d02b      	beq.n	8010c12 <_malloc_r+0xd2>
 8010bba:	6823      	ldr	r3, [r4, #0]
 8010bbc:	442b      	add	r3, r5
 8010bbe:	6023      	str	r3, [r4, #0]
 8010bc0:	e00e      	b.n	8010be0 <_malloc_r+0xa0>
 8010bc2:	6822      	ldr	r2, [r4, #0]
 8010bc4:	1b52      	subs	r2, r2, r5
 8010bc6:	d41e      	bmi.n	8010c06 <_malloc_r+0xc6>
 8010bc8:	2a0b      	cmp	r2, #11
 8010bca:	d916      	bls.n	8010bfa <_malloc_r+0xba>
 8010bcc:	1961      	adds	r1, r4, r5
 8010bce:	42a3      	cmp	r3, r4
 8010bd0:	6025      	str	r5, [r4, #0]
 8010bd2:	bf18      	it	ne
 8010bd4:	6059      	strne	r1, [r3, #4]
 8010bd6:	6863      	ldr	r3, [r4, #4]
 8010bd8:	bf08      	it	eq
 8010bda:	6031      	streq	r1, [r6, #0]
 8010bdc:	5162      	str	r2, [r4, r5]
 8010bde:	604b      	str	r3, [r1, #4]
 8010be0:	4638      	mov	r0, r7
 8010be2:	f104 060b 	add.w	r6, r4, #11
 8010be6:	f000 fb3f 	bl	8011268 <__malloc_unlock>
 8010bea:	f026 0607 	bic.w	r6, r6, #7
 8010bee:	1d23      	adds	r3, r4, #4
 8010bf0:	1af2      	subs	r2, r6, r3
 8010bf2:	d0b6      	beq.n	8010b62 <_malloc_r+0x22>
 8010bf4:	1b9b      	subs	r3, r3, r6
 8010bf6:	50a3      	str	r3, [r4, r2]
 8010bf8:	e7b3      	b.n	8010b62 <_malloc_r+0x22>
 8010bfa:	6862      	ldr	r2, [r4, #4]
 8010bfc:	42a3      	cmp	r3, r4
 8010bfe:	bf0c      	ite	eq
 8010c00:	6032      	streq	r2, [r6, #0]
 8010c02:	605a      	strne	r2, [r3, #4]
 8010c04:	e7ec      	b.n	8010be0 <_malloc_r+0xa0>
 8010c06:	4623      	mov	r3, r4
 8010c08:	6864      	ldr	r4, [r4, #4]
 8010c0a:	e7b2      	b.n	8010b72 <_malloc_r+0x32>
 8010c0c:	4634      	mov	r4, r6
 8010c0e:	6876      	ldr	r6, [r6, #4]
 8010c10:	e7b9      	b.n	8010b86 <_malloc_r+0x46>
 8010c12:	230c      	movs	r3, #12
 8010c14:	603b      	str	r3, [r7, #0]
 8010c16:	4638      	mov	r0, r7
 8010c18:	f000 fb26 	bl	8011268 <__malloc_unlock>
 8010c1c:	e7a1      	b.n	8010b62 <_malloc_r+0x22>
 8010c1e:	6025      	str	r5, [r4, #0]
 8010c20:	e7de      	b.n	8010be0 <_malloc_r+0xa0>
 8010c22:	bf00      	nop
 8010c24:	200076d4 	.word	0x200076d4

08010c28 <__ssputs_r>:
 8010c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c2c:	688e      	ldr	r6, [r1, #8]
 8010c2e:	429e      	cmp	r6, r3
 8010c30:	4682      	mov	sl, r0
 8010c32:	460c      	mov	r4, r1
 8010c34:	4690      	mov	r8, r2
 8010c36:	461f      	mov	r7, r3
 8010c38:	d838      	bhi.n	8010cac <__ssputs_r+0x84>
 8010c3a:	898a      	ldrh	r2, [r1, #12]
 8010c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c40:	d032      	beq.n	8010ca8 <__ssputs_r+0x80>
 8010c42:	6825      	ldr	r5, [r4, #0]
 8010c44:	6909      	ldr	r1, [r1, #16]
 8010c46:	eba5 0901 	sub.w	r9, r5, r1
 8010c4a:	6965      	ldr	r5, [r4, #20]
 8010c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c54:	3301      	adds	r3, #1
 8010c56:	444b      	add	r3, r9
 8010c58:	106d      	asrs	r5, r5, #1
 8010c5a:	429d      	cmp	r5, r3
 8010c5c:	bf38      	it	cc
 8010c5e:	461d      	movcc	r5, r3
 8010c60:	0553      	lsls	r3, r2, #21
 8010c62:	d531      	bpl.n	8010cc8 <__ssputs_r+0xa0>
 8010c64:	4629      	mov	r1, r5
 8010c66:	f7ff ff6b 	bl	8010b40 <_malloc_r>
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	b950      	cbnz	r0, 8010c84 <__ssputs_r+0x5c>
 8010c6e:	230c      	movs	r3, #12
 8010c70:	f8ca 3000 	str.w	r3, [sl]
 8010c74:	89a3      	ldrh	r3, [r4, #12]
 8010c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c7a:	81a3      	strh	r3, [r4, #12]
 8010c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c84:	6921      	ldr	r1, [r4, #16]
 8010c86:	464a      	mov	r2, r9
 8010c88:	f7ff fee2 	bl	8010a50 <memcpy>
 8010c8c:	89a3      	ldrh	r3, [r4, #12]
 8010c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c96:	81a3      	strh	r3, [r4, #12]
 8010c98:	6126      	str	r6, [r4, #16]
 8010c9a:	6165      	str	r5, [r4, #20]
 8010c9c:	444e      	add	r6, r9
 8010c9e:	eba5 0509 	sub.w	r5, r5, r9
 8010ca2:	6026      	str	r6, [r4, #0]
 8010ca4:	60a5      	str	r5, [r4, #8]
 8010ca6:	463e      	mov	r6, r7
 8010ca8:	42be      	cmp	r6, r7
 8010caa:	d900      	bls.n	8010cae <__ssputs_r+0x86>
 8010cac:	463e      	mov	r6, r7
 8010cae:	6820      	ldr	r0, [r4, #0]
 8010cb0:	4632      	mov	r2, r6
 8010cb2:	4641      	mov	r1, r8
 8010cb4:	f000 fab8 	bl	8011228 <memmove>
 8010cb8:	68a3      	ldr	r3, [r4, #8]
 8010cba:	1b9b      	subs	r3, r3, r6
 8010cbc:	60a3      	str	r3, [r4, #8]
 8010cbe:	6823      	ldr	r3, [r4, #0]
 8010cc0:	4433      	add	r3, r6
 8010cc2:	6023      	str	r3, [r4, #0]
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	e7db      	b.n	8010c80 <__ssputs_r+0x58>
 8010cc8:	462a      	mov	r2, r5
 8010cca:	f000 fb1f 	bl	801130c <_realloc_r>
 8010cce:	4606      	mov	r6, r0
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d1e1      	bne.n	8010c98 <__ssputs_r+0x70>
 8010cd4:	6921      	ldr	r1, [r4, #16]
 8010cd6:	4650      	mov	r0, sl
 8010cd8:	f000 facc 	bl	8011274 <_free_r>
 8010cdc:	e7c7      	b.n	8010c6e <__ssputs_r+0x46>
	...

08010ce0 <_svfiprintf_r>:
 8010ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce4:	4698      	mov	r8, r3
 8010ce6:	898b      	ldrh	r3, [r1, #12]
 8010ce8:	061b      	lsls	r3, r3, #24
 8010cea:	b09d      	sub	sp, #116	; 0x74
 8010cec:	4607      	mov	r7, r0
 8010cee:	460d      	mov	r5, r1
 8010cf0:	4614      	mov	r4, r2
 8010cf2:	d50e      	bpl.n	8010d12 <_svfiprintf_r+0x32>
 8010cf4:	690b      	ldr	r3, [r1, #16]
 8010cf6:	b963      	cbnz	r3, 8010d12 <_svfiprintf_r+0x32>
 8010cf8:	2140      	movs	r1, #64	; 0x40
 8010cfa:	f7ff ff21 	bl	8010b40 <_malloc_r>
 8010cfe:	6028      	str	r0, [r5, #0]
 8010d00:	6128      	str	r0, [r5, #16]
 8010d02:	b920      	cbnz	r0, 8010d0e <_svfiprintf_r+0x2e>
 8010d04:	230c      	movs	r3, #12
 8010d06:	603b      	str	r3, [r7, #0]
 8010d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d0c:	e0d1      	b.n	8010eb2 <_svfiprintf_r+0x1d2>
 8010d0e:	2340      	movs	r3, #64	; 0x40
 8010d10:	616b      	str	r3, [r5, #20]
 8010d12:	2300      	movs	r3, #0
 8010d14:	9309      	str	r3, [sp, #36]	; 0x24
 8010d16:	2320      	movs	r3, #32
 8010d18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d20:	2330      	movs	r3, #48	; 0x30
 8010d22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010ecc <_svfiprintf_r+0x1ec>
 8010d26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d2a:	f04f 0901 	mov.w	r9, #1
 8010d2e:	4623      	mov	r3, r4
 8010d30:	469a      	mov	sl, r3
 8010d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d36:	b10a      	cbz	r2, 8010d3c <_svfiprintf_r+0x5c>
 8010d38:	2a25      	cmp	r2, #37	; 0x25
 8010d3a:	d1f9      	bne.n	8010d30 <_svfiprintf_r+0x50>
 8010d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8010d40:	d00b      	beq.n	8010d5a <_svfiprintf_r+0x7a>
 8010d42:	465b      	mov	r3, fp
 8010d44:	4622      	mov	r2, r4
 8010d46:	4629      	mov	r1, r5
 8010d48:	4638      	mov	r0, r7
 8010d4a:	f7ff ff6d 	bl	8010c28 <__ssputs_r>
 8010d4e:	3001      	adds	r0, #1
 8010d50:	f000 80aa 	beq.w	8010ea8 <_svfiprintf_r+0x1c8>
 8010d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d56:	445a      	add	r2, fp
 8010d58:	9209      	str	r2, [sp, #36]	; 0x24
 8010d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 80a2 	beq.w	8010ea8 <_svfiprintf_r+0x1c8>
 8010d64:	2300      	movs	r3, #0
 8010d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d6e:	f10a 0a01 	add.w	sl, sl, #1
 8010d72:	9304      	str	r3, [sp, #16]
 8010d74:	9307      	str	r3, [sp, #28]
 8010d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8010d7c:	4654      	mov	r4, sl
 8010d7e:	2205      	movs	r2, #5
 8010d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d84:	4851      	ldr	r0, [pc, #324]	; (8010ecc <_svfiprintf_r+0x1ec>)
 8010d86:	f7ef fa83 	bl	8000290 <memchr>
 8010d8a:	9a04      	ldr	r2, [sp, #16]
 8010d8c:	b9d8      	cbnz	r0, 8010dc6 <_svfiprintf_r+0xe6>
 8010d8e:	06d0      	lsls	r0, r2, #27
 8010d90:	bf44      	itt	mi
 8010d92:	2320      	movmi	r3, #32
 8010d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d98:	0711      	lsls	r1, r2, #28
 8010d9a:	bf44      	itt	mi
 8010d9c:	232b      	movmi	r3, #43	; 0x2b
 8010d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010da2:	f89a 3000 	ldrb.w	r3, [sl]
 8010da6:	2b2a      	cmp	r3, #42	; 0x2a
 8010da8:	d015      	beq.n	8010dd6 <_svfiprintf_r+0xf6>
 8010daa:	9a07      	ldr	r2, [sp, #28]
 8010dac:	4654      	mov	r4, sl
 8010dae:	2000      	movs	r0, #0
 8010db0:	f04f 0c0a 	mov.w	ip, #10
 8010db4:	4621      	mov	r1, r4
 8010db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dba:	3b30      	subs	r3, #48	; 0x30
 8010dbc:	2b09      	cmp	r3, #9
 8010dbe:	d94e      	bls.n	8010e5e <_svfiprintf_r+0x17e>
 8010dc0:	b1b0      	cbz	r0, 8010df0 <_svfiprintf_r+0x110>
 8010dc2:	9207      	str	r2, [sp, #28]
 8010dc4:	e014      	b.n	8010df0 <_svfiprintf_r+0x110>
 8010dc6:	eba0 0308 	sub.w	r3, r0, r8
 8010dca:	fa09 f303 	lsl.w	r3, r9, r3
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	9304      	str	r3, [sp, #16]
 8010dd2:	46a2      	mov	sl, r4
 8010dd4:	e7d2      	b.n	8010d7c <_svfiprintf_r+0x9c>
 8010dd6:	9b03      	ldr	r3, [sp, #12]
 8010dd8:	1d19      	adds	r1, r3, #4
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	9103      	str	r1, [sp, #12]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	bfbb      	ittet	lt
 8010de2:	425b      	neglt	r3, r3
 8010de4:	f042 0202 	orrlt.w	r2, r2, #2
 8010de8:	9307      	strge	r3, [sp, #28]
 8010dea:	9307      	strlt	r3, [sp, #28]
 8010dec:	bfb8      	it	lt
 8010dee:	9204      	strlt	r2, [sp, #16]
 8010df0:	7823      	ldrb	r3, [r4, #0]
 8010df2:	2b2e      	cmp	r3, #46	; 0x2e
 8010df4:	d10c      	bne.n	8010e10 <_svfiprintf_r+0x130>
 8010df6:	7863      	ldrb	r3, [r4, #1]
 8010df8:	2b2a      	cmp	r3, #42	; 0x2a
 8010dfa:	d135      	bne.n	8010e68 <_svfiprintf_r+0x188>
 8010dfc:	9b03      	ldr	r3, [sp, #12]
 8010dfe:	1d1a      	adds	r2, r3, #4
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	9203      	str	r2, [sp, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	bfb8      	it	lt
 8010e08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010e0c:	3402      	adds	r4, #2
 8010e0e:	9305      	str	r3, [sp, #20]
 8010e10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010edc <_svfiprintf_r+0x1fc>
 8010e14:	7821      	ldrb	r1, [r4, #0]
 8010e16:	2203      	movs	r2, #3
 8010e18:	4650      	mov	r0, sl
 8010e1a:	f7ef fa39 	bl	8000290 <memchr>
 8010e1e:	b140      	cbz	r0, 8010e32 <_svfiprintf_r+0x152>
 8010e20:	2340      	movs	r3, #64	; 0x40
 8010e22:	eba0 000a 	sub.w	r0, r0, sl
 8010e26:	fa03 f000 	lsl.w	r0, r3, r0
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	4303      	orrs	r3, r0
 8010e2e:	3401      	adds	r4, #1
 8010e30:	9304      	str	r3, [sp, #16]
 8010e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e36:	4826      	ldr	r0, [pc, #152]	; (8010ed0 <_svfiprintf_r+0x1f0>)
 8010e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e3c:	2206      	movs	r2, #6
 8010e3e:	f7ef fa27 	bl	8000290 <memchr>
 8010e42:	2800      	cmp	r0, #0
 8010e44:	d038      	beq.n	8010eb8 <_svfiprintf_r+0x1d8>
 8010e46:	4b23      	ldr	r3, [pc, #140]	; (8010ed4 <_svfiprintf_r+0x1f4>)
 8010e48:	bb1b      	cbnz	r3, 8010e92 <_svfiprintf_r+0x1b2>
 8010e4a:	9b03      	ldr	r3, [sp, #12]
 8010e4c:	3307      	adds	r3, #7
 8010e4e:	f023 0307 	bic.w	r3, r3, #7
 8010e52:	3308      	adds	r3, #8
 8010e54:	9303      	str	r3, [sp, #12]
 8010e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e58:	4433      	add	r3, r6
 8010e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e5c:	e767      	b.n	8010d2e <_svfiprintf_r+0x4e>
 8010e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e62:	460c      	mov	r4, r1
 8010e64:	2001      	movs	r0, #1
 8010e66:	e7a5      	b.n	8010db4 <_svfiprintf_r+0xd4>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	3401      	adds	r4, #1
 8010e6c:	9305      	str	r3, [sp, #20]
 8010e6e:	4619      	mov	r1, r3
 8010e70:	f04f 0c0a 	mov.w	ip, #10
 8010e74:	4620      	mov	r0, r4
 8010e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e7a:	3a30      	subs	r2, #48	; 0x30
 8010e7c:	2a09      	cmp	r2, #9
 8010e7e:	d903      	bls.n	8010e88 <_svfiprintf_r+0x1a8>
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d0c5      	beq.n	8010e10 <_svfiprintf_r+0x130>
 8010e84:	9105      	str	r1, [sp, #20]
 8010e86:	e7c3      	b.n	8010e10 <_svfiprintf_r+0x130>
 8010e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e7f0      	b.n	8010e74 <_svfiprintf_r+0x194>
 8010e92:	ab03      	add	r3, sp, #12
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	462a      	mov	r2, r5
 8010e98:	4b0f      	ldr	r3, [pc, #60]	; (8010ed8 <_svfiprintf_r+0x1f8>)
 8010e9a:	a904      	add	r1, sp, #16
 8010e9c:	4638      	mov	r0, r7
 8010e9e:	f3af 8000 	nop.w
 8010ea2:	1c42      	adds	r2, r0, #1
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	d1d6      	bne.n	8010e56 <_svfiprintf_r+0x176>
 8010ea8:	89ab      	ldrh	r3, [r5, #12]
 8010eaa:	065b      	lsls	r3, r3, #25
 8010eac:	f53f af2c 	bmi.w	8010d08 <_svfiprintf_r+0x28>
 8010eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eb2:	b01d      	add	sp, #116	; 0x74
 8010eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb8:	ab03      	add	r3, sp, #12
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	462a      	mov	r2, r5
 8010ebe:	4b06      	ldr	r3, [pc, #24]	; (8010ed8 <_svfiprintf_r+0x1f8>)
 8010ec0:	a904      	add	r1, sp, #16
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	f000 f87a 	bl	8010fbc <_printf_i>
 8010ec8:	e7eb      	b.n	8010ea2 <_svfiprintf_r+0x1c2>
 8010eca:	bf00      	nop
 8010ecc:	08011d18 	.word	0x08011d18
 8010ed0:	08011d22 	.word	0x08011d22
 8010ed4:	00000000 	.word	0x00000000
 8010ed8:	08010c29 	.word	0x08010c29
 8010edc:	08011d1e 	.word	0x08011d1e

08010ee0 <_printf_common>:
 8010ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee4:	4616      	mov	r6, r2
 8010ee6:	4699      	mov	r9, r3
 8010ee8:	688a      	ldr	r2, [r1, #8]
 8010eea:	690b      	ldr	r3, [r1, #16]
 8010eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	bfb8      	it	lt
 8010ef4:	4613      	movlt	r3, r2
 8010ef6:	6033      	str	r3, [r6, #0]
 8010ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010efc:	4607      	mov	r7, r0
 8010efe:	460c      	mov	r4, r1
 8010f00:	b10a      	cbz	r2, 8010f06 <_printf_common+0x26>
 8010f02:	3301      	adds	r3, #1
 8010f04:	6033      	str	r3, [r6, #0]
 8010f06:	6823      	ldr	r3, [r4, #0]
 8010f08:	0699      	lsls	r1, r3, #26
 8010f0a:	bf42      	ittt	mi
 8010f0c:	6833      	ldrmi	r3, [r6, #0]
 8010f0e:	3302      	addmi	r3, #2
 8010f10:	6033      	strmi	r3, [r6, #0]
 8010f12:	6825      	ldr	r5, [r4, #0]
 8010f14:	f015 0506 	ands.w	r5, r5, #6
 8010f18:	d106      	bne.n	8010f28 <_printf_common+0x48>
 8010f1a:	f104 0a19 	add.w	sl, r4, #25
 8010f1e:	68e3      	ldr	r3, [r4, #12]
 8010f20:	6832      	ldr	r2, [r6, #0]
 8010f22:	1a9b      	subs	r3, r3, r2
 8010f24:	42ab      	cmp	r3, r5
 8010f26:	dc26      	bgt.n	8010f76 <_printf_common+0x96>
 8010f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f2c:	1e13      	subs	r3, r2, #0
 8010f2e:	6822      	ldr	r2, [r4, #0]
 8010f30:	bf18      	it	ne
 8010f32:	2301      	movne	r3, #1
 8010f34:	0692      	lsls	r2, r2, #26
 8010f36:	d42b      	bmi.n	8010f90 <_printf_common+0xb0>
 8010f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	4638      	mov	r0, r7
 8010f40:	47c0      	blx	r8
 8010f42:	3001      	adds	r0, #1
 8010f44:	d01e      	beq.n	8010f84 <_printf_common+0xa4>
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	68e5      	ldr	r5, [r4, #12]
 8010f4a:	6832      	ldr	r2, [r6, #0]
 8010f4c:	f003 0306 	and.w	r3, r3, #6
 8010f50:	2b04      	cmp	r3, #4
 8010f52:	bf08      	it	eq
 8010f54:	1aad      	subeq	r5, r5, r2
 8010f56:	68a3      	ldr	r3, [r4, #8]
 8010f58:	6922      	ldr	r2, [r4, #16]
 8010f5a:	bf0c      	ite	eq
 8010f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f60:	2500      	movne	r5, #0
 8010f62:	4293      	cmp	r3, r2
 8010f64:	bfc4      	itt	gt
 8010f66:	1a9b      	subgt	r3, r3, r2
 8010f68:	18ed      	addgt	r5, r5, r3
 8010f6a:	2600      	movs	r6, #0
 8010f6c:	341a      	adds	r4, #26
 8010f6e:	42b5      	cmp	r5, r6
 8010f70:	d11a      	bne.n	8010fa8 <_printf_common+0xc8>
 8010f72:	2000      	movs	r0, #0
 8010f74:	e008      	b.n	8010f88 <_printf_common+0xa8>
 8010f76:	2301      	movs	r3, #1
 8010f78:	4652      	mov	r2, sl
 8010f7a:	4649      	mov	r1, r9
 8010f7c:	4638      	mov	r0, r7
 8010f7e:	47c0      	blx	r8
 8010f80:	3001      	adds	r0, #1
 8010f82:	d103      	bne.n	8010f8c <_printf_common+0xac>
 8010f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	3501      	adds	r5, #1
 8010f8e:	e7c6      	b.n	8010f1e <_printf_common+0x3e>
 8010f90:	18e1      	adds	r1, r4, r3
 8010f92:	1c5a      	adds	r2, r3, #1
 8010f94:	2030      	movs	r0, #48	; 0x30
 8010f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f9a:	4422      	add	r2, r4
 8010f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010fa4:	3302      	adds	r3, #2
 8010fa6:	e7c7      	b.n	8010f38 <_printf_common+0x58>
 8010fa8:	2301      	movs	r3, #1
 8010faa:	4622      	mov	r2, r4
 8010fac:	4649      	mov	r1, r9
 8010fae:	4638      	mov	r0, r7
 8010fb0:	47c0      	blx	r8
 8010fb2:	3001      	adds	r0, #1
 8010fb4:	d0e6      	beq.n	8010f84 <_printf_common+0xa4>
 8010fb6:	3601      	adds	r6, #1
 8010fb8:	e7d9      	b.n	8010f6e <_printf_common+0x8e>
	...

08010fbc <_printf_i>:
 8010fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc0:	7e0f      	ldrb	r7, [r1, #24]
 8010fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010fc4:	2f78      	cmp	r7, #120	; 0x78
 8010fc6:	4691      	mov	r9, r2
 8010fc8:	4680      	mov	r8, r0
 8010fca:	460c      	mov	r4, r1
 8010fcc:	469a      	mov	sl, r3
 8010fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010fd2:	d807      	bhi.n	8010fe4 <_printf_i+0x28>
 8010fd4:	2f62      	cmp	r7, #98	; 0x62
 8010fd6:	d80a      	bhi.n	8010fee <_printf_i+0x32>
 8010fd8:	2f00      	cmp	r7, #0
 8010fda:	f000 80d8 	beq.w	801118e <_printf_i+0x1d2>
 8010fde:	2f58      	cmp	r7, #88	; 0x58
 8010fe0:	f000 80a3 	beq.w	801112a <_printf_i+0x16e>
 8010fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fec:	e03a      	b.n	8011064 <_printf_i+0xa8>
 8010fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ff2:	2b15      	cmp	r3, #21
 8010ff4:	d8f6      	bhi.n	8010fe4 <_printf_i+0x28>
 8010ff6:	a101      	add	r1, pc, #4	; (adr r1, 8010ffc <_printf_i+0x40>)
 8010ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ffc:	08011055 	.word	0x08011055
 8011000:	08011069 	.word	0x08011069
 8011004:	08010fe5 	.word	0x08010fe5
 8011008:	08010fe5 	.word	0x08010fe5
 801100c:	08010fe5 	.word	0x08010fe5
 8011010:	08010fe5 	.word	0x08010fe5
 8011014:	08011069 	.word	0x08011069
 8011018:	08010fe5 	.word	0x08010fe5
 801101c:	08010fe5 	.word	0x08010fe5
 8011020:	08010fe5 	.word	0x08010fe5
 8011024:	08010fe5 	.word	0x08010fe5
 8011028:	08011175 	.word	0x08011175
 801102c:	08011099 	.word	0x08011099
 8011030:	08011157 	.word	0x08011157
 8011034:	08010fe5 	.word	0x08010fe5
 8011038:	08010fe5 	.word	0x08010fe5
 801103c:	08011197 	.word	0x08011197
 8011040:	08010fe5 	.word	0x08010fe5
 8011044:	08011099 	.word	0x08011099
 8011048:	08010fe5 	.word	0x08010fe5
 801104c:	08010fe5 	.word	0x08010fe5
 8011050:	0801115f 	.word	0x0801115f
 8011054:	682b      	ldr	r3, [r5, #0]
 8011056:	1d1a      	adds	r2, r3, #4
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	602a      	str	r2, [r5, #0]
 801105c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011064:	2301      	movs	r3, #1
 8011066:	e0a3      	b.n	80111b0 <_printf_i+0x1f4>
 8011068:	6820      	ldr	r0, [r4, #0]
 801106a:	6829      	ldr	r1, [r5, #0]
 801106c:	0606      	lsls	r6, r0, #24
 801106e:	f101 0304 	add.w	r3, r1, #4
 8011072:	d50a      	bpl.n	801108a <_printf_i+0xce>
 8011074:	680e      	ldr	r6, [r1, #0]
 8011076:	602b      	str	r3, [r5, #0]
 8011078:	2e00      	cmp	r6, #0
 801107a:	da03      	bge.n	8011084 <_printf_i+0xc8>
 801107c:	232d      	movs	r3, #45	; 0x2d
 801107e:	4276      	negs	r6, r6
 8011080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011084:	485e      	ldr	r0, [pc, #376]	; (8011200 <_printf_i+0x244>)
 8011086:	230a      	movs	r3, #10
 8011088:	e019      	b.n	80110be <_printf_i+0x102>
 801108a:	680e      	ldr	r6, [r1, #0]
 801108c:	602b      	str	r3, [r5, #0]
 801108e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011092:	bf18      	it	ne
 8011094:	b236      	sxthne	r6, r6
 8011096:	e7ef      	b.n	8011078 <_printf_i+0xbc>
 8011098:	682b      	ldr	r3, [r5, #0]
 801109a:	6820      	ldr	r0, [r4, #0]
 801109c:	1d19      	adds	r1, r3, #4
 801109e:	6029      	str	r1, [r5, #0]
 80110a0:	0601      	lsls	r1, r0, #24
 80110a2:	d501      	bpl.n	80110a8 <_printf_i+0xec>
 80110a4:	681e      	ldr	r6, [r3, #0]
 80110a6:	e002      	b.n	80110ae <_printf_i+0xf2>
 80110a8:	0646      	lsls	r6, r0, #25
 80110aa:	d5fb      	bpl.n	80110a4 <_printf_i+0xe8>
 80110ac:	881e      	ldrh	r6, [r3, #0]
 80110ae:	4854      	ldr	r0, [pc, #336]	; (8011200 <_printf_i+0x244>)
 80110b0:	2f6f      	cmp	r7, #111	; 0x6f
 80110b2:	bf0c      	ite	eq
 80110b4:	2308      	moveq	r3, #8
 80110b6:	230a      	movne	r3, #10
 80110b8:	2100      	movs	r1, #0
 80110ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110be:	6865      	ldr	r5, [r4, #4]
 80110c0:	60a5      	str	r5, [r4, #8]
 80110c2:	2d00      	cmp	r5, #0
 80110c4:	bfa2      	ittt	ge
 80110c6:	6821      	ldrge	r1, [r4, #0]
 80110c8:	f021 0104 	bicge.w	r1, r1, #4
 80110cc:	6021      	strge	r1, [r4, #0]
 80110ce:	b90e      	cbnz	r6, 80110d4 <_printf_i+0x118>
 80110d0:	2d00      	cmp	r5, #0
 80110d2:	d04d      	beq.n	8011170 <_printf_i+0x1b4>
 80110d4:	4615      	mov	r5, r2
 80110d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80110da:	fb03 6711 	mls	r7, r3, r1, r6
 80110de:	5dc7      	ldrb	r7, [r0, r7]
 80110e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80110e4:	4637      	mov	r7, r6
 80110e6:	42bb      	cmp	r3, r7
 80110e8:	460e      	mov	r6, r1
 80110ea:	d9f4      	bls.n	80110d6 <_printf_i+0x11a>
 80110ec:	2b08      	cmp	r3, #8
 80110ee:	d10b      	bne.n	8011108 <_printf_i+0x14c>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	07de      	lsls	r6, r3, #31
 80110f4:	d508      	bpl.n	8011108 <_printf_i+0x14c>
 80110f6:	6923      	ldr	r3, [r4, #16]
 80110f8:	6861      	ldr	r1, [r4, #4]
 80110fa:	4299      	cmp	r1, r3
 80110fc:	bfde      	ittt	le
 80110fe:	2330      	movle	r3, #48	; 0x30
 8011100:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011104:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011108:	1b52      	subs	r2, r2, r5
 801110a:	6122      	str	r2, [r4, #16]
 801110c:	f8cd a000 	str.w	sl, [sp]
 8011110:	464b      	mov	r3, r9
 8011112:	aa03      	add	r2, sp, #12
 8011114:	4621      	mov	r1, r4
 8011116:	4640      	mov	r0, r8
 8011118:	f7ff fee2 	bl	8010ee0 <_printf_common>
 801111c:	3001      	adds	r0, #1
 801111e:	d14c      	bne.n	80111ba <_printf_i+0x1fe>
 8011120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011124:	b004      	add	sp, #16
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	4835      	ldr	r0, [pc, #212]	; (8011200 <_printf_i+0x244>)
 801112c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011130:	6829      	ldr	r1, [r5, #0]
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	f851 6b04 	ldr.w	r6, [r1], #4
 8011138:	6029      	str	r1, [r5, #0]
 801113a:	061d      	lsls	r5, r3, #24
 801113c:	d514      	bpl.n	8011168 <_printf_i+0x1ac>
 801113e:	07df      	lsls	r7, r3, #31
 8011140:	bf44      	itt	mi
 8011142:	f043 0320 	orrmi.w	r3, r3, #32
 8011146:	6023      	strmi	r3, [r4, #0]
 8011148:	b91e      	cbnz	r6, 8011152 <_printf_i+0x196>
 801114a:	6823      	ldr	r3, [r4, #0]
 801114c:	f023 0320 	bic.w	r3, r3, #32
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	2310      	movs	r3, #16
 8011154:	e7b0      	b.n	80110b8 <_printf_i+0xfc>
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	f043 0320 	orr.w	r3, r3, #32
 801115c:	6023      	str	r3, [r4, #0]
 801115e:	2378      	movs	r3, #120	; 0x78
 8011160:	4828      	ldr	r0, [pc, #160]	; (8011204 <_printf_i+0x248>)
 8011162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011166:	e7e3      	b.n	8011130 <_printf_i+0x174>
 8011168:	0659      	lsls	r1, r3, #25
 801116a:	bf48      	it	mi
 801116c:	b2b6      	uxthmi	r6, r6
 801116e:	e7e6      	b.n	801113e <_printf_i+0x182>
 8011170:	4615      	mov	r5, r2
 8011172:	e7bb      	b.n	80110ec <_printf_i+0x130>
 8011174:	682b      	ldr	r3, [r5, #0]
 8011176:	6826      	ldr	r6, [r4, #0]
 8011178:	6961      	ldr	r1, [r4, #20]
 801117a:	1d18      	adds	r0, r3, #4
 801117c:	6028      	str	r0, [r5, #0]
 801117e:	0635      	lsls	r5, r6, #24
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	d501      	bpl.n	8011188 <_printf_i+0x1cc>
 8011184:	6019      	str	r1, [r3, #0]
 8011186:	e002      	b.n	801118e <_printf_i+0x1d2>
 8011188:	0670      	lsls	r0, r6, #25
 801118a:	d5fb      	bpl.n	8011184 <_printf_i+0x1c8>
 801118c:	8019      	strh	r1, [r3, #0]
 801118e:	2300      	movs	r3, #0
 8011190:	6123      	str	r3, [r4, #16]
 8011192:	4615      	mov	r5, r2
 8011194:	e7ba      	b.n	801110c <_printf_i+0x150>
 8011196:	682b      	ldr	r3, [r5, #0]
 8011198:	1d1a      	adds	r2, r3, #4
 801119a:	602a      	str	r2, [r5, #0]
 801119c:	681d      	ldr	r5, [r3, #0]
 801119e:	6862      	ldr	r2, [r4, #4]
 80111a0:	2100      	movs	r1, #0
 80111a2:	4628      	mov	r0, r5
 80111a4:	f7ef f874 	bl	8000290 <memchr>
 80111a8:	b108      	cbz	r0, 80111ae <_printf_i+0x1f2>
 80111aa:	1b40      	subs	r0, r0, r5
 80111ac:	6060      	str	r0, [r4, #4]
 80111ae:	6863      	ldr	r3, [r4, #4]
 80111b0:	6123      	str	r3, [r4, #16]
 80111b2:	2300      	movs	r3, #0
 80111b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111b8:	e7a8      	b.n	801110c <_printf_i+0x150>
 80111ba:	6923      	ldr	r3, [r4, #16]
 80111bc:	462a      	mov	r2, r5
 80111be:	4649      	mov	r1, r9
 80111c0:	4640      	mov	r0, r8
 80111c2:	47d0      	blx	sl
 80111c4:	3001      	adds	r0, #1
 80111c6:	d0ab      	beq.n	8011120 <_printf_i+0x164>
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	079b      	lsls	r3, r3, #30
 80111cc:	d413      	bmi.n	80111f6 <_printf_i+0x23a>
 80111ce:	68e0      	ldr	r0, [r4, #12]
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	4298      	cmp	r0, r3
 80111d4:	bfb8      	it	lt
 80111d6:	4618      	movlt	r0, r3
 80111d8:	e7a4      	b.n	8011124 <_printf_i+0x168>
 80111da:	2301      	movs	r3, #1
 80111dc:	4632      	mov	r2, r6
 80111de:	4649      	mov	r1, r9
 80111e0:	4640      	mov	r0, r8
 80111e2:	47d0      	blx	sl
 80111e4:	3001      	adds	r0, #1
 80111e6:	d09b      	beq.n	8011120 <_printf_i+0x164>
 80111e8:	3501      	adds	r5, #1
 80111ea:	68e3      	ldr	r3, [r4, #12]
 80111ec:	9903      	ldr	r1, [sp, #12]
 80111ee:	1a5b      	subs	r3, r3, r1
 80111f0:	42ab      	cmp	r3, r5
 80111f2:	dcf2      	bgt.n	80111da <_printf_i+0x21e>
 80111f4:	e7eb      	b.n	80111ce <_printf_i+0x212>
 80111f6:	2500      	movs	r5, #0
 80111f8:	f104 0619 	add.w	r6, r4, #25
 80111fc:	e7f5      	b.n	80111ea <_printf_i+0x22e>
 80111fe:	bf00      	nop
 8011200:	08011d29 	.word	0x08011d29
 8011204:	08011d3a 	.word	0x08011d3a

08011208 <_sbrk_r>:
 8011208:	b538      	push	{r3, r4, r5, lr}
 801120a:	4d06      	ldr	r5, [pc, #24]	; (8011224 <_sbrk_r+0x1c>)
 801120c:	2300      	movs	r3, #0
 801120e:	4604      	mov	r4, r0
 8011210:	4608      	mov	r0, r1
 8011212:	602b      	str	r3, [r5, #0]
 8011214:	f000 f8b2 	bl	801137c <_sbrk>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_sbrk_r+0x1a>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	b103      	cbz	r3, 8011222 <_sbrk_r+0x1a>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	200076dc 	.word	0x200076dc

08011228 <memmove>:
 8011228:	4288      	cmp	r0, r1
 801122a:	b510      	push	{r4, lr}
 801122c:	eb01 0402 	add.w	r4, r1, r2
 8011230:	d902      	bls.n	8011238 <memmove+0x10>
 8011232:	4284      	cmp	r4, r0
 8011234:	4623      	mov	r3, r4
 8011236:	d807      	bhi.n	8011248 <memmove+0x20>
 8011238:	1e43      	subs	r3, r0, #1
 801123a:	42a1      	cmp	r1, r4
 801123c:	d008      	beq.n	8011250 <memmove+0x28>
 801123e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011246:	e7f8      	b.n	801123a <memmove+0x12>
 8011248:	4402      	add	r2, r0
 801124a:	4601      	mov	r1, r0
 801124c:	428a      	cmp	r2, r1
 801124e:	d100      	bne.n	8011252 <memmove+0x2a>
 8011250:	bd10      	pop	{r4, pc}
 8011252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801125a:	e7f7      	b.n	801124c <memmove+0x24>

0801125c <__malloc_lock>:
 801125c:	4801      	ldr	r0, [pc, #4]	; (8011264 <__malloc_lock+0x8>)
 801125e:	f7ff bc4d 	b.w	8010afc <__retarget_lock_acquire_recursive>
 8011262:	bf00      	nop
 8011264:	200076d1 	.word	0x200076d1

08011268 <__malloc_unlock>:
 8011268:	4801      	ldr	r0, [pc, #4]	; (8011270 <__malloc_unlock+0x8>)
 801126a:	f7ff bc48 	b.w	8010afe <__retarget_lock_release_recursive>
 801126e:	bf00      	nop
 8011270:	200076d1 	.word	0x200076d1

08011274 <_free_r>:
 8011274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011276:	2900      	cmp	r1, #0
 8011278:	d044      	beq.n	8011304 <_free_r+0x90>
 801127a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801127e:	9001      	str	r0, [sp, #4]
 8011280:	2b00      	cmp	r3, #0
 8011282:	f1a1 0404 	sub.w	r4, r1, #4
 8011286:	bfb8      	it	lt
 8011288:	18e4      	addlt	r4, r4, r3
 801128a:	f7ff ffe7 	bl	801125c <__malloc_lock>
 801128e:	4a1e      	ldr	r2, [pc, #120]	; (8011308 <_free_r+0x94>)
 8011290:	9801      	ldr	r0, [sp, #4]
 8011292:	6813      	ldr	r3, [r2, #0]
 8011294:	b933      	cbnz	r3, 80112a4 <_free_r+0x30>
 8011296:	6063      	str	r3, [r4, #4]
 8011298:	6014      	str	r4, [r2, #0]
 801129a:	b003      	add	sp, #12
 801129c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112a0:	f7ff bfe2 	b.w	8011268 <__malloc_unlock>
 80112a4:	42a3      	cmp	r3, r4
 80112a6:	d908      	bls.n	80112ba <_free_r+0x46>
 80112a8:	6825      	ldr	r5, [r4, #0]
 80112aa:	1961      	adds	r1, r4, r5
 80112ac:	428b      	cmp	r3, r1
 80112ae:	bf01      	itttt	eq
 80112b0:	6819      	ldreq	r1, [r3, #0]
 80112b2:	685b      	ldreq	r3, [r3, #4]
 80112b4:	1949      	addeq	r1, r1, r5
 80112b6:	6021      	streq	r1, [r4, #0]
 80112b8:	e7ed      	b.n	8011296 <_free_r+0x22>
 80112ba:	461a      	mov	r2, r3
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	b10b      	cbz	r3, 80112c4 <_free_r+0x50>
 80112c0:	42a3      	cmp	r3, r4
 80112c2:	d9fa      	bls.n	80112ba <_free_r+0x46>
 80112c4:	6811      	ldr	r1, [r2, #0]
 80112c6:	1855      	adds	r5, r2, r1
 80112c8:	42a5      	cmp	r5, r4
 80112ca:	d10b      	bne.n	80112e4 <_free_r+0x70>
 80112cc:	6824      	ldr	r4, [r4, #0]
 80112ce:	4421      	add	r1, r4
 80112d0:	1854      	adds	r4, r2, r1
 80112d2:	42a3      	cmp	r3, r4
 80112d4:	6011      	str	r1, [r2, #0]
 80112d6:	d1e0      	bne.n	801129a <_free_r+0x26>
 80112d8:	681c      	ldr	r4, [r3, #0]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	6053      	str	r3, [r2, #4]
 80112de:	4421      	add	r1, r4
 80112e0:	6011      	str	r1, [r2, #0]
 80112e2:	e7da      	b.n	801129a <_free_r+0x26>
 80112e4:	d902      	bls.n	80112ec <_free_r+0x78>
 80112e6:	230c      	movs	r3, #12
 80112e8:	6003      	str	r3, [r0, #0]
 80112ea:	e7d6      	b.n	801129a <_free_r+0x26>
 80112ec:	6825      	ldr	r5, [r4, #0]
 80112ee:	1961      	adds	r1, r4, r5
 80112f0:	428b      	cmp	r3, r1
 80112f2:	bf04      	itt	eq
 80112f4:	6819      	ldreq	r1, [r3, #0]
 80112f6:	685b      	ldreq	r3, [r3, #4]
 80112f8:	6063      	str	r3, [r4, #4]
 80112fa:	bf04      	itt	eq
 80112fc:	1949      	addeq	r1, r1, r5
 80112fe:	6021      	streq	r1, [r4, #0]
 8011300:	6054      	str	r4, [r2, #4]
 8011302:	e7ca      	b.n	801129a <_free_r+0x26>
 8011304:	b003      	add	sp, #12
 8011306:	bd30      	pop	{r4, r5, pc}
 8011308:	200076d4 	.word	0x200076d4

0801130c <_realloc_r>:
 801130c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011310:	4680      	mov	r8, r0
 8011312:	4614      	mov	r4, r2
 8011314:	460e      	mov	r6, r1
 8011316:	b921      	cbnz	r1, 8011322 <_realloc_r+0x16>
 8011318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801131c:	4611      	mov	r1, r2
 801131e:	f7ff bc0f 	b.w	8010b40 <_malloc_r>
 8011322:	b92a      	cbnz	r2, 8011330 <_realloc_r+0x24>
 8011324:	f7ff ffa6 	bl	8011274 <_free_r>
 8011328:	4625      	mov	r5, r4
 801132a:	4628      	mov	r0, r5
 801132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011330:	f000 f81b 	bl	801136a <_malloc_usable_size_r>
 8011334:	4284      	cmp	r4, r0
 8011336:	4607      	mov	r7, r0
 8011338:	d802      	bhi.n	8011340 <_realloc_r+0x34>
 801133a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801133e:	d812      	bhi.n	8011366 <_realloc_r+0x5a>
 8011340:	4621      	mov	r1, r4
 8011342:	4640      	mov	r0, r8
 8011344:	f7ff fbfc 	bl	8010b40 <_malloc_r>
 8011348:	4605      	mov	r5, r0
 801134a:	2800      	cmp	r0, #0
 801134c:	d0ed      	beq.n	801132a <_realloc_r+0x1e>
 801134e:	42bc      	cmp	r4, r7
 8011350:	4622      	mov	r2, r4
 8011352:	4631      	mov	r1, r6
 8011354:	bf28      	it	cs
 8011356:	463a      	movcs	r2, r7
 8011358:	f7ff fb7a 	bl	8010a50 <memcpy>
 801135c:	4631      	mov	r1, r6
 801135e:	4640      	mov	r0, r8
 8011360:	f7ff ff88 	bl	8011274 <_free_r>
 8011364:	e7e1      	b.n	801132a <_realloc_r+0x1e>
 8011366:	4635      	mov	r5, r6
 8011368:	e7df      	b.n	801132a <_realloc_r+0x1e>

0801136a <_malloc_usable_size_r>:
 801136a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801136e:	1f18      	subs	r0, r3, #4
 8011370:	2b00      	cmp	r3, #0
 8011372:	bfbc      	itt	lt
 8011374:	580b      	ldrlt	r3, [r1, r0]
 8011376:	18c0      	addlt	r0, r0, r3
 8011378:	4770      	bx	lr
	...

0801137c <_sbrk>:
 801137c:	4a04      	ldr	r2, [pc, #16]	; (8011390 <_sbrk+0x14>)
 801137e:	6811      	ldr	r1, [r2, #0]
 8011380:	4603      	mov	r3, r0
 8011382:	b909      	cbnz	r1, 8011388 <_sbrk+0xc>
 8011384:	4903      	ldr	r1, [pc, #12]	; (8011394 <_sbrk+0x18>)
 8011386:	6011      	str	r1, [r2, #0]
 8011388:	6810      	ldr	r0, [r2, #0]
 801138a:	4403      	add	r3, r0
 801138c:	6013      	str	r3, [r2, #0]
 801138e:	4770      	bx	lr
 8011390:	200076e0 	.word	0x200076e0
 8011394:	200076e8 	.word	0x200076e8

08011398 <_init>:
 8011398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139a:	bf00      	nop
 801139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801139e:	bc08      	pop	{r3}
 80113a0:	469e      	mov	lr, r3
 80113a2:	4770      	bx	lr

080113a4 <_fini>:
 80113a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a6:	bf00      	nop
 80113a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113aa:	bc08      	pop	{r3}
 80113ac:	469e      	mov	lr, r3
 80113ae:	4770      	bx	lr
