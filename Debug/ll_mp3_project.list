
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  0801388c  0801388c  0002388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014420  08014420  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08014420  08014420  00024420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014428  08014428  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014428  08014428  00024428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801442c  0801442c  0002442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08014430  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00007c84  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007d00  20007d00  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004ac66  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009446  00000000  00000000  0007ad12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000046c0  00000000  00000000  00084158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004210  00000000  00000000  00088818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003495d  00000000  00000000  0008ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042556  00000000  00000000  000c1385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d2cf  00000000  00000000  001038db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00220baa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000131d0  00000000  00000000  00220bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  00233dcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013874 	.word	0x08013874

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08013874 	.word	0x08013874

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20002f7c 	.word	0x20002f7c
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <ds3231_register_driver>:
static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size);

static inline uint8_t B2D(uint8_t bcd);
static inline uint8_t D2B(uint8_t decimal);

void ds3231_register_driver(i2cdrv_t* drv) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	ds3231i2cdrv = drv;
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <ds3231_register_driver+0x1c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000098 	.word	0x20000098

08000654 <ds3231_get_time>:

bool ds3231_get_time(ds3231_time_t *info) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t data[7];

	if(ds3231_read_reg(DS3231_REG_SEC, data, 7) != true) {
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2207      	movs	r2, #7
 8000662:	4619      	mov	r1, r3
 8000664:	2000      	movs	r0, #0
 8000666:	f000 f85d 	bl	8000724 <ds3231_read_reg>
 800066a:	4603      	mov	r3, r0
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d004      	beq.n	8000680 <ds3231_get_time+0x2c>
		hal_cli_printf("ds3231 read register failed");
 8000676:	482a      	ldr	r0, [pc, #168]	; (8000720 <ds3231_get_time+0xcc>)
 8000678:	f00e fae8 	bl	800ec4c <hal_cli_printf>
		return false;
 800067c:	2300      	movs	r3, #0
 800067e:	e04a      	b.n	8000716 <ds3231_get_time+0xc2>
	}

	info->sec = B2D(data[0] & 0x7F);
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f865 	bl	8000758 <B2D>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	701a      	strb	r2, [r3, #0]
	info->min = B2D(data[1] & 0x7F);
 8000696:	7a7b      	ldrb	r3, [r7, #9]
 8000698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f85a 	bl	8000758 <B2D>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	705a      	strb	r2, [r3, #1]
	info->hour = B2D(data[2] & 0x3F);
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f84f 	bl	8000758 <B2D>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	709a      	strb	r2, [r3, #2]
	info->day = B2D(data[3] & 0x07);
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f844 	bl	8000758 <B2D>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	70da      	strb	r2, [r3, #3]
	info->date = B2D(data[4] & 0x3F);
 80006d8:	7b3b      	ldrb	r3, [r7, #12]
 80006da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f839 	bl	8000758 <B2D>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	711a      	strb	r2, [r3, #4]
	info->month = B2D(data[5] & 0x1F);
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f82e 	bl	8000758 <B2D>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	715a      	strb	r2, [r3, #5]
	info->year = B2D(data[6] & 0xFF);
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f826 	bl	8000758 <B2D>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	719a      	strb	r2, [r3, #6]

	return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0801388c 	.word	0x0801388c

08000724 <ds3231_read_reg>:
		hal_cli_printf("ds3231 day to string argument error");
		return 0;
	}
}

static bool ds3231_read_reg(uint8_t reg, uint8_t* data, uint32_t size) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af02      	add	r7, sp, #8
 800072a:	4603      	mov	r3, r0
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	73fb      	strb	r3, [r7, #15]
	return hal_i2c_receive(
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ds3231_read_reg+0x30>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	7bfa      	ldrb	r2, [r7, #15]
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	21d0      	movs	r1, #208	; 0xd0
 8000744:	f00f ffd4 	bl	80106f0 <hal_i2c_receive>
 8000748:	4603      	mov	r3, r0
			DS3231_DEV_ADDR,
			reg,
			data,
			size,
			DS3231_I2C_TIMEOUT);
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000098 	.word	0x20000098

08000758 <B2D>:

static inline uint8_t B2D(uint8_t bcd) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	091b      	lsrs	r3, r3, #4
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4413      	add	r3, r2
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <icon_draw_play>:

const uint8_t icon_pause[] = {
		0x00, 0x24, 0x3c, 0x3c, 0x3c, 0x3c, 0x24, 0x00
};

void icon_draw_play(u8g2_t* handle, u8g2_uint_t x, u8g2_uint_t y) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
 8000798:	4613      	mov	r3, r2
 800079a:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(handle,1);
 800079c:	2101      	movs	r1, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f00d fa2a 	bl	800dbf8 <u8g2_SetDrawColor>
    u8g2_SetBitmapMode(handle,1);
 80007a4:	2101      	movs	r1, #1
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f00c ff75 	bl	800d696 <u8g2_SetBitmapMode>
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_play);
 80007ac:	78ba      	ldrb	r2, [r7, #2]
 80007ae:	78f9      	ldrb	r1, [r7, #3]
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <icon_draw_play+0x44>)
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	2308      	movs	r3, #8
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f00c ffe9 	bl	800d792 <u8g2_DrawBitmap>
    u8g2_SendBuffer(handle);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f00d f899 	bl	800d8f8 <u8g2_SendBuffer>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08013d88 	.word	0x08013d88

080007d4 <icon_draw_pause>:

void icon_draw_pause(u8g2_t* handle, u8g2_uint_t x, u8g2_uint_t y) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(handle,1);
 80007e4:	2101      	movs	r1, #1
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f00d fa06 	bl	800dbf8 <u8g2_SetDrawColor>
    u8g2_SetBitmapMode(handle,1);
 80007ec:	2101      	movs	r1, #1
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f00c ff51 	bl	800d696 <u8g2_SetBitmapMode>
    u8g2_DrawBitmap(handle, x, y, 1, 8,  icon_pause);
 80007f4:	78ba      	ldrb	r2, [r7, #2]
 80007f6:	78f9      	ldrb	r1, [r7, #3]
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <icon_draw_pause+0x44>)
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2308      	movs	r3, #8
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f00c ffc5 	bl	800d792 <u8g2_DrawBitmap>
    u8g2_SendBuffer(handle);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f00d f875 	bl	800d8f8 <u8g2_SendBuffer>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	08013d90 	.word	0x08013d90

0800081c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	619a      	str	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	041a      	lsls	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	619a      	str	r2, [r3, #24]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <u8x8_stm32_gpio_and_delay>:
#define SSD1306_TIMEOUT		100
#define SSD1306_SPIDRV		&spi2drv

// u8g2 gpio & delay control callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	72fb      	strb	r3, [r7, #11]
 8000866:	4613      	mov	r3, r2
 8000868:	72bb      	strb	r3, [r7, #10]
  /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
  switch(msg)
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	3b28      	subs	r3, #40	; 0x28
 800086e:	2b23      	cmp	r3, #35	; 0x23
 8000870:	d87a      	bhi.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <u8x8_stm32_gpio_and_delay+0x20>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000969 	.word	0x08000969
 800087c:	08000909 	.word	0x08000909
 8000880:	08000969 	.word	0x08000969
 8000884:	08000969 	.word	0x08000969
 8000888:	08000969 	.word	0x08000969
 800088c:	08000969 	.word	0x08000969
 8000890:	08000969 	.word	0x08000969
 8000894:	08000969 	.word	0x08000969
 8000898:	08000969 	.word	0x08000969
 800089c:	08000969 	.word	0x08000969
 80008a0:	08000969 	.word	0x08000969
 80008a4:	08000969 	.word	0x08000969
 80008a8:	08000969 	.word	0x08000969
 80008ac:	08000969 	.word	0x08000969
 80008b0:	08000969 	.word	0x08000969
 80008b4:	08000969 	.word	0x08000969
 80008b8:	08000969 	.word	0x08000969
 80008bc:	08000969 	.word	0x08000969
 80008c0:	08000969 	.word	0x08000969
 80008c4:	08000969 	.word	0x08000969
 80008c8:	08000969 	.word	0x08000969
 80008cc:	08000969 	.word	0x08000969
 80008d0:	08000969 	.word	0x08000969
 80008d4:	08000969 	.word	0x08000969
 80008d8:	08000969 	.word	0x08000969
 80008dc:	08000969 	.word	0x08000969
 80008e0:	08000969 	.word	0x08000969
 80008e4:	08000969 	.word	0x08000969
 80008e8:	08000969 	.word	0x08000969
 80008ec:	08000969 	.word	0x08000969
 80008f0:	08000969 	.word	0x08000969
 80008f4:	08000969 	.word	0x08000969
 80008f8:	08000969 	.word	0x08000969
 80008fc:	0800091b 	.word	0x0800091b
 8000900:	08000935 	.word	0x08000935
 8000904:	0800094f 	.word	0x0800094f
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    /* Insert codes for initialization */
    break;
  case U8X8_MSG_DELAY_MILLI:
    /* ms Delay */
	hal_delay_us(10*arg_int);
 8000908:	7aba      	ldrb	r2, [r7, #10]
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f00e fc56 	bl	800f1c4 <hal_delay_us>
    break;
 8000918:	e026      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_CS:
    /* Insert codes for SS pin control */
    if(arg_int) {
 800091a:	7abb      	ldrb	r3, [r7, #10]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d004      	beq.n	800092a <u8x8_stm32_gpio_and_delay+0xd2>
      LL_GPIO_SetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 8000920:	2104      	movs	r1, #4
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000924:	f7ff ff7a 	bl	800081c <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
    }
    break;
 8000928:	e01e      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_CS_GPIO_PORT, LL_GPIO_PIN_2);
 800092a:	2104      	movs	r1, #4
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 800092e:	f7ff ff83 	bl	8000838 <LL_GPIO_ResetOutputPin>
    break;
 8000932:	e019      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_DC:
    /* Insert codes for DC pin control */
    if(arg_int) {
 8000934:	7abb      	ldrb	r3, [r7, #10]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d004      	beq.n	8000944 <u8x8_stm32_gpio_and_delay+0xec>
      LL_GPIO_SetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 800093a:	2102      	movs	r1, #2
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 800093e:	f7ff ff6d 	bl	800081c <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
    }
    break;
 8000942:	e011      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
      LL_GPIO_ResetOutputPin(SSD1306_DC_GPIO_PORT, SSD1306_DC_PIN);
 8000944:	2102      	movs	r1, #2
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000948:	f7ff ff76 	bl	8000838 <LL_GPIO_ResetOutputPin>
    break;
 800094c:	e00c      	b.n	8000968 <u8x8_stm32_gpio_and_delay+0x110>
  case U8X8_MSG_GPIO_RESET:
    /* Insert codes for RST pin control */
    if(arg_int) {
 800094e:	7abb      	ldrb	r3, [r7, #10]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d004      	beq.n	800095e <u8x8_stm32_gpio_and_delay+0x106>
      LL_GPIO_SetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 8000954:	2101      	movs	r1, #1
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000958:	f7ff ff60 	bl	800081c <LL_GPIO_SetOutputPin>
    } else {
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
    }
    break;
 800095c:	e003      	b.n	8000966 <u8x8_stm32_gpio_and_delay+0x10e>
      LL_GPIO_ResetOutputPin(SSD1306_RESET_GPIO_PORT, SSD1306_RESET_PIN);
 800095e:	2101      	movs	r1, #1
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <u8x8_stm32_gpio_and_delay+0x11c>)
 8000962:	f7ff ff69 	bl	8000838 <LL_GPIO_ResetOutputPin>
    break;
 8000966:	bf00      	nop
  }
  return 1;
 8000968:	2301      	movs	r3, #1
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020800 	.word	0x40020800

08000978 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	72fb      	strb	r3, [r7, #11]
 8000986:	4613      	mov	r3, r2
 8000988:	72bb      	strb	r3, [r7, #10]
  uint8_t* data = arg_ptr;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	617b      	str	r3, [r7, #20]

  switch(msg) {
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	3b14      	subs	r3, #20
 8000992:	2b0c      	cmp	r3, #12
 8000994:	d842      	bhi.n	8000a1c <u8x8_byte_stm32_hw_spi+0xa4>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <u8x8_byte_stm32_hw_spi+0x24>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	08000a21 	.word	0x08000a21
 80009a0:	08000a1d 	.word	0x08000a1d
 80009a4:	08000a1d 	.word	0x08000a1d
 80009a8:	080009d1 	.word	0x080009d1
 80009ac:	080009ed 	.word	0x080009ed
 80009b0:	08000a05 	.word	0x08000a05
 80009b4:	08000a1d 	.word	0x08000a1d
 80009b8:	08000a1d 	.word	0x08000a1d
 80009bc:	08000a1d 	.word	0x08000a1d
 80009c0:	08000a1d 	.word	0x08000a1d
 80009c4:	08000a1d 	.word	0x08000a1d
 80009c8:	08000a1d 	.word	0x08000a1d
 80009cc:	080009df 	.word	0x080009df
  case U8X8_MSG_BYTE_SEND:
    /* Insert codes to transmit data */
	hal_spi_transfer(SSD1306_SPIDRV, data, arg_int, SSD1306_TIMEOUT);
 80009d0:	7aba      	ldrb	r2, [r7, #10]
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	6979      	ldr	r1, [r7, #20]
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <u8x8_byte_stm32_hw_spi+0xb4>)
 80009d8:	f010 feac 	bl	8011734 <hal_spi_transfer>
    break;
 80009dc:	e021      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_INIT:
    /* Insert codes to begin SPI transmission */
    break;
  case U8X8_MSG_BYTE_SET_DC:
    /* Control DC pin, U8X8_MSG_GPIO_DC will be called */
    u8x8_gpio_SetDC(u8x8, arg_int);
 80009de:	7abb      	ldrb	r3, [r7, #10]
 80009e0:	461a      	mov	r2, r3
 80009e2:	214a      	movs	r1, #74	; 0x4a
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f00d fe3c 	bl	800e662 <u8x8_gpio_call>
    break;
 80009ea:	e01a      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_START_TRANSFER:
    /* Select slave, U8X8_MSG_GPIO_CS will be called */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	2149      	movs	r1, #73	; 0x49
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f00d fe33 	bl	800e662 <u8x8_gpio_call>
    hal_delay_us(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f00e fbe1 	bl	800f1c4 <hal_delay_us>
    break;
 8000a02:	e00e      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  case U8X8_MSG_BYTE_END_TRANSFER:
	hal_delay_us(100);
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f00e fbdd 	bl	800f1c4 <hal_delay_us>
    /* Insert codes to end SPI transmission */
    u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	785b      	ldrb	r3, [r3, #1]
 8000a10:	461a      	mov	r2, r3
 8000a12:	2149      	movs	r1, #73	; 0x49
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f00d fe24 	bl	800e662 <u8x8_gpio_call>
    break;
 8000a1a:	e002      	b.n	8000a22 <u8x8_byte_stm32_hw_spi+0xaa>
  default:
    return 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e001      	b.n	8000a24 <u8x8_byte_stm32_hw_spi+0xac>
    break;
 8000a20:	bf00      	nop
  }
  return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20005a78 	.word	0x20005a78

08000a30 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <LL_GPIO_IsInputPinSet>:
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	4013      	ands	r3, r2
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	889a      	ldrh	r2, [r3, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8000a9c:	e006      	b.n	8000aac <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	889b      	ldrh	r3, [r3, #4]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	0412      	lsls	r2, r2, #16
 8000aaa:	619a      	str	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <hal_gpio_readpin>:
	} else {
		return false;
	}
}

static inline uint32_t hal_gpio_readpin(const GpioPin* gpio) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	return LL_GPIO_IsInputPinSet(gpio->port, gpio->pin);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	889b      	ldrh	r3, [r3, #4]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4610      	mov	r0, r2
 8000acc:	f7ff ffc3 	bl	8000a56 <LL_GPIO_IsInputPinSet>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <VS1053_Init>:
/* endFill byte is required to stop playing */
uint8_t endFillByte;

/* Initialize VS1053 */
bool VS1053_Init()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	uint16_t status = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	80fb      	strh	r3, [r7, #6]

	XCS_HIGH;		    /* XCS High */
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4841      	ldr	r0, [pc, #260]	; (8000bf0 <VS1053_Init+0x114>)
 8000aea:	f7ff ffc9 	bl	8000a80 <hal_gpio_write>
	XDCS_HIGH;		    /* XDCS High */
 8000aee:	2101      	movs	r1, #1
 8000af0:	4840      	ldr	r0, [pc, #256]	; (8000bf4 <VS1053_Init+0x118>)
 8000af2:	f7ff ffc5 	bl	8000a80 <hal_gpio_write>
	VS1053_Reset();     /* Hard Reset */
 8000af6:	f000 f883 	bl	8000c00 <VS1053_Reset>

	/* MP3 Mode GPIO configuration */
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC017)) return false; /* GPIO direction */
 8000afa:	2307      	movs	r3, #7
 8000afc:	f24c 0117 	movw	r1, #49175	; 0xc017
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f9a1 	bl	8000e48 <VS1053_SciWrite>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <VS1053_Init+0x3a>
 8000b12:	2300      	movs	r3, #0
 8000b14:	e067      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 3)) return false;
 8000b16:	2306      	movs	r3, #6
 8000b18:	2103      	movs	r1, #3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f994 	bl	8000e48 <VS1053_SciWrite>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f083 0301 	eor.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <VS1053_Init+0x54>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e05a      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC019)) return false; /* GPIO output */
 8000b30:	2307      	movs	r3, #7
 8000b32:	f24c 0119 	movw	r1, #49177	; 0xc019
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f986 	bl	8000e48 <VS1053_SciWrite>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f083 0301 	eor.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <VS1053_Init+0x70>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e04c      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f979 	bl	8000e48 <VS1053_SciWrite>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f083 0301 	eor.w	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <VS1053_Init+0x8a>
 8000b62:	2300      	movs	r3, #0
 8000b64:	e03f      	b.n	8000be6 <VS1053_Init+0x10a>

	/* Soft reset */
	if(!VS1053_SoftReset()) return false;
 8000b66:	f000 f86d 	bl	8000c44 <VS1053_SoftReset>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <VS1053_Init+0x9e>
 8000b76:	2300      	movs	r3, #0
 8000b78:	e035      	b.n	8000be6 <VS1053_Init+0x10a>

	/* x4.0 Clock */
	if(!VS1053_SciWrite(VS1053_REG_CLOCKF, 0x8000)) return false;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f961 	bl	8000e48 <VS1053_SciWrite>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f083 0301 	eor.w	r3, r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <VS1053_Init+0xba>
 8000b92:	2300      	movs	r3, #0
 8000b94:	e027      	b.n	8000be6 <VS1053_Init+0x10a>

	LL_SPI_SetBaudRatePrescaler(vs1053spidrv->spi, LL_SPI_BAUDRATEPRESCALER_DIV32); /* 90MHz / 16 = about 5.6mhz */
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <VS1053_Init+0x11c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff46 	bl	8000a30 <LL_SPI_SetBaudRatePrescaler>

	/* Read endFill Byte */
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f94c 	bl	8000e48 <VS1053_SciWrite>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <VS1053_Init+0xe4>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e012      	b.n	8000be6 <VS1053_Init+0x10a>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000bc0:	2206      	movs	r2, #6
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	f000 f984 	bl	8000ed4 <VS1053_SciRead>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f083 0301 	eor.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <VS1053_Init+0x100>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e004      	b.n	8000be6 <VS1053_Init+0x10a>
	endFillByte = regVal & 0xFF;
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <VS1053_Init+0x120>)
 8000be2:	701a      	strb	r2, [r3, #0]

	return true;
 8000be4:	2301      	movs	r3, #1
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08014344 	.word	0x08014344
 8000bf4:	0801434c 	.word	0x0801434c
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	2000009c 	.word	0x2000009c

08000c00 <VS1053_Reset>:

/* Hard reset */
void VS1053_Reset()
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8000c06:	23ff      	movs	r3, #255	; 0xff
 8000c08:	71fb      	strb	r3, [r7, #7]
	XRST_LOW;		                                    /* XRST Low */
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <VS1053_Reset+0x3c>)
 8000c0e:	f7ff ff37 	bl	8000a80 <hal_gpio_write>
	hal_spi_transfer(vs1053spidrv, &dummy, 1, VS1053_SPI_TIMEOUT); /* Tx Dummy */
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <VS1053_Reset+0x40>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f010 fd8a 	bl	8011734 <hal_spi_transfer>
	LL_mDelay(10);										/* 10ms Delay */
 8000c20:	200a      	movs	r0, #10
 8000c22:	f004 fb33 	bl	800528c <LL_mDelay>
	XRST_HIGH;			                                /* XRST High */
 8000c26:	2101      	movs	r1, #1
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <VS1053_Reset+0x3c>)
 8000c2a:	f7ff ff29 	bl	8000a80 <hal_gpio_write>
	LL_mDelay(10);
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f004 fb2c 	bl	800528c <LL_mDelay>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	08014354 	.word	0x08014354
 8000c40:	20000000 	.word	0x20000000

08000c44 <VS1053_SoftReset>:

/* Soft reset */
bool VS1053_SoftReset()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_MODE, 0x4804)) return false;	/* SM LINE1 | SM SDINEW | SM RESET */
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f644 0104 	movw	r1, #18436	; 0x4804
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f8fa 	bl	8000e48 <VS1053_SciWrite>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <VS1053_SoftReset+0x20>
 8000c60:	2300      	movs	r3, #0
 8000c62:	e003      	b.n	8000c6c <VS1053_SoftReset+0x28>
	LL_mDelay(100);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f004 fb11 	bl	800528c <LL_mDelay>
	return true;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <VS1053_SetVolume>:

/* Volume control */
bool VS1053_SetVolume(uint8_t volumeLeft, uint8_t volumeRight)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	460a      	mov	r2, r1
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
    uint16_t volume;
    volume = ( volumeLeft << 8 ) + volumeRight;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	81fb      	strh	r3, [r7, #14]

    if(!VS1053_SciWrite(VS1053_REG_VOL, volume)) return false;
 8000c90:	220b      	movs	r2, #11
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f000 f8d6 	bl	8000e48 <VS1053_SciWrite>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <VS1053_SetVolume+0x3c>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e000      	b.n	8000cae <VS1053_SetVolume+0x3e>
    return true;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <VS1053_SetMode>:


/* Mode control */
bool VS1053_SetMode(uint16_t mode)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_MODE, mode)) return false;
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	f000 f8be 	bl	8000e48 <VS1053_SciWrite>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f083 0301 	eor.w	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <VS1053_SetMode+0x26>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e000      	b.n	8000cde <VS1053_SetMode+0x28>
	return true;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <VS1053_GetMode>:

bool VS1053_GetMode(uint16_t *mode)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	if(!VS1053_SciRead(VS1053_REG_MODE, mode)) return false;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f8ee 	bl	8000ed4 <VS1053_SciRead>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <VS1053_GetMode+0x22>
 8000d04:	2300      	movs	r3, #0
 8000d06:	e000      	b.n	8000d0a <VS1053_GetMode+0x24>
	return true;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <VS1053_AutoResync>:

/* Resync control */
bool VS1053_AutoResync()
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E29)) return false; /* Auto Resync */
 8000d16:	2307      	movs	r3, #7
 8000d18:	f641 6129 	movw	r1, #7721	; 0x1e29
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 f893 	bl	8000e48 <VS1053_SciWrite>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <VS1053_AutoResync+0x20>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e00d      	b.n	8000d4e <VS1053_AutoResync+0x3c>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8000d32:	2306      	movs	r3, #6
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f886 	bl	8000e48 <VS1053_SciWrite>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <VS1053_AutoResync+0x3a>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e000      	b.n	8000d4e <VS1053_AutoResync+0x3c>
	return true;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <VS1053_SetDecodeTime>:

/* Set decode time */
bool VS1053_SetDecodeTime(uint16_t time)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f000 f870 	bl	8000e48 <VS1053_SciWrite>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f083 0301 	eor.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <VS1053_SetDecodeTime+0x26>
 8000d74:	2300      	movs	r3, #0
 8000d76:	e00e      	b.n	8000d96 <VS1053_SetDecodeTime+0x44>
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8000d78:	2204      	movs	r2, #4
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4610      	mov	r0, r2
 8000d80:	f000 f862 	bl	8000e48 <VS1053_SciWrite>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <VS1053_SetDecodeTime+0x42>
 8000d90:	2300      	movs	r3, #0
 8000d92:	e000      	b.n	8000d96 <VS1053_SetDecodeTime+0x44>
	return true;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <VS1053_GetDecodeTime>:

uint16_t VS1053_GetDecodeTime(void) {
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
	uint16_t time = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciRead(VS1053_REG_DECODE_TIME, &time)) return false;
 8000da8:	2204      	movs	r2, #4
 8000daa:	1dbb      	adds	r3, r7, #6
 8000dac:	4619      	mov	r1, r3
 8000dae:	4610      	mov	r0, r2
 8000db0:	f000 f890 	bl	8000ed4 <VS1053_SciRead>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <VS1053_GetDecodeTime+0x26>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e000      	b.n	8000dc6 <VS1053_GetDecodeTime+0x28>
	return time;
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <VS1053_SendEndFill>:

/* Send endfill bytes */
bool VS1053_SendEndFill(uint16_t num)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8000dda:	2307      	movs	r3, #7
 8000ddc:	f641 6106 	movw	r1, #7686	; 0x1e06
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f831 	bl	8000e48 <VS1053_SciWrite>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <VS1053_SendEndFill+0x26>
 8000df2:	2300      	movs	r3, #0
 8000df4:	e022      	b.n	8000e3c <VS1053_SendEndFill+0x6c>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 8000df6:	2206      	movs	r2, #6
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4610      	mov	r0, r2
 8000e00:	f000 f868 	bl	8000ed4 <VS1053_SciRead>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f083 0301 	eor.w	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <VS1053_SendEndFill+0x44>
 8000e10:	2300      	movs	r3, #0
 8000e12:	e013      	b.n	8000e3c <VS1053_SendEndFill+0x6c>
	endFillByte = regVal & 0xFF;
 8000e14:	89bb      	ldrh	r3, [r7, #12]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <VS1053_SendEndFill+0x74>)
 8000e1a:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < num; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	81fb      	strh	r3, [r7, #14]
 8000e20:	e007      	b.n	8000e32 <VS1053_SendEndFill+0x62>
	{
		VS1053_SdiWrite(endFillByte);
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <VS1053_SendEndFill+0x74>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f8ca 	bl	8000fc0 <VS1053_SdiWrite>
	for(uint16_t i = 0; i < num; i++)
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	81fb      	strh	r3, [r7, #14]
 8000e32:	89fa      	ldrh	r2, [r7, #14]
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d3f3      	bcc.n	8000e22 <VS1053_SendEndFill+0x52>
	}
	return true;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000009c 	.word	0x2000009c

08000e48 <VS1053_SciWrite>:
	else return true; // busy
}

/* SCI Tx */
bool VS1053_SciWrite( uint8_t address, uint16_t input )
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	buffer[0] = VS1053_WRITE_CMD;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	737b      	strb	r3, [r7, #13]
	buffer[2] = input >> 8;			/* Input MSB */
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	73bb      	strb	r3, [r7, #14]
	buffer[3] = input & 0x00FF;		/* Input LSB */
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	73fb      	strb	r3, [r7, #15]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000e70:	bf00      	nop
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <VS1053_SciWrite+0x80>)
 8000e74:	f7ff fe20 	bl	8000ab8 <hal_gpio_readpin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <VS1053_SciWrite+0x2a>

	XCS_LOW;			/* XCS Low */
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <VS1053_SciWrite+0x84>)
 8000e82:	f7ff fdfd 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, buffer, sizeof(buffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <VS1053_SciWrite+0x88>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	f107 010c 	add.w	r1, r7, #12
 8000e8e:	2364      	movs	r3, #100	; 0x64
 8000e90:	2204      	movs	r2, #4
 8000e92:	f010 fc4f 	bl	8011734 <hal_spi_transfer>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f083 0301 	eor.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <VS1053_SciWrite+0x5e>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e00b      	b.n	8000ebe <VS1053_SciWrite+0x76>
	XCS_HIGH;			/* XCS High */
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <VS1053_SciWrite+0x84>)
 8000eaa:	f7ff fde9 	bl	8000a80 <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000eae:	bf00      	nop
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <VS1053_SciWrite+0x80>)
 8000eb2:	f7ff fe01 	bl	8000ab8 <hal_gpio_readpin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f9      	beq.n	8000eb0 <VS1053_SciWrite+0x68>

	return true;
 8000ebc:	2301      	movs	r3, #1
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	0801435c 	.word	0x0801435c
 8000ecc:	08014344 	.word	0x08014344
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <VS1053_SciRead>:

/* SCI TxRx */
bool VS1053_SciRead( uint8_t address, uint16_t *res)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8000ee0:	23ff      	movs	r3, #255	; 0xff
 8000ee2:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];

	txBuffer[0] = VS1053_READ_CMD;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = address;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	737b      	strb	r3, [r7, #13]

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000eec:	bf00      	nop
 8000eee:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <VS1053_SciRead+0xe0>)
 8000ef0:	f7ff fde2 	bl	8000ab8 <hal_gpio_readpin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f9      	beq.n	8000eee <VS1053_SciRead+0x1a>

	XCS_LOW;        /* XCS Low */
 8000efa:	2100      	movs	r1, #0
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <VS1053_SciRead+0xe4>)
 8000efe:	f7ff fdbf 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, txBuffer, sizeof(txBuffer), VS1053_SPI_TIMEOUT) != true) return false;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <VS1053_SciRead+0xe8>)
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	f107 010c 	add.w	r1, r7, #12
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f010 fc11 	bl	8011734 <hal_spi_transfer>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f083 0301 	eor.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <VS1053_SciRead+0x4e>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e044      	b.n	8000fac <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[0], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <VS1053_SciRead+0xe8>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 0208 	add.w	r2, r7, #8
 8000f2a:	f107 010f 	add.w	r1, r7, #15
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	f010 fc58 	bl	80117e8 <hal_spi_txrx>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <VS1053_SciRead+0x74>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e031      	b.n	8000fac <VS1053_SciRead+0xd8>
	if(hal_spi_txrx(vs1053spidrv, &dummy, &rxBuffer[1], 1, VS1053_SPI_TIMEOUT) != true) return false;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <VS1053_SciRead+0xe8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	f107 010f 	add.w	r1, r7, #15
 8000f56:	2364      	movs	r3, #100	; 0x64
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f010 fc44 	bl	80117e8 <hal_spi_txrx>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f083 0301 	eor.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <VS1053_SciRead+0x9c>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e01d      	b.n	8000fac <VS1053_SciRead+0xd8>
	XCS_HIGH;       /* XCS High */
 8000f70:	2101      	movs	r1, #1
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <VS1053_SciRead+0xe4>)
 8000f74:	f7ff fd84 	bl	8000a80 <hal_gpio_write>

	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000f78:	bf00      	nop
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <VS1053_SciRead+0xe0>)
 8000f7c:	f7ff fd9c 	bl	8000ab8 <hal_gpio_readpin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f9      	beq.n	8000f7a <VS1053_SciRead+0xa6>

	*res = rxBuffer[0];     /* Received data */
 8000f86:	7a3b      	ldrb	r3, [r7, #8]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	801a      	strh	r2, [r3, #0]
	*res <<= 8;				/* MSB */
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	801a      	strh	r2, [r3, #0]
	*res |= rxBuffer[1];	/* LSB */
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	881a      	ldrh	r2, [r3, #0]
 8000f9e:	7a7b      	ldrb	r3, [r7, #9]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	801a      	strh	r2, [r3, #0]

	return true;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0801435c 	.word	0x0801435c
 8000fb8:	08014344 	.word	0x08014344
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <VS1053_SdiWrite>:

/* SDI Tx */
bool VS1053_SdiWrite( uint8_t input )
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8000fca:	bf00      	nop
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <VS1053_SdiWrite+0x50>)
 8000fce:	f7ff fd73 	bl	8000ab8 <hal_gpio_readpin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f9      	beq.n	8000fcc <VS1053_SdiWrite+0xc>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8000fd8:	2100      	movs	r1, #0
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <VS1053_SdiWrite+0x54>)
 8000fdc:	f7ff fd50 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, &input, 1, VS1053_SPI_TIMEOUT) != true) return false;		/* SPI Tx 1 byte */
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <VS1053_SdiWrite+0x58>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	1df9      	adds	r1, r7, #7
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f010 fba3 	bl	8011734 <hal_spi_transfer>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <VS1053_SdiWrite+0x3e>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e004      	b.n	8001008 <VS1053_SdiWrite+0x48>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8000ffe:	2101      	movs	r1, #1
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <VS1053_SdiWrite+0x54>)
 8001002:	f7ff fd3d 	bl	8000a80 <hal_gpio_write>

	return true;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801435c 	.word	0x0801435c
 8001014:	0801434c 	.word	0x0801434c
 8001018:	20000000 	.word	0x20000000

0800101c <VS1053_SdiWrite32>:

/* SDI Tx 32 bytes */
bool VS1053_SdiWrite32( uint8_t *input32 )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	while (hal_gpio_readpin(&gpio_vs1053_dreq) == 0);	/* Wait DREQ High */
 8001024:	bf00      	nop
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <VS1053_SdiWrite32+0x50>)
 8001028:	f7ff fd46 	bl	8000ab8 <hal_gpio_readpin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <VS1053_SdiWrite32+0xa>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8001032:	2100      	movs	r1, #0
 8001034:	480e      	ldr	r0, [pc, #56]	; (8001070 <VS1053_SdiWrite32+0x54>)
 8001036:	f7ff fd23 	bl	8000a80 <hal_gpio_write>
	if(hal_spi_transfer(vs1053spidrv, input32, 32, VS1053_SPI_TIMEOUT) != true) return false; /* SPI Tx 32 bytes */
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <VS1053_SdiWrite32+0x58>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	2220      	movs	r2, #32
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f010 fb76 	bl	8011734 <hal_spi_transfer>
 8001048:	4603      	mov	r3, r0
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <VS1053_SdiWrite32+0x3c>
 8001054:	2300      	movs	r3, #0
 8001056:	e004      	b.n	8001062 <VS1053_SdiWrite32+0x46>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8001058:	2101      	movs	r1, #1
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <VS1053_SdiWrite32+0x54>)
 800105c:	f7ff fd10 	bl	8000a80 <hal_gpio_write>

	return true;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	0801435c 	.word	0x0801435c
 8001070:	0801434c 	.word	0x0801434c
 8001074:	20000000 	.word	0x20000000

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f8fc 	bl	800129e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2005      	movs	r0, #5
 80010a8:	f010 ff1a 	bl	8011ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f010 feec 	bl	8011e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	200000a0 	.word	0x200000a0

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200000a0 	.word	0x200000a0

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff4c 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c6:	f7ff ff61 	bl	800118c <__NVIC_GetPriorityGrouping>
 80012ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	6978      	ldr	r0, [r7, #20]
 80012d2:	f7ff ffb1 	bl	8001238 <NVIC_EncodePriority>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff80 	bl	80011e4 <__NVIC_SetPriority>
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff54 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff fee6 	bl	80010e4 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e099      	b.n	8001458 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2202      	movs	r2, #2
 8001328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001344:	e00f      	b.n	8001366 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001346:	f7ff fecd 	bl	80010e4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b05      	cmp	r3, #5
 8001352:	d908      	bls.n	8001366 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2220      	movs	r2, #32
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2203      	movs	r2, #3
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e078      	b.n	8001458 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e8      	bne.n	8001346 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <HAL_DMA_Init+0x158>)
 8001380:	4013      	ands	r3, r2
 8001382:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d107      	bne.n	80013d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4313      	orrs	r3, r2
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f023 0307 	bic.w	r3, r3, #7
 80013e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d117      	bne.n	800142a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4313      	orrs	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00e      	beq.n	800142a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fa9d 	bl	800194c <DMA_CheckFifoParam>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2240      	movs	r2, #64	; 0x40
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001426:	2301      	movs	r3, #1
 8001428:	e016      	b.n	8001458 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fa54 	bl	80018e0 <DMA_CalcBaseAndBitshift>
 8001438:	4603      	mov	r3, r0
 800143a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	223f      	movs	r2, #63	; 0x3f
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	f010803f 	.word	0xf010803f

08001464 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_DMA_Start_IT+0x26>
 8001486:	2302      	movs	r3, #2
 8001488:	e040      	b.n	800150c <HAL_DMA_Start_IT+0xa8>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d12f      	bne.n	80014fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2202      	movs	r2, #2
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 f9e6 	bl	8001884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	223f      	movs	r2, #63	; 0x3f
 80014be:	409a      	lsls	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0216 	orr.w	r2, r2, #22
 80014d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0208 	orr.w	r2, r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e005      	b.n	800150a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001506:	2302      	movs	r3, #2
 8001508:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800150a:	7dfb      	ldrb	r3, [r7, #23]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d004      	beq.n	8001532 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00c      	b.n	800154c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2205      	movs	r2, #5
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001564:	4b8e      	ldr	r3, [pc, #568]	; (80017a0 <HAL_DMA_IRQHandler+0x248>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a8e      	ldr	r2, [pc, #568]	; (80017a4 <HAL_DMA_IRQHandler+0x24c>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	2208      	movs	r2, #8
 8001584:	409a      	lsls	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01a      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0204 	bic.w	r2, r2, #4
 80015aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	2208      	movs	r2, #8
 80015b2:	409a      	lsls	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2201      	movs	r2, #1
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d012      	beq.n	80015fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2201      	movs	r2, #1
 80015e8:	409a      	lsls	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f043 0202 	orr.w	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2204      	movs	r2, #4
 8001600:	409a      	lsls	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d012      	beq.n	8001630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00b      	beq.n	8001630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	2204      	movs	r2, #4
 800161e:	409a      	lsls	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f043 0204 	orr.w	r2, r3, #4
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2210      	movs	r2, #16
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d043      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d03c      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2210      	movs	r2, #16
 8001654:	409a      	lsls	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d018      	beq.n	800169a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d024      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
 8001686:	e01f      	b.n	80016c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01b      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e016      	b.n	80016c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d107      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0208 	bic.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	2220      	movs	r2, #32
 80016ce:	409a      	lsls	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 808f 	beq.w	80017f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8087 	beq.w	80017f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2220      	movs	r2, #32
 80016f0:	409a      	lsls	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d136      	bne.n	8001770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0216 	bic.w	r2, r2, #22
 8001710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <HAL_DMA_IRQHandler+0x1da>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0208 	bic.w	r2, r2, #8
 8001740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	223f      	movs	r2, #63	; 0x3f
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	2b00      	cmp	r3, #0
 8001764:	d07e      	beq.n	8001864 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
        }
        return;
 800176e:	e079      	b.n	8001864 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01d      	beq.n	80017ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10d      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	2b00      	cmp	r3, #0
 8001792:	d031      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
 800179c:	e02c      	b.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
 800179e:	bf00      	nop
 80017a0:	20000014 	.word	0x20000014
 80017a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
 80017b8:	e01e      	b.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10f      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0210 	bic.w	r2, r2, #16
 80017d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d032      	beq.n	8001866 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d022      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2205      	movs	r2, #5
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	3301      	adds	r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	d307      	bcc.n	8001840 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f2      	bne.n	8001824 <HAL_DMA_IRQHandler+0x2cc>
 800183e:	e000      	b.n	8001842 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001840:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
 8001862:	e000      	b.n	8001866 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001864:	bf00      	nop
    }
  }
}
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d108      	bne.n	80018c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018c2:	e007      	b.n	80018d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3b10      	subs	r3, #16
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <DMA_CalcBaseAndBitshift+0x64>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <DMA_CalcBaseAndBitshift+0x68>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d909      	bls.n	8001922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	1d1a      	adds	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	659a      	str	r2, [r3, #88]	; 0x58
 8001920:	e007      	b.n	8001932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	aaaaaaab 	.word	0xaaaaaaab
 8001948:	08013d98 	.word	0x08013d98

0800194c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11f      	bne.n	80019a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d856      	bhi.n	8001a1a <DMA_CheckFifoParam+0xce>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <DMA_CheckFifoParam+0x28>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	08001985 	.word	0x08001985
 8001978:	08001997 	.word	0x08001997
 800197c:	08001985 	.word	0x08001985
 8001980:	08001a1b 	.word	0x08001a1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d046      	beq.n	8001a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001994:	e043      	b.n	8001a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800199e:	d140      	bne.n	8001a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a4:	e03d      	b.n	8001a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ae:	d121      	bne.n	80019f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d837      	bhi.n	8001a26 <DMA_CheckFifoParam+0xda>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <DMA_CheckFifoParam+0x70>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019d3 	.word	0x080019d3
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	080019e5 	.word	0x080019e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
      break;
 80019d0:	e030      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d025      	beq.n	8001a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e2:	e022      	b.n	8001a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ec:	d11f      	bne.n	8001a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019f2:	e01c      	b.n	8001a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d903      	bls.n	8001a02 <DMA_CheckFifoParam+0xb6>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d003      	beq.n	8001a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a00:	e018      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      break;
 8001a06:	e015      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e00b      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e00a      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e008      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e006      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
 8001a28:	e004      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e002      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a32:	bf00      	nop
    }
  } 
  
  return status; 
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e177      	b.n	8001d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8166 	bne.w	8001d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d005      	beq.n	8001a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d130      	bne.n	8001af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 0201 	and.w	r2, r3, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d017      	beq.n	8001b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d123      	bne.n	8001b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80c0 	beq.w	8001d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a61      	ldr	r2, [pc, #388]	; (8001d6c <HAL_GPIO_Init+0x328>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_GPIO_Init+0x32c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d037      	beq.n	8001c82 <HAL_GPIO_Init+0x23e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <HAL_GPIO_Init+0x330>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d031      	beq.n	8001c7e <HAL_GPIO_Init+0x23a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a56      	ldr	r2, [pc, #344]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02b      	beq.n	8001c7a <HAL_GPIO_Init+0x236>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a55      	ldr	r2, [pc, #340]	; (8001d7c <HAL_GPIO_Init+0x338>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d025      	beq.n	8001c76 <HAL_GPIO_Init+0x232>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a54      	ldr	r2, [pc, #336]	; (8001d80 <HAL_GPIO_Init+0x33c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01f      	beq.n	8001c72 <HAL_GPIO_Init+0x22e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a53      	ldr	r2, [pc, #332]	; (8001d84 <HAL_GPIO_Init+0x340>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <HAL_GPIO_Init+0x22a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x344>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0x226>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a51      	ldr	r2, [pc, #324]	; (8001d8c <HAL_GPIO_Init+0x348>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x222>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <HAL_GPIO_Init+0x34c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x21e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x21a>
 8001c5a:	2309      	movs	r3, #9
 8001c5c:	e012      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c5e:	230a      	movs	r3, #10
 8001c60:	e010      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c62:	2308      	movs	r3, #8
 8001c64:	e00e      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c66:	2307      	movs	r3, #7
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x328>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f ae84 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40022400 	.word	0x40022400
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000014 	.word	0x20000014

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	0801437c 	.word	0x0801437c

08001ddc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	220f      	movs	r2, #15
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_RCC_GetClockConfig+0x60>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 020f 	and.w	r2, r3, #15
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	601a      	str	r2, [r3, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e022      	b.n	8001e98 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f00f f8e1 	bl	801102c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f814 	bl	8001ea0 <HAL_SD_InitCard>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00a      	b.n	8001e98 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001ebc:	2376      	movs	r3, #118	; 0x76
 8001ebe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681d      	ldr	r5, [r3, #0]
 8001ec4:	466c      	mov	r4, sp
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f002 f863 	bl	8003fa4 <SDIO_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04f      	b.n	8001f90 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_SD_InitCard+0xf8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 f89b 	bl	8004036 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_SD_InitCard+0xf8>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001f06:	2002      	movs	r0, #2
 8001f08:	f7ff f8f8 	bl	80010fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 ff6b 	bl	8002de8 <SD_PowerON>
 8001f12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e02e      	b.n	8001f90 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fe8a 	bl	8002c4c <SD_InitCard>
 8001f38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e01b      	b.n	8001f90 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 f8fa 	bl	800415a <SDMMC_CmdBlockLength>
 8001f66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00f      	beq.n	8001f8e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_SD_InitCard+0xfc>)
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	422580a0 	.word	0x422580a0
 8001f9c:	004005ff 	.word	0x004005ff

08001fa0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0c0      	b.n	800214a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 80b9 	bne.w	8002148 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	441a      	add	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d907      	bls.n	8001ffa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0a7      	b.n	800214a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a4c      	ldr	r2, [pc, #304]	; (8002154 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a4b      	ldr	r2, [pc, #300]	; (8002158 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800202c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2200      	movs	r2, #0
 8002034:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3380      	adds	r3, #128	; 0x80
 8002064:	4619      	mov	r1, r3
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	025b      	lsls	r3, r3, #9
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	f7ff f9f9 	bl	8001464 <HAL_DMA_Start_IT>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d017      	beq.n	80020a8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a33      	ldr	r2, [pc, #204]	; (800215c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e050      	b.n	800214a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d002      	beq.n	80020bc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	025b      	lsls	r3, r3, #9
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	025b      	lsls	r3, r3, #9
 80020c6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020c8:	2390      	movs	r3, #144	; 0x90
 80020ca:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f107 0210 	add.w	r2, r7, #16
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 f80d 	bl	8004102 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d90a      	bls.n	8002104 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2282      	movs	r2, #130	; 0x82
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 f871 	bl	80041e2 <SDMMC_CmdReadMultiBlock>
 8002100:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002102:	e009      	b.n	8002118 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2281      	movs	r2, #129	; 0x81
 8002108:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002110:	4618      	mov	r0, r3
 8002112:	f002 f844 	bl	800419e <SDMMC_CmdReadSingleBlock>
 8002116:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	431a      	orrs	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e002      	b.n	800214a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3730      	adds	r7, #48	; 0x30
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	08002a5b 	.word	0x08002a5b
 8002158:	08002acd 	.word	0x08002acd
 800215c:	004005ff 	.word	0x004005ff
 8002160:	4225858c 	.word	0x4225858c

08002164 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0c5      	b.n	8002318 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 80be 	bne.w	8002316 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80021a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	441a      	add	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d907      	bls.n	80021be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0ac      	b.n	8002318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2203      	movs	r2, #3
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80021f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2200      	movs	r2, #0
 80021f8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d002      	beq.n	8002208 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	025b      	lsls	r3, r3, #9
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d90a      	bls.n	8002224 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	22a0      	movs	r2, #160	; 0xa0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800221a:	4618      	mov	r0, r3
 800221c:	f002 f825 	bl	800426a <SDMMC_CmdWriteMultiBlock>
 8002220:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002222:	e009      	b.n	8002238 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2290      	movs	r2, #144	; 0x90
 8002228:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002230:	4618      	mov	r0, r3
 8002232:	f001 fff8 	bl	8004226 <SDMMC_CmdWriteSingleBlock>
 8002236:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d012      	beq.n	8002264 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a39      	ldr	r2, [pc, #228]	; (8002328 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e059      	b.n	8002318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3380      	adds	r3, #128	; 0x80
 800229a:	461a      	mov	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	f7ff f8df 	bl	8001464 <HAL_DMA_Start_IT>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80022ba:	f023 0302 	bic.w	r3, r3, #2
 80022be:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e018      	b.n	8002318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	025b      	lsls	r3, r3, #9
 80022f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80022f2:	2390      	movs	r3, #144	; 0x90
 80022f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80022fe:	2301      	movs	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f107 0210 	add.w	r2, r7, #16
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f001 fef8 	bl	8004102 <SDIO_ConfigData>

      return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
  }
}
 8002318:	4618      	mov	r0, r3
 800231a:	3730      	adds	r7, #48	; 0x30
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	08002a31 	.word	0x08002a31
 8002324:	08002acd 	.word	0x08002acd
 8002328:	004005ff 	.word	0x004005ff
 800232c:	4225858c 	.word	0x4225858c

08002330 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_SD_IRQHandler+0x2e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fdfc 	bl	8002f54 <SD_Read_IT>
 800235c:	e165      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 808f 	beq.w	800248c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002376:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002386:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800238a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d039      	beq.n	800241a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <HAL_SD_IRQHandler+0x8a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d011      	beq.n	80023de <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 ff76 	bl	80042b0 <SDMMC_CmdStopTransfer>
 80023c4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f92f 	bl	800263c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <HAL_SD_IRQHandler+0xda>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f002 fff2 	bl	80053f4 <HAL_SD_RxCpltCallback>
 8002410:	e10b      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f002 ffe4 	bl	80053e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002418:	e107      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8102 	beq.w	800262a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d011      	beq.n	8002454 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f001 ff3b 	bl	80042b0 <SDMMC_CmdStopTransfer>
 800243a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f8f4 	bl	800263c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80e5 	bne.w	800262a <HAL_SD_IRQHandler+0x2fa>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 80df 	bne.w	800262a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0208 	bic.w	r2, r2, #8
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f002 ffab 	bl	80053e0 <HAL_SD_TxCpltCallback>
}
 800248a:	e0ce      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_SD_IRQHandler+0x17c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fda6 	bl	8002ff6 <SD_Write_IT>
 80024aa:	e0be      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b2:	f240 233a 	movw	r3, #570	; 0x23a
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80b6 	beq.w	800262a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	f043 0202 	orr.w	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	f043 0208 	orr.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	f043 0208 	orr.w	r2, r3, #8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f240 723a 	movw	r2, #1850	; 0x73a
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002558:	f023 0302 	bic.w	r3, r3, #2
 800255c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f001 fea4 	bl	80042b0 <SDMMC_CmdStopTransfer>
 8002568:	4602      	mov	r2, r0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f855 	bl	800263c <HAL_SD_ErrorCallback>
}
 8002592:	e04a      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	d045      	beq.n	800262a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <HAL_SD_IRQHandler+0x282>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d011      	beq.n	80025d6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_SD_IRQHandler+0x304>)
 80025b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe ffa8 	bl	8001514 <HAL_DMA_Abort_IT>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d02f      	beq.n	800262a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 face 	bl	8002b70 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80025d4:	e029      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_SD_IRQHandler+0x2ba>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <HAL_SD_IRQHandler+0x308>)
 80025f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe ff8c 	bl	8001514 <HAL_DMA_Abort_IT>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d013      	beq.n	800262a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fae9 	bl	8002bde <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800260c:	e00d      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f002 fed2 	bl	80053cc <HAL_SD_AbortCallback>
}
 8002628:	e7ff      	b.n	800262a <HAL_SD_IRQHandler+0x2fa>
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	08002b71 	.word	0x08002b71
 8002638:	08002bdf 	.word	0x08002bdf

0800263c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800265e:	0f9b      	lsrs	r3, r3, #30
 8002660:	b2da      	uxtb	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	b2da      	uxtb	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800267c:	0e1b      	lsrs	r3, r3, #24
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	b2da      	uxtb	r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b2da      	uxtb	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b0:	0d1b      	lsrs	r3, r3, #20
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ce:	0bdb      	lsrs	r3, r3, #15
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e0:	0b9b      	lsrs	r3, r3, #14
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f2:	0b5b      	lsrs	r3, r3, #13
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002704:	0b1b      	lsrs	r3, r3, #12
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2200      	movs	r2, #0
 8002716:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	2b00      	cmp	r3, #0
 800271e:	d163      	bne.n	80027e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002724:	009a      	lsls	r2, r3, #2
 8002726:	f640 73fc 	movw	r3, #4092	; 0xffc
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002730:	0f92      	lsrs	r2, r2, #30
 8002732:	431a      	orrs	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273c:	0edb      	lsrs	r3, r3, #27
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	b2da      	uxtb	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	0e1b      	lsrs	r3, r3, #24
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	b2da      	uxtb	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002760:	0d5b      	lsrs	r3, r3, #21
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	b2da      	uxtb	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002772:	0c9b      	lsrs	r3, r3, #18
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	b2da      	uxtb	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002784:	0bdb      	lsrs	r3, r3, #15
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	b2da      	uxtb	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	3302      	adds	r3, #2
 80027a8:	2201      	movs	r2, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80027b2:	fb03 f202 	mul.w	r2, r3, r2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7a1b      	ldrb	r3, [r3, #8]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	2201      	movs	r2, #1
 80027c6:	409a      	lsls	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027d4:	0a52      	lsrs	r2, r2, #9
 80027d6:	fb03 f202 	mul.w	r2, r3, r2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60
 80027e6:	e031      	b.n	800284c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d11d      	bne.n	800282c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	431a      	orrs	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	3301      	adds	r3, #1
 800280c:	029a      	lsls	r2, r3, #10
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	661a      	str	r2, [r3, #96]	; 0x60
 800282a:	e00f      	b.n	800284c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a58      	ldr	r2, [pc, #352]	; (8002994 <HAL_SD_GetCardCSD+0x344>)
 8002832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e09d      	b.n	8002988 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002850:	0b9b      	lsrs	r3, r3, #14
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002862:	09db      	lsrs	r3, r3, #7
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800286a:	b2da      	uxtb	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287a:	b2da      	uxtb	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	0fdb      	lsrs	r3, r3, #31
 8002886:	b2da      	uxtb	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	0f5b      	lsrs	r3, r3, #29
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	0d9b      	lsrs	r3, r3, #22
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	0bdb      	lsrs	r3, r3, #15
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	0b9b      	lsrs	r3, r3, #14
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	0b1b      	lsrs	r3, r3, #12
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	0a9b      	lsrs	r3, r3, #10
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	b2da      	uxtb	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	b2da      	uxtb	r2, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002976:	b2da      	uxtb	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	004005ff 	.word	0x004005ff

08002998 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80029fc:	f107 030c 	add.w	r3, r7, #12
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa7e 	bl	8002f04 <SD_SendStatus>
 8002a08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002a26:	693b      	ldr	r3, [r7, #16]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	2b82      	cmp	r3, #130	; 0x82
 8002a6e:	d111      	bne.n	8002a94 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fc1b 	bl	80042b0 <SDMMC_CmdStopTransfer>
 8002a7a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff fdd4 	bl	800263c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0208 	bic.w	r2, r2, #8
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f240 523a 	movw	r2, #1338	; 0x53a
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f002 fc99 	bl	80053f4 <HAL_SD_RxCpltCallback>
#endif
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fec6 	bl	800186c <HAL_DMA_GetError>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d03e      	beq.n	8002b64 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d002      	beq.n	8002b02 <SD_DMAError+0x36>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d12d      	bne.n	8002b5e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <SD_DMAError+0xa0>)
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff62 	bl	80029f0 <HAL_SD_GetCardState>
 8002b2c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b06      	cmp	r3, #6
 8002b32:	d002      	beq.n	8002b3a <SD_DMAError+0x6e>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10a      	bne.n	8002b50 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 fbb6 	bl	80042b0 <SDMMC_CmdStopTransfer>
 8002b44:	4602      	mov	r2, r0
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff fd6c 	bl	800263c <HAL_SD_ErrorCallback>
#endif
  }
}
 8002b64:	bf00      	nop
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	004005ff 	.word	0x004005ff

08002b70 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff ff31 	bl	80029f0 <HAL_SD_GetCardState>
 8002b8e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d002      	beq.n	8002baa <SD_DMATxAbort+0x3a>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10a      	bne.n	8002bc0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 fb7e 	bl	80042b0 <SDMMC_CmdStopTransfer>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f002 fbff 	bl	80053cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002bce:	e002      	b.n	8002bd6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fd33 	bl	800263c <HAL_SD_ErrorCallback>
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f240 523a 	movw	r2, #1338	; 0x53a
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff fefa 	bl	80029f0 <HAL_SD_GetCardState>
 8002bfc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d002      	beq.n	8002c18 <SD_DMARxAbort+0x3a>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d10a      	bne.n	8002c2e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fb47 	bl	80042b0 <SDMMC_CmdStopTransfer>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f002 fbc8 	bl	80053cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002c3c:	e002      	b.n	8002c44 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff fcfc 	bl	800263c <HAL_SD_ErrorCallback>
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b094      	sub	sp, #80	; 0x50
 8002c50:	af04      	add	r7, sp, #16
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002c54:	2301      	movs	r3, #1
 8002c56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 f9f8 	bl	8004052 <SDIO_GetPowerState>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c6c:	e0b8      	b.n	8002de0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d02f      	beq.n	8002cd6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fbdf 	bl	800443e <SDMMC_CmdSendCID>
 8002c80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <SD_InitCard+0x40>
    {
      return errorstate;
 8002c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8a:	e0a9      	b.n	8002de0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fa22 	bl	80040dc <SDIO_GetResponse>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 fa19 	bl	80040dc <SDIO_GetResponse>
 8002caa:	4602      	mov	r2, r0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2108      	movs	r1, #8
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fa10 	bl	80040dc <SDIO_GetResponse>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	210c      	movs	r1, #12
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fa07 	bl	80040dc <SDIO_GetResponse>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d00d      	beq.n	8002cfa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f107 020e 	add.w	r2, r7, #14
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fbe5 	bl	80044b8 <SDMMC_CmdSetRelAdd>
 8002cee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <SD_InitCard+0xae>
    {
      return errorstate;
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf8:	e072      	b.n	8002de0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d036      	beq.n	8002d70 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f001 fbaf 	bl	800447a <SDMMC_CmdSendCSD>
 8002d1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d26:	e05b      	b.n	8002de0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 f9d4 	bl	80040dc <SDIO_GetResponse>
 8002d34:	4602      	mov	r2, r0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2104      	movs	r1, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f9cb 	bl	80040dc <SDIO_GetResponse>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2108      	movs	r1, #8
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 f9c2 	bl	80040dc <SDIO_GetResponse>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	210c      	movs	r1, #12
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f9b9 	bl	80040dc <SDIO_GetResponse>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2104      	movs	r1, #4
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 f9b0 	bl	80040dc <SDIO_GetResponse>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	0d1a      	lsrs	r2, r3, #20
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fc60 	bl	8002650 <HAL_SD_GetCardCSD>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d9a:	e021      	b.n	8002de0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	2200      	movs	r2, #0
 8002da8:	461c      	mov	r4, r3
 8002daa:	4615      	mov	r5, r2
 8002dac:	4622      	mov	r2, r4
 8002dae:	462b      	mov	r3, r5
 8002db0:	4608      	mov	r0, r1
 8002db2:	f001 fa9f 	bl	80042f4 <SDMMC_CmdSelDesel>
 8002db6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SD_InitCard+0x176>
  {
    return errorstate;
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	e00e      	b.n	8002de0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681d      	ldr	r5, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	466c      	mov	r4, sp
 8002dca:	f103 0210 	add.w	r2, r3, #16
 8002dce:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f001 f8e3 	bl	8003fa4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3740      	adds	r7, #64	; 0x40
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bdb0      	pop	{r4, r5, r7, pc}

08002de8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 fa9a 	bl	800433a <SDMMC_CmdGoIdleState>
 8002e06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	e072      	b.n	8002ef8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 faad 	bl	8004376 <SDMMC_CmdOperCond>
 8002e1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 fa83 	bl	800433a <SDMMC_CmdGoIdleState>
 8002e34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	e05b      	b.n	8002ef8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d137      	bne.n	8002ebe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 faad 	bl	80043b4 <SDMMC_CmdAppCommand>
 8002e5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02d      	beq.n	8002ebe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e66:	e047      	b.n	8002ef8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 faa0 	bl	80043b4 <SDMMC_CmdAppCommand>
 8002e74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <SD_PowerON+0x98>
    {
      return errorstate;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	e03b      	b.n	8002ef8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	491e      	ldr	r1, [pc, #120]	; (8002f00 <SD_PowerON+0x118>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fab6 	bl	80043f8 <SDMMC_CmdAppOperCommand>
 8002e8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e98:	e02e      	b.n	8002ef8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f91b 	bl	80040dc <SDIO_GetResponse>
 8002ea6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	0fdb      	lsrs	r3, r3, #31
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <SD_PowerON+0xcc>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <SD_PowerON+0xce>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]

    count++;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d802      	bhi.n	8002ece <SD_PowerON+0xe6>
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0cc      	beq.n	8002e68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d902      	bls.n	8002ede <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002edc:	e00c      	b.n	8002ef8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
 8002eee:	e002      	b.n	8002ef6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	c1100000 	.word	0xc1100000

08002f04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002f14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f18:	e018      	b.n	8002f4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f001 fae7 	bl	80044fa <SDMMC_CmdSendStatus>
 8002f2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	e009      	b.n	8002f4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 f8cc 	bl	80040dc <SDIO_GetResponse>
 8002f44:	4602      	mov	r2, r0
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03f      	beq.n	8002fee <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e033      	b.n	8002fdc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 f83e 	bl	8003ffa <SDIO_ReadFIFO>
 8002f7e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	0e1b      	lsrs	r3, r3, #24
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b07      	cmp	r3, #7
 8002fe0:	d9c8      	bls.n	8002f74 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d043      	beq.n	8003098 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e037      	b.n	8003086 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3b01      	subs	r3, #1
 8003026:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4313      	orrs	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	3b01      	subs	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4313      	orrs	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	3b01      	subs	r3, #1
 8003056:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	061a      	lsls	r2, r3, #24
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4313      	orrs	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3301      	adds	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	3b01      	subs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f107 0208 	add.w	r2, r7, #8
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f000 ffca 	bl	8004014 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b07      	cmp	r3, #7
 800308a:	d9c4      	bls.n	8003016 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003098:	bf00      	nop
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e041      	b.n	8003136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f839 	bl	800313e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 f9d8 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d001      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e04e      	b.n	800320a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_TIM_Base_Start_IT+0xc4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d01d      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1f      	ldr	r2, [pc, #124]	; (800321c <HAL_TIM_Base_Start_IT+0xc8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <HAL_TIM_Base_Start_IT+0xcc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_TIM_Base_Start_IT+0xd0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <HAL_TIM_Base_Start_IT+0xd4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_TIM_Base_Start_IT+0xd8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x80>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_TIM_Base_Start_IT+0xdc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d111      	bne.n	80031f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d010      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	e007      	b.n	8003208 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	40010400 	.word	0x40010400
 800322c:	40014000 	.word	0x40014000
 8003230:	40001800 	.word	0x40001800

08003234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0202 	mvn.w	r2, #2
 8003260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8ee 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f8e0 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8f1 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0204 	mvn.w	r2, #4
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8c4 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8b6 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8c7 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0208 	mvn.w	r2, #8
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2204      	movs	r2, #4
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f89a 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f88c 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f89d 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b10      	cmp	r3, #16
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0210 	mvn.w	r2, #16
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2208      	movs	r2, #8
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f870 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f862 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f873 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10e      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0201 	mvn.w	r2, #1
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f00e fe30 	bl	8012018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f902 	bl	80035e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f838 	bl	8003480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b20      	cmp	r3, #32
 800341c:	d10e      	bne.n	800343c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b20      	cmp	r3, #32
 800342a:	d107      	bne.n	800343c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0220 	mvn.w	r2, #32
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8cc 	bl	80035d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d027      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d023      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d017      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a28      	ldr	r2, [pc, #160]	; (80035bc <TIM_Base_SetConfig+0x128>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <TIM_Base_SetConfig+0x12c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <TIM_Base_SetConfig+0x130>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0x134>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <TIM_Base_SetConfig+0x138>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <TIM_Base_SetConfig+0x13c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0xf8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40010400 	.word	0x40010400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800
 80035c8:	40001800 	.word	0x40001800
 80035cc:	40001c00 	.word	0x40001c00
 80035d0:	40002000 	.word	0x40002000

080035d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003656:	481c      	ldr	r0, [pc, #112]	; (80036c8 <LL_ADC_CommonInit+0x80>)
 8003658:	f7ff ffe3 	bl	8003622 <LL_ADC_IsEnabled>
 800365c:	4604      	mov	r4, r0
 800365e:	481b      	ldr	r0, [pc, #108]	; (80036cc <LL_ADC_CommonInit+0x84>)
 8003660:	f7ff ffdf 	bl	8003622 <LL_ADC_IsEnabled>
 8003664:	4603      	mov	r3, r0
 8003666:	431c      	orrs	r4, r3
 8003668:	4819      	ldr	r0, [pc, #100]	; (80036d0 <LL_ADC_CommonInit+0x88>)
 800366a:	f7ff ffda 	bl	8003622 <LL_ADC_IsEnabled>
 800366e:	4603      	mov	r3, r0
 8003670:	4323      	orrs	r3, r4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d120      	bne.n	80036b8 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <LL_ADC_CommonInit+0x8c>)
 8003684:	4013      	ands	r3, r2
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	6811      	ldr	r1, [r2, #0]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6852      	ldr	r2, [r2, #4]
 800368e:	4311      	orrs	r1, r2
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	6892      	ldr	r2, [r2, #8]
 8003694:	4311      	orrs	r1, r2
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	430a      	orrs	r2, r1
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	e00b      	b.n	80036bc <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <LL_ADC_CommonInit+0x8c>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	e001      	b.n	80036bc <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40012000 	.word	0x40012000
 80036cc:	40012100 	.word	0x40012100
 80036d0:	40012200 	.word	0x40012200
 80036d4:	fffc10e0 	.word	0xfffc10e0

080036d8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ff9b 	bl	8003622 <LL_ADC_IsEnabled>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d117      	bne.n	8003722 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80036fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	6811      	ldr	r1, [r2, #0]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	430a      	orrs	r2, r1
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e001      	b.n	8003726 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ff6f 	bl	8003622 <LL_ADC_IsEnabled>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d12b      	bne.n	80037a2 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	e005      	b.n	8003772 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <LL_ADC_REG_Init+0x80>)
 8003778:	4013      	ands	r3, r2
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	4311      	orrs	r1, r2
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	6912      	ldr	r2, [r2, #16]
 800378c:	430a      	orrs	r2, r1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff2e 	bl	80035fc <LL_ADC_REG_SetSequencerLength>
 80037a0:	e001      	b.n	80037a6 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	c0fffcfd 	.word	0xc0fffcfd

080037b4 <LL_GPIO_SetPinMode>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2103      	movs	r1, #3
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	401a      	ands	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	61bb      	str	r3, [r7, #24]
  return result;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	3724      	adds	r7, #36	; 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_GPIO_SetPinOutputType>:
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	605a      	str	r2, [r3, #4]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_GPIO_SetPinSpeed>:
{
 8003842:	b480      	push	{r7}
 8003844:	b089      	sub	sp, #36	; 0x24
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	613b      	str	r3, [r7, #16]
  return result;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2103      	movs	r1, #3
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	401a      	ands	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	61bb      	str	r3, [r7, #24]
  return result;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	431a      	orrs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	3724      	adds	r7, #36	; 0x24
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_GPIO_SetPinPull>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	613b      	str	r3, [r7, #16]
  return result;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2103      	movs	r1, #3
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	401a      	ands	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	61bb      	str	r3, [r7, #24]
  return result;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	60da      	str	r2, [r3, #12]
}
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <LL_GPIO_SetAFPin_0_7>:
{
 80038fe:	b480      	push	{r7}
 8003900:	b089      	sub	sp, #36	; 0x24
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1a      	ldr	r2, [r3, #32]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	613b      	str	r3, [r7, #16]
  return result;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	210f      	movs	r1, #15
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	401a      	ands	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	61bb      	str	r3, [r7, #24]
  return result;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	431a      	orrs	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	3724      	adds	r7, #36	; 0x24
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_GPIO_SetAFPin_8_15>:
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	613b      	str	r3, [r7, #16]
  return result;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	210f      	movs	r1, #15
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	401a      	ands	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	61bb      	str	r3, [r7, #24]
  return result;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039b2:	bf00      	nop
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b088      	sub	sp, #32
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	613b      	str	r3, [r7, #16]
  return result;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039e8:	e050      	b.n	8003a8c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d042      	beq.n	8003a86 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d003      	beq.n	8003a10 <LL_GPIO_Init+0x52>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d10d      	bne.n	8003a2c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	461a      	mov	r2, r3
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff12 	bl	8003842 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	461a      	mov	r2, r3
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fef3 	bl	8003812 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	461a      	mov	r2, r3
 8003a32:	69b9      	ldr	r1, [r7, #24]
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff33 	bl	80038a0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d11a      	bne.n	8003a78 <LL_GPIO_Init+0xba>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
  return result;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d807      	bhi.n	8003a6a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ff4b 	bl	80038fe <LL_GPIO_SetAFPin_0_7>
 8003a68:	e006      	b.n	8003a78 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	69b9      	ldr	r1, [r7, #24]
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ff72 	bl	800395c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fe97 	bl	80037b4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	fa22 f303 	lsr.w	r3, r2, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1a7      	bne.n	80039ea <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0201 	bic.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f023 021f 	bic.w	r2, r3, #31
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4a42      	ldr	r2, [pc, #264]	; (8003c64 <LL_I2C_ConfigSpeed+0x124>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	493a      	ldr	r1, [pc, #232]	; (8003c68 <LL_I2C_ConfigSpeed+0x128>)
 8003b7e:	428b      	cmp	r3, r1
 8003b80:	d802      	bhi.n	8003b88 <LL_I2C_ConfigSpeed+0x48>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	3301      	adds	r3, #1
 8003b86:	e009      	b.n	8003b9c <LL_I2C_ConfigSpeed+0x5c>
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4936      	ldr	r1, [pc, #216]	; (8003c6c <LL_I2C_ConfigSpeed+0x12c>)
 8003b94:	fba1 1303 	umull	r1, r3, r1, r3
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <LL_I2C_ConfigSpeed+0x128>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d939      	bls.n	8003c1e <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d117      	bne.n	8003be0 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd8:	e01d      	b.n	8003c16 <LL_I2C_ConfigSpeed+0xd6>
 8003bda:	f248 0301 	movw	r3, #32769	; 0x8001
 8003bde:	e01a      	b.n	8003c16 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009a      	lsls	r2, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c10:	e001      	b.n	8003c16 <LL_I2C_ConfigSpeed+0xd6>
 8003c12:	f248 0301 	movw	r3, #32769	; 0x8001
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e011      	b.n	8003c42 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c2c:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	e000      	b.n	8003c40 <LL_I2C_ConfigSpeed+0x100>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	61da      	str	r2, [r3, #28]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	431bde83 	.word	0x431bde83
 8003c68:	000186a0 	.word	0x000186a0
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 021a 	bic.w	r2, r3, #26
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fefc 	bl	8003ac4 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003ccc:	f107 0308 	add.w	r3, r7, #8
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f89d 	bl	8003e10 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff feff 	bl	8003ae4 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003ce6:	6939      	ldr	r1, [r7, #16]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff25 	bl	8003b40 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6959      	ldr	r1, [r3, #20]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff05 	bl	8003b10 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ffaf 	bl	8003c70 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fec6 	bl	8003aa4 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ffb9 	bl	8003c96 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <LL_RCC_GetSysClkSource+0x18>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800

08003d4c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <LL_RCC_GetAHBPrescaler+0x18>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800

08003d68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <LL_RCC_GetAPB2Prescaler+0x18>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800

08003da0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <LL_RCC_PLL_GetMainSource+0x18>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <LL_RCC_PLL_GetN+0x18>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <LL_RCC_PLL_GetP+0x18>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800

08003df4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <LL_RCC_PLL_GetDivider+0x18>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800

08003e10 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e18:	f000 f820 	bl	8003e5c <RCC_GetSystemClockFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f840 	bl	8003eac <RCC_GetHCLKClockFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f84e 	bl	8003ed8 <RCC_GetPCLK1ClockFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f85a 	bl	8003f00 <RCC_GetPCLK2ClockFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e66:	f7ff ff63 	bl	8003d30 <LL_RCC_GetSysClkSource>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d00c      	beq.n	8003e8a <RCC_GetSystemClockFreq+0x2e>
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d80f      	bhi.n	8003e94 <RCC_GetSystemClockFreq+0x38>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <RCC_GetSystemClockFreq+0x22>
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d003      	beq.n	8003e84 <RCC_GetSystemClockFreq+0x28>
 8003e7c:	e00a      	b.n	8003e94 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <RCC_GetSystemClockFreq+0x48>)
 8003e80:	607b      	str	r3, [r7, #4]
      break;
 8003e82:	e00a      	b.n	8003e9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <RCC_GetSystemClockFreq+0x4c>)
 8003e86:	607b      	str	r3, [r7, #4]
      break;
 8003e88:	e007      	b.n	8003e9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003e8a:	2008      	movs	r0, #8
 8003e8c:	f000 f84c 	bl	8003f28 <RCC_PLL_GetFreqDomain_SYS>
 8003e90:	6078      	str	r0, [r7, #4]
      break;
 8003e92:	e002      	b.n	8003e9a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <RCC_GetSystemClockFreq+0x48>)
 8003e96:	607b      	str	r3, [r7, #4]
      break;
 8003e98:	bf00      	nop
  }

  return frequency;
 8003e9a:	687b      	ldr	r3, [r7, #4]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	00f42400 	.word	0x00f42400
 8003ea8:	007a1200 	.word	0x007a1200

08003eac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003eb4:	f7ff ff4a 	bl	8003d4c <LL_RCC_GetAHBPrescaler>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <RCC_GetHCLKClockFreq+0x28>)
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	40d3      	lsrs	r3, r2
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	0801436c 	.word	0x0801436c

08003ed8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ee0:	f7ff ff42 	bl	8003d68 <LL_RCC_GetAPB1Prescaler>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	0a9b      	lsrs	r3, r3, #10
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <RCC_GetPCLK1ClockFreq+0x24>)
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	40d3      	lsrs	r3, r2
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	0801437c 	.word	0x0801437c

08003f00 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f08:	f7ff ff3c 	bl	8003d84 <LL_RCC_GetAPB2Prescaler>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	0b5b      	lsrs	r3, r3, #13
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f12:	5cd3      	ldrb	r3, [r2, r3]
 8003f14:	461a      	mov	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	40d3      	lsrs	r3, r2
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	0801437c 	.word	0x0801437c

08003f28 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f3c:	f7ff ff30 	bl	8003da0 <LL_RCC_PLL_GetMainSource>
 8003f40:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d004      	beq.n	8003f52 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d003      	beq.n	8003f58 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003f50:	e005      	b.n	8003f5e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f54:	617b      	str	r3, [r7, #20]
      break;
 8003f56:	e005      	b.n	8003f64 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f5a:	617b      	str	r3, [r7, #20]
      break;
 8003f5c:	e002      	b.n	8003f64 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f60:	617b      	str	r3, [r7, #20]
      break;
 8003f62:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d113      	bne.n	8003f92 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f6a:	f7ff ff43 	bl	8003df4 <LL_RCC_PLL_GetDivider>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f76:	f7ff ff21 	bl	8003dbc <LL_RCC_PLL_GetN>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	fb03 f404 	mul.w	r4, r3, r4
 8003f80:	f7ff ff2a 	bl	8003dd8 <LL_RCC_PLL_GetP>
 8003f84:	4603      	mov	r3, r0
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	3301      	adds	r3, #1
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f90:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003f92:	693b      	ldr	r3, [r7, #16]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd90      	pop	{r4, r7, pc}
 8003f9c:	00f42400 	.word	0x00f42400
 8003fa0:	007a1200 	.word	0x007a1200

08003fa4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	f107 001c 	add.w	r0, r7, #28
 8003fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003fba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003fbe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003fc2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003fc6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003fca:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003fce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003fde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	b004      	add	sp, #16
 8003ff8:	4770      	bx	lr

08003ffa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2203      	movs	r2, #3
 8004042:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0303 	and.w	r3, r3, #3
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800408c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004092:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004098:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80040a8:	f023 030f 	bic.w	r3, r3, #15
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	b2db      	uxtb	r3, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3314      	adds	r3, #20
 80040ea:	461a      	mov	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4413      	add	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
}  
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004128:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800412e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004134:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800414c:	2300      	movs	r3, #0

}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b088      	sub	sp, #32
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004168:	2310      	movs	r3, #16
 800416a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004178:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800417a:	f107 0308 	add.w	r3, r7, #8
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff74 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	2110      	movs	r1, #16
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f9d7 	bl	8004540 <SDMMC_GetCmdResp1>
 8004192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004194:	69fb      	ldr	r3, [r7, #28]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b088      	sub	sp, #32
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80041ac:	2311      	movs	r3, #17
 80041ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041b0:	2340      	movs	r3, #64	; 0x40
 80041b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041be:	f107 0308 	add.w	r3, r7, #8
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff52 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	2111      	movs	r1, #17
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f9b5 	bl	8004540 <SDMMC_GetCmdResp1>
 80041d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041d8:	69fb      	ldr	r3, [r7, #28]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b088      	sub	sp, #32
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80041f0:	2312      	movs	r3, #18
 80041f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041f4:	2340      	movs	r3, #64	; 0x40
 80041f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004200:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004202:	f107 0308 	add.w	r3, r7, #8
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff30 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	2112      	movs	r1, #18
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f993 	bl	8004540 <SDMMC_GetCmdResp1>
 800421a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800421c:	69fb      	ldr	r3, [r7, #28]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b088      	sub	sp, #32
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004234:	2318      	movs	r3, #24
 8004236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004238:	2340      	movs	r3, #64	; 0x40
 800423a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004246:	f107 0308 	add.w	r3, r7, #8
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff0e 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	2118      	movs	r1, #24
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f971 	bl	8004540 <SDMMC_GetCmdResp1>
 800425e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004260:	69fb      	ldr	r3, [r7, #28]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b088      	sub	sp, #32
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004278:	2319      	movs	r3, #25
 800427a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800427c:	2340      	movs	r3, #64	; 0x40
 800427e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004288:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff feec 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	2119      	movs	r1, #25
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f94f 	bl	8004540 <SDMMC_GetCmdResp1>
 80042a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042a4:	69fb      	ldr	r3, [r7, #28]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80042bc:	230c      	movs	r3, #12
 80042be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042c0:	2340      	movs	r3, #64	; 0x40
 80042c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042ce:	f107 0308 	add.w	r3, r7, #8
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff feca 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <SDMMC_CmdStopTransfer+0x40>)
 80042dc:	210c      	movs	r1, #12
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f92e 	bl	8004540 <SDMMC_GetCmdResp1>
 80042e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042e6:	69fb      	ldr	r3, [r7, #28]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	05f5e100 	.word	0x05f5e100

080042f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004304:	2307      	movs	r3, #7
 8004306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004308:	2340      	movs	r3, #64	; 0x40
 800430a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004314:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004316:	f107 0310 	add.w	r3, r7, #16
 800431a:	4619      	mov	r1, r3
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fea6 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	2107      	movs	r1, #7
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f909 	bl	8004540 <SDMMC_GetCmdResp1>
 800432e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004332:	4618      	mov	r0, r3
 8004334:	3728      	adds	r7, #40	; 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b088      	sub	sp, #32
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004358:	f107 0308 	add.w	r3, r7, #8
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fe85 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fb23 	bl	80049b0 <SDMMC_GetCmdError>
 800436a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800436c:	69fb      	ldr	r3, [r7, #28]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b088      	sub	sp, #32
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800437e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004384:	2308      	movs	r3, #8
 8004386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004388:	2340      	movs	r3, #64	; 0x40
 800438a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004396:	f107 0308 	add.w	r3, r7, #8
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fe66 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fab6 	bl	8004914 <SDMMC_GetCmdResp7>
 80043a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043aa:	69fb      	ldr	r3, [r7, #28]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80043c2:	2337      	movs	r3, #55	; 0x37
 80043c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fe47 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	2137      	movs	r1, #55	; 0x37
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8aa 	bl	8004540 <SDMMC_GetCmdResp1>
 80043ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043ee:	69fb      	ldr	r3, [r7, #28]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800440e:	2329      	movs	r3, #41	; 0x29
 8004410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004412:	2340      	movs	r3, #64	; 0x40
 8004414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800441a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fe21 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f9bd 	bl	80047ac <SDMMC_GetCmdResp3>
 8004432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004434:	69fb      	ldr	r3, [r7, #28]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b088      	sub	sp, #32
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800444a:	2302      	movs	r3, #2
 800444c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800444e:	23c0      	movs	r3, #192	; 0xc0
 8004450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fe03 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f957 	bl	800471c <SDMMC_GetCmdResp2>
 800446e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004470:	69fb      	ldr	r3, [r7, #28]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004488:	2309      	movs	r3, #9
 800448a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800448c:	23c0      	movs	r3, #192	; 0xc0
 800448e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004498:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fde4 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f938 	bl	800471c <SDMMC_GetCmdResp2>
 80044ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044ae:	69fb      	ldr	r3, [r7, #28]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80044c6:	2303      	movs	r3, #3
 80044c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044ca:	2340      	movs	r3, #64	; 0x40
 80044cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044d8:	f107 0308 	add.w	r3, r7, #8
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fdc5 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	2103      	movs	r1, #3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f99d 	bl	8004828 <SDMMC_GetCmdResp6>
 80044ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044f0:	69fb      	ldr	r3, [r7, #28]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b088      	sub	sp, #32
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004508:	230d      	movs	r3, #13
 800450a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800450c:	2340      	movs	r3, #64	; 0x40
 800450e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800451a:	f107 0308 	add.w	r3, r7, #8
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fda4 	bl	800406e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	210d      	movs	r1, #13
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f807 	bl	8004540 <SDMMC_GetCmdResp1>
 8004532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004534:	69fb      	ldr	r3, [r7, #28]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	460b      	mov	r3, r1
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800454e:	4b70      	ldr	r3, [pc, #448]	; (8004710 <SDMMC_GetCmdResp1+0x1d0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a70      	ldr	r2, [pc, #448]	; (8004714 <SDMMC_GetCmdResp1+0x1d4>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	0a5a      	lsrs	r2, r3, #9
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	fb02 f303 	mul.w	r3, r2, r3
 8004560:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	61fa      	str	r2, [r7, #28]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800456c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004570:	e0c9      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0ef      	beq.n	8004562 <SDMMC_GetCmdResp1+0x22>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ea      	bne.n	8004562 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2204      	movs	r2, #4
 800459c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800459e:	2304      	movs	r3, #4
 80045a0:	e0b1      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0a6      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	22c5      	movs	r2, #197	; 0xc5
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fd7f 	bl	80040c2 <SDIO_GetCommandResponse>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d001      	beq.n	80045d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e099      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80045d2:	2100      	movs	r1, #0
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff fd81 	bl	80040dc <SDIO_GetResponse>
 80045da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <SDMMC_GetCmdResp1+0x1d8>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e08d      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da02      	bge.n	80045f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80045f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045f4:	e087      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004600:	2340      	movs	r3, #64	; 0x40
 8004602:	e080      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	e079      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800461c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004620:	e071      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800462c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004630:	e069      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800463c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004640:	e061      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800464c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004650:	e059      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800465c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004660:	e051      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800466c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004670:	e049      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800467c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004680:	e041      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800468c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004690:	e039      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800469c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046a0:	e031      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80046ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046b0:	e029      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80046bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046c0:	e021      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80046cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046d0:	e019      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80046dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046e0:	e011      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80046ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046f0:	e009      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80046fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004700:	e001      	b.n	8004706 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000014 	.word	0x20000014
 8004714:	10624dd3 	.word	0x10624dd3
 8004718:	fdffe008 	.word	0xfdffe008

0800471c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004724:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <SDMMC_GetCmdResp2+0x88>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <SDMMC_GetCmdResp2+0x8c>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	0a5b      	lsrs	r3, r3, #9
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1e5a      	subs	r2, r3, #1
 800473e:	60fa      	str	r2, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004744:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004748:	e026      	b.n	8004798 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ef      	beq.n	800473a <SDMMC_GetCmdResp2+0x1e>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ea      	bne.n	800473a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2204      	movs	r2, #4
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004776:	2304      	movs	r3, #4
 8004778:	e00e      	b.n	8004798 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d004      	beq.n	8004790 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800478c:	2301      	movs	r3, #1
 800478e:	e003      	b.n	8004798 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	22c5      	movs	r2, #197	; 0xc5
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20000014 	.word	0x20000014
 80047a8:	10624dd3 	.word	0x10624dd3

080047ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <SDMMC_GetCmdResp3+0x74>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <SDMMC_GetCmdResp3+0x78>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0a5b      	lsrs	r3, r3, #9
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	60fa      	str	r2, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047d8:	e01b      	b.n	8004812 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ef      	beq.n	80047ca <SDMMC_GetCmdResp3+0x1e>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ea      	bne.n	80047ca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2204      	movs	r2, #4
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004806:	2304      	movs	r3, #4
 8004808:	e003      	b.n	8004812 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	22c5      	movs	r2, #197	; 0xc5
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000014 	.word	0x20000014
 8004824:	10624dd3 	.word	0x10624dd3

08004828 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	460b      	mov	r3, r1
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004836:	4b35      	ldr	r3, [pc, #212]	; (800490c <SDMMC_GetCmdResp6+0xe4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a35      	ldr	r2, [pc, #212]	; (8004910 <SDMMC_GetCmdResp6+0xe8>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	0a5b      	lsrs	r3, r3, #9
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	1e5a      	subs	r2, r3, #1
 8004850:	61fa      	str	r2, [r7, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004856:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800485a:	e052      	b.n	8004902 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <SDMMC_GetCmdResp6+0x24>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ea      	bne.n	800484c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2204      	movs	r2, #4
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004888:	2304      	movs	r3, #4
 800488a:	e03a      	b.n	8004902 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800489e:	2301      	movs	r3, #1
 80048a0:	e02f      	b.n	8004902 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff fc0d 	bl	80040c2 <SDIO_GetCommandResponse>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	7afb      	ldrb	r3, [r7, #11]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d001      	beq.n	80048b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e025      	b.n	8004902 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	22c5      	movs	r2, #197	; 0xc5
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80048bc:	2100      	movs	r1, #0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fc0c 	bl	80040dc <SDIO_GetResponse>
 80048c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80048da:	2300      	movs	r3, #0
 80048dc:	e011      	b.n	8004902 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80048e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ec:	e009      	b.n	8004902 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80048f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048fc:	e001      	b.n	8004902 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80048fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000014 	.word	0x20000014
 8004910:	10624dd3 	.word	0x10624dd3

08004914 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800491c:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <SDMMC_GetCmdResp7+0x94>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <SDMMC_GetCmdResp7+0x98>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0a5b      	lsrs	r3, r3, #9
 8004928:	f241 3288 	movw	r2, #5000	; 0x1388
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1e5a      	subs	r2, r3, #1
 8004936:	60fa      	str	r2, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800493c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004940:	e02c      	b.n	800499c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ef      	beq.n	8004932 <SDMMC_GetCmdResp7+0x1e>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ea      	bne.n	8004932 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2204      	movs	r2, #4
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800496e:	2304      	movs	r3, #4
 8004970:	e014      	b.n	800499c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004984:	2301      	movs	r3, #1
 8004986:	e009      	b.n	800499c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	; 0x40
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
  
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	20000014 	.word	0x20000014
 80049ac:	10624dd3 	.word	0x10624dd3

080049b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049b8:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <SDMMC_GetCmdError+0x50>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <SDMMC_GetCmdError+0x54>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	0a5b      	lsrs	r3, r3, #9
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049dc:	e009      	b.n	80049f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f1      	beq.n	80049ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	22c5      	movs	r2, #197	; 0xc5
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000014 	.word	0x20000014
 8004a04:	10624dd3 	.word	0x10624dd3

08004a08 <LL_SPI_IsEnabled>:
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d101      	bne.n	8004a20 <LL_SPI_IsEnabled+0x18>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <LL_SPI_IsEnabled+0x1a>
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	611a      	str	r2, [r3, #16]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ffd3 	bl	8004a08 <LL_SPI_IsEnabled>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d139      	bne.n	8004adc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a70:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	6811      	ldr	r1, [r2, #0]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	6852      	ldr	r2, [r2, #4]
 8004a7c:	4311      	orrs	r1, r2
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	6892      	ldr	r2, [r2, #8]
 8004a82:	4311      	orrs	r1, r2
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	68d2      	ldr	r2, [r2, #12]
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	6912      	ldr	r2, [r2, #16]
 8004a8e:	4311      	orrs	r1, r2
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	6952      	ldr	r2, [r2, #20]
 8004a94:	4311      	orrs	r1, r2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	6992      	ldr	r2, [r2, #24]
 8004a9a:	4311      	orrs	r1, r2
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	69d2      	ldr	r2, [r2, #28]
 8004aa0:	4311      	orrs	r1, r2
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	6a12      	ldr	r2, [r2, #32]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 0204 	bic.w	r2, r3, #4
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	0c1b      	lsrs	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aca:	d105      	bne.n	8004ad8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff ffab 	bl	8004a2e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	61da      	str	r2, [r3, #28]
  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	615a      	str	r2, [r3, #20]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	; (8004c70 <LL_TIM_Init+0x108>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <LL_TIM_Init+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d00f      	beq.n	8004ba8 <LL_TIM_Init+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3a      	ldr	r2, [pc, #232]	; (8004c74 <LL_TIM_Init+0x10c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <LL_TIM_Init+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a39      	ldr	r2, [pc, #228]	; (8004c78 <LL_TIM_Init+0x110>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <LL_TIM_Init+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <LL_TIM_Init+0x114>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <LL_TIM_Init+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a37      	ldr	r2, [pc, #220]	; (8004c80 <LL_TIM_Init+0x118>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d106      	bne.n	8004bb6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2d      	ldr	r2, [pc, #180]	; (8004c70 <LL_TIM_Init+0x108>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d02b      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d027      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <LL_TIM_Init+0x10c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d023      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <LL_TIM_Init+0x110>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01f      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <LL_TIM_Init+0x114>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01b      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <LL_TIM_Init+0x118>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d017      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <LL_TIM_Init+0x11c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <LL_TIM_Init+0x120>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00f      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a24      	ldr	r2, [pc, #144]	; (8004c8c <LL_TIM_Init+0x124>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <LL_TIM_Init+0x128>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <LL_TIM_Init+0x12c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <LL_TIM_Init+0xae>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <LL_TIM_Init+0x130>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d106      	bne.n	8004c24 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ff6c 	bl	8004b0e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff58 	bl	8004af2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <LL_TIM_Init+0x108>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <LL_TIM_Init+0xea>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <LL_TIM_Init+0x118>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d105      	bne.n	8004c5e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	4619      	mov	r1, r3
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ff66 	bl	8004b2a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ff71 	bl	8004b46 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	40010400 	.word	0x40010400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800
 8004c90:	40001800 	.word	0x40001800
 8004c94:	40001c00 	.word	0x40001c00
 8004c98:	40002000 	.word	0x40002000

08004c9c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	615a      	str	r2, [r3, #20]
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d14:	b0c0      	sub	sp, #256	; 0x100
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d1c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004d20:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	f040 810c 	bne.w	8004f4c <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d46:	4622      	mov	r2, r4
 8004d48:	462b      	mov	r3, r5
 8004d4a:	1891      	adds	r1, r2, r2
 8004d4c:	6639      	str	r1, [r7, #96]	; 0x60
 8004d4e:	415b      	adcs	r3, r3
 8004d50:	667b      	str	r3, [r7, #100]	; 0x64
 8004d52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004d56:	4621      	mov	r1, r4
 8004d58:	eb12 0801 	adds.w	r8, r2, r1
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	eb43 0901 	adc.w	r9, r3, r1
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d76:	4690      	mov	r8, r2
 8004d78:	4699      	mov	r9, r3
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	eb18 0303 	adds.w	r3, r8, r3
 8004d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d84:	462b      	mov	r3, r5
 8004d86:	eb49 0303 	adc.w	r3, r9, r3
 8004d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d92:	2200      	movs	r2, #0
 8004d94:	469a      	mov	sl, r3
 8004d96:	4693      	mov	fp, r2
 8004d98:	eb1a 030a 	adds.w	r3, sl, sl
 8004d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d9e:	eb4b 030b 	adc.w	r3, fp, fp
 8004da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004da8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dac:	f7fb fac0 	bl	8000330 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <LL_USART_SetBaudRate+0x238>)
 8004db6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	b29c      	uxth	r4, r3
 8004dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dcc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dd0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	1891      	adds	r1, r2, r2
 8004dda:	6539      	str	r1, [r7, #80]	; 0x50
 8004ddc:	415b      	adcs	r3, r3
 8004dde:	657b      	str	r3, [r7, #84]	; 0x54
 8004de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004de4:	4641      	mov	r1, r8
 8004de6:	1851      	adds	r1, r2, r1
 8004de8:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dea:	4649      	mov	r1, r9
 8004dec:	414b      	adcs	r3, r1
 8004dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	00cb      	lsls	r3, r1, #3
 8004e00:	4651      	mov	r1, sl
 8004e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e06:	4651      	mov	r1, sl
 8004e08:	00ca      	lsls	r2, r1, #3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4642      	mov	r2, r8
 8004e12:	189b      	adds	r3, r3, r2
 8004e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e18:	464b      	mov	r3, r9
 8004e1a:	460a      	mov	r2, r1
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e2e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004e32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e36:	460b      	mov	r3, r1
 8004e38:	18db      	adds	r3, r3, r3
 8004e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	eb42 0303 	adc.w	r3, r2, r3
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
 8004e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e48:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e4c:	f7fb fa70 	bl	8000330 <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4611      	mov	r1, r2
 8004e56:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <LL_USART_SetBaudRate+0x238>)
 8004e58:	fba3 2301 	umull	r2, r3, r3, r1
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	2264      	movs	r2, #100	; 0x64
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	1acb      	subs	r3, r1, r3
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e6c:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <LL_USART_SetBaudRate+0x238>)
 8004e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4423      	add	r3, r4
 8004e82:	b29c      	uxth	r4, r3
 8004e84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e92:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004e96:	4642      	mov	r2, r8
 8004e98:	464b      	mov	r3, r9
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	1851      	adds	r1, r2, r1
 8004eaa:	6339      	str	r1, [r7, #48]	; 0x30
 8004eac:	4649      	mov	r1, r9
 8004eae:	414b      	adcs	r3, r1
 8004eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ebe:	4659      	mov	r1, fp
 8004ec0:	00cb      	lsls	r3, r1, #3
 8004ec2:	4651      	mov	r1, sl
 8004ec4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec8:	4651      	mov	r1, sl
 8004eca:	00ca      	lsls	r2, r1, #3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	4642      	mov	r2, r8
 8004ed4:	189b      	adds	r3, r3, r2
 8004ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eda:	464b      	mov	r3, r9
 8004edc:	460a      	mov	r2, r1
 8004ede:	eb42 0303 	adc.w	r3, r2, r3
 8004ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ee6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004ef4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	18db      	adds	r3, r3, r3
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efe:	4613      	mov	r3, r2
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f0a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004f0e:	f7fb fa0f 	bl	8000330 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <LL_USART_SetBaudRate+0x238>)
 8004f18:	fba3 1302 	umull	r1, r3, r3, r2
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	2164      	movs	r1, #100	; 0x64
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	3332      	adds	r3, #50	; 0x32
 8004f2a:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <LL_USART_SetBaudRate+0x238>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4423      	add	r3, r4
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8004f46:	e107      	b.n	8005158 <LL_USART_SetBaudRate+0x448>
 8004f48:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f56:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f5a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004f5e:	4642      	mov	r2, r8
 8004f60:	464b      	mov	r3, r9
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	6239      	str	r1, [r7, #32]
 8004f66:	415b      	adcs	r3, r3
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f6e:	4641      	mov	r1, r8
 8004f70:	1854      	adds	r4, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb43 0501 	adc.w	r5, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	00eb      	lsls	r3, r5, #3
 8004f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f86:	00e2      	lsls	r2, r4, #3
 8004f88:	4614      	mov	r4, r2
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	4643      	mov	r3, r8
 8004f8e:	18e3      	adds	r3, r4, r3
 8004f90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f94:	464b      	mov	r3, r9
 8004f96:	eb45 0303 	adc.w	r3, r5, r3
 8004f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fa8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004fb8:	4629      	mov	r1, r5
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	008a      	lsls	r2, r1, #2
 8004fc6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004fca:	f7fb f9b1 	bl	8000330 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4b64      	ldr	r3, [pc, #400]	; (8005164 <LL_USART_SetBaudRate+0x454>)
 8004fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	b29c      	uxth	r4, r3
 8004fe0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004ff2:	4642      	mov	r2, r8
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	1891      	adds	r1, r2, r2
 8004ff8:	61b9      	str	r1, [r7, #24]
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005002:	4641      	mov	r1, r8
 8005004:	1851      	adds	r1, r2, r1
 8005006:	6139      	str	r1, [r7, #16]
 8005008:	4649      	mov	r1, r9
 800500a:	414b      	adcs	r3, r1
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800501a:	4659      	mov	r1, fp
 800501c:	00cb      	lsls	r3, r1, #3
 800501e:	4651      	mov	r1, sl
 8005020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005024:	4651      	mov	r1, sl
 8005026:	00ca      	lsls	r2, r1, #3
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	4603      	mov	r3, r0
 800502e:	4642      	mov	r2, r8
 8005030:	189b      	adds	r3, r3, r2
 8005032:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005036:	464b      	mov	r3, r9
 8005038:	460a      	mov	r2, r1
 800503a:	eb42 0303 	adc.w	r3, r2, r3
 800503e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005042:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800504c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800505c:	4649      	mov	r1, r9
 800505e:	008b      	lsls	r3, r1, #2
 8005060:	4641      	mov	r1, r8
 8005062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005066:	4641      	mov	r1, r8
 8005068:	008a      	lsls	r2, r1, #2
 800506a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800506e:	f7fb f95f 	bl	8000330 <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4b3b      	ldr	r3, [pc, #236]	; (8005164 <LL_USART_SetBaudRate+0x454>)
 8005078:	fba3 1302 	umull	r1, r3, r3, r2
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	2164      	movs	r1, #100	; 0x64
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	3332      	adds	r3, #50	; 0x32
 800508a:	4a36      	ldr	r2, [pc, #216]	; (8005164 <LL_USART_SetBaudRate+0x454>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	b29b      	uxth	r3, r3
 8005094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005098:	b29b      	uxth	r3, r3
 800509a:	4423      	add	r3, r4
 800509c:	b29c      	uxth	r4, r3
 800509e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050a2:	2200      	movs	r2, #0
 80050a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	415b      	adcs	r3, r3
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050bc:	4641      	mov	r1, r8
 80050be:	1851      	adds	r1, r2, r1
 80050c0:	6039      	str	r1, [r7, #0]
 80050c2:	4649      	mov	r1, r9
 80050c4:	414b      	adcs	r3, r1
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050d4:	4659      	mov	r1, fp
 80050d6:	00cb      	lsls	r3, r1, #3
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050de:	4651      	mov	r1, sl
 80050e0:	00ca      	lsls	r2, r1, #3
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	4642      	mov	r2, r8
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	673b      	str	r3, [r7, #112]	; 0x70
 80050ee:	464b      	mov	r3, r9
 80050f0:	460a      	mov	r2, r1
 80050f2:	eb42 0303 	adc.w	r3, r2, r3
 80050f6:	677b      	str	r3, [r7, #116]	; 0x74
 80050f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050fc:	2200      	movs	r2, #0
 80050fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005100:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800510e:	4649      	mov	r1, r9
 8005110:	008b      	lsls	r3, r1, #2
 8005112:	4641      	mov	r1, r8
 8005114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005118:	4641      	mov	r1, r8
 800511a:	008a      	lsls	r2, r1, #2
 800511c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005120:	f7fb f906 	bl	8000330 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <LL_USART_SetBaudRate+0x454>)
 800512a:	fba3 1302 	umull	r1, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2164      	movs	r1, #100	; 0x64
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	3332      	adds	r3, #50	; 0x32
 800513c:	4a09      	ldr	r2, [pc, #36]	; (8005164 <LL_USART_SetBaudRate+0x454>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	b29b      	uxth	r3, r3
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	b29b      	uxth	r3, r3
 800514c:	4423      	add	r3, r4
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800515e:	46bd      	mov	sp, r7
 8005160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005164:	51eb851f 	.word	0x51eb851f

08005168 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fd8e 	bl	8004c9c <LL_USART_IsEnabled>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d16c      	bne.n	8005260 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800518e:	f023 030c 	bic.w	r3, r3, #12
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	6851      	ldr	r1, [r2, #4]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	4311      	orrs	r1, r2
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	6912      	ldr	r2, [r2, #16]
 80051a0:	4311      	orrs	r1, r2
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	6992      	ldr	r2, [r2, #24]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fd85 	bl	8004cc4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fd92 	bl	8004cea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80051c6:	f107 0308 	add.w	r3, r7, #8
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fe20 	bl	8003e10 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a26      	ldr	r2, [pc, #152]	; (800526c <LL_USART_Init+0x104>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d102      	bne.n	80051de <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e02f      	b.n	800523e <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a23      	ldr	r2, [pc, #140]	; (8005270 <LL_USART_Init+0x108>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d102      	bne.n	80051ec <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e028      	b.n	800523e <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <LL_USART_Init+0x10c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d102      	bne.n	80051fa <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e021      	b.n	800523e <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <LL_USART_Init+0x110>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d102      	bne.n	8005208 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e01a      	b.n	800523e <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <LL_USART_Init+0x114>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d102      	bne.n	8005216 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	e013      	b.n	800523e <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <LL_USART_Init+0x118>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d102      	bne.n	8005224 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e00c      	b.n	800523e <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a17      	ldr	r2, [pc, #92]	; (8005284 <LL_USART_Init+0x11c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d102      	bne.n	8005232 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e005      	b.n	800523e <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a14      	ldr	r2, [pc, #80]	; (8005288 <LL_USART_Init+0x120>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d009      	beq.n	8005260 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fd58 	bl	8004d10 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005260:	7ffb      	ldrb	r3, [r7, #31]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40011000 	.word	0x40011000
 8005270:	40004400 	.word	0x40004400
 8005274:	40004800 	.word	0x40004800
 8005278:	40011400 	.word	0x40011400
 800527c:	40004c00 	.word	0x40004c00
 8005280:	40005000 	.word	0x40005000
 8005284:	40007800 	.word	0x40007800
 8005288:	40007c00 	.word	0x40007c00

0800528c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <LL_mDelay+0x48>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800529a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a2:	d00c      	beq.n	80052be <LL_mDelay+0x32>
  {
    Delay++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3301      	adds	r3, #1
 80052a8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80052aa:	e008      	b.n	80052be <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <LL_mDelay+0x48>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <LL_mDelay+0x32>
    {
      Delay--;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f3      	bne.n	80052ac <LL_mDelay+0x20>
    }
  }
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	e000e010 	.word	0xe000e010

080052d8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80052e0:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <LL_SetSystemCoreClock+0x1c>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000014 	.word	0x20000014

080052f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005302:	f000 f888 	bl	8005416 <BSP_SD_IsDetected>
 8005306:	4603      	mov	r3, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	d001      	beq.n	8005310 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e005      	b.n	800531c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005310:	4804      	ldr	r0, [pc, #16]	; (8005324 <BSP_SD_Init+0x2c>)
 8005312:	f7fc fd95 	bl	8001e40 <HAL_SD_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800531a:	79fb      	ldrb	r3, [r7, #7]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20005994 	.word	0x20005994

08005328 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	68f9      	ldr	r1, [r7, #12]
 800533e:	4806      	ldr	r0, [pc, #24]	; (8005358 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005340:	f7fc fe2e 	bl	8001fa0 <HAL_SD_ReadBlocks_DMA>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20005994 	.word	0x20005994

0800535c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	4806      	ldr	r0, [pc, #24]	; (800538c <BSP_SD_WriteBlocks_DMA+0x30>)
 8005374:	f7fc fef6 	bl	8002164 <HAL_SD_WriteBlocks_DMA>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20005994 	.word	0x20005994

08005390 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005394:	4805      	ldr	r0, [pc, #20]	; (80053ac <BSP_SD_GetCardState+0x1c>)
 8005396:	f7fd fb2b 	bl	80029f0 <HAL_SD_GetCardState>
 800539a:	4603      	mov	r3, r0
 800539c:	2b04      	cmp	r3, #4
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20005994 	.word	0x20005994

080053b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4803      	ldr	r0, [pc, #12]	; (80053c8 <BSP_SD_GetCardInfo+0x18>)
 80053bc:	f7fd faec 	bl	8002998 <HAL_SD_GetCardInfo>
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20005994 	.word	0x20005994

080053cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80053d4:	f000 f818 	bl	8005408 <BSP_SD_AbortCallback>
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80053e8:	f003 f9b0 	bl	800874c <BSP_SD_WriteCpltCallback>
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80053fc:	f003 f9b2 	bl	8008764 <BSP_SD_ReadCpltCallback>
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0

}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800541c:	2301      	movs	r3, #1
 800541e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	b2db      	uxtb	r3, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	2b7f      	cmp	r3, #127	; 0x7f
 8005440:	d802      	bhi.n	8005448 <ff_convert+0x18>
		c = chr;
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	81fb      	strh	r3, [r7, #14]
 8005446:	e025      	b.n	8005494 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	2bff      	cmp	r3, #255	; 0xff
 8005452:	d805      	bhi.n	8005460 <ff_convert+0x30>
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	3b80      	subs	r3, #128	; 0x80
 8005458:	4a12      	ldr	r2, [pc, #72]	; (80054a4 <ff_convert+0x74>)
 800545a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800545e:	e000      	b.n	8005462 <ff_convert+0x32>
 8005460:	2300      	movs	r3, #0
 8005462:	81fb      	strh	r3, [r7, #14]
 8005464:	e016      	b.n	8005494 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005466:	2300      	movs	r3, #0
 8005468:	81fb      	strh	r3, [r7, #14]
 800546a:	e009      	b.n	8005480 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800546c:	89fb      	ldrh	r3, [r7, #14]
 800546e:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <ff_convert+0x74>)
 8005470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	429a      	cmp	r2, r3
 8005478:	d006      	beq.n	8005488 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800547a:	89fb      	ldrh	r3, [r7, #14]
 800547c:	3301      	adds	r3, #1
 800547e:	81fb      	strh	r3, [r7, #14]
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d9f2      	bls.n	800546c <ff_convert+0x3c>
 8005486:	e000      	b.n	800548a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005488:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800548a:	89fb      	ldrh	r3, [r7, #14]
 800548c:	3380      	adds	r3, #128	; 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005494:	89fb      	ldrh	r3, [r7, #14]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	08013da0 	.word	0x08013da0

080054a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b8:	d201      	bcs.n	80054be <ff_wtoupper+0x16>
 80054ba:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <ff_wtoupper+0x10c>)
 80054bc:	e000      	b.n	80054c0 <ff_wtoupper+0x18>
 80054be:	4b3e      	ldr	r3, [pc, #248]	; (80055b8 <ff_wtoupper+0x110>)
 80054c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	1c9a      	adds	r2, r3, #2
 80054c6:	617a      	str	r2, [r7, #20]
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80054cc:	8a7b      	ldrh	r3, [r7, #18]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d068      	beq.n	80055a4 <ff_wtoupper+0xfc>
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	8a7b      	ldrh	r3, [r7, #18]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d364      	bcc.n	80055a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	1c9a      	adds	r2, r3, #2
 80054de:	617a      	str	r2, [r7, #20]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	823b      	strh	r3, [r7, #16]
 80054e4:	8a3b      	ldrh	r3, [r7, #16]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	81fb      	strh	r3, [r7, #14]
 80054ea:	8a3b      	ldrh	r3, [r7, #16]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	8a79      	ldrh	r1, [r7, #18]
 80054f4:	8a3b      	ldrh	r3, [r7, #16]
 80054f6:	440b      	add	r3, r1
 80054f8:	429a      	cmp	r2, r3
 80054fa:	da49      	bge.n	8005590 <ff_wtoupper+0xe8>
			switch (cmd) {
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d84f      	bhi.n	80055a2 <ff_wtoupper+0xfa>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <ff_wtoupper+0x60>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800552d 	.word	0x0800552d
 800550c:	0800553f 	.word	0x0800553f
 8005510:	08005555 	.word	0x08005555
 8005514:	0800555d 	.word	0x0800555d
 8005518:	08005565 	.word	0x08005565
 800551c:	0800556d 	.word	0x0800556d
 8005520:	08005575 	.word	0x08005575
 8005524:	0800557d 	.word	0x0800557d
 8005528:	08005585 	.word	0x08005585
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	8a7b      	ldrh	r3, [r7, #18]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	80fb      	strh	r3, [r7, #6]
 800553c:	e027      	b.n	800558e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	8a7b      	ldrh	r3, [r7, #18]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	b29b      	uxth	r3, r3
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	b29b      	uxth	r3, r3
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	80fb      	strh	r3, [r7, #6]
 8005552:	e01c      	b.n	800558e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	3b10      	subs	r3, #16
 8005558:	80fb      	strh	r3, [r7, #6]
 800555a:	e018      	b.n	800558e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	3b20      	subs	r3, #32
 8005560:	80fb      	strh	r3, [r7, #6]
 8005562:	e014      	b.n	800558e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	3b30      	subs	r3, #48	; 0x30
 8005568:	80fb      	strh	r3, [r7, #6]
 800556a:	e010      	b.n	800558e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	3b1a      	subs	r3, #26
 8005570:	80fb      	strh	r3, [r7, #6]
 8005572:	e00c      	b.n	800558e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	3308      	adds	r3, #8
 8005578:	80fb      	strh	r3, [r7, #6]
 800557a:	e008      	b.n	800558e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	3b50      	subs	r3, #80	; 0x50
 8005580:	80fb      	strh	r3, [r7, #6]
 8005582:	e004      	b.n	800558e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800558a:	80fb      	strh	r3, [r7, #6]
 800558c:	bf00      	nop
			}
			break;
 800558e:	e008      	b.n	80055a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005590:	89fb      	ldrh	r3, [r7, #14]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d195      	bne.n	80054c2 <ff_wtoupper+0x1a>
 8005596:	8a3b      	ldrh	r3, [r7, #16]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4413      	add	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80055a0:	e78f      	b.n	80054c2 <ff_wtoupper+0x1a>
			break;
 80055a2:	bf00      	nop
	}

	return chr;
 80055a4:	88fb      	ldrh	r3, [r7, #6]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	08013ea0 	.word	0x08013ea0
 80055b8:	08014094 	.word	0x08014094

080055bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <disk_status+0x30>)
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	79fa      	ldrb	r2, [r7, #7]
 80055d4:	4905      	ldr	r1, [pc, #20]	; (80055ec <disk_status+0x30>)
 80055d6:	440a      	add	r2, r1
 80055d8:	7a12      	ldrb	r2, [r2, #8]
 80055da:	4610      	mov	r0, r2
 80055dc:	4798      	blx	r3
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	200000d4 	.word	0x200000d4

080055f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	4a0d      	ldr	r2, [pc, #52]	; (8005638 <disk_initialize+0x48>)
 8005602:	5cd3      	ldrb	r3, [r2, r3]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d111      	bne.n	800562c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	4a0b      	ldr	r2, [pc, #44]	; (8005638 <disk_initialize+0x48>)
 800560c:	2101      	movs	r1, #1
 800560e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	4a09      	ldr	r2, [pc, #36]	; (8005638 <disk_initialize+0x48>)
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	79fa      	ldrb	r2, [r7, #7]
 800561e:	4906      	ldr	r1, [pc, #24]	; (8005638 <disk_initialize+0x48>)
 8005620:	440a      	add	r2, r1
 8005622:	7a12      	ldrb	r2, [r2, #8]
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200000d4 	.word	0x200000d4

0800563c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <disk_read+0x3c>)
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	689c      	ldr	r4, [r3, #8]
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	4a07      	ldr	r2, [pc, #28]	; (8005678 <disk_read+0x3c>)
 800565c:	4413      	add	r3, r2
 800565e:	7a18      	ldrb	r0, [r3, #8]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	47a0      	blx	r4
 8005668:	4603      	mov	r3, r0
 800566a:	75fb      	strb	r3, [r7, #23]
  return res;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd90      	pop	{r4, r7, pc}
 8005676:	bf00      	nop
 8005678:	200000d4 	.word	0x200000d4

0800567c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800567c:	b590      	push	{r4, r7, lr}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <disk_write+0x3c>)
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	68dc      	ldr	r4, [r3, #12]
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <disk_write+0x3c>)
 800569c:	4413      	add	r3, r2
 800569e:	7a18      	ldrb	r0, [r3, #8]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	47a0      	blx	r4
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd90      	pop	{r4, r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200000d4 	.word	0x200000d4

080056bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	603a      	str	r2, [r7, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
 80056c8:	460b      	mov	r3, r1
 80056ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <disk_ioctl+0x38>)
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	79fa      	ldrb	r2, [r7, #7]
 80056da:	4906      	ldr	r1, [pc, #24]	; (80056f4 <disk_ioctl+0x38>)
 80056dc:	440a      	add	r2, r1
 80056de:	7a10      	ldrb	r0, [r2, #8]
 80056e0:	79b9      	ldrb	r1, [r7, #6]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4798      	blx	r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	200000d4 	.word	0x200000d4

080056f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80056fc:	4904      	ldr	r1, [pc, #16]	; (8005710 <MX_FATFS_Init+0x18>)
 80056fe:	4805      	ldr	r0, [pc, #20]	; (8005714 <MX_FATFS_Init+0x1c>)
 8005700:	f002 feac 	bl	800845c <FATFS_LinkDriver>
 8005704:	4603      	mov	r3, r0
 8005706:	461a      	mov	r2, r3
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <MX_FATFS_Init+0x20>)
 800570a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800570c:	bf00      	nop
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200000a8 	.word	0x200000a8
 8005714:	080141e0 	.word	0x080141e0
 8005718:	200000a4 	.word	0x200000a4

0800571c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005720:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800573c:	89fb      	ldrh	r3, [r7, #14]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	b21a      	sxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b21b      	sxth	r3, r3
 8005748:	4313      	orrs	r3, r2
 800574a:	b21b      	sxth	r3, r3
 800574c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800574e:	89fb      	ldrh	r3, [r7, #14]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3303      	adds	r3, #3
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	3202      	adds	r2, #2
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	3201      	adds	r2, #1
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	7812      	ldrb	r2, [r2, #0]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
	return rv;
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	887a      	ldrh	r2, [r7, #2]
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	887b      	ldrh	r3, [r7, #2]
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	887a      	ldrh	r2, [r7, #2]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	0a1b      	lsrs	r3, r3, #8
 8005804:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	1c53      	adds	r3, r2, #1
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	6179      	str	r1, [r7, #20]
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3b01      	subs	r3, #1
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f1      	bne.n	800584a <mem_cpy+0x1a>
	}
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005872:	b480      	push	{r7}
 8005874:	b087      	sub	sp, #28
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	617a      	str	r2, [r7, #20]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3b01      	subs	r3, #1
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f3      	bne.n	8005882 <mem_set+0x10>
}
 800589a:	bf00      	nop
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	61fa      	str	r2, [r7, #28]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	4619      	mov	r1, r3
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	61ba      	str	r2, [r7, #24]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	1acb      	subs	r3, r1, r3
 80058d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3b01      	subs	r3, #1
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <mem_cmp+0x40>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0eb      	beq.n	80058c0 <mem_cmp+0x18>

	return r;
 80058e8:	697b      	ldr	r3, [r7, #20]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3724      	adds	r7, #36	; 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005900:	e002      	b.n	8005908 <chk_chr+0x12>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3301      	adds	r3, #1
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <chk_chr+0x26>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	4293      	cmp	r3, r2
 800591a:	d1f2      	bne.n	8005902 <chk_chr+0xc>
	return *str;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	781b      	ldrb	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005936:	2300      	movs	r3, #0
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e029      	b.n	8005994 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005940:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <chk_lock+0xb4>)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	4413      	add	r3, r2
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01d      	beq.n	800598a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800594e:	4a24      	ldr	r2, [pc, #144]	; (80059e0 <chk_lock+0xb4>)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	4413      	add	r3, r2
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d116      	bne.n	800598e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005960:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <chk_lock+0xb4>)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	4413      	add	r3, r2
 8005968:	3304      	adds	r3, #4
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005970:	429a      	cmp	r2, r3
 8005972:	d10c      	bne.n	800598e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005974:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <chk_lock+0xb4>)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	4413      	add	r3, r2
 800597c:	3308      	adds	r3, #8
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005984:	429a      	cmp	r2, r3
 8005986:	d102      	bne.n	800598e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005988:	e007      	b.n	800599a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d9d2      	bls.n	8005940 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d109      	bne.n	80059b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <chk_lock+0x80>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d101      	bne.n	80059b0 <chk_lock+0x84>
 80059ac:	2300      	movs	r3, #0
 80059ae:	e010      	b.n	80059d2 <chk_lock+0xa6>
 80059b0:	2312      	movs	r3, #18
 80059b2:	e00e      	b.n	80059d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d108      	bne.n	80059cc <chk_lock+0xa0>
 80059ba:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <chk_lock+0xb4>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	4413      	add	r3, r2
 80059c2:	330c      	adds	r3, #12
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ca:	d101      	bne.n	80059d0 <chk_lock+0xa4>
 80059cc:	2310      	movs	r3, #16
 80059ce:	e000      	b.n	80059d2 <chk_lock+0xa6>
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	200000b4 	.word	0x200000b4

080059e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e002      	b.n	80059f6 <enq_lock+0x12>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3301      	adds	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d806      	bhi.n	8005a0a <enq_lock+0x26>
 80059fc:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <enq_lock+0x40>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4413      	add	r3, r2
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f2      	bne.n	80059f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	200000b4 	.word	0x200000b4

08005a28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e01f      	b.n	8005a78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005a38:	4a41      	ldr	r2, [pc, #260]	; (8005b40 <inc_lock+0x118>)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	4413      	add	r3, r2
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d113      	bne.n	8005a72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005a4a:	4a3d      	ldr	r2, [pc, #244]	; (8005b40 <inc_lock+0x118>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4413      	add	r3, r2
 8005a52:	3304      	adds	r3, #4
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d109      	bne.n	8005a72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005a5e:	4a38      	ldr	r2, [pc, #224]	; (8005b40 <inc_lock+0x118>)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	4413      	add	r3, r2
 8005a66:	3308      	adds	r3, #8
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d006      	beq.n	8005a80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d9dc      	bls.n	8005a38 <inc_lock+0x10>
 8005a7e:	e000      	b.n	8005a82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005a80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d132      	bne.n	8005aee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e002      	b.n	8005a94 <inc_lock+0x6c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3301      	adds	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d806      	bhi.n	8005aa8 <inc_lock+0x80>
 8005a9a:	4a29      	ldr	r2, [pc, #164]	; (8005b40 <inc_lock+0x118>)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	4413      	add	r3, r2
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f2      	bne.n	8005a8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d101      	bne.n	8005ab2 <inc_lock+0x8a>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e040      	b.n	8005b34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4922      	ldr	r1, [pc, #136]	; (8005b40 <inc_lock+0x118>)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	440b      	add	r3, r1
 8005abe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	491e      	ldr	r1, [pc, #120]	; (8005b40 <inc_lock+0x118>)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	440b      	add	r3, r1
 8005acc:	3304      	adds	r3, #4
 8005ace:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	491a      	ldr	r1, [pc, #104]	; (8005b40 <inc_lock+0x118>)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	440b      	add	r3, r1
 8005adc:	3308      	adds	r3, #8
 8005ade:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <inc_lock+0x118>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4413      	add	r3, r2
 8005ae8:	330c      	adds	r3, #12
 8005aea:	2200      	movs	r2, #0
 8005aec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <inc_lock+0xe0>
 8005af4:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <inc_lock+0x118>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	330c      	adds	r3, #12
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <inc_lock+0xe0>
 8005b04:	2300      	movs	r3, #0
 8005b06:	e015      	b.n	8005b34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <inc_lock+0xf8>
 8005b0e:	4a0c      	ldr	r2, [pc, #48]	; (8005b40 <inc_lock+0x118>)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	4413      	add	r3, r2
 8005b16:	330c      	adds	r3, #12
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	e001      	b.n	8005b24 <inc_lock+0xfc>
 8005b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b24:	4906      	ldr	r1, [pc, #24]	; (8005b40 <inc_lock+0x118>)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	440b      	add	r3, r1
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	200000b4 	.word	0x200000b4

08005b44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d825      	bhi.n	8005ba4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <dec_lock+0x74>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	4413      	add	r3, r2
 8005b60:	330c      	adds	r3, #12
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b66:	89fb      	ldrh	r3, [r7, #14]
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6c:	d101      	bne.n	8005b72 <dec_lock+0x2e>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005b72:	89fb      	ldrh	r3, [r7, #14]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <dec_lock+0x3a>
 8005b78:	89fb      	ldrh	r3, [r7, #14]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005b7e:	4a0e      	ldr	r2, [pc, #56]	; (8005bb8 <dec_lock+0x74>)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	4413      	add	r3, r2
 8005b86:	330c      	adds	r3, #12
 8005b88:	89fa      	ldrh	r2, [r7, #14]
 8005b8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005b8c:	89fb      	ldrh	r3, [r7, #14]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <dec_lock+0x5a>
 8005b92:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <dec_lock+0x74>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	4413      	add	r3, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	737b      	strb	r3, [r7, #13]
 8005ba2:	e001      	b.n	8005ba8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ba8:	7b7b      	ldrb	r3, [r7, #13]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	200000b4 	.word	0x200000b4

08005bbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e010      	b.n	8005bec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005bca:	4a0d      	ldr	r2, [pc, #52]	; (8005c00 <clear_lock+0x44>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	4413      	add	r3, r2
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d105      	bne.n	8005be6 <clear_lock+0x2a>
 8005bda:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <clear_lock+0x44>)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	4413      	add	r3, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d9eb      	bls.n	8005bca <clear_lock+0xe>
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	200000b4 	.word	0x200000b4

08005c04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	78db      	ldrb	r3, [r3, #3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d034      	beq.n	8005c82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7858      	ldrb	r0, [r3, #1]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c28:	2301      	movs	r3, #1
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	f7ff fd26 	bl	800567c <disk_write>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
 8005c3a:	e022      	b.n	8005c82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	1ad2      	subs	r2, r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d217      	bcs.n	8005c82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	789b      	ldrb	r3, [r3, #2]
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e010      	b.n	8005c7c <sync_window+0x78>
					wsect += fs->fsize;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	7858      	ldrb	r0, [r3, #1]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c6e:	2301      	movs	r3, #1
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	f7ff fd03 	bl	800567c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d8eb      	bhi.n	8005c5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d01b      	beq.n	8005cdc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ffad 	bl	8005c04 <sync_window>
 8005caa:	4603      	mov	r3, r0
 8005cac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d113      	bne.n	8005cdc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	7858      	ldrb	r0, [r3, #1]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	f7ff fcbb 	bl	800563c <disk_read>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff87 	bl	8005c04 <sync_window>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d159      	bne.n	8005db4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d149      	bne.n	8005d9c <sync_fs+0xb4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	791b      	ldrb	r3, [r3, #4]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d145      	bne.n	8005d9c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	899b      	ldrh	r3, [r3, #12]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	f7ff fda8 	bl	8005872 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3338      	adds	r3, #56	; 0x38
 8005d26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d2a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fd37 	bl	80057a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3338      	adds	r3, #56	; 0x38
 8005d38:	4921      	ldr	r1, [pc, #132]	; (8005dc0 <sync_fs+0xd8>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fd4c 	bl	80057d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3338      	adds	r3, #56	; 0x38
 8005d44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d48:	491e      	ldr	r1, [pc, #120]	; (8005dc4 <sync_fs+0xdc>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fd44 	bl	80057d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3338      	adds	r3, #56	; 0x38
 8005d54:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f7ff fd3a 	bl	80057d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3338      	adds	r3, #56	; 0x38
 8005d68:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7ff fd30 	bl	80057d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7858      	ldrb	r0, [r3, #1]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d90:	2301      	movs	r3, #1
 8005d92:	f7ff fc73 	bl	800567c <disk_write>
			fs->fsi_flag = 0;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2200      	movs	r2, #0
 8005da2:	2100      	movs	r1, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff fc89 	bl	80056bc <disk_ioctl>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <sync_fs+0xcc>
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	41615252 	.word	0x41615252
 8005dc4:	61417272 	.word	0x61417272

08005dc8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	3b02      	subs	r3, #2
 8005dd6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	3b02      	subs	r3, #2
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d301      	bcc.n	8005de8 <clust2sect+0x20>
 8005de4:	2300      	movs	r3, #0
 8005de6:	e008      	b.n	8005dfa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	895b      	ldrh	r3, [r3, #10]
 8005dec:	461a      	mov	r2, r3
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	fb03 f202 	mul.w	r2, r3, r2
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	4413      	add	r3, r2
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d904      	bls.n	8005e26 <get_fat+0x20>
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005e26:	2301      	movs	r3, #1
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e0bb      	b.n	8005fa4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	f000 8083 	beq.w	8005f42 <get_fat+0x13c>
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	f300 80a7 	bgt.w	8005f90 <get_fat+0x18a>
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d002      	beq.n	8005e4c <get_fat+0x46>
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d056      	beq.n	8005ef8 <get_fat+0xf2>
 8005e4a:	e0a1      	b.n	8005f90 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	899b      	ldrh	r3, [r3, #12]
 8005e62:	4619      	mov	r1, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e6a:	4413      	add	r3, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6938      	ldr	r0, [r7, #16]
 8005e70:	f7ff ff0c 	bl	8005c8c <move_window>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 808d 	bne.w	8005f96 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	60fa      	str	r2, [r7, #12]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	8992      	ldrh	r2, [r2, #12]
 8005e86:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e8a:	fb01 f202 	mul.w	r2, r1, r2
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	899b      	ldrh	r3, [r3, #12]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eaa:	4413      	add	r3, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	6938      	ldr	r0, [r7, #16]
 8005eb0:	f7ff feec 	bl	8005c8c <move_window>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d16f      	bne.n	8005f9a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	899b      	ldrh	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ec6:	fb01 f202 	mul.w	r2, r1, r2
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <get_fat+0xe8>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	e002      	b.n	8005ef4 <get_fat+0xee>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef4:	617b      	str	r3, [r7, #20]
			break;
 8005ef6:	e055      	b.n	8005fa4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	899b      	ldrh	r3, [r3, #12]
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	4619      	mov	r1, r3
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6938      	ldr	r0, [r7, #16]
 8005f12:	f7ff febb 	bl	8005c8c <move_window>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d140      	bne.n	8005f9e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	8992      	ldrh	r2, [r2, #12]
 8005f2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f2e:	fb00 f202 	mul.w	r2, r0, r2
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	440b      	add	r3, r1
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fbf8 	bl	800572c <ld_word>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	617b      	str	r3, [r7, #20]
			break;
 8005f40:	e030      	b.n	8005fa4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	899b      	ldrh	r3, [r3, #12]
 8005f4a:	089b      	lsrs	r3, r3, #2
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	4619      	mov	r1, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f56:	4413      	add	r3, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6938      	ldr	r0, [r7, #16]
 8005f5c:	f7ff fe96 	bl	8005c8c <move_window>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d11d      	bne.n	8005fa2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	8992      	ldrh	r2, [r2, #12]
 8005f74:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f78:	fb00 f202 	mul.w	r2, r0, r2
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	440b      	add	r3, r1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fbeb 	bl	800575c <ld_dword>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f8c:	617b      	str	r3, [r7, #20]
			break;
 8005f8e:	e009      	b.n	8005fa4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005f90:	2301      	movs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e006      	b.n	8005fa4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f96:	bf00      	nop
 8005f98:	e004      	b.n	8005fa4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fa2:	bf00      	nop
		}
	}

	return val;
 8005fa4:	697b      	ldr	r3, [r7, #20]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005fae:	b590      	push	{r4, r7, lr}
 8005fb0:	b089      	sub	sp, #36	; 0x24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	f240 8102 	bls.w	80061ca <put_fat+0x21c>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	f080 80fc 	bcs.w	80061ca <put_fat+0x21c>
		switch (fs->fs_type) {
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	f000 80b6 	beq.w	8006148 <put_fat+0x19a>
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	f300 80fd 	bgt.w	80061dc <put_fat+0x22e>
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d003      	beq.n	8005fee <put_fat+0x40>
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	f000 8083 	beq.w	80060f2 <put_fat+0x144>
 8005fec:	e0f6      	b.n	80061dc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	899b      	ldrh	r3, [r3, #12]
 8006004:	4619      	mov	r1, r3
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	fbb3 f3f1 	udiv	r3, r3, r1
 800600c:	4413      	add	r3, r2
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fe3b 	bl	8005c8c <move_window>
 8006016:	4603      	mov	r3, r0
 8006018:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800601a:	7ffb      	ldrb	r3, [r7, #31]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 80d6 	bne.w	80061ce <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	61ba      	str	r2, [r7, #24]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	8992      	ldrh	r2, [r2, #12]
 8006032:	fbb3 f0f2 	udiv	r0, r3, r2
 8006036:	fb00 f202 	mul.w	r2, r0, r2
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	440b      	add	r3, r1
 800603e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <put_fat+0xb8>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	b25b      	sxtb	r3, r3
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	b25a      	sxtb	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	b25b      	sxtb	r3, r3
 800605e:	4313      	orrs	r3, r2
 8006060:	b25b      	sxtb	r3, r3
 8006062:	b2db      	uxtb	r3, r3
 8006064:	e001      	b.n	800606a <put_fat+0xbc>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	899b      	ldrh	r3, [r3, #12]
 800607c:	4619      	mov	r1, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	fbb3 f3f1 	udiv	r3, r3, r1
 8006084:	4413      	add	r3, r2
 8006086:	4619      	mov	r1, r3
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff fdff 	bl	8005c8c <move_window>
 800608e:	4603      	mov	r3, r0
 8006090:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006092:	7ffb      	ldrb	r3, [r7, #31]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f040 809c 	bne.w	80061d2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	899b      	ldrh	r3, [r3, #12]
 80060a4:	461a      	mov	r2, r3
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80060ac:	fb00 f202 	mul.w	r2, r0, r2
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	440b      	add	r3, r1
 80060b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <put_fat+0x11a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e00e      	b.n	80060e6 <put_fat+0x138>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b25b      	sxtb	r3, r3
 80060ce:	f023 030f 	bic.w	r3, r3, #15
 80060d2:	b25a      	sxtb	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	0a1b      	lsrs	r3, r3, #8
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	4313      	orrs	r3, r2
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	70da      	strb	r2, [r3, #3]
			break;
 80060f0:	e074      	b.n	80061dc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	899b      	ldrh	r3, [r3, #12]
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4619      	mov	r1, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	fbb3 f3f1 	udiv	r3, r3, r1
 8006106:	4413      	add	r3, r2
 8006108:	4619      	mov	r1, r3
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff fdbe 	bl	8005c8c <move_window>
 8006110:	4603      	mov	r3, r0
 8006112:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006114:	7ffb      	ldrb	r3, [r7, #31]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d15d      	bne.n	80061d6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	8992      	ldrh	r2, [r2, #12]
 8006128:	fbb3 f0f2 	udiv	r0, r3, r2
 800612c:	fb00 f202 	mul.w	r2, r0, r2
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	440b      	add	r3, r1
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	b292      	uxth	r2, r2
 8006138:	4611      	mov	r1, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fb31 	bl	80057a2 <st_word>
			fs->wflag = 1;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	70da      	strb	r2, [r3, #3]
			break;
 8006146:	e049      	b.n	80061dc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	899b      	ldrh	r3, [r3, #12]
 8006150:	089b      	lsrs	r3, r3, #2
 8006152:	b29b      	uxth	r3, r3
 8006154:	4619      	mov	r1, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	fbb3 f3f1 	udiv	r3, r3, r1
 800615c:	4413      	add	r3, r2
 800615e:	4619      	mov	r1, r3
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff fd93 	bl	8005c8c <move_window>
 8006166:	4603      	mov	r3, r0
 8006168:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800616a:	7ffb      	ldrb	r3, [r7, #31]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d134      	bne.n	80061da <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	8992      	ldrh	r2, [r2, #12]
 8006184:	fbb3 f0f2 	udiv	r0, r3, r2
 8006188:	fb00 f202 	mul.w	r2, r0, r2
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	440b      	add	r3, r1
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fae3 	bl	800575c <ld_dword>
 8006196:	4603      	mov	r3, r0
 8006198:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800619c:	4323      	orrs	r3, r4
 800619e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	8992      	ldrh	r2, [r2, #12]
 80061ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80061b2:	fb00 f202 	mul.w	r2, r0, r2
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	440b      	add	r3, r1
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff fb0b 	bl	80057d8 <st_dword>
			fs->wflag = 1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	70da      	strb	r2, [r3, #3]
			break;
 80061c8:	e008      	b.n	80061dc <put_fat+0x22e>
		}
	}
 80061ca:	bf00      	nop
 80061cc:	e006      	b.n	80061dc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061ce:	bf00      	nop
 80061d0:	e004      	b.n	80061dc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061d2:	bf00      	nop
 80061d4:	e002      	b.n	80061dc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061d6:	bf00      	nop
 80061d8:	e000      	b.n	80061dc <put_fat+0x22e>
			if (res != FR_OK) break;
 80061da:	bf00      	nop
	return res;
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd90      	pop	{r4, r7, pc}

080061e6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b088      	sub	sp, #32
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d904      	bls.n	800620c <remove_chain+0x26>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	429a      	cmp	r2, r3
 800620a:	d301      	bcc.n	8006210 <remove_chain+0x2a>
 800620c:	2302      	movs	r3, #2
 800620e:	e04b      	b.n	80062a8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	69b8      	ldr	r0, [r7, #24]
 800621e:	f7ff fec6 	bl	8005fae <put_fat>
 8006222:	4603      	mov	r3, r0
 8006224:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006226:	7ffb      	ldrb	r3, [r7, #31]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <remove_chain+0x4a>
 800622c:	7ffb      	ldrb	r3, [r7, #31]
 800622e:	e03b      	b.n	80062a8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fde7 	bl	8005e06 <get_fat>
 8006238:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d031      	beq.n	80062a4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <remove_chain+0x64>
 8006246:	2302      	movs	r3, #2
 8006248:	e02e      	b.n	80062a8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006250:	d101      	bne.n	8006256 <remove_chain+0x70>
 8006252:	2301      	movs	r3, #1
 8006254:	e028      	b.n	80062a8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006256:	2200      	movs	r2, #0
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	69b8      	ldr	r0, [r7, #24]
 800625c:	f7ff fea7 	bl	8005fae <put_fat>
 8006260:	4603      	mov	r3, r0
 8006262:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006264:	7ffb      	ldrb	r3, [r7, #31]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <remove_chain+0x88>
 800626a:	7ffb      	ldrb	r3, [r7, #31]
 800626c:	e01c      	b.n	80062a8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	3b02      	subs	r3, #2
 8006278:	429a      	cmp	r2, r3
 800627a:	d20b      	bcs.n	8006294 <remove_chain+0xae>
			fs->free_clst++;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	791b      	ldrb	r3, [r3, #4]
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	b2da      	uxtb	r2, r3
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d3c6      	bcc.n	8006230 <remove_chain+0x4a>
 80062a2:	e000      	b.n	80062a6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80062a4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10d      	bne.n	80062e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <create_chain+0x2c>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d31b      	bcc.n	8006314 <create_chain+0x64>
 80062dc:	2301      	movs	r3, #1
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	e018      	b.n	8006314 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fd8e 	bl	8005e06 <get_fat>
 80062ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d801      	bhi.n	80062f6 <create_chain+0x46>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e070      	b.n	80063d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062fc:	d101      	bne.n	8006302 <create_chain+0x52>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	e06a      	b.n	80063d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d201      	bcs.n	8006310 <create_chain+0x60>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	e063      	b.n	80063d8 <create_chain+0x128>
		scl = clst;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	429a      	cmp	r2, r3
 8006326:	d307      	bcc.n	8006338 <create_chain+0x88>
				ncl = 2;
 8006328:	2302      	movs	r3, #2
 800632a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	d901      	bls.n	8006338 <create_chain+0x88>
 8006334:	2300      	movs	r3, #0
 8006336:	e04f      	b.n	80063d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006338:	69f9      	ldr	r1, [r7, #28]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fd63 	bl	8005e06 <get_fat>
 8006340:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00e      	beq.n	8006366 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d003      	beq.n	8006356 <create_chain+0xa6>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006354:	d101      	bne.n	800635a <create_chain+0xaa>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	e03e      	b.n	80063d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	429a      	cmp	r2, r3
 8006360:	d1da      	bne.n	8006318 <create_chain+0x68>
 8006362:	2300      	movs	r3, #0
 8006364:	e038      	b.n	80063d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006366:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800636c:	69f9      	ldr	r1, [r7, #28]
 800636e:	6938      	ldr	r0, [r7, #16]
 8006370:	f7ff fe1d 	bl	8005fae <put_fat>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <create_chain+0xe2>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d006      	beq.n	8006392 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6938      	ldr	r0, [r7, #16]
 800638a:	f7ff fe10 	bl	8005fae <put_fat>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d116      	bne.n	80063c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	3b02      	subs	r3, #2
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d804      	bhi.n	80063b6 <create_chain+0x106>
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	1e5a      	subs	r2, r3, #1
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	791b      	ldrb	r3, [r3, #4]
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	711a      	strb	r2, [r3, #4]
 80063c4:	e007      	b.n	80063d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <create_chain+0x122>
 80063cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d0:	e000      	b.n	80063d4 <create_chain+0x124>
 80063d2:	2301      	movs	r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80063d6:	69fb      	ldr	r3, [r7, #28]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	3304      	adds	r3, #4
 80063f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	899b      	ldrh	r3, [r3, #12]
 80063fc:	461a      	mov	r2, r3
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	fbb3 f3f2 	udiv	r3, r3, r2
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	8952      	ldrh	r2, [r2, #10]
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1d1a      	adds	r2, r3, #4
 8006412:	613a      	str	r2, [r7, #16]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <clmt_clust+0x42>
 800641e:	2300      	movs	r3, #0
 8006420:	e010      	b.n	8006444 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	d307      	bcc.n	800643a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3304      	adds	r3, #4
 8006436:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006438:	e7e9      	b.n	800640e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800643a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
}
 8006444:	4618      	mov	r0, r3
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006466:	d204      	bcs.n	8006472 <dir_sdi+0x22>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006472:	2302      	movs	r3, #2
 8006474:	e071      	b.n	800655a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <dir_sdi+0x46>
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d902      	bls.n	8006496 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10c      	bne.n	80064b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	8912      	ldrh	r2, [r2, #8]
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d301      	bcc.n	80064ac <dir_sdi+0x5c>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e056      	b.n	800655a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	61da      	str	r2, [r3, #28]
 80064b4:	e02d      	b.n	8006512 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	895b      	ldrh	r3, [r3, #10]
 80064ba:	461a      	mov	r2, r3
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	899b      	ldrh	r3, [r3, #12]
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
 80064c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064c6:	e019      	b.n	80064fc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6979      	ldr	r1, [r7, #20]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fc9a 	bl	8005e06 <get_fat>
 80064d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064da:	d101      	bne.n	80064e0 <dir_sdi+0x90>
 80064dc:	2301      	movs	r3, #1
 80064de:	e03c      	b.n	800655a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d904      	bls.n	80064f0 <dir_sdi+0xa0>
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d301      	bcc.n	80064f4 <dir_sdi+0xa4>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e032      	b.n	800655a <dir_sdi+0x10a>
			ofs -= csz;
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	429a      	cmp	r2, r3
 8006502:	d2e1      	bcs.n	80064c8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	6938      	ldr	r0, [r7, #16]
 8006508:	f7ff fc5e 	bl	8005dc8 <clust2sect>
 800650c:	4602      	mov	r2, r0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <dir_sdi+0xd4>
 8006520:	2302      	movs	r3, #2
 8006522:	e01a      	b.n	800655a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	899b      	ldrh	r3, [r3, #12]
 800652c:	4619      	mov	r1, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	fbb3 f3f1 	udiv	r3, r3, r1
 8006534:	441a      	add	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	899b      	ldrh	r3, [r3, #12]
 8006544:	461a      	mov	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	fbb3 f0f2 	udiv	r0, r3, r2
 800654c:	fb00 f202 	mul.w	r2, r0, r2
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	18ca      	adds	r2, r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	3320      	adds	r3, #32
 8006578:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <dir_next+0x28>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006588:	d301      	bcc.n	800658e <dir_next+0x2c>
 800658a:	2304      	movs	r3, #4
 800658c:	e0bb      	b.n	8006706 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	899b      	ldrh	r3, [r3, #12]
 8006592:	461a      	mov	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	fbb3 f1f2 	udiv	r1, r3, r2
 800659a:	fb01 f202 	mul.w	r2, r1, r2
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 809d 	bne.w	80066e0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	8912      	ldrh	r2, [r2, #8]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	f0c0 808d 	bcc.w	80066e0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	61da      	str	r2, [r3, #28]
 80065cc:	2304      	movs	r3, #4
 80065ce:	e09a      	b.n	8006706 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	899b      	ldrh	r3, [r3, #12]
 80065d4:	461a      	mov	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	8952      	ldrh	r2, [r2, #10]
 80065e0:	3a01      	subs	r2, #1
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d17b      	bne.n	80066e0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f7ff fc08 	bl	8005e06 <get_fat>
 80065f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d801      	bhi.n	8006602 <dir_next+0xa0>
 80065fe:	2302      	movs	r3, #2
 8006600:	e081      	b.n	8006706 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006608:	d101      	bne.n	800660e <dir_next+0xac>
 800660a:	2301      	movs	r3, #1
 800660c:	e07b      	b.n	8006706 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	429a      	cmp	r2, r3
 8006616:	d359      	bcc.n	80066cc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d104      	bne.n	8006628 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	61da      	str	r2, [r3, #28]
 8006624:	2304      	movs	r3, #4
 8006626:	e06e      	b.n	8006706 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7ff fe3d 	bl	80062b0 <create_chain>
 8006636:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <dir_next+0xe0>
 800663e:	2307      	movs	r3, #7
 8006640:	e061      	b.n	8006706 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <dir_next+0xea>
 8006648:	2302      	movs	r3, #2
 800664a:	e05c      	b.n	8006706 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006652:	d101      	bne.n	8006658 <dir_next+0xf6>
 8006654:	2301      	movs	r3, #1
 8006656:	e056      	b.n	8006706 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fad3 	bl	8005c04 <sync_window>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <dir_next+0x106>
 8006664:	2301      	movs	r3, #1
 8006666:	e04e      	b.n	8006706 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	899b      	ldrh	r3, [r3, #12]
 8006672:	461a      	mov	r2, r3
 8006674:	2100      	movs	r1, #0
 8006676:	f7ff f8fc 	bl	8005872 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	6979      	ldr	r1, [r7, #20]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff fba1 	bl	8005dc8 <clust2sect>
 8006686:	4602      	mov	r2, r0
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	635a      	str	r2, [r3, #52]	; 0x34
 800668c:	e012      	b.n	80066b4 <dir_next+0x152>
						fs->wflag = 1;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff fab5 	bl	8005c04 <sync_window>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <dir_next+0x142>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e030      	b.n	8006706 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	3301      	adds	r3, #1
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	635a      	str	r2, [r3, #52]	; 0x34
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	895b      	ldrh	r3, [r3, #10]
 80066b8:	461a      	mov	r2, r3
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4293      	cmp	r3, r2
 80066be:	d3e6      	bcc.n	800668e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80066d2:	6979      	ldr	r1, [r7, #20]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fb77 	bl	8005dc8 <clust2sect>
 80066da:	4602      	mov	r2, r0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	899b      	ldrh	r3, [r3, #12]
 80066f0:	461a      	mov	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80066f8:	fb00 f202 	mul.w	r2, r0, r2
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	18ca      	adds	r2, r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b086      	sub	sp, #24
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800671e:	2100      	movs	r1, #0
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff fe95 	bl	8006450 <dir_sdi>
 8006726:	4603      	mov	r3, r0
 8006728:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d12b      	bne.n	8006788 <dir_alloc+0x7a>
		n = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	4619      	mov	r1, r3
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f7ff faa6 	bl	8005c8c <move_window>
 8006740:	4603      	mov	r3, r0
 8006742:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d11d      	bne.n	8006786 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2be5      	cmp	r3, #229	; 0xe5
 8006752:	d004      	beq.n	800675e <dir_alloc+0x50>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d102      	bne.n	8006772 <dir_alloc+0x64>
 800676c:	e00c      	b.n	8006788 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800676e:	2300      	movs	r3, #0
 8006770:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006772:	2101      	movs	r1, #1
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff fef4 	bl	8006562 <dir_next>
 800677a:	4603      	mov	r3, r0
 800677c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0d7      	beq.n	8006734 <dir_alloc+0x26>
 8006784:	e000      	b.n	8006788 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006786:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b04      	cmp	r3, #4
 800678c:	d101      	bne.n	8006792 <dir_alloc+0x84>
 800678e:	2307      	movs	r3, #7
 8006790:	75fb      	strb	r3, [r7, #23]
	return res;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	331a      	adds	r3, #26
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe ffbe 	bl	800572c <ld_word>
 80067b0:	4603      	mov	r3, r0
 80067b2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d109      	bne.n	80067d0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	3314      	adds	r3, #20
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe ffb3 	bl	800572c <ld_word>
 80067c6:	4603      	mov	r3, r0
 80067c8:	041b      	lsls	r3, r3, #16
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80067d0:	68fb      	ldr	r3, [r7, #12]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	331a      	adds	r3, #26
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	b292      	uxth	r2, r2
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe ffd6 	bl	80057a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d109      	bne.n	8006812 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f103 0214 	add.w	r2, r3, #20
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	b29b      	uxth	r3, r3
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f7fe ffc8 	bl	80057a2 <st_word>
	}
}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	331a      	adds	r3, #26
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe ff7e 	bl	800572c <ld_word>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <cmp_lfn+0x1e>
 8006836:	2300      	movs	r3, #0
 8006838:	e059      	b.n	80068ee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006842:	1e5a      	subs	r2, r3, #1
 8006844:	4613      	mov	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006850:	2301      	movs	r3, #1
 8006852:	81fb      	strh	r3, [r7, #14]
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	e033      	b.n	80068c2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800685a:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <cmp_lfn+0xdc>)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	4413      	add	r3, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe ff5f 	bl	800572c <ld_word>
 800686e:	4603      	mov	r3, r0
 8006870:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006872:	89fb      	ldrh	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01a      	beq.n	80068ae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2bfe      	cmp	r3, #254	; 0xfe
 800687c:	d812      	bhi.n	80068a4 <cmp_lfn+0x88>
 800687e:	89bb      	ldrh	r3, [r7, #12]
 8006880:	4618      	mov	r0, r3
 8006882:	f7fe fe11 	bl	80054a8 <ff_wtoupper>
 8006886:	4603      	mov	r3, r0
 8006888:	461c      	mov	r4, r3
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	617a      	str	r2, [r7, #20]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe fe05 	bl	80054a8 <ff_wtoupper>
 800689e:	4603      	mov	r3, r0
 80068a0:	429c      	cmp	r4, r3
 80068a2:	d001      	beq.n	80068a8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80068a4:	2300      	movs	r3, #0
 80068a6:	e022      	b.n	80068ee <cmp_lfn+0xd2>
			}
			wc = uc;
 80068a8:	89bb      	ldrh	r3, [r7, #12]
 80068aa:	81fb      	strh	r3, [r7, #14]
 80068ac:	e006      	b.n	80068bc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80068ae:	89bb      	ldrh	r3, [r7, #12]
 80068b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d001      	beq.n	80068bc <cmp_lfn+0xa0>
 80068b8:	2300      	movs	r3, #0
 80068ba:	e018      	b.n	80068ee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	3301      	adds	r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	d9c8      	bls.n	800685a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <cmp_lfn+0xd0>
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <cmp_lfn+0xd0>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <cmp_lfn+0xd0>
 80068e8:	2300      	movs	r3, #0
 80068ea:	e000      	b.n	80068ee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80068ec:	2301      	movs	r3, #1
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd90      	pop	{r4, r7, pc}
 80068f6:	bf00      	nop
 80068f8:	080141d0 	.word	0x080141d0

080068fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4611      	mov	r1, r2
 8006908:	461a      	mov	r2, r3
 800690a:	460b      	mov	r3, r1
 800690c:	71fb      	strb	r3, [r7, #7]
 800690e:	4613      	mov	r3, r2
 8006910:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	330d      	adds	r3, #13
 8006916:	79ba      	ldrb	r2, [r7, #6]
 8006918:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	330b      	adds	r3, #11
 800691e:	220f      	movs	r2, #15
 8006920:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	330c      	adds	r3, #12
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	331a      	adds	r3, #26
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe ff36 	bl	80057a2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	1e5a      	subs	r2, r3, #1
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	82fb      	strh	r3, [r7, #22]
 800694a:	2300      	movs	r3, #0
 800694c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800694e:	8afb      	ldrh	r3, [r7, #22]
 8006950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006954:	4293      	cmp	r3, r2
 8006956:	d007      	beq.n	8006968 <put_lfn+0x6c>
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	61fa      	str	r2, [r7, #28]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006968:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <put_lfn+0xcc>)
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	4413      	add	r3, r2
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4413      	add	r3, r2
 8006976:	8afa      	ldrh	r2, [r7, #22]
 8006978:	4611      	mov	r1, r2
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe ff11 	bl	80057a2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006980:	8afb      	ldrh	r3, [r7, #22]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <put_lfn+0x90>
 8006986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800698a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	3301      	adds	r3, #1
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b0c      	cmp	r3, #12
 8006996:	d9da      	bls.n	800694e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006998:	8afb      	ldrh	r3, [r7, #22]
 800699a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800699e:	4293      	cmp	r3, r2
 80069a0:	d006      	beq.n	80069b0 <put_lfn+0xb4>
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d103      	bne.n	80069b8 <put_lfn+0xbc>
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	79fa      	ldrb	r2, [r7, #7]
 80069bc:	701a      	strb	r2, [r3, #0]
}
 80069be:	bf00      	nop
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	080141d0 	.word	0x080141d0

080069cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08c      	sub	sp, #48	; 0x30
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80069da:	220b      	movs	r2, #11
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7fe ff26 	bl	8005830 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b05      	cmp	r3, #5
 80069e8:	d92b      	bls.n	8006a42 <gen_numname+0x76>
		sr = seq;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80069ee:	e022      	b.n	8006a36 <gen_numname+0x6a>
			wc = *lfn++;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80069fa:	2300      	movs	r3, #0
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fe:	e017      	b.n	8006a30 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	005a      	lsls	r2, r3, #1
 8006a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <gen_numname+0x5e>
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006a24:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006a28:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	2b0f      	cmp	r3, #15
 8006a34:	d9e4      	bls.n	8006a00 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1d8      	bne.n	80069f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006a42:	2307      	movs	r3, #7
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	3330      	adds	r3, #48	; 0x30
 8006a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a5a:	2b39      	cmp	r3, #57	; 0x39
 8006a5c:	d904      	bls.n	8006a68 <gen_numname+0x9c>
 8006a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a62:	3307      	adds	r3, #7
 8006a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	1e5a      	subs	r2, r3, #1
 8006a6c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a6e:	3330      	adds	r3, #48	; 0x30
 8006a70:	443b      	add	r3, r7
 8006a72:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006a76:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1df      	bne.n	8006a46 <gen_numname+0x7a>
	ns[i] = '~';
 8006a86:	f107 0214 	add.w	r2, r7, #20
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	4413      	add	r3, r2
 8006a8e:	227e      	movs	r2, #126	; 0x7e
 8006a90:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006a92:	2300      	movs	r3, #0
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
 8006a96:	e002      	b.n	8006a9e <gen_numname+0xd2>
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d205      	bcs.n	8006ab2 <gen_numname+0xe6>
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	4413      	add	r3, r2
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d1f2      	bne.n	8006a98 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	2b07      	cmp	r3, #7
 8006ab6:	d807      	bhi.n	8006ac8 <gen_numname+0xfc>
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	62ba      	str	r2, [r7, #40]	; 0x28
 8006abe:	3330      	adds	r3, #48	; 0x30
 8006ac0:	443b      	add	r3, r7
 8006ac2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006ac6:	e000      	b.n	8006aca <gen_numname+0xfe>
 8006ac8:	2120      	movs	r1, #32
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	627a      	str	r2, [r7, #36]	; 0x24
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	2b07      	cmp	r3, #7
 8006adc:	d9e9      	bls.n	8006ab2 <gen_numname+0xe6>
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	3730      	adds	r7, #48	; 0x30
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006af4:	230b      	movs	r3, #11
 8006af6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	0852      	lsrs	r2, r2, #1
 8006afe:	01db      	lsls	r3, r3, #7
 8006b00:	4313      	orrs	r3, r2
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	1c59      	adds	r1, r3, #1
 8006b08:	6079      	str	r1, [r7, #4]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1ed      	bne.n	8006af8 <sum_sfn+0x10>
	return sum;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fc88 	bl	8006450 <dir_sdi>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <dir_find+0x24>
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	e0a9      	b.n	8006ca2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b4e:	23ff      	movs	r3, #255	; 0xff
 8006b50:	753b      	strb	r3, [r7, #20]
 8006b52:	7d3b      	ldrb	r3, [r7, #20]
 8006b54:	757b      	strb	r3, [r7, #21]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6938      	ldr	r0, [r7, #16]
 8006b66:	f7ff f891 	bl	8005c8c <move_window>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f040 8090 	bne.w	8006c96 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b7e:	7dbb      	ldrb	r3, [r7, #22]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <dir_find+0x60>
 8006b84:	2304      	movs	r3, #4
 8006b86:	75fb      	strb	r3, [r7, #23]
 8006b88:	e08a      	b.n	8006ca0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	330b      	adds	r3, #11
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	7bfa      	ldrb	r2, [r7, #15]
 8006b9c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006b9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ba0:	2be5      	cmp	r3, #229	; 0xe5
 8006ba2:	d007      	beq.n	8006bb4 <dir_find+0x8a>
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <dir_find+0x98>
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b0f      	cmp	r3, #15
 8006bb2:	d006      	beq.n	8006bc2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006bb4:	23ff      	movs	r3, #255	; 0xff
 8006bb6:	757b      	strb	r3, [r7, #21]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc0:	e05e      	b.n	8006c80 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	2b0f      	cmp	r3, #15
 8006bc6:	d136      	bne.n	8006c36 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d154      	bne.n	8006c80 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006bd6:	7dbb      	ldrb	r3, [r7, #22]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00d      	beq.n	8006bfc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	7b5b      	ldrb	r3, [r3, #13]
 8006be6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006be8:	7dbb      	ldrb	r3, [r7, #22]
 8006bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bee:	75bb      	strb	r3, [r7, #22]
 8006bf0:	7dbb      	ldrb	r3, [r7, #22]
 8006bf2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006bfc:	7dba      	ldrb	r2, [r7, #22]
 8006bfe:	7d7b      	ldrb	r3, [r7, #21]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d115      	bne.n	8006c30 <dir_find+0x106>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	330d      	adds	r3, #13
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	7d3a      	ldrb	r2, [r7, #20]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d10e      	bne.n	8006c30 <dir_find+0x106>
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7ff fdfd 	bl	800681c <cmp_lfn>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <dir_find+0x106>
 8006c28:	7d7b      	ldrb	r3, [r7, #21]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	e000      	b.n	8006c32 <dir_find+0x108>
 8006c30:	23ff      	movs	r3, #255	; 0xff
 8006c32:	757b      	strb	r3, [r7, #21]
 8006c34:	e024      	b.n	8006c80 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006c36:	7d7b      	ldrb	r3, [r7, #21]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <dir_find+0x126>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff ff51 	bl	8006ae8 <sum_sfn>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	7d3b      	ldrb	r3, [r7, #20]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d024      	beq.n	8006c9a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <dir_find+0x14a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a18      	ldr	r0, [r3, #32]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3324      	adds	r3, #36	; 0x24
 8006c66:	220b      	movs	r2, #11
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f7fe fe1d 	bl	80058a8 <mem_cmp>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d014      	beq.n	8006c9e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c74:	23ff      	movs	r3, #255	; 0xff
 8006c76:	757b      	strb	r3, [r7, #21]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fc6d 	bl	8006562 <dir_next>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f43f af65 	beq.w	8006b5e <dir_find+0x34>
 8006c94:	e004      	b.n	8006ca0 <dir_find+0x176>
		if (res != FR_OK) break;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c9e:	bf00      	nop

	return res;
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	; 0x30
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006cc0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <dir_register+0x20>
 8006cc8:	2306      	movs	r3, #6
 8006cca:	e0e0      	b.n	8006e8e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006ccc:	2300      	movs	r3, #0
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd0:	e002      	b.n	8006cd8 <dir_register+0x2c>
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f4      	bne.n	8006cd2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006cee:	f107 030c 	add.w	r3, r7, #12
 8006cf2:	220c      	movs	r2, #12
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe fd9b 	bl	8005830 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d032      	beq.n	8006d6a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d10:	e016      	b.n	8006d40 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	f107 010c 	add.w	r1, r7, #12
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	f7ff fe53 	bl	80069cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff feff 	bl	8006b2a <dir_find>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	2b63      	cmp	r3, #99	; 0x63
 8006d44:	d9e5      	bls.n	8006d12 <dir_register+0x66>
 8006d46:	e000      	b.n	8006d4a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006d48:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	2b64      	cmp	r3, #100	; 0x64
 8006d4e:	d101      	bne.n	8006d54 <dir_register+0xa8>
 8006d50:	2307      	movs	r3, #7
 8006d52:	e09c      	b.n	8006e8e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d002      	beq.n	8006d62 <dir_register+0xb6>
 8006d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d60:	e095      	b.n	8006e8e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006d62:	7dfa      	ldrb	r2, [r7, #23]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <dir_register+0xd8>
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	330c      	adds	r3, #12
 8006d78:	4a47      	ldr	r2, [pc, #284]	; (8006e98 <dir_register+0x1ec>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	089b      	lsrs	r3, r3, #2
 8006d80:	3301      	adds	r3, #1
 8006d82:	e000      	b.n	8006d86 <dir_register+0xda>
 8006d84:	2301      	movs	r3, #1
 8006d86:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006d88:	6a39      	ldr	r1, [r7, #32]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fcbf 	bl	800670e <dir_alloc>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d148      	bne.n	8006e30 <dir_register+0x184>
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d042      	beq.n	8006e30 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	015b      	lsls	r3, r3, #5
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff fb4a 	bl	8006450 <dir_sdi>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d132      	bne.n	8006e30 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3324      	adds	r3, #36	; 0x24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff fe8a 	bl	8006ae8 <sum_sfn>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	69f8      	ldr	r0, [r7, #28]
 8006de0:	f7fe ff54 	bl	8005c8c <move_window>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d11d      	bne.n	8006e2e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	6918      	ldr	r0, [r3, #16]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a19      	ldr	r1, [r3, #32]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	7efb      	ldrb	r3, [r7, #27]
 8006e00:	f7ff fd7c 	bl	80068fc <put_lfn>
				fs->wflag = 1;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2201      	movs	r2, #1
 8006e08:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fba8 	bl	8006562 <dir_next>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <dir_register+0x184>
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	623b      	str	r3, [r7, #32]
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1d5      	bne.n	8006dd8 <dir_register+0x12c>
 8006e2c:	e000      	b.n	8006e30 <dir_register+0x184>
				if (res != FR_OK) break;
 8006e2e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d128      	bne.n	8006e8a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	69f8      	ldr	r0, [r7, #28]
 8006e40:	f7fe ff24 	bl	8005c8c <move_window>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d11b      	bne.n	8006e8a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	2220      	movs	r2, #32
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fd09 	bl	8005872 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a18      	ldr	r0, [r3, #32]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	220b      	movs	r2, #11
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f7fe fce0 	bl	8005830 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	f002 0218 	and.w	r2, r2, #24
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2201      	movs	r2, #1
 8006e88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3730      	adds	r7, #48	; 0x30
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	4ec4ec4f 	.word	0x4ec4ec4f

08006e9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08a      	sub	sp, #40	; 0x28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	613b      	str	r3, [r7, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	61ba      	str	r2, [r7, #24]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ecc:	2b1f      	cmp	r3, #31
 8006ece:	d940      	bls.n	8006f52 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8006ed4:	d006      	beq.n	8006ee4 <create_name+0x48>
 8006ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8006eda:	d110      	bne.n	8006efe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006edc:	e002      	b.n	8006ee4 <create_name+0x48>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	4413      	add	r3, r2
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b2f      	cmp	r3, #47	; 0x2f
 8006eee:	d0f6      	beq.n	8006ede <create_name+0x42>
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8006efa:	d0f0      	beq.n	8006ede <create_name+0x42>
			break;
 8006efc:	e02a      	b.n	8006f54 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2bfe      	cmp	r3, #254	; 0xfe
 8006f02:	d901      	bls.n	8006f08 <create_name+0x6c>
 8006f04:	2306      	movs	r3, #6
 8006f06:	e17d      	b.n	8007204 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f10:	2101      	movs	r1, #1
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fa8c 	bl	8005430 <ff_convert>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <create_name+0x8a>
 8006f22:	2306      	movs	r3, #6
 8006f24:	e16e      	b.n	8007204 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f28:	2b7f      	cmp	r3, #127	; 0x7f
 8006f2a:	d809      	bhi.n	8006f40 <create_name+0xa4>
 8006f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f2e:	4619      	mov	r1, r3
 8006f30:	488d      	ldr	r0, [pc, #564]	; (8007168 <create_name+0x2cc>)
 8006f32:	f7fe fce0 	bl	80058f6 <chk_chr>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <create_name+0xa4>
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	e161      	b.n	8007204 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	617a      	str	r2, [r7, #20]
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f4e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f50:	e7b4      	b.n	8006ebc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006f52:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	441a      	add	r2, r3
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f60:	2b1f      	cmp	r3, #31
 8006f62:	d801      	bhi.n	8006f68 <create_name+0xcc>
 8006f64:	2304      	movs	r3, #4
 8006f66:	e000      	b.n	8006f6a <create_name+0xce>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f6e:	e011      	b.n	8006f94 <create_name+0xf8>
		w = lfn[di - 1];
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f76:	3b01      	subs	r3, #1
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d002      	beq.n	8006f8e <create_name+0xf2>
 8006f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8c:	d106      	bne.n	8006f9c <create_name+0x100>
		di--;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1ea      	bne.n	8006f70 <create_name+0xd4>
 8006f9a:	e000      	b.n	8006f9e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006f9c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <create_name+0x118>
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	e127      	b.n	8007204 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	220b      	movs	r2, #11
 8006fba:	2120      	movs	r1, #32
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fc58 	bl	8005872 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	e002      	b.n	8006fce <create_name+0x132>
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d0f5      	beq.n	8006fc8 <create_name+0x12c>
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fe8:	d0ee      	beq.n	8006fc8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <create_name+0x168>
 8006ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff4:	f043 0303 	orr.w	r3, r3, #3
 8006ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006ffc:	e002      	b.n	8007004 <create_name+0x168>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	3b01      	subs	r3, #1
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <create_name+0x182>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007010:	3b01      	subs	r3, #1
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	2b2e      	cmp	r3, #46	; 0x2e
 800701c:	d1ef      	bne.n	8006ffe <create_name+0x162>

	i = b = 0; ni = 8;
 800701e:	2300      	movs	r3, #0
 8007020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007024:	2300      	movs	r3, #0
 8007026:	623b      	str	r3, [r7, #32]
 8007028:	2308      	movs	r3, #8
 800702a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	61ba      	str	r2, [r7, #24]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800703c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8090 	beq.w	8007164 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007046:	2b20      	cmp	r3, #32
 8007048:	d006      	beq.n	8007058 <create_name+0x1bc>
 800704a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704c:	2b2e      	cmp	r3, #46	; 0x2e
 800704e:	d10a      	bne.n	8007066 <create_name+0x1ca>
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d006      	beq.n	8007066 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800705c:	f043 0303 	orr.w	r3, r3, #3
 8007060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007064:	e07d      	b.n	8007162 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007066:	6a3a      	ldr	r2, [r7, #32]
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	429a      	cmp	r2, r3
 800706c:	d203      	bcs.n	8007076 <create_name+0x1da>
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	429a      	cmp	r2, r3
 8007074:	d123      	bne.n	80070be <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2b0b      	cmp	r3, #11
 800707a:	d106      	bne.n	800708a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007080:	f043 0303 	orr.w	r3, r3, #3
 8007084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007088:	e075      	b.n	8007176 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	429a      	cmp	r2, r3
 8007090:	d005      	beq.n	800709e <create_name+0x202>
 8007092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007096:	f043 0303 	orr.w	r3, r3, #3
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d866      	bhi.n	8007174 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	2308      	movs	r3, #8
 80070ac:	623b      	str	r3, [r7, #32]
 80070ae:	230b      	movs	r3, #11
 80070b0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80070b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070bc:	e051      	b.n	8007162 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80070be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070c0:	2b7f      	cmp	r3, #127	; 0x7f
 80070c2:	d914      	bls.n	80070ee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80070c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe f9b1 	bl	8005430 <ff_convert>
 80070ce:	4603      	mov	r3, r0
 80070d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80070d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <create_name+0x246>
 80070d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070da:	3b80      	subs	r3, #128	; 0x80
 80070dc:	4a23      	ldr	r2, [pc, #140]	; (800716c <create_name+0x2d0>)
 80070de:	5cd3      	ldrb	r3, [r2, r3]
 80070e0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80070e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070e6:	f043 0302 	orr.w	r3, r3, #2
 80070ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80070ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <create_name+0x268>
 80070f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070f6:	4619      	mov	r1, r3
 80070f8:	481d      	ldr	r0, [pc, #116]	; (8007170 <create_name+0x2d4>)
 80070fa:	f7fe fbfc 	bl	80058f6 <chk_chr>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007104:	235f      	movs	r3, #95	; 0x5f
 8007106:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710c:	f043 0303 	orr.w	r3, r3, #3
 8007110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007114:	e01b      	b.n	800714e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d909      	bls.n	8007130 <create_name+0x294>
 800711c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800711e:	2b5a      	cmp	r3, #90	; 0x5a
 8007120:	d806      	bhi.n	8007130 <create_name+0x294>
					b |= 2;
 8007122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007126:	f043 0302 	orr.w	r3, r3, #2
 800712a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800712e:	e00e      	b.n	800714e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007132:	2b60      	cmp	r3, #96	; 0x60
 8007134:	d90b      	bls.n	800714e <create_name+0x2b2>
 8007136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007138:	2b7a      	cmp	r3, #122	; 0x7a
 800713a:	d808      	bhi.n	800714e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800713c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007140:	f043 0301 	orr.w	r3, r3, #1
 8007144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800714a:	3b20      	subs	r3, #32
 800714c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	623a      	str	r2, [r7, #32]
 8007154:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007156:	b2d1      	uxtb	r1, r2
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	4413      	add	r3, r2
 800715c:	460a      	mov	r2, r1
 800715e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007162:	e763      	b.n	800702c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007164:	bf00      	nop
 8007166:	e006      	b.n	8007176 <create_name+0x2da>
 8007168:	0801390c 	.word	0x0801390c
 800716c:	08014150 	.word	0x08014150
 8007170:	08013918 	.word	0x08013918
			if (si > di) break;			/* No extension */
 8007174:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800717c:	2be5      	cmp	r3, #229	; 0xe5
 800717e:	d103      	bne.n	8007188 <create_name+0x2ec>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2205      	movs	r2, #5
 8007184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b08      	cmp	r3, #8
 800718c:	d104      	bne.n	8007198 <create_name+0x2fc>
 800718e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007198:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	d005      	beq.n	80071b0 <create_name+0x314>
 80071a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d105      	bne.n	80071bc <create_name+0x320>
 80071b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071b4:	f043 0302 	orr.w	r3, r3, #2
 80071b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80071bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d117      	bne.n	80071f8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80071c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d105      	bne.n	80071e0 <create_name+0x344>
 80071d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d8:	f043 0310 	orr.w	r3, r3, #16
 80071dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80071e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071e4:	f003 030c 	and.w	r3, r3, #12
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d105      	bne.n	80071f8 <create_name+0x35c>
 80071ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f0:	f043 0308 	orr.w	r3, r3, #8
 80071f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80071fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007202:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007204:	4618      	mov	r0, r3
 8007206:	3728      	adds	r7, #40	; 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007220:	e002      	b.n	8007228 <follow_path+0x1c>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b2f      	cmp	r3, #47	; 0x2f
 800722e:	d0f8      	beq.n	8007222 <follow_path+0x16>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b5c      	cmp	r3, #92	; 0x5c
 8007236:	d0f4      	beq.n	8007222 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2200      	movs	r2, #0
 800723c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b1f      	cmp	r3, #31
 8007244:	d80a      	bhi.n	800725c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2280      	movs	r2, #128	; 0x80
 800724a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800724e:	2100      	movs	r1, #0
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff f8fd 	bl	8006450 <dir_sdi>
 8007256:	4603      	mov	r3, r0
 8007258:	75fb      	strb	r3, [r7, #23]
 800725a:	e048      	b.n	80072ee <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800725c:	463b      	mov	r3, r7
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff fe1b 	bl	8006e9c <create_name>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d139      	bne.n	80072e4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff fc5a 	bl	8006b2a <dir_find>
 8007276:	4603      	mov	r3, r0
 8007278:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007280:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b04      	cmp	r3, #4
 800728c:	d12c      	bne.n	80072e8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d127      	bne.n	80072e8 <follow_path+0xdc>
 8007298:	2305      	movs	r3, #5
 800729a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800729c:	e024      	b.n	80072e8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d121      	bne.n	80072ec <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	799b      	ldrb	r3, [r3, #6]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80072b4:	2305      	movs	r3, #5
 80072b6:	75fb      	strb	r3, [r7, #23]
 80072b8:	e019      	b.n	80072ee <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	8992      	ldrh	r2, [r2, #12]
 80072c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80072cc:	fb00 f202 	mul.w	r2, r0, r2
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	440b      	add	r3, r1
 80072d4:	4619      	mov	r1, r3
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff fa60 	bl	800679c <ld_clust>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072e2:	e7bb      	b.n	800725c <follow_path+0x50>
			if (res != FR_OK) break;
 80072e4:	bf00      	nop
 80072e6:	e002      	b.n	80072ee <follow_path+0xe2>
				break;
 80072e8:	bf00      	nop
 80072ea:	e000      	b.n	80072ee <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072ec:	bf00      	nop
			}
		}
	}

	return res;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007304:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d031      	beq.n	8007372 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e002      	b.n	800731c <get_ldnumber+0x24>
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	3301      	adds	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b1f      	cmp	r3, #31
 8007322:	d903      	bls.n	800732c <get_ldnumber+0x34>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b3a      	cmp	r3, #58	; 0x3a
 800732a:	d1f4      	bne.n	8007316 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b3a      	cmp	r3, #58	; 0x3a
 8007332:	d11c      	bne.n	800736e <get_ldnumber+0x76>
			tp = *path;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	60fa      	str	r2, [r7, #12]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	3b30      	subs	r3, #48	; 0x30
 8007344:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b09      	cmp	r3, #9
 800734a:	d80e      	bhi.n	800736a <get_ldnumber+0x72>
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	429a      	cmp	r2, r3
 8007352:	d10a      	bne.n	800736a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <get_ldnumber+0x72>
					vol = (int)i;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	3301      	adds	r3, #1
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	e002      	b.n	8007374 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007372:	693b      	ldr	r3, [r7, #16]
}
 8007374:	4618      	mov	r0, r3
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	70da      	strb	r2, [r3, #3]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007396:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fe fc76 	bl	8005c8c <move_window>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <check_fs+0x2a>
 80073a6:	2304      	movs	r3, #4
 80073a8:	e038      	b.n	800741c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3338      	adds	r3, #56	; 0x38
 80073ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe f9ba 	bl	800572c <ld_word>
 80073b8:	4603      	mov	r3, r0
 80073ba:	461a      	mov	r2, r3
 80073bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <check_fs+0x48>
 80073c4:	2303      	movs	r3, #3
 80073c6:	e029      	b.n	800741c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073ce:	2be9      	cmp	r3, #233	; 0xe9
 80073d0:	d009      	beq.n	80073e6 <check_fs+0x66>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073d8:	2beb      	cmp	r3, #235	; 0xeb
 80073da:	d11e      	bne.n	800741a <check_fs+0x9a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073e2:	2b90      	cmp	r3, #144	; 0x90
 80073e4:	d119      	bne.n	800741a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3338      	adds	r3, #56	; 0x38
 80073ea:	3336      	adds	r3, #54	; 0x36
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe f9b5 	bl	800575c <ld_dword>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073f8:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <check_fs+0xa4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d101      	bne.n	8007402 <check_fs+0x82>
 80073fe:	2300      	movs	r3, #0
 8007400:	e00c      	b.n	800741c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3338      	adds	r3, #56	; 0x38
 8007406:	3352      	adds	r3, #82	; 0x52
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe f9a7 	bl	800575c <ld_dword>
 800740e:	4603      	mov	r3, r0
 8007410:	4a05      	ldr	r2, [pc, #20]	; (8007428 <check_fs+0xa8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d101      	bne.n	800741a <check_fs+0x9a>
 8007416:	2300      	movs	r3, #0
 8007418:	e000      	b.n	800741c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800741a:	2302      	movs	r3, #2
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	00544146 	.word	0x00544146
 8007428:	33544146 	.word	0x33544146

0800742c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b096      	sub	sp, #88	; 0x58
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f7ff ff59 	bl	80072f8 <get_ldnumber>
 8007446:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744a:	2b00      	cmp	r3, #0
 800744c:	da01      	bge.n	8007452 <find_volume+0x26>
 800744e:	230b      	movs	r3, #11
 8007450:	e262      	b.n	8007918 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007452:	4a9f      	ldr	r2, [pc, #636]	; (80076d0 <find_volume+0x2a4>)
 8007454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <find_volume+0x3a>
 8007462:	230c      	movs	r3, #12
 8007464:	e258      	b.n	8007918 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800746a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01a      	beq.n	80074b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe f89b 	bl	80055bc <disk_status>
 8007486:	4603      	mov	r3, r0
 8007488:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800748c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10c      	bne.n	80074b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <find_volume+0x82>
 800749e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80074aa:	230a      	movs	r3, #10
 80074ac:	e234      	b.n	8007918 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80074ae:	2300      	movs	r3, #0
 80074b0:	e232      	b.n	8007918 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe f893 	bl	80055f0 <disk_initialize>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80074d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80074dc:	2303      	movs	r3, #3
 80074de:	e21b      	b.n	8007918 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <find_volume+0xca>
 80074e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80074f2:	230a      	movs	r3, #10
 80074f4:	e210      	b.n	8007918 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	7858      	ldrb	r0, [r3, #1]
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	330c      	adds	r3, #12
 80074fe:	461a      	mov	r2, r3
 8007500:	2102      	movs	r1, #2
 8007502:	f7fe f8db 	bl	80056bc <disk_ioctl>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <find_volume+0xe4>
 800750c:	2301      	movs	r3, #1
 800750e:	e203      	b.n	8007918 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	899b      	ldrh	r3, [r3, #12]
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007518:	d80d      	bhi.n	8007536 <find_volume+0x10a>
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	899b      	ldrh	r3, [r3, #12]
 800751e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007522:	d308      	bcc.n	8007536 <find_volume+0x10a>
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	899b      	ldrh	r3, [r3, #12]
 8007528:	461a      	mov	r2, r3
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	899b      	ldrh	r3, [r3, #12]
 800752e:	3b01      	subs	r3, #1
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <find_volume+0x10e>
 8007536:	2301      	movs	r3, #1
 8007538:	e1ee      	b.n	8007918 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800753e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007542:	f7ff ff1d 	bl	8007380 <check_fs>
 8007546:	4603      	mov	r3, r0
 8007548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800754c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007550:	2b02      	cmp	r3, #2
 8007552:	d149      	bne.n	80075e8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007554:	2300      	movs	r3, #0
 8007556:	643b      	str	r3, [r7, #64]	; 0x40
 8007558:	e01e      	b.n	8007598 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007568:	4413      	add	r3, r2
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	3304      	adds	r3, #4
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d006      	beq.n	8007584 <find_volume+0x158>
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	3308      	adds	r3, #8
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe f8ee 	bl	800575c <ld_dword>
 8007580:	4602      	mov	r2, r0
 8007582:	e000      	b.n	8007586 <find_volume+0x15a>
 8007584:	2200      	movs	r2, #0
 8007586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	3358      	adds	r3, #88	; 0x58
 800758c:	443b      	add	r3, r7
 800758e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007594:	3301      	adds	r3, #1
 8007596:	643b      	str	r3, [r7, #64]	; 0x40
 8007598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759a:	2b03      	cmp	r3, #3
 800759c:	d9dd      	bls.n	800755a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800759e:	2300      	movs	r3, #0
 80075a0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80075a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <find_volume+0x182>
 80075a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075aa:	3b01      	subs	r3, #1
 80075ac:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	3358      	adds	r3, #88	; 0x58
 80075b4:	443b      	add	r3, r7
 80075b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <find_volume+0x1a2>
 80075c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075c6:	f7ff fedb 	bl	8007380 <check_fs>
 80075ca:	4603      	mov	r3, r0
 80075cc:	e000      	b.n	80075d0 <find_volume+0x1a4>
 80075ce:	2303      	movs	r3, #3
 80075d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80075d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d905      	bls.n	80075e8 <find_volume+0x1bc>
 80075dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075de:	3301      	adds	r3, #1
 80075e0:	643b      	str	r3, [r7, #64]	; 0x40
 80075e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d9e2      	bls.n	80075ae <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80075e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d101      	bne.n	80075f4 <find_volume+0x1c8>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e191      	b.n	8007918 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80075f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d901      	bls.n	8007600 <find_volume+0x1d4>
 80075fc:	230d      	movs	r3, #13
 80075fe:	e18b      	b.n	8007918 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	3338      	adds	r3, #56	; 0x38
 8007604:	330b      	adds	r3, #11
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe f890 	bl	800572c <ld_word>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	899b      	ldrh	r3, [r3, #12]
 8007614:	429a      	cmp	r2, r3
 8007616:	d001      	beq.n	800761c <find_volume+0x1f0>
 8007618:	230d      	movs	r3, #13
 800761a:	e17d      	b.n	8007918 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	3338      	adds	r3, #56	; 0x38
 8007620:	3316      	adds	r3, #22
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe f882 	bl	800572c <ld_word>
 8007628:	4603      	mov	r3, r0
 800762a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <find_volume+0x214>
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	3338      	adds	r3, #56	; 0x38
 8007636:	3324      	adds	r3, #36	; 0x24
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe f88f 	bl	800575c <ld_dword>
 800763e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007644:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	789b      	ldrb	r3, [r3, #2]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d005      	beq.n	8007664 <find_volume+0x238>
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	789b      	ldrb	r3, [r3, #2]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d001      	beq.n	8007664 <find_volume+0x238>
 8007660:	230d      	movs	r3, #13
 8007662:	e159      	b.n	8007918 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	789b      	ldrb	r3, [r3, #2]
 8007668:	461a      	mov	r2, r3
 800766a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766c:	fb02 f303 	mul.w	r3, r2, r3
 8007670:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007678:	b29a      	uxth	r2, r3
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	895b      	ldrh	r3, [r3, #10]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <find_volume+0x26c>
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	895b      	ldrh	r3, [r3, #10]
 800768a:	461a      	mov	r2, r3
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	895b      	ldrh	r3, [r3, #10]
 8007690:	3b01      	subs	r3, #1
 8007692:	4013      	ands	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <find_volume+0x270>
 8007698:	230d      	movs	r3, #13
 800769a:	e13d      	b.n	8007918 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	3338      	adds	r3, #56	; 0x38
 80076a0:	3311      	adds	r3, #17
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe f842 	bl	800572c <ld_word>
 80076a8:	4603      	mov	r3, r0
 80076aa:	461a      	mov	r2, r3
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	891b      	ldrh	r3, [r3, #8]
 80076b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b6:	8992      	ldrh	r2, [r2, #12]
 80076b8:	0952      	lsrs	r2, r2, #5
 80076ba:	b292      	uxth	r2, r2
 80076bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80076c0:	fb01 f202 	mul.w	r2, r1, r2
 80076c4:	1a9b      	subs	r3, r3, r2
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <find_volume+0x2a8>
 80076cc:	230d      	movs	r3, #13
 80076ce:	e123      	b.n	8007918 <find_volume+0x4ec>
 80076d0:	200000ac 	.word	0x200000ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	3338      	adds	r3, #56	; 0x38
 80076d8:	3313      	adds	r3, #19
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fe f826 	bl	800572c <ld_word>
 80076e0:	4603      	mov	r3, r0
 80076e2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80076e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <find_volume+0x2cc>
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	3338      	adds	r3, #56	; 0x38
 80076ee:	3320      	adds	r3, #32
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe f833 	bl	800575c <ld_dword>
 80076f6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	3338      	adds	r3, #56	; 0x38
 80076fc:	330e      	adds	r3, #14
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe f814 	bl	800572c <ld_word>
 8007704:	4603      	mov	r3, r0
 8007706:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007708:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <find_volume+0x2e6>
 800770e:	230d      	movs	r3, #13
 8007710:	e102      	b.n	8007918 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007712:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007716:	4413      	add	r3, r2
 8007718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771a:	8911      	ldrh	r1, [r2, #8]
 800771c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771e:	8992      	ldrh	r2, [r2, #12]
 8007720:	0952      	lsrs	r2, r2, #5
 8007722:	b292      	uxth	r2, r2
 8007724:	fbb1 f2f2 	udiv	r2, r1, r2
 8007728:	b292      	uxth	r2, r2
 800772a:	4413      	add	r3, r2
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800772e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	429a      	cmp	r2, r3
 8007734:	d201      	bcs.n	800773a <find_volume+0x30e>
 8007736:	230d      	movs	r3, #13
 8007738:	e0ee      	b.n	8007918 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800773a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007742:	8952      	ldrh	r2, [r2, #10]
 8007744:	fbb3 f3f2 	udiv	r3, r3, r2
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <find_volume+0x328>
 8007750:	230d      	movs	r3, #13
 8007752:	e0e1      	b.n	8007918 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007754:	2303      	movs	r3, #3
 8007756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007760:	4293      	cmp	r3, r2
 8007762:	d802      	bhi.n	800776a <find_volume+0x33e>
 8007764:	2302      	movs	r3, #2
 8007766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007770:	4293      	cmp	r3, r2
 8007772:	d802      	bhi.n	800777a <find_volume+0x34e>
 8007774:	2301      	movs	r3, #1
 8007776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	1c9a      	adds	r2, r3, #2
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007786:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007788:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800778a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800778c:	441a      	add	r2, r3
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	441a      	add	r2, r3
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800779c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d11e      	bne.n	80077e2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	3338      	adds	r3, #56	; 0x38
 80077a8:	332a      	adds	r3, #42	; 0x2a
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fd ffbe 	bl	800572c <ld_word>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <find_volume+0x38e>
 80077b6:	230d      	movs	r3, #13
 80077b8:	e0ae      	b.n	8007918 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	891b      	ldrh	r3, [r3, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <find_volume+0x39a>
 80077c2:	230d      	movs	r3, #13
 80077c4:	e0a8      	b.n	8007918 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	3338      	adds	r3, #56	; 0x38
 80077ca:	332c      	adds	r3, #44	; 0x2c
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fd ffc5 	bl	800575c <ld_dword>
 80077d2:	4602      	mov	r2, r0
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	647b      	str	r3, [r7, #68]	; 0x44
 80077e0:	e01f      	b.n	8007822 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	891b      	ldrh	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <find_volume+0x3c2>
 80077ea:	230d      	movs	r3, #13
 80077ec:	e094      	b.n	8007918 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f4:	441a      	add	r2, r3
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80077fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d103      	bne.n	800780a <find_volume+0x3de>
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	e00a      	b.n	8007820 <find_volume+0x3f4>
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	4613      	mov	r3, r2
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	4413      	add	r3, r2
 8007814:	085a      	lsrs	r2, r3, #1
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007820:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	899b      	ldrh	r3, [r3, #12]
 800782a:	4619      	mov	r1, r3
 800782c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782e:	440b      	add	r3, r1
 8007830:	3b01      	subs	r3, #1
 8007832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007834:	8989      	ldrh	r1, [r1, #12]
 8007836:	fbb3 f3f1 	udiv	r3, r3, r1
 800783a:	429a      	cmp	r2, r3
 800783c:	d201      	bcs.n	8007842 <find_volume+0x416>
 800783e:	230d      	movs	r3, #13
 8007840:	e06a      	b.n	8007918 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007848:	619a      	str	r2, [r3, #24]
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	2280      	movs	r2, #128	; 0x80
 8007856:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800785c:	2b03      	cmp	r3, #3
 800785e:	d149      	bne.n	80078f4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	3338      	adds	r3, #56	; 0x38
 8007864:	3330      	adds	r3, #48	; 0x30
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd ff60 	bl	800572c <ld_word>
 800786c:	4603      	mov	r3, r0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d140      	bne.n	80078f4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007874:	3301      	adds	r3, #1
 8007876:	4619      	mov	r1, r3
 8007878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800787a:	f7fe fa07 	bl	8005c8c <move_window>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d137      	bne.n	80078f4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	2200      	movs	r2, #0
 8007888:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	3338      	adds	r3, #56	; 0x38
 800788e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007892:	4618      	mov	r0, r3
 8007894:	f7fd ff4a 	bl	800572c <ld_word>
 8007898:	4603      	mov	r3, r0
 800789a:	461a      	mov	r2, r3
 800789c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d127      	bne.n	80078f4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	3338      	adds	r3, #56	; 0x38
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fd ff57 	bl	800575c <ld_dword>
 80078ae:	4603      	mov	r3, r0
 80078b0:	4a1b      	ldr	r2, [pc, #108]	; (8007920 <find_volume+0x4f4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d11e      	bne.n	80078f4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	3338      	adds	r3, #56	; 0x38
 80078ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fd ff4c 	bl	800575c <ld_dword>
 80078c4:	4603      	mov	r3, r0
 80078c6:	4a17      	ldr	r2, [pc, #92]	; (8007924 <find_volume+0x4f8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d113      	bne.n	80078f4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	3338      	adds	r3, #56	; 0x38
 80078d0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fd ff41 	bl	800575c <ld_dword>
 80078da:	4602      	mov	r2, r0
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	3338      	adds	r3, #56	; 0x38
 80078e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fd ff37 	bl	800575c <ld_dword>
 80078ee:	4602      	mov	r2, r0
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80078fa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <find_volume+0x4fc>)
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	4b08      	ldr	r3, [pc, #32]	; (8007928 <find_volume+0x4fc>)
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	4b07      	ldr	r3, [pc, #28]	; (8007928 <find_volume+0x4fc>)
 800790a:	881a      	ldrh	r2, [r3, #0]
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007912:	f7fe f953 	bl	8005bbc <clear_lock>
#endif
	return FR_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3758      	adds	r7, #88	; 0x58
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	41615252 	.word	0x41615252
 8007924:	61417272 	.word	0x61417272
 8007928:	200000b0 	.word	0x200000b0

0800792c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007936:	2309      	movs	r3, #9
 8007938:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01c      	beq.n	800797a <validate+0x4e>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d018      	beq.n	800797a <validate+0x4e>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d013      	beq.n	800797a <validate+0x4e>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	889a      	ldrh	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	88db      	ldrh	r3, [r3, #6]
 800795c:	429a      	cmp	r2, r3
 800795e:	d10c      	bne.n	800797a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	785b      	ldrb	r3, [r3, #1]
 8007966:	4618      	mov	r0, r3
 8007968:	f7fd fe28 	bl	80055bc <disk_status>
 800796c:	4603      	mov	r3, r0
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <validate+0x4e>
			res = FR_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <validate+0x5a>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	e000      	b.n	8007988 <validate+0x5c>
 8007986:	2300      	movs	r3, #0
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	6013      	str	r3, [r2, #0]
	return res;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80079aa:	f107 0310 	add.w	r3, r7, #16
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff fca2 	bl	80072f8 <get_ldnumber>
 80079b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	da01      	bge.n	80079c0 <f_mount+0x28>
 80079bc:	230b      	movs	r3, #11
 80079be:	e02b      	b.n	8007a18 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80079c0:	4a17      	ldr	r2, [pc, #92]	; (8007a20 <f_mount+0x88>)
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80079d0:	69b8      	ldr	r0, [r7, #24]
 80079d2:	f7fe f8f3 	bl	8005bbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	490d      	ldr	r1, [pc, #52]	; (8007a20 <f_mount+0x88>)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <f_mount+0x66>
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d001      	beq.n	8007a02 <f_mount+0x6a>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e00a      	b.n	8007a18 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a02:	f107 010c 	add.w	r1, r7, #12
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff fd0d 	bl	800742c <find_volume>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3720      	adds	r7, #32
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	200000ac 	.word	0x200000ac

08007a24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a34:	6018      	str	r0, [r3, #0]
 8007a36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a3a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007a3e:	6019      	str	r1, [r3, #0]
 8007a40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a44:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007a48:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a4e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <f_open+0x38>
 8007a58:	2309      	movs	r3, #9
 8007a5a:	e2a6      	b.n	8007faa <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007a5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a60:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007a64:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007a68:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007a6c:	7812      	ldrb	r2, [r2, #0]
 8007a6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007a72:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007a74:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a78:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fcd0 	bl	800742c <find_volume>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007a92:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f040 827a 	bne.w	8007f90 <f_open+0x56c>
		dj.obj.fs = fs;
 8007a9c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007aa0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 8007aa4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007aa8:	f107 0210 	add.w	r2, r7, #16
 8007aac:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007aae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ab2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007abc:	4611      	mov	r1, r2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fba4 	bl	800720c <follow_path>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007aca:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d11e      	bne.n	8007b10 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ad2:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da03      	bge.n	8007ae4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007adc:	2306      	movs	r3, #6
 8007ade:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007ae2:	e015      	b.n	8007b10 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ae4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ae8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fd ff11 	bl	800592c <chk_lock>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b10:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b14:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 031c 	and.w	r3, r3, #28
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80a7 	beq.w	8007c72 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007b24:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01f      	beq.n	8007b6c <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b2c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d10e      	bne.n	8007b52 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b34:	f7fd ff56 	bl	80059e4 <enq_lock>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d006      	beq.n	8007b4c <f_open+0x128>
 8007b3e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff f8b2 	bl	8006cac <dir_register>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	e000      	b.n	8007b4e <f_open+0x12a>
 8007b4c:	2312      	movs	r3, #18
 8007b4e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b56:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007b5a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007b5e:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007b62:	7812      	ldrb	r2, [r2, #0]
 8007b64:	f042 0208 	orr.w	r2, r2, #8
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	e015      	b.n	8007b98 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b6c:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007b70:	f003 0311 	and.w	r3, r3, #17
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <f_open+0x15c>
					res = FR_DENIED;
 8007b78:	2307      	movs	r3, #7
 8007b7a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007b7e:	e00b      	b.n	8007b98 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007b80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b84:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <f_open+0x174>
 8007b92:	2308      	movs	r3, #8
 8007b94:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b98:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f040 8088 	bne.w	8007cb2 <f_open+0x28e>
 8007ba2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ba6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d07e      	beq.n	8007cb2 <f_open+0x28e>
				dw = GET_FATTIME();
 8007bb4:	f7fd fdb2 	bl	800571c <get_fattime>
 8007bb8:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007bbc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007bc0:	330e      	adds	r3, #14
 8007bc2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd fe06 	bl	80057d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007bcc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007bd0:	3316      	adds	r3, #22
 8007bd2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fd fdfe 	bl	80057d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007bdc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007be0:	330b      	adds	r3, #11
 8007be2:	2220      	movs	r2, #32
 8007be4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007be6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007bea:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fdd3 	bl	800679c <ld_clust>
 8007bf6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007bfa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007bfe:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8007c02:	2200      	movs	r2, #0
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe fde8 	bl	80067da <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c0a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007c0e:	331c      	adds	r3, #28
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fde0 	bl	80057d8 <st_dword>
					fs->wflag = 1;
 8007c18:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c20:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d044      	beq.n	8007cb2 <f_open+0x28e>
						dw = fs->winsect;
 8007c28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007c32:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fad2 	bl	80061e6 <remove_chain>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007c48:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d130      	bne.n	8007cb2 <f_open+0x28e>
							res = move_window(fs, dw);
 8007c50:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c54:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe f817 	bl	8005c8c <move_window>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c64:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007c68:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007c6c:	3a01      	subs	r2, #1
 8007c6e:	615a      	str	r2, [r3, #20]
 8007c70:	e01f      	b.n	8007cb2 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007c72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d11b      	bne.n	8007cb2 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007c7a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <f_open+0x26a>
					res = FR_NO_FILE;
 8007c86:	2304      	movs	r3, #4
 8007c88:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007c8c:	e011      	b.n	8007cb2 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007c8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c92:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d008      	beq.n	8007cb2 <f_open+0x28e>
 8007ca0:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <f_open+0x28e>
						res = FR_DENIED;
 8007cac:	2307      	movs	r3, #7
 8007cae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007cb2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d14a      	bne.n	8007d50 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cbe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8007ccc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cd0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007cd4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007cd8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007ce4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007cf6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007cfa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cfe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d06:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d0a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf14      	ite	ne
 8007d18:	2301      	movne	r3, #1
 8007d1a:	2300      	moveq	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007d24:	4611      	mov	r1, r2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fd fe7e 	bl	8005a28 <inc_lock>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d32:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d3e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <f_open+0x32c>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d50:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 811b 	bne.w	8007f90 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d5a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007d5e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe fd19 	bl	800679c <ld_clust>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d70:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d78:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8007d7c:	331c      	adds	r3, #28
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd fcec 	bl	800575c <ld_dword>
 8007d84:	4602      	mov	r2, r0
 8007d86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007da0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8007da4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007da8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007db0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007db4:	88da      	ldrh	r2, [r3, #6]
 8007db6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007dc2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dc6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007dd0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007dd4:	7812      	ldrb	r2, [r2, #0]
 8007dd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007dd8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ddc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007de6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007df4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007df8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007e02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3330      	adds	r3, #48	; 0x30
 8007e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fd fd2c 	bl	8005872 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007e1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e1e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80b1 	beq.w	8007f90 <f_open+0x56c>
 8007e2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e32:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80a8 	beq.w	8007f90 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007e40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e44:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e58:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e5c:	895b      	ldrh	r3, [r3, #10]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007e64:	899b      	ldrh	r3, [r3, #12]
 8007e66:	fb02 f303 	mul.w	r3, r2, r3
 8007e6a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e72:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007e8e:	e021      	b.n	8007ed4 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8007e90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e94:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fd ffb1 	bl	8005e06 <get_fat>
 8007ea4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007ea8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d802      	bhi.n	8007eb6 <f_open+0x492>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007eb6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ebe:	d102      	bne.n	8007ec6 <f_open+0x4a2>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ec6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007eca:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007ed4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <f_open+0x4c4>
 8007edc:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007ee0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d8d3      	bhi.n	8007e90 <f_open+0x46c>
				}
				fp->clust = clst;
 8007ee8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007eec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007ef6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007ef8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d147      	bne.n	8007f90 <f_open+0x56c>
 8007f00:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f04:	899b      	ldrh	r3, [r3, #12]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f10:	fb01 f202 	mul.w	r2, r1, r2
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d03a      	beq.n	8007f90 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007f1a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f1e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd ff50 	bl	8005dc8 <clust2sect>
 8007f28:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007f2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <f_open+0x518>
						res = FR_INT_ERR;
 8007f34:	2302      	movs	r3, #2
 8007f36:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007f3a:	e029      	b.n	8007f90 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007f3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f40:	899b      	ldrh	r3, [r3, #12]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007f48:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f50:	441a      	add	r2, r3
 8007f52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f56:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007f5e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8007f62:	7858      	ldrb	r0, [r3, #1]
 8007f64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f68:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f76:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6a1a      	ldr	r2, [r3, #32]
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f7fd fb5c 	bl	800563c <disk_read>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <f_open+0x56c>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007f90:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d006      	beq.n	8007fa6 <f_open+0x582>
 8007f98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f9c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007fa6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08e      	sub	sp, #56	; 0x38
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f107 0214 	add.w	r2, r7, #20
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff fca9 	bl	800792c <validate>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d107      	bne.n	8007ff8 <f_read+0x44>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	7d5b      	ldrb	r3, [r3, #21]
 8007fec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007ff0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <f_read+0x4a>
 8007ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ffc:	e135      	b.n	800826a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	7d1b      	ldrb	r3, [r3, #20]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <f_read+0x5a>
 800800a:	2307      	movs	r3, #7
 800800c:	e12d      	b.n	800826a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	429a      	cmp	r2, r3
 8008020:	f240 811e 	bls.w	8008260 <f_read+0x2ac>
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008028:	e11a      	b.n	8008260 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	8992      	ldrh	r2, [r2, #12]
 8008032:	fbb3 f1f2 	udiv	r1, r3, r2
 8008036:	fb01 f202 	mul.w	r2, r1, r2
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 80d5 	bne.w	80081ec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	8992      	ldrh	r2, [r2, #12]
 800804a:	fbb3 f3f2 	udiv	r3, r3, r2
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	8952      	ldrh	r2, [r2, #10]
 8008052:	3a01      	subs	r2, #1
 8008054:	4013      	ands	r3, r2
 8008056:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d12f      	bne.n	80080be <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d103      	bne.n	800806e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	633b      	str	r3, [r7, #48]	; 0x30
 800806c:	e013      	b.n	8008096 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	4619      	mov	r1, r3
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7fe f9af 	bl	80063e0 <clmt_clust>
 8008082:	6338      	str	r0, [r7, #48]	; 0x30
 8008084:	e007      	b.n	8008096 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f7fd feb9 	bl	8005e06 <get_fat>
 8008094:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	2b01      	cmp	r3, #1
 800809a:	d804      	bhi.n	80080a6 <f_read+0xf2>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2202      	movs	r2, #2
 80080a0:	755a      	strb	r2, [r3, #21]
 80080a2:	2302      	movs	r3, #2
 80080a4:	e0e1      	b.n	800826a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ac:	d104      	bne.n	80080b8 <f_read+0x104>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	755a      	strb	r2, [r3, #21]
 80080b4:	2301      	movs	r3, #1
 80080b6:	e0d8      	b.n	800826a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7fd fe7e 	bl	8005dc8 <clust2sect>
 80080cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d104      	bne.n	80080de <f_read+0x12a>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2202      	movs	r2, #2
 80080d8:	755a      	strb	r2, [r3, #21]
 80080da:	2302      	movs	r3, #2
 80080dc:	e0c5      	b.n	800826a <f_read+0x2b6>
			sect += csect;
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	4413      	add	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	899b      	ldrh	r3, [r3, #12]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d041      	beq.n	800817e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	4413      	add	r3, r2
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	8952      	ldrh	r2, [r2, #10]
 8008104:	4293      	cmp	r3, r2
 8008106:	d905      	bls.n	8008114 <f_read+0x160>
					cc = fs->csize - csect;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	895b      	ldrh	r3, [r3, #10]
 800810c:	461a      	mov	r2, r3
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	7858      	ldrb	r0, [r3, #1]
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800811e:	f7fd fa8d 	bl	800563c <disk_read>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <f_read+0x17e>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	755a      	strb	r2, [r3, #21]
 800812e:	2301      	movs	r3, #1
 8008130:	e09b      	b.n	800826a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	7d1b      	ldrb	r3, [r3, #20]
 8008136:	b25b      	sxtb	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	da18      	bge.n	800816e <f_read+0x1ba>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a1a      	ldr	r2, [r3, #32]
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008146:	429a      	cmp	r2, r3
 8008148:	d911      	bls.n	800816e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a1a      	ldr	r2, [r3, #32]
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	8992      	ldrh	r2, [r2, #12]
 8008156:	fb02 f303 	mul.w	r3, r2, r3
 800815a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815c:	18d0      	adds	r0, r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	899b      	ldrh	r3, [r3, #12]
 8008168:	461a      	mov	r2, r3
 800816a:	f7fd fb61 	bl	8005830 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	899b      	ldrh	r3, [r3, #12]
 8008172:	461a      	mov	r2, r3
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	fb02 f303 	mul.w	r3, r2, r3
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800817c:	e05c      	b.n	8008238 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	429a      	cmp	r2, r3
 8008186:	d02e      	beq.n	80081e6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	7d1b      	ldrb	r3, [r3, #20]
 800818c:	b25b      	sxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	da18      	bge.n	80081c4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	7858      	ldrb	r0, [r3, #1]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a1a      	ldr	r2, [r3, #32]
 80081a0:	2301      	movs	r3, #1
 80081a2:	f7fd fa6b 	bl	800567c <disk_write>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <f_read+0x202>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	755a      	strb	r2, [r3, #21]
 80081b2:	2301      	movs	r3, #1
 80081b4:	e059      	b.n	800826a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	7d1b      	ldrb	r3, [r3, #20]
 80081ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	7858      	ldrb	r0, [r3, #1]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081ce:	2301      	movs	r3, #1
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	f7fd fa33 	bl	800563c <disk_read>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <f_read+0x232>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	755a      	strb	r2, [r3, #21]
 80081e2:	2301      	movs	r3, #1
 80081e4:	e041      	b.n	800826a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	899b      	ldrh	r3, [r3, #12]
 80081f0:	4618      	mov	r0, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	8992      	ldrh	r2, [r2, #12]
 80081fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80081fe:	fb01 f202 	mul.w	r2, r1, r2
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	1ac3      	subs	r3, r0, r3
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d901      	bls.n	8008214 <f_read+0x260>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	8992      	ldrh	r2, [r2, #12]
 8008222:	fbb3 f0f2 	udiv	r0, r3, r2
 8008226:	fb00 f202 	mul.w	r2, r0, r2
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	440b      	add	r3, r1
 800822e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008230:	4619      	mov	r1, r3
 8008232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008234:	f7fd fafc 	bl	8005830 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	4413      	add	r3, r2
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	699a      	ldr	r2, [r3, #24]
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	619a      	str	r2, [r3, #24]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008252:	441a      	add	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f47f aee1 	bne.w	800802a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3738      	adds	r7, #56	; 0x38
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b086      	sub	sp, #24
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f107 0208 	add.w	r2, r7, #8
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff fb52 	bl	800792c <validate>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d168      	bne.n	8008364 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7d1b      	ldrb	r3, [r3, #20]
 8008296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	d062      	beq.n	8008364 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7d1b      	ldrb	r3, [r3, #20]
 80082a2:	b25b      	sxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da15      	bge.n	80082d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	7858      	ldrb	r0, [r3, #1]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1a      	ldr	r2, [r3, #32]
 80082b6:	2301      	movs	r3, #1
 80082b8:	f7fd f9e0 	bl	800567c <disk_write>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <f_sync+0x54>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e04f      	b.n	8008366 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7d1b      	ldrb	r3, [r3, #20]
 80082ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80082d4:	f7fd fa22 	bl	800571c <get_fattime>
 80082d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fd fcd2 	bl	8005c8c <move_window>
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d138      	bne.n	8008364 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	330b      	adds	r3, #11
 80082fc:	781a      	ldrb	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	330b      	adds	r3, #11
 8008302:	f042 0220 	orr.w	r2, r2, #32
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	461a      	mov	r2, r3
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	f7fe fa60 	bl	80067da <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f103 021c 	add.w	r2, r3, #28
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fd fa56 	bl	80057d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3316      	adds	r3, #22
 8008330:	6939      	ldr	r1, [r7, #16]
 8008332:	4618      	mov	r0, r3
 8008334:	f7fd fa50 	bl	80057d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3312      	adds	r3, #18
 800833c:	2100      	movs	r1, #0
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd fa2f 	bl	80057a2 <st_word>
					fs->wflag = 1;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2201      	movs	r2, #1
 8008348:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4618      	mov	r0, r3
 800834e:	f7fd fccb 	bl	8005ce8 <sync_fs>
 8008352:	4603      	mov	r3, r0
 8008354:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7d1b      	ldrb	r3, [r3, #20]
 800835a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800835e:	b2da      	uxtb	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008364:	7dfb      	ldrb	r3, [r7, #23]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff ff7b 	bl	8008272 <f_sync>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d118      	bne.n	80083b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f107 0208 	add.w	r2, r7, #8
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff facc 	bl	800792c <validate>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10c      	bne.n	80083b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fd fbce 	bl	8005b44 <dec_lock>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80083da:	4b1f      	ldr	r3, [pc, #124]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083dc:	7a5b      	ldrb	r3, [r3, #9]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d131      	bne.n	8008448 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80083e4:	4b1c      	ldr	r3, [pc, #112]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083e6:	7a5b      	ldrb	r3, [r3, #9]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083ee:	2100      	movs	r1, #0
 80083f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80083f2:	4b19      	ldr	r3, [pc, #100]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083f4:	7a5b      	ldrb	r3, [r3, #9]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	4a17      	ldr	r2, [pc, #92]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 8008404:	7a5b      	ldrb	r3, [r3, #9]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	4b13      	ldr	r3, [pc, #76]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 800840c:	4413      	add	r3, r2
 800840e:	79fa      	ldrb	r2, [r7, #7]
 8008410:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 8008414:	7a5b      	ldrb	r3, [r3, #9]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	b2d1      	uxtb	r1, r2
 800841c:	4a0e      	ldr	r2, [pc, #56]	; (8008458 <FATFS_LinkDriverEx+0x94>)
 800841e:	7251      	strb	r1, [r2, #9]
 8008420:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008422:	7dbb      	ldrb	r3, [r7, #22]
 8008424:	3330      	adds	r3, #48	; 0x30
 8008426:	b2da      	uxtb	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	3301      	adds	r3, #1
 8008430:	223a      	movs	r2, #58	; 0x3a
 8008432:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3302      	adds	r3, #2
 8008438:	222f      	movs	r2, #47	; 0x2f
 800843a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3303      	adds	r3, #3
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
}
 800844a:	4618      	mov	r0, r3
 800844c:	371c      	adds	r7, #28
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	200000d4 	.word	0x200000d4

0800845c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008466:	2200      	movs	r2, #0
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff ffaa 	bl	80083c4 <FATFS_LinkDriverEx>
 8008470:	4603      	mov	r3, r0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008482:	f7f8 fe2f 	bl	80010e4 <HAL_GetTick>
 8008486:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008488:	e006      	b.n	8008498 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800848a:	f7fc ff81 	bl	8005390 <BSP_SD_GetCardState>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008494:	2300      	movs	r3, #0
 8008496:	e009      	b.n	80084ac <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008498:	f7f8 fe24 	bl	80010e4 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d8f0      	bhi.n	800848a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80084be:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <SD_CheckStatus+0x38>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80084c4:	f7fc ff64 	bl	8005390 <BSP_SD_GetCardState>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d107      	bne.n	80084de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80084ce:	4b07      	ldr	r3, [pc, #28]	; (80084ec <SD_CheckStatus+0x38>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	4b04      	ldr	r3, [pc, #16]	; (80084ec <SD_CheckStatus+0x38>)
 80084dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80084de:	4b03      	ldr	r3, [pc, #12]	; (80084ec <SD_CheckStatus+0x38>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b2db      	uxtb	r3, r3
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20000009 	.word	0x20000009

080084f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80084fa:	f7fc fefd 	bl	80052f8 <BSP_SD_Init>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d107      	bne.n	8008514 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff ffd4 	bl	80084b4 <SD_CheckStatus>
 800850c:	4603      	mov	r3, r0
 800850e:	461a      	mov	r2, r3
 8008510:	4b04      	ldr	r3, [pc, #16]	; (8008524 <SD_initialize+0x34>)
 8008512:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008514:	4b03      	ldr	r3, [pc, #12]	; (8008524 <SD_initialize+0x34>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b2db      	uxtb	r3, r3
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000009 	.word	0x20000009

08008528 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ffbd 	bl	80084b4 <SD_CheckStatus>
 800853a:	4603      	mov	r3, r0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008558:	f247 5030 	movw	r0, #30000	; 0x7530
 800855c:	f7ff ff8d 	bl	800847a <SD_CheckStatusWithTimeout>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	da01      	bge.n	800856a <SD_read+0x26>
  {
    return res;
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	e03b      	b.n	80085e2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	68b8      	ldr	r0, [r7, #8]
 8008570:	f7fc feda 	bl	8005328 <BSP_SD_ReadBlocks_DMA>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d132      	bne.n	80085e0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800857a:	4b1c      	ldr	r3, [pc, #112]	; (80085ec <SD_read+0xa8>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008580:	f7f8 fdb0 	bl	80010e4 <HAL_GetTick>
 8008584:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008586:	bf00      	nop
 8008588:	4b18      	ldr	r3, [pc, #96]	; (80085ec <SD_read+0xa8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d108      	bne.n	80085a2 <SD_read+0x5e>
 8008590:	f7f8 fda8 	bl	80010e4 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	f247 522f 	movw	r2, #29999	; 0x752f
 800859e:	4293      	cmp	r3, r2
 80085a0:	d9f2      	bls.n	8008588 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80085a2:	4b12      	ldr	r3, [pc, #72]	; (80085ec <SD_read+0xa8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	75fb      	strb	r3, [r7, #23]
 80085ae:	e017      	b.n	80085e0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80085b0:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <SD_read+0xa8>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80085b6:	f7f8 fd95 	bl	80010e4 <HAL_GetTick>
 80085ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80085bc:	e007      	b.n	80085ce <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80085be:	f7fc fee7 	bl	8005390 <BSP_SD_GetCardState>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d102      	bne.n	80085ce <SD_read+0x8a>
          {
            res = RES_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80085cc:	e008      	b.n	80085e0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80085ce:	f7f8 fd89 	bl	80010e4 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	f247 522f 	movw	r2, #29999	; 0x752f
 80085dc:	4293      	cmp	r3, r2
 80085de:	d9ee      	bls.n	80085be <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	200000e4 	.word	0x200000e4

080085f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008604:	4b24      	ldr	r3, [pc, #144]	; (8008698 <SD_write+0xa8>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800860a:	f247 5030 	movw	r0, #30000	; 0x7530
 800860e:	f7ff ff34 	bl	800847a <SD_CheckStatusWithTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	da01      	bge.n	800861c <SD_write+0x2c>
  {
    return res;
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	e038      	b.n	800868e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	68b8      	ldr	r0, [r7, #8]
 8008622:	f7fc fe9b 	bl	800535c <BSP_SD_WriteBlocks_DMA>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d12f      	bne.n	800868c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800862c:	f7f8 fd5a 	bl	80010e4 <HAL_GetTick>
 8008630:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008632:	bf00      	nop
 8008634:	4b18      	ldr	r3, [pc, #96]	; (8008698 <SD_write+0xa8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d108      	bne.n	800864e <SD_write+0x5e>
 800863c:	f7f8 fd52 	bl	80010e4 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	f247 522f 	movw	r2, #29999	; 0x752f
 800864a:	4293      	cmp	r3, r2
 800864c:	d9f2      	bls.n	8008634 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <SD_write+0xa8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	75fb      	strb	r3, [r7, #23]
 800865a:	e017      	b.n	800868c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <SD_write+0xa8>)
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008662:	f7f8 fd3f 	bl	80010e4 <HAL_GetTick>
 8008666:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008668:	e007      	b.n	800867a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800866a:	f7fc fe91 	bl	8005390 <BSP_SD_GetCardState>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <SD_write+0x8a>
          {
            res = RES_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	75fb      	strb	r3, [r7, #23]
            break;
 8008678:	e008      	b.n	800868c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800867a:	f7f8 fd33 	bl	80010e4 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	f247 522f 	movw	r2, #29999	; 0x752f
 8008688:	4293      	cmp	r3, r2
 800868a:	d9ee      	bls.n	800866a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200000e0 	.word	0x200000e0

0800869c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	603a      	str	r2, [r7, #0]
 80086a6:	71fb      	strb	r3, [r7, #7]
 80086a8:	460b      	mov	r3, r1
 80086aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80086b2:	4b25      	ldr	r3, [pc, #148]	; (8008748 <SD_ioctl+0xac>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <SD_ioctl+0x28>
 80086c0:	2303      	movs	r3, #3
 80086c2:	e03c      	b.n	800873e <SD_ioctl+0xa2>

  switch (cmd)
 80086c4:	79bb      	ldrb	r3, [r7, #6]
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d834      	bhi.n	8008734 <SD_ioctl+0x98>
 80086ca:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <SD_ioctl+0x34>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	080086e1 	.word	0x080086e1
 80086d4:	080086e9 	.word	0x080086e9
 80086d8:	08008701 	.word	0x08008701
 80086dc:	0800871b 	.word	0x0800871b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80086e6:	e028      	b.n	800873a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fc fe5f 	bl	80053b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80086f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80086fe:	e01c      	b.n	800873a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	4618      	mov	r0, r3
 8008706:	f7fc fe53 	bl	80053b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	b29a      	uxth	r2, r3
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008718:	e00f      	b.n	800873a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800871a:	f107 030c 	add.w	r3, r7, #12
 800871e:	4618      	mov	r0, r3
 8008720:	f7fc fe46 	bl	80053b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	0a5a      	lsrs	r2, r3, #9
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008732:	e002      	b.n	800873a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008734:	2304      	movs	r3, #4
 8008736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800873a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800873e:	4618      	mov	r0, r3
 8008740:	3730      	adds	r7, #48	; 0x30
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000009 	.word	0x20000009

0800874c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008750:	4b03      	ldr	r3, [pc, #12]	; (8008760 <BSP_SD_WriteCpltCallback+0x14>)
 8008752:	2201      	movs	r2, #1
 8008754:	601a      	str	r2, [r3, #0]
}
 8008756:	bf00      	nop
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	200000e0 	.word	0x200000e0

08008764 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008768:	4b03      	ldr	r3, [pc, #12]	; (8008778 <BSP_SD_ReadCpltCallback+0x14>)
 800876a:	2201      	movs	r2, #1
 800876c:	601a      	str	r2, [r3, #0]
}
 800876e:	bf00      	nop
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	200000e4 	.word	0x200000e4

0800877c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	; 0x28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008784:	2300      	movs	r3, #0
 8008786:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008788:	f001 ffae 	bl	800a6e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800878c:	4b67      	ldr	r3, [pc, #412]	; (800892c <pvPortMalloc+0x1b0>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008794:	f000 f938 	bl	8008a08 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008798:	4b65      	ldr	r3, [pc, #404]	; (8008930 <pvPortMalloc+0x1b4>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4013      	ands	r3, r2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 80a7 	bne.w	80088f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d02d      	beq.n	8008808 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80087ac:	2208      	movs	r2, #8
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d227      	bcs.n	8008808 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80087b8:	2208      	movs	r2, #8
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d021      	beq.n	800880e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f023 0307 	bic.w	r3, r3, #7
 80087d0:	3308      	adds	r3, #8
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d214      	bcs.n	8008802 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f023 0307 	bic.w	r3, r3, #7
 80087de:	3308      	adds	r3, #8
 80087e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d010      	beq.n	800880e <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008806:	e002      	b.n	800880e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	e000      	b.n	8008810 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800880e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d06e      	beq.n	80088f4 <pvPortMalloc+0x178>
 8008816:	4b47      	ldr	r3, [pc, #284]	; (8008934 <pvPortMalloc+0x1b8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d869      	bhi.n	80088f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008820:	4b45      	ldr	r3, [pc, #276]	; (8008938 <pvPortMalloc+0x1bc>)
 8008822:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008824:	4b44      	ldr	r3, [pc, #272]	; (8008938 <pvPortMalloc+0x1bc>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800882a:	e004      	b.n	8008836 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	429a      	cmp	r2, r3
 800883e:	d903      	bls.n	8008848 <pvPortMalloc+0xcc>
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f1      	bne.n	800882c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008848:	4b38      	ldr	r3, [pc, #224]	; (800892c <pvPortMalloc+0x1b0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884e:	429a      	cmp	r2, r3
 8008850:	d050      	beq.n	80088f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2208      	movs	r2, #8
 8008858:	4413      	add	r3, r2
 800885a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	2308      	movs	r3, #8
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	429a      	cmp	r2, r3
 8008872:	d91f      	bls.n	80088b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4413      	add	r3, r2
 800887a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <pvPortMalloc+0x120>
        __asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	613b      	str	r3, [r7, #16]
    }
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	1ad2      	subs	r2, r2, r3
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088ae:	69b8      	ldr	r0, [r7, #24]
 80088b0:	f000 f90c 	bl	8008acc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088b4:	4b1f      	ldr	r3, [pc, #124]	; (8008934 <pvPortMalloc+0x1b8>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	4a1d      	ldr	r2, [pc, #116]	; (8008934 <pvPortMalloc+0x1b8>)
 80088c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088c2:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <pvPortMalloc+0x1b8>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b1d      	ldr	r3, [pc, #116]	; (800893c <pvPortMalloc+0x1c0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d203      	bcs.n	80088d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088ce:	4b19      	ldr	r3, [pc, #100]	; (8008934 <pvPortMalloc+0x1b8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a1a      	ldr	r2, [pc, #104]	; (800893c <pvPortMalloc+0x1c0>)
 80088d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	4b15      	ldr	r3, [pc, #84]	; (8008930 <pvPortMalloc+0x1b4>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	431a      	orrs	r2, r3
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <pvPortMalloc+0x1c4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3301      	adds	r3, #1
 80088f0:	4a13      	ldr	r2, [pc, #76]	; (8008940 <pvPortMalloc+0x1c4>)
 80088f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80088f4:	f001 ff06 	bl	800a704 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 80088fe:	f007 fa21 	bl	800fd44 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <pvPortMalloc+0x1a6>
        __asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60fb      	str	r3, [r7, #12]
    }
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <pvPortMalloc+0x1a4>
    return pvReturn;
 8008922:	69fb      	ldr	r3, [r7, #28]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3728      	adds	r7, #40	; 0x28
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	200028f0 	.word	0x200028f0
 8008930:	20002904 	.word	0x20002904
 8008934:	200028f4 	.word	0x200028f4
 8008938:	200028e8 	.word	0x200028e8
 800893c:	200028f8 	.word	0x200028f8
 8008940:	200028fc 	.word	0x200028fc

08008944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d04d      	beq.n	80089f2 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008956:	2308      	movs	r3, #8
 8008958:	425b      	negs	r3, r3
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4413      	add	r3, r2
 800895e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	4b24      	ldr	r3, [pc, #144]	; (80089fc <vPortFree+0xb8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4013      	ands	r3, r2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <vPortFree+0x44>
        __asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	60fb      	str	r3, [r7, #12]
    }
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <vPortFree+0x62>
        __asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60bb      	str	r3, [r7, #8]
    }
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <vPortFree+0xb8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4013      	ands	r3, r2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01e      	beq.n	80089f2 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11a      	bne.n	80089f2 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <vPortFree+0xb8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	43db      	mvns	r3, r3
 80089c6:	401a      	ands	r2, r3
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80089cc:	f001 fe8c 	bl	800a6e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <vPortFree+0xbc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4413      	add	r3, r2
 80089da:	4a09      	ldr	r2, [pc, #36]	; (8008a00 <vPortFree+0xbc>)
 80089dc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f000 f874 	bl	8008acc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80089e4:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <vPortFree+0xc0>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3301      	adds	r3, #1
 80089ea:	4a06      	ldr	r2, [pc, #24]	; (8008a04 <vPortFree+0xc0>)
 80089ec:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80089ee:	f001 fe89 	bl	800a704 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80089f2:	bf00      	nop
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20002904 	.word	0x20002904
 8008a00:	200028f4 	.word	0x200028f4
 8008a04:	20002900 	.word	0x20002900

08008a08 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008a12:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008a14:	4b27      	ldr	r3, [pc, #156]	; (8008ab4 <prvHeapInit+0xac>)
 8008a16:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00c      	beq.n	8008a3c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3307      	adds	r3, #7
 8008a26:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0307 	bic.w	r3, r3, #7
 8008a2e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <prvHeapInit+0xac>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a40:	4a1d      	ldr	r2, [pc, #116]	; (8008ab8 <prvHeapInit+0xb0>)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008a46:	4b1c      	ldr	r3, [pc, #112]	; (8008ab8 <prvHeapInit+0xb0>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008a54:	2208      	movs	r2, #8
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0307 	bic.w	r3, r3, #7
 8008a62:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4a15      	ldr	r2, [pc, #84]	; (8008abc <prvHeapInit+0xb4>)
 8008a68:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008a6a:	4b14      	ldr	r3, [pc, #80]	; (8008abc <prvHeapInit+0xb4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <prvHeapInit+0xb4>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	1ad2      	subs	r2, r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a88:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <prvHeapInit+0xb4>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	4a0a      	ldr	r2, [pc, #40]	; (8008ac0 <prvHeapInit+0xb8>)
 8008a96:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	4a09      	ldr	r2, [pc, #36]	; (8008ac4 <prvHeapInit+0xbc>)
 8008a9e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008aa0:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <prvHeapInit+0xc0>)
 8008aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008aa6:	601a      	str	r2, [r3, #0]
}
 8008aa8:	bf00      	nop
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	200000e8 	.word	0x200000e8
 8008ab8:	200028e8 	.word	0x200028e8
 8008abc:	200028f0 	.word	0x200028f0
 8008ac0:	200028f8 	.word	0x200028f8
 8008ac4:	200028f4 	.word	0x200028f4
 8008ac8:	20002904 	.word	0x20002904

08008acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ad4:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <prvInsertBlockIntoFreeList+0xac>)
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	e002      	b.n	8008ae0 <prvInsertBlockIntoFreeList+0x14>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d8f7      	bhi.n	8008ada <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	4413      	add	r3, r2
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d108      	bne.n	8008b0e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	441a      	add	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d118      	bne.n	8008b54 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <prvInsertBlockIntoFreeList+0xb0>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d00d      	beq.n	8008b4a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	441a      	add	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	e008      	b.n	8008b5c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b4a:	4b0c      	ldr	r3, [pc, #48]	; (8008b7c <prvInsertBlockIntoFreeList+0xb0>)
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e003      	b.n	8008b5c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d002      	beq.n	8008b6a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008b6a:	bf00      	nop
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	200028e8 	.word	0x200028e8
 8008b7c:	200028f0 	.word	0x200028f0

08008b80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f103 0208 	add.w	r2, r3, #8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f103 0208 	add.w	r2, r3, #8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f103 0208 	add.w	r2, r3, #8
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	601a      	str	r2, [r3, #0]
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008c22:	b480      	push	{r7}
 8008c24:	b085      	sub	sp, #20
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c38:	d103      	bne.n	8008c42 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	e00c      	b.n	8008c5c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3308      	adds	r3, #8
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e002      	b.n	8008c50 <vListInsert+0x2e>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d2f6      	bcs.n	8008c4a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	601a      	str	r2, [r3, #0]
}
 8008c88:	bf00      	nop
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6892      	ldr	r2, [r2, #8]
 8008caa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6852      	ldr	r2, [r2, #4]
 8008cb4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d103      	bne.n	8008cc8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	1e5a      	subs	r2, r3, #1
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3b04      	subs	r3, #4
 8008cf8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3b04      	subs	r3, #4
 8008d06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f023 0201 	bic.w	r2, r3, #1
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3b04      	subs	r3, #4
 8008d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008d18:	4a0c      	ldr	r2, [pc, #48]	; (8008d4c <pxPortInitialiseStack+0x64>)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3b14      	subs	r3, #20
 8008d22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f06f 0202 	mvn.w	r2, #2
 8008d36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3b20      	subs	r3, #32
 8008d3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	08008d51 	.word	0x08008d51

08008d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <prvTaskExitError+0x54>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d62:	d00a      	beq.n	8008d7a <prvTaskExitError+0x2a>
        __asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	60fb      	str	r3, [r7, #12]
    }
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <prvTaskExitError+0x28>
        __asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	60bb      	str	r3, [r7, #8]
    }
 8008d8c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008d8e:	bf00      	nop
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0fc      	beq.n	8008d90 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008d96:	bf00      	nop
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	2000000c 	.word	0x2000000c
	...

08008db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <pxCurrentTCBConst2>)
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	6808      	ldr	r0, [r1, #0]
 8008db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dba:	f380 8809 	msr	PSP, r0
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8811 	msr	BASEPRI, r0
 8008dca:	4770      	bx	lr
 8008dcc:	f3af 8000 	nop.w

08008dd0 <pxCurrentTCBConst2>:
 8008dd0:	20002950 	.word	0x20002950
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop

08008dd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008dd8:	4808      	ldr	r0, [pc, #32]	; (8008dfc <prvPortStartFirstTask+0x24>)
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	6800      	ldr	r0, [r0, #0]
 8008dde:	f380 8808 	msr	MSP, r0
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8814 	msr	CONTROL, r0
 8008dea:	b662      	cpsie	i
 8008dec:	b661      	cpsie	f
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	df00      	svc	0
 8008df8:	bf00      	nop
 8008dfa:	0000      	.short	0x0000
 8008dfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop

08008e04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e0a:	4b46      	ldr	r3, [pc, #280]	; (8008f24 <xPortStartScheduler+0x120>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a46      	ldr	r2, [pc, #280]	; (8008f28 <xPortStartScheduler+0x124>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d10a      	bne.n	8008e2a <xPortStartScheduler+0x26>
        __asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	613b      	str	r3, [r7, #16]
    }
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e2a:	4b3e      	ldr	r3, [pc, #248]	; (8008f24 <xPortStartScheduler+0x120>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a3f      	ldr	r2, [pc, #252]	; (8008f2c <xPortStartScheduler+0x128>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d10a      	bne.n	8008e4a <xPortStartScheduler+0x46>
        __asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	60fb      	str	r3, [r7, #12]
    }
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e4a:	4b39      	ldr	r3, [pc, #228]	; (8008f30 <xPortStartScheduler+0x12c>)
 8008e4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	22ff      	movs	r2, #255	; 0xff
 8008e5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	4b31      	ldr	r3, [pc, #196]	; (8008f34 <xPortStartScheduler+0x130>)
 8008e70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e72:	4b31      	ldr	r3, [pc, #196]	; (8008f38 <xPortStartScheduler+0x134>)
 8008e74:	2207      	movs	r2, #7
 8008e76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e78:	e009      	b.n	8008e8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008e7a:	4b2f      	ldr	r3, [pc, #188]	; (8008f38 <xPortStartScheduler+0x134>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	4a2d      	ldr	r2, [pc, #180]	; (8008f38 <xPortStartScheduler+0x134>)
 8008e82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e8e:	78fb      	ldrb	r3, [r7, #3]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e96:	2b80      	cmp	r3, #128	; 0x80
 8008e98:	d0ef      	beq.n	8008e7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e9a:	4b27      	ldr	r3, [pc, #156]	; (8008f38 <xPortStartScheduler+0x134>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f1c3 0307 	rsb	r3, r3, #7
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d00a      	beq.n	8008ebc <xPortStartScheduler+0xb8>
        __asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60bb      	str	r3, [r7, #8]
    }
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ebc:	4b1e      	ldr	r3, [pc, #120]	; (8008f38 <xPortStartScheduler+0x134>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	021b      	lsls	r3, r3, #8
 8008ec2:	4a1d      	ldr	r2, [pc, #116]	; (8008f38 <xPortStartScheduler+0x134>)
 8008ec4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ec6:	4b1c      	ldr	r3, [pc, #112]	; (8008f38 <xPortStartScheduler+0x134>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ece:	4a1a      	ldr	r2, [pc, #104]	; (8008f38 <xPortStartScheduler+0x134>)
 8008ed0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <xPortStartScheduler+0x138>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a17      	ldr	r2, [pc, #92]	; (8008f3c <xPortStartScheduler+0x138>)
 8008ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ee4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <xPortStartScheduler+0x138>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a14      	ldr	r2, [pc, #80]	; (8008f3c <xPortStartScheduler+0x138>)
 8008eec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ef0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008ef2:	f000 f8e3 	bl	80090bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008ef6:	4b12      	ldr	r3, [pc, #72]	; (8008f40 <xPortStartScheduler+0x13c>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008efc:	f000 f902 	bl	8009104 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f00:	4b10      	ldr	r3, [pc, #64]	; (8008f44 <xPortStartScheduler+0x140>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a0f      	ldr	r2, [pc, #60]	; (8008f44 <xPortStartScheduler+0x140>)
 8008f06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008f0c:	f7ff ff64 	bl	8008dd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008f10:	f001 fd7a 	bl	800aa08 <vTaskSwitchContext>
    prvTaskExitError();
 8008f14:	f7ff ff1c 	bl	8008d50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	e000ed00 	.word	0xe000ed00
 8008f28:	410fc271 	.word	0x410fc271
 8008f2c:	410fc270 	.word	0x410fc270
 8008f30:	e000e400 	.word	0xe000e400
 8008f34:	20002908 	.word	0x20002908
 8008f38:	2000290c 	.word	0x2000290c
 8008f3c:	e000ed20 	.word	0xe000ed20
 8008f40:	2000000c 	.word	0x2000000c
 8008f44:	e000ef34 	.word	0xe000ef34

08008f48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
        __asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
    }
 8008f60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008f62:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <vPortEnterCritical+0x58>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	4a0d      	ldr	r2, [pc, #52]	; (8008fa0 <vPortEnterCritical+0x58>)
 8008f6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <vPortEnterCritical+0x58>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d10f      	bne.n	8008f94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f74:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <vPortEnterCritical+0x5c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <vPortEnterCritical+0x4c>
        __asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	603b      	str	r3, [r7, #0]
    }
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <vPortEnterCritical+0x4a>
    }
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	2000000c 	.word	0x2000000c
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008fae:	4b12      	ldr	r3, [pc, #72]	; (8008ff8 <vPortExitCritical+0x50>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10a      	bne.n	8008fcc <vPortExitCritical+0x24>
        __asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	607b      	str	r3, [r7, #4]
    }
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <vPortExitCritical+0x50>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <vPortExitCritical+0x50>)
 8008fd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008fd6:	4b08      	ldr	r3, [pc, #32]	; (8008ff8 <vPortExitCritical+0x50>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d105      	bne.n	8008fea <vPortExitCritical+0x42>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008fe8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	2000000c 	.word	0x2000000c
 8008ffc:	00000000 	.word	0x00000000

08009000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009000:	f3ef 8009 	mrs	r0, PSP
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	4b15      	ldr	r3, [pc, #84]	; (8009060 <pxCurrentTCBConst>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	f01e 0f10 	tst.w	lr, #16
 8009010:	bf08      	it	eq
 8009012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901a:	6010      	str	r0, [r2, #0]
 800901c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009024:	f380 8811 	msr	BASEPRI, r0
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f001 fcea 	bl	800aa08 <vTaskSwitchContext>
 8009034:	f04f 0000 	mov.w	r0, #0
 8009038:	f380 8811 	msr	BASEPRI, r0
 800903c:	bc09      	pop	{r0, r3}
 800903e:	6819      	ldr	r1, [r3, #0]
 8009040:	6808      	ldr	r0, [r1, #0]
 8009042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009046:	f01e 0f10 	tst.w	lr, #16
 800904a:	bf08      	it	eq
 800904c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009050:	f380 8809 	msr	PSP, r0
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	f3af 8000 	nop.w

08009060 <pxCurrentTCBConst>:
 8009060:	20002950 	.word	0x20002950
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop

08009068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
        __asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	607b      	str	r3, [r7, #4]
    }
 8009080:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8009082:	f003 fdf9 	bl	800cc78 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009086:	f001 fc01 	bl	800a88c <xTaskIncrementTick>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d006      	beq.n	800909e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8009090:	f003 fe50 	bl	800cd34 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009094:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <SysTick_Handler+0x50>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	e001      	b.n	80090a2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800909e:	f003 fe2d 	bl	800ccfc <SEGGER_SYSVIEW_RecordExitISR>
 80090a2:	2300      	movs	r3, #0
 80090a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	f383 8811 	msr	BASEPRI, r3
    }
 80090ac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <vPortSetupTimerInterrupt+0x34>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090c6:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <vPortSetupTimerInterrupt+0x38>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090cc:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <vPortSetupTimerInterrupt+0x3c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <vPortSetupTimerInterrupt+0x40>)
 80090d2:	fba2 2303 	umull	r2, r3, r2, r3
 80090d6:	099b      	lsrs	r3, r3, #6
 80090d8:	4a09      	ldr	r2, [pc, #36]	; (8009100 <vPortSetupTimerInterrupt+0x44>)
 80090da:	3b01      	subs	r3, #1
 80090dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090de:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <vPortSetupTimerInterrupt+0x34>)
 80090e0:	2207      	movs	r2, #7
 80090e2:	601a      	str	r2, [r3, #0]
}
 80090e4:	bf00      	nop
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	e000e010 	.word	0xe000e010
 80090f4:	e000e018 	.word	0xe000e018
 80090f8:	20000014 	.word	0x20000014
 80090fc:	10624dd3 	.word	0x10624dd3
 8009100:	e000e014 	.word	0xe000e014

08009104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009114 <vPortEnableVFP+0x10>
 8009108:	6801      	ldr	r1, [r0, #0]
 800910a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800910e:	6001      	str	r1, [r0, #0]
 8009110:	4770      	bx	lr
 8009112:	0000      	.short	0x0000
 8009114:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop

0800911c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8009122:	f000 f83b 	bl	800919c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009126:	f3ef 8305 	mrs	r3, IPSR
 800912a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b0f      	cmp	r3, #15
 8009130:	d914      	bls.n	800915c <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009132:	4a16      	ldr	r2, [pc, #88]	; (800918c <vPortValidateInterruptPriority+0x70>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800913c:	4b14      	ldr	r3, [pc, #80]	; (8009190 <vPortValidateInterruptPriority+0x74>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	7afa      	ldrb	r2, [r7, #11]
 8009142:	429a      	cmp	r2, r3
 8009144:	d20a      	bcs.n	800915c <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	607b      	str	r3, [r7, #4]
    }
 8009158:	bf00      	nop
 800915a:	e7fe      	b.n	800915a <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800915c:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <vPortValidateInterruptPriority+0x78>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <vPortValidateInterruptPriority+0x7c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d90a      	bls.n	8009182 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	603b      	str	r3, [r7, #0]
    }
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <vPortValidateInterruptPriority+0x64>
    }
 8009182:	bf00      	nop
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	e000e3f0 	.word	0xe000e3f0
 8009190:	20002908 	.word	0x20002908
 8009194:	e000ed0c 	.word	0xe000ed0c
 8009198:	2000290c 	.word	0x2000290c

0800919c <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091a2:	4b1f      	ldr	r3, [pc, #124]	; (8009220 <vSetVarulMaxPRIGROUPValue+0x84>)
 80091a4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	22ff      	movs	r2, #255	; 0xff
 80091aa:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091b4:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091b6:	2207      	movs	r2, #7
 80091b8:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ba:	e009      	b.n	80091d0 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80091bc:	4b19      	ldr	r3, [pc, #100]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	4a18      	ldr	r2, [pc, #96]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091c4:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d8:	2b80      	cmp	r3, #128	; 0x80
 80091da:	d0ef      	beq.n	80091bc <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091dc:	4b11      	ldr	r3, [pc, #68]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f1c3 0307 	rsb	r3, r3, #7
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	d00a      	beq.n	80091fe <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	60bb      	str	r3, [r7, #8]
    }
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	4a07      	ldr	r2, [pc, #28]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009206:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009210:	4a04      	ldr	r2, [pc, #16]	; (8009224 <vSetVarulMaxPRIGROUPValue+0x88>)
 8009212:	6013      	str	r3, [r2, #0]
}
 8009214:	bf00      	nop
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	e000e400 	.word	0xe000e400
 8009224:	2000290c 	.word	0x2000290c

08009228 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10a      	bne.n	8009252 <xQueueGenericReset+0x2a>
        __asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	60bb      	str	r3, [r7, #8]
    }
 800924e:	bf00      	nop
 8009250:	e7fe      	b.n	8009250 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8009252:	f7ff fe79 	bl	8008f48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	3b01      	subs	r3, #1
 8009284:	68f9      	ldr	r1, [r7, #12]
 8009286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009288:	fb01 f303 	mul.w	r3, r1, r3
 800928c:	441a      	add	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	22ff      	movs	r2, #255	; 0xff
 8009296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	22ff      	movs	r2, #255	; 0xff
 800929e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d114      	bne.n	80092d2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01a      	beq.n	80092e6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3310      	adds	r3, #16
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 fc8b 	bl	800abd0 <xTaskRemoveFromEventList>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d012      	beq.n	80092e6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80092c0:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <xQueueGenericReset+0xcc>)
 80092c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	e009      	b.n	80092e6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3310      	adds	r3, #16
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff fc52 	bl	8008b80 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7ff fc4d 	bl	8008b80 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80092e6:	f7ff fe5f 	bl	8008fa8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80092ea:	2301      	movs	r3, #1
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	e000ed04 	.word	0xe000ed04

080092f8 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08e      	sub	sp, #56	; 0x38
 80092fc:	af02      	add	r7, sp, #8
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <xQueueGenericCreateStatic+0x52>
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <xQueueGenericCreateStatic+0x56>
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <xQueueGenericCreateStatic+0x58>
 800934e:	2300      	movs	r3, #0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	623b      	str	r3, [r7, #32]
    }
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <xQueueGenericCreateStatic+0x7e>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <xQueueGenericCreateStatic+0x82>
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <xQueueGenericCreateStatic+0x84>
 800937a:	2300      	movs	r3, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61fb      	str	r3, [r7, #28]
    }
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8009396:	2350      	movs	r3, #80	; 0x50
 8009398:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b50      	cmp	r3, #80	; 0x50
 800939e:	d00a      	beq.n	80093b6 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	61bb      	str	r3, [r7, #24]
    }
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093b6:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00d      	beq.n	80093de <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	4613      	mov	r3, r2
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f868 	bl	80094ae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80093e0:	4618      	mov	r0, r3
 80093e2:	3730      	adds	r7, #48	; 0x30
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08c      	sub	sp, #48	; 0x30
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	4613      	mov	r3, r2
 80093f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <xQueueGenericCreate+0x2a>
        __asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	61bb      	str	r3, [r7, #24]
    }
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	fb02 f303 	mul.w	r3, r2, r3
 800941a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d006      	beq.n	8009430 <xQueueGenericCreate+0x48>
 8009422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	fbb2 f3f3 	udiv	r3, r2, r3
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	429a      	cmp	r2, r3
 800942e:	d101      	bne.n	8009434 <xQueueGenericCreate+0x4c>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <xQueueGenericCreate+0x4e>
 8009434:	2300      	movs	r3, #0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10a      	bne.n	8009450 <xQueueGenericCreate+0x68>
        __asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	617b      	str	r3, [r7, #20]
    }
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8009456:	d90a      	bls.n	800946e <xQueueGenericCreate+0x86>
        __asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	613b      	str	r3, [r7, #16]
    }
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	3350      	adds	r3, #80	; 0x50
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff f982 	bl	800877c <pvPortMalloc>
 8009478:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d011      	beq.n	80094a4 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	3350      	adds	r3, #80	; 0x50
 8009488:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009492:	79fa      	ldrb	r2, [r7, #7]
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	4613      	mov	r3, r2
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 f805 	bl	80094ae <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
    }
 80094a6:	4618      	mov	r0, r3
 80094a8:	3728      	adds	r7, #40	; 0x28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	607a      	str	r2, [r7, #4]
 80094ba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d103      	bne.n	80094ca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	e002      	b.n	80094d0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094dc:	2101      	movs	r1, #1
 80094de:	69b8      	ldr	r0, [r7, #24]
 80094e0:	f7ff fea2 	bl	8009228 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	68f9      	ldr	r1, [r7, #12]
 80094f2:	2073      	movs	r0, #115	; 0x73
 80094f4:	f002 fff0 	bl	800c4d8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00e      	beq.n	800952c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009520:	2300      	movs	r3, #0
 8009522:	2200      	movs	r2, #0
 8009524:	2100      	movs	r1, #0
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f81c 	bl	8009564 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800952c:	bf00      	nop
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800953e:	2301      	movs	r3, #1
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	2300      	movs	r3, #0
 8009544:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	461a      	mov	r2, r3
 800954a:	6939      	ldr	r1, [r7, #16]
 800954c:	6978      	ldr	r0, [r7, #20]
 800954e:	f7ff ff4b 	bl	80093e8 <xQueueGenericCreate>
 8009552:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7ff ffd3 	bl	8009500 <prvInitialiseMutex>

        return xNewQueue;
 800955a:	68fb      	ldr	r3, [r7, #12]
    }
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b090      	sub	sp, #64	; 0x40
 8009568:	af02      	add	r7, sp, #8
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
 8009570:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009572:	2300      	movs	r3, #0
 8009574:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <xQueueGenericSend+0x32>
        __asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <xQueueGenericSend+0x40>
 800959c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <xQueueGenericSend+0x44>
 80095a4:	2301      	movs	r3, #1
 80095a6:	e000      	b.n	80095aa <xQueueGenericSend+0x46>
 80095a8:	2300      	movs	r3, #0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <xQueueGenericSend+0x60>
        __asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d103      	bne.n	80095d2 <xQueueGenericSend+0x6e>
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <xQueueGenericSend+0x72>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xQueueGenericSend+0x74>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xQueueGenericSend+0x8e>
        __asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	623b      	str	r3, [r7, #32]
    }
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095f2:	f001 fce7 	bl	800afc4 <xTaskGetSchedulerState>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <xQueueGenericSend+0x9e>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <xQueueGenericSend+0xa2>
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <xQueueGenericSend+0xa4>
 8009606:	2300      	movs	r3, #0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xQueueGenericSend+0xbe>
        __asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	61fb      	str	r3, [r7, #28]
    }
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009622:	f7ff fc91 	bl	8008f48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	429a      	cmp	r2, r3
 8009630:	d302      	bcc.n	8009638 <xQueueGenericSend+0xd4>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d136      	bne.n	80096a6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	4618      	mov	r0, r3
 800963c:	f003 fcd8 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	460b      	mov	r3, r1
 800964a:	4601      	mov	r1, r0
 800964c:	205a      	movs	r0, #90	; 0x5a
 800964e:	f002 ffb9 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009658:	f000 fbcc 	bl	8009df4 <prvCopyDataToQueue>
 800965c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d010      	beq.n	8009688 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	3324      	adds	r3, #36	; 0x24
 800966a:	4618      	mov	r0, r3
 800966c:	f001 fab0 	bl	800abd0 <xTaskRemoveFromEventList>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d013      	beq.n	800969e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009676:	4b4d      	ldr	r3, [pc, #308]	; (80097ac <xQueueGenericSend+0x248>)
 8009678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	e00a      	b.n	800969e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800968e:	4b47      	ldr	r3, [pc, #284]	; (80097ac <xQueueGenericSend+0x248>)
 8009690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800969e:	f7ff fc83 	bl	8008fa8 <vPortExitCritical>
                return pdPASS;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e07d      	b.n	80097a2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d110      	bne.n	80096ce <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80096ac:	f7ff fc7c 	bl	8008fa8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	4618      	mov	r0, r3
 80096b4:	f003 fc9c 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	460b      	mov	r3, r1
 80096c2:	4601      	mov	r1, r0
 80096c4:	205a      	movs	r0, #90	; 0x5a
 80096c6:	f002 ff7d 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e069      	b.n	80097a2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80096ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80096d4:	f107 0314 	add.w	r3, r7, #20
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fae1 	bl	800aca0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80096de:	2301      	movs	r3, #1
 80096e0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80096e2:	f7ff fc61 	bl	8008fa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80096e6:	f000 ffff 	bl	800a6e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80096ea:	f7ff fc2d 	bl	8008f48 <vPortEnterCritical>
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096f4:	b25b      	sxtb	r3, r3
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096fa:	d103      	bne.n	8009704 <xQueueGenericSend+0x1a0>
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800970a:	b25b      	sxtb	r3, r3
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009710:	d103      	bne.n	800971a <xQueueGenericSend+0x1b6>
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800971a:	f7ff fc45 	bl	8008fa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800971e:	1d3a      	adds	r2, r7, #4
 8009720:	f107 0314 	add.w	r3, r7, #20
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fad0 	bl	800accc <xTaskCheckForTimeOut>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d124      	bne.n	800977c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009734:	f000 fc56 	bl	8009fe4 <prvIsQueueFull>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d018      	beq.n	8009770 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	3310      	adds	r3, #16
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	4611      	mov	r1, r2
 8009746:	4618      	mov	r0, r3
 8009748:	f001 f9f0 	bl	800ab2c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800974c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800974e:	f000 fbe1 	bl	8009f14 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009752:	f000 ffd7 	bl	800a704 <xTaskResumeAll>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	f47f af62 	bne.w	8009622 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <xQueueGenericSend+0x248>)
 8009760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	e758      	b.n	8009622 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009772:	f000 fbcf 	bl	8009f14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009776:	f000 ffc5 	bl	800a704 <xTaskResumeAll>
 800977a:	e752      	b.n	8009622 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800977c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800977e:	f000 fbc9 	bl	8009f14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009782:	f000 ffbf 	bl	800a704 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	4618      	mov	r0, r3
 800978a:	f003 fc31 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	460b      	mov	r3, r1
 8009798:	4601      	mov	r1, r0
 800979a:	205a      	movs	r0, #90	; 0x5a
 800979c:	f002 ff12 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80097a0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3738      	adds	r7, #56	; 0x38
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	e000ed04 	.word	0xe000ed04

080097b0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b090      	sub	sp, #64	; 0x40
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d103      	bne.n	80097ec <xQueueGenericSendFromISR+0x3c>
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <xQueueGenericSendFromISR+0x40>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <xQueueGenericSendFromISR+0x42>
 80097f0:	2300      	movs	r3, #0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d103      	bne.n	800981a <xQueueGenericSendFromISR+0x6a>
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009816:	2b01      	cmp	r3, #1
 8009818:	d101      	bne.n	800981e <xQueueGenericSendFromISR+0x6e>
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <xQueueGenericSendFromISR+0x70>
 800981e:	2300      	movs	r3, #0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	623b      	str	r3, [r7, #32]
    }
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800983a:	f7ff fc6f 	bl	800911c <vPortValidateInterruptPriority>
        __asm volatile
 800983e:	f3ef 8211 	mrs	r2, BASEPRI
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	61fa      	str	r2, [r7, #28]
 8009854:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8009856:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009858:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009862:	429a      	cmp	r2, r3
 8009864:	d302      	bcc.n	800986c <xQueueGenericSendFromISR+0xbc>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d148      	bne.n	80098fe <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	4618      	mov	r0, r3
 8009880:	f003 fbb6 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009884:	4601      	mov	r1, r0
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	461a      	mov	r2, r3
 800988a:	2060      	movs	r0, #96	; 0x60
 800988c:	f002 fdca 	bl	800c424 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009896:	f000 faad 	bl	8009df4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800989a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a2:	d112      	bne.n	80098ca <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d025      	beq.n	80098f8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	3324      	adds	r3, #36	; 0x24
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 f98d 	bl	800abd0 <xTaskRemoveFromEventList>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01d      	beq.n	80098f8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01a      	beq.n	80098f8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	e016      	b.n	80098f8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80098ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80098ce:	2b7f      	cmp	r3, #127	; 0x7f
 80098d0:	d10a      	bne.n	80098e8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	617b      	str	r3, [r7, #20]
    }
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ec:	3301      	adds	r3, #1
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	b25a      	sxtb	r2, r3
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80098f8:	2301      	movs	r3, #1
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80098fc:	e00b      	b.n	8009916 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	4618      	mov	r0, r3
 8009902:	f003 fb75 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009906:	4601      	mov	r1, r0
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	461a      	mov	r2, r3
 800990c:	2060      	movs	r0, #96	; 0x60
 800990e:	f002 fd89 	bl	800c424 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009912:	2300      	movs	r3, #0
 8009914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009918:	613b      	str	r3, [r7, #16]
        __asm volatile
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	f383 8811 	msr	BASEPRI, r3
    }
 8009920:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009924:	4618      	mov	r0, r3
 8009926:	3740      	adds	r7, #64	; 0x40
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b08f      	sub	sp, #60	; 0x3c
 8009930:	af02      	add	r7, sp, #8
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009938:	2300      	movs	r3, #0
 800993a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <xQueueReceive+0x30>
        __asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	623b      	str	r3, [r7, #32]
    }
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d103      	bne.n	800996a <xQueueReceive+0x3e>
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <xQueueReceive+0x42>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <xQueueReceive+0x44>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <xQueueReceive+0x5e>
        __asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	61fb      	str	r3, [r7, #28]
    }
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800998a:	f001 fb1b 	bl	800afc4 <xTaskGetSchedulerState>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <xQueueReceive+0x6e>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <xQueueReceive+0x72>
 800999a:	2301      	movs	r3, #1
 800999c:	e000      	b.n	80099a0 <xQueueReceive+0x74>
 800999e:	2300      	movs	r3, #0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <xQueueReceive+0x8e>
        __asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	61bb      	str	r3, [r7, #24]
    }
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80099ba:	f7ff fac5 	bl	8008f48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d02f      	beq.n	8009a2a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ce:	f000 fa7b 	bl	8009ec8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	4618      	mov	r0, r3
 80099d6:	f003 fb0b 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 80099da:	4604      	mov	r4, r0
 80099dc:	2000      	movs	r0, #0
 80099de:	f003 fb07 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 80099e2:	4602      	mov	r2, r0
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2101      	movs	r1, #1
 80099e8:	9100      	str	r1, [sp, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	205c      	movs	r0, #92	; 0x5c
 80099ee:	f002 fde9 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	1e5a      	subs	r2, r3, #1
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00f      	beq.n	8009a22 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	3310      	adds	r3, #16
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 f8e2 	bl	800abd0 <xTaskRemoveFromEventList>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009a12:	4b4d      	ldr	r3, [pc, #308]	; (8009b48 <xQueueReceive+0x21c>)
 8009a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009a22:	f7ff fac1 	bl	8008fa8 <vPortExitCritical>
                return pdPASS;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e08a      	b.n	8009b40 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d113      	bne.n	8009a58 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009a30:	f7ff faba 	bl	8008fa8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	4618      	mov	r0, r3
 8009a38:	f003 fada 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f003 fad6 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009a44:	4602      	mov	r2, r0
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2101      	movs	r1, #1
 8009a4a:	9100      	str	r1, [sp, #0]
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	205c      	movs	r0, #92	; 0x5c
 8009a50:	f002 fdb8 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009a54:	2300      	movs	r3, #0
 8009a56:	e073      	b.n	8009b40 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009a5e:	f107 0310 	add.w	r3, r7, #16
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 f91c 	bl	800aca0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009a6c:	f7ff fa9c 	bl	8008fa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009a70:	f000 fe3a 	bl	800a6e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009a74:	f7ff fa68 	bl	8008f48 <vPortEnterCritical>
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a7e:	b25b      	sxtb	r3, r3
 8009a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a84:	d103      	bne.n	8009a8e <xQueueReceive+0x162>
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a94:	b25b      	sxtb	r3, r3
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a9a:	d103      	bne.n	8009aa4 <xQueueReceive+0x178>
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009aa4:	f7ff fa80 	bl	8008fa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009aa8:	1d3a      	adds	r2, r7, #4
 8009aaa:	f107 0310 	add.w	r3, r7, #16
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 f90b 	bl	800accc <xTaskCheckForTimeOut>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d124      	bne.n	8009b06 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009abe:	f000 fa7b 	bl	8009fb8 <prvIsQueueEmpty>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d018      	beq.n	8009afa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	3324      	adds	r3, #36	; 0x24
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	4611      	mov	r1, r2
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f82b 	bl	800ab2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad8:	f000 fa1c 	bl	8009f14 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009adc:	f000 fe12 	bl	800a704 <xTaskResumeAll>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f47f af69 	bne.w	80099ba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8009ae8:	4b17      	ldr	r3, [pc, #92]	; (8009b48 <xQueueReceive+0x21c>)
 8009aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	e75f      	b.n	80099ba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009afc:	f000 fa0a 	bl	8009f14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009b00:	f000 fe00 	bl	800a704 <xTaskResumeAll>
 8009b04:	e759      	b.n	80099ba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b08:	f000 fa04 	bl	8009f14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009b0c:	f000 fdfa 	bl	800a704 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b12:	f000 fa51 	bl	8009fb8 <prvIsQueueEmpty>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f43f af4e 	beq.w	80099ba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	4618      	mov	r0, r3
 8009b22:	f003 fa65 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009b26:	4604      	mov	r4, r0
 8009b28:	2000      	movs	r0, #0
 8009b2a:	f003 fa61 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2101      	movs	r1, #1
 8009b34:	9100      	str	r1, [sp, #0]
 8009b36:	4621      	mov	r1, r4
 8009b38:	205c      	movs	r0, #92	; 0x5c
 8009b3a:	f002 fd43 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009b3e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3734      	adds	r7, #52	; 0x34
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd90      	pop	{r4, r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009b4c:	b590      	push	{r4, r7, lr}
 8009b4e:	b091      	sub	sp, #68	; 0x44
 8009b50:	af02      	add	r7, sp, #8
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009b56:	2300      	movs	r3, #0
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	623b      	str	r3, [r7, #32]
    }
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00a      	beq.n	8009b9c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	61fb      	str	r3, [r7, #28]
    }
 8009b98:	bf00      	nop
 8009b9a:	e7fe      	b.n	8009b9a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b9c:	f001 fa12 	bl	800afc4 <xTaskGetSchedulerState>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d102      	bne.n	8009bac <xQueueSemaphoreTake+0x60>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <xQueueSemaphoreTake+0x64>
 8009bac:	2301      	movs	r3, #1
 8009bae:	e000      	b.n	8009bb2 <xQueueSemaphoreTake+0x66>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <xQueueSemaphoreTake+0x80>
        __asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	61bb      	str	r3, [r7, #24]
    }
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009bcc:	f7ff f9bc 	bl	8008f48 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d034      	beq.n	8009c46 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	4618      	mov	r0, r3
 8009be0:	f003 fa06 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009be4:	4604      	mov	r4, r0
 8009be6:	2000      	movs	r0, #0
 8009be8:	f003 fa02 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009bec:	4602      	mov	r2, r0
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	9100      	str	r1, [sp, #0]
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	205c      	movs	r0, #92	; 0x5c
 8009bf8:	f002 fce4 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	1e5a      	subs	r2, r3, #1
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c0c:	f001 fb6a 	bl	800b2e4 <pvTaskIncrementMutexHeldCount>
 8009c10:	4602      	mov	r2, r0
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00f      	beq.n	8009c3e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	3310      	adds	r3, #16
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 ffd4 	bl	800abd0 <xTaskRemoveFromEventList>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d007      	beq.n	8009c3e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009c2e:	4b64      	ldr	r3, [pc, #400]	; (8009dc0 <xQueueSemaphoreTake+0x274>)
 8009c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009c3e:	f7ff f9b3 	bl	8008fa8 <vPortExitCritical>
                return pdPASS;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e0b7      	b.n	8009db6 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d121      	bne.n	8009c90 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	617b      	str	r3, [r7, #20]
    }
 8009c64:	bf00      	nop
 8009c66:	e7fe      	b.n	8009c66 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009c68:	f7ff f99e 	bl	8008fa8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f003 f9be 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009c74:	4604      	mov	r4, r0
 8009c76:	2000      	movs	r0, #0
 8009c78:	f003 f9ba 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2101      	movs	r1, #1
 8009c82:	9100      	str	r1, [sp, #0]
 8009c84:	4621      	mov	r1, r4
 8009c86:	205c      	movs	r0, #92	; 0x5c
 8009c88:	f002 fc9c 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e092      	b.n	8009db6 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 f800 	bl	800aca0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009ca4:	f7ff f980 	bl	8008fa8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009ca8:	f000 fd1e 	bl	800a6e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009cac:	f7ff f94c 	bl	8008f48 <vPortEnterCritical>
 8009cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cbc:	d103      	bne.n	8009cc6 <xQueueSemaphoreTake+0x17a>
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd2:	d103      	bne.n	8009cdc <xQueueSemaphoreTake+0x190>
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cdc:	f7ff f964 	bl	8008fa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ce0:	463a      	mov	r2, r7
 8009ce2:	f107 030c 	add.w	r3, r7, #12
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 ffef 	bl	800accc <xTaskCheckForTimeOut>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d132      	bne.n	8009d5a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cf6:	f000 f95f 	bl	8009fb8 <prvIsQueueEmpty>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d026      	beq.n	8009d4e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8009d08:	f7ff f91e 	bl	8008f48 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 f975 	bl	800b000 <xTaskPriorityInherit>
 8009d16:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8009d18:	f7ff f946 	bl	8008fa8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	3324      	adds	r3, #36	; 0x24
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	4611      	mov	r1, r2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 ff01 	bl	800ab2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d2c:	f000 f8f2 	bl	8009f14 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009d30:	f000 fce8 	bl	800a704 <xTaskResumeAll>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f47f af48 	bne.w	8009bcc <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8009d3c:	4b20      	ldr	r3, [pc, #128]	; (8009dc0 <xQueueSemaphoreTake+0x274>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	e73e      	b.n	8009bcc <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d50:	f000 f8e0 	bl	8009f14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009d54:	f000 fcd6 	bl	800a704 <xTaskResumeAll>
 8009d58:	e738      	b.n	8009bcc <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d5c:	f000 f8da 	bl	8009f14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009d60:	f000 fcd0 	bl	800a704 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d66:	f000 f927 	bl	8009fb8 <prvIsQueueEmpty>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f43f af2d 	beq.w	8009bcc <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00d      	beq.n	8009d94 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8009d78:	f7ff f8e6 	bl	8008f48 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d7e:	f000 f821 	bl	8009dc4 <prvGetDisinheritPriorityAfterTimeout>
 8009d82:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 fa20 	bl	800b1d0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8009d90:	f7ff f90a 	bl	8008fa8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d96:	4618      	mov	r0, r3
 8009d98:	f003 f92a 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f003 f926 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 8009da4:	4602      	mov	r2, r0
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2101      	movs	r1, #1
 8009daa:	9100      	str	r1, [sp, #0]
 8009dac:	4621      	mov	r1, r4
 8009dae:	205c      	movs	r0, #92	; 0x5c
 8009db0:	f002 fc08 	bl	800c5c4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009db4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	373c      	adds	r7, #60	; 0x3c
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd90      	pop	{r4, r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e001      	b.n	8009de6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009de6:	68fb      	ldr	r3, [r7, #12]
    }
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e08:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10d      	bne.n	8009e2e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d14d      	bne.n	8009eb6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f001 f960 	bl	800b0e4 <xTaskPriorityDisinherit>
 8009e24:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	609a      	str	r2, [r3, #8]
 8009e2c:	e043      	b.n	8009eb6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d119      	bne.n	8009e68 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6858      	ldr	r0, [r3, #4]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	68b9      	ldr	r1, [r7, #8]
 8009e40:	f009 f874 	bl	8012f2c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	441a      	add	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d32b      	bcc.n	8009eb6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	e026      	b.n	8009eb6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68d8      	ldr	r0, [r3, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	461a      	mov	r2, r3
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	f009 f85a 	bl	8012f2c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e80:	425b      	negs	r3, r3
 8009e82:	441a      	add	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d207      	bcs.n	8009ea4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9c:	425b      	negs	r3, r3
 8009e9e:	441a      	add	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d105      	bne.n	8009eb6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8009ebe:	697b      	ldr	r3, [r7, #20]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d018      	beq.n	8009f0c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	441a      	add	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d303      	bcc.n	8009efc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68d9      	ldr	r1, [r3, #12]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	461a      	mov	r2, r3
 8009f06:	6838      	ldr	r0, [r7, #0]
 8009f08:	f009 f810 	bl	8012f2c <memcpy>
    }
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009f1c:	f7ff f814 	bl	8008f48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f26:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f28:	e011      	b.n	8009f4e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d012      	beq.n	8009f58 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3324      	adds	r3, #36	; 0x24
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 fe4a 	bl	800abd0 <xTaskRemoveFromEventList>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009f42:	f000 ff29 	bl	800ad98 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	dce9      	bgt.n	8009f2a <prvUnlockQueue+0x16>
 8009f56:	e000      	b.n	8009f5a <prvUnlockQueue+0x46>
                        break;
 8009f58:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	22ff      	movs	r2, #255	; 0xff
 8009f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8009f62:	f7ff f821 	bl	8008fa8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009f66:	f7fe ffef 	bl	8008f48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f70:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f72:	e011      	b.n	8009f98 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d012      	beq.n	8009fa2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3310      	adds	r3, #16
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fe25 	bl	800abd0 <xTaskRemoveFromEventList>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009f8c:	f000 ff04 	bl	800ad98 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dce9      	bgt.n	8009f74 <prvUnlockQueue+0x60>
 8009fa0:	e000      	b.n	8009fa4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009fa2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	22ff      	movs	r2, #255	; 0xff
 8009fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8009fac:	f7fe fffc 	bl	8008fa8 <vPortExitCritical>
}
 8009fb0:	bf00      	nop
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009fc0:	f7fe ffc2 	bl	8008f48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	e001      	b.n	8009fd6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009fd6:	f7fe ffe7 	bl	8008fa8 <vPortExitCritical>

    return xReturn;
 8009fda:	68fb      	ldr	r3, [r7, #12]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009fec:	f7fe ffac 	bl	8008f48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d102      	bne.n	800a002 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	e001      	b.n	800a006 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a002:	2300      	movs	r3, #0
 800a004:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a006:	f7fe ffcf 	bl	8008fa8 <vPortExitCritical>

    return xReturn;
 800a00a:	68fb      	ldr	r3, [r7, #12]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	e01e      	b.n	800a062 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a024:	4a13      	ldr	r2, [pc, #76]	; (800a074 <vQueueAddToRegistry+0x60>)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d115      	bne.n	800a05c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a030:	4910      	ldr	r1, [pc, #64]	; (800a074 <vQueueAddToRegistry+0x60>)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800a03a:	4a0e      	ldr	r2, [pc, #56]	; (800a074 <vQueueAddToRegistry+0x60>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	4413      	add	r3, r2
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4618      	mov	r0, r3
 800a04a:	f002 ffd1 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 800a04e:	4601      	mov	r1, r0
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	2071      	movs	r0, #113	; 0x71
 800a056:	f002 f9e5 	bl	800c424 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800a05a:	e006      	b.n	800a06a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	3301      	adds	r3, #1
 800a060:	60fb      	str	r3, [r7, #12]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b07      	cmp	r3, #7
 800a066:	d9dd      	bls.n	800a024 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20002910 	.word	0x20002910

0800a078 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a088:	f7fe ff5e 	bl	8008f48 <vPortEnterCritical>
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a092:	b25b      	sxtb	r3, r3
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a098:	d103      	bne.n	800a0a2 <vQueueWaitForMessageRestricted+0x2a>
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0a8:	b25b      	sxtb	r3, r3
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ae:	d103      	bne.n	800a0b8 <vQueueWaitForMessageRestricted+0x40>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0b8:	f7fe ff76 	bl	8008fa8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d106      	bne.n	800a0d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	3324      	adds	r3, #36	; 0x24
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fd51 	bl	800ab74 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a0d2:	6978      	ldr	r0, [r7, #20]
 800a0d4:	f7ff ff1e 	bl	8009f14 <prvUnlockQueue>
    }
 800a0d8:	bf00      	nop
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08e      	sub	sp, #56	; 0x38
 800a0e4:	af04      	add	r7, sp, #16
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10a      	bne.n	800a10a <xTaskCreateStatic+0x2a>
        __asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	623b      	str	r3, [r7, #32]
    }
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10a      	bne.n	800a126 <xTaskCreateStatic+0x46>
        __asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	61fb      	str	r3, [r7, #28]
    }
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800a126:	235c      	movs	r3, #92	; 0x5c
 800a128:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b5c      	cmp	r3, #92	; 0x5c
 800a12e:	d00a      	beq.n	800a146 <xTaskCreateStatic+0x66>
        __asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	61bb      	str	r3, [r7, #24]
    }
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a146:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01e      	beq.n	800a18c <xTaskCreateStatic+0xac>
 800a14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01b      	beq.n	800a18c <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a15c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	2202      	movs	r2, #2
 800a162:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a166:	2300      	movs	r3, #0
 800a168:	9303      	str	r3, [sp, #12]
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	9302      	str	r3, [sp, #8]
 800a16e:	f107 0314 	add.w	r3, r7, #20
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f850 	bl	800a224 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a186:	f000 f8e3 	bl	800a350 <prvAddNewTaskToReadyList>
 800a18a:	e001      	b.n	800a190 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800a190:	697b      	ldr	r3, [r7, #20]
    }
 800a192:	4618      	mov	r0, r3
 800a194:	3728      	adds	r7, #40	; 0x28
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b08c      	sub	sp, #48	; 0x30
 800a19e:	af04      	add	r7, sp, #16
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	603b      	str	r3, [r7, #0]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fae4 	bl	800877c <pvPortMalloc>
 800a1b4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00e      	beq.n	800a1da <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1bc:	205c      	movs	r0, #92	; 0x5c
 800a1be:	f7fe fadd 	bl	800877c <pvPortMalloc>
 800a1c2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	631a      	str	r2, [r3, #48]	; 0x30
 800a1d0:	e005      	b.n	800a1de <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a1d2:	6978      	ldr	r0, [r7, #20]
 800a1d4:	f7fe fbb6 	bl	8008944 <vPortFree>
 800a1d8:	e001      	b.n	800a1de <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d017      	beq.n	800a214 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9303      	str	r3, [sp, #12]
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	9302      	str	r3, [sp, #8]
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68b9      	ldr	r1, [r7, #8]
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f80e 	bl	800a224 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a208:	69f8      	ldr	r0, [r7, #28]
 800a20a:	f000 f8a1 	bl	800a350 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a20e:	2301      	movs	r3, #1
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	e002      	b.n	800a21a <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a218:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a21a:	69bb      	ldr	r3, [r7, #24]
    }
 800a21c:	4618      	mov	r0, r3
 800a21e:	3720      	adds	r7, #32
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	461a      	mov	r2, r3
 800a23c:	21a5      	movs	r1, #165	; 0xa5
 800a23e:	f008 fe83 	bl	8012f48 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a24c:	3b01      	subs	r3, #1
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	f023 0307 	bic.w	r3, r3, #7
 800a25a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <prvInitialiseNewTask+0x58>
        __asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	617b      	str	r3, [r7, #20]
    }
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01f      	beq.n	800a2c2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a282:	2300      	movs	r3, #0
 800a284:	61fb      	str	r3, [r7, #28]
 800a286:	e012      	b.n	800a2ae <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	4413      	add	r3, r2
 800a28e:	7819      	ldrb	r1, [r3, #0]
 800a290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	3334      	adds	r3, #52	; 0x34
 800a298:	460a      	mov	r2, r1
 800a29a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d006      	beq.n	800a2b6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	61fb      	str	r3, [r7, #28]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	2b0f      	cmp	r3, #15
 800a2b2:	d9e9      	bls.n	800a288 <prvInitialiseNewTask+0x64>
 800a2b4:	e000      	b.n	800a2b8 <prvInitialiseNewTask+0x94>
            {
                break;
 800a2b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2c0:	e003      	b.n	800a2ca <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2cc:	2b37      	cmp	r3, #55	; 0x37
 800a2ce:	d901      	bls.n	800a2d4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2d0:	2337      	movs	r3, #55	; 0x37
 800a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2d8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2de:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fc68 	bl	8008bc0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	3318      	adds	r3, #24
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe fc63 	bl	8008bc0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a30e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	3354      	adds	r3, #84	; 0x54
 800a314:	2204      	movs	r2, #4
 800a316:	2100      	movs	r1, #0
 800a318:	4618      	mov	r0, r3
 800a31a:	f008 fe15 	bl	8012f48 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	3358      	adds	r3, #88	; 0x58
 800a322:	2201      	movs	r2, #1
 800a324:	2100      	movs	r1, #0
 800a326:	4618      	mov	r0, r3
 800a328:	f008 fe0e 	bl	8012f48 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	69b8      	ldr	r0, [r7, #24]
 800a332:	f7fe fcd9 	bl	8008ce8 <pxPortInitialiseStack>
 800a336:	4602      	mov	r2, r0
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a346:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a348:	bf00      	nop
 800a34a:	3720      	adds	r7, #32
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a350:	b5b0      	push	{r4, r5, r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af02      	add	r7, sp, #8
 800a356:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a358:	f7fe fdf6 	bl	8008f48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a35c:	4b3c      	ldr	r3, [pc, #240]	; (800a450 <prvAddNewTaskToReadyList+0x100>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	4a3b      	ldr	r2, [pc, #236]	; (800a450 <prvAddNewTaskToReadyList+0x100>)
 800a364:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a366:	4b3b      	ldr	r3, [pc, #236]	; (800a454 <prvAddNewTaskToReadyList+0x104>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a36e:	4a39      	ldr	r2, [pc, #228]	; (800a454 <prvAddNewTaskToReadyList+0x104>)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a374:	4b36      	ldr	r3, [pc, #216]	; (800a450 <prvAddNewTaskToReadyList+0x100>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d110      	bne.n	800a39e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a37c:	f000 fd30 	bl	800ade0 <prvInitialiseTaskLists>
 800a380:	e00d      	b.n	800a39e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a382:	4b35      	ldr	r3, [pc, #212]	; (800a458 <prvAddNewTaskToReadyList+0x108>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d109      	bne.n	800a39e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a38a:	4b32      	ldr	r3, [pc, #200]	; (800a454 <prvAddNewTaskToReadyList+0x104>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	429a      	cmp	r2, r3
 800a396:	d802      	bhi.n	800a39e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a398:	4a2e      	ldr	r2, [pc, #184]	; (800a454 <prvAddNewTaskToReadyList+0x104>)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a39e:	4b2f      	ldr	r3, [pc, #188]	; (800a45c <prvAddNewTaskToReadyList+0x10c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	4a2d      	ldr	r2, [pc, #180]	; (800a45c <prvAddNewTaskToReadyList+0x10c>)
 800a3a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3a8:	4b2c      	ldr	r3, [pc, #176]	; (800a45c <prvAddNewTaskToReadyList+0x10c>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d016      	beq.n	800a3e4 <prvAddNewTaskToReadyList+0x94>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f002 fcf3 	bl	800cda4 <SEGGER_SYSVIEW_OnTaskCreate>
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ce:	461d      	mov	r5, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461c      	mov	r4, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3da:	1ae3      	subs	r3, r4, r3
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	462b      	mov	r3, r5
 800a3e0:	f003 f814 	bl	800d40c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f002 fd60 	bl	800ceac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	4b1b      	ldr	r3, [pc, #108]	; (800a460 <prvAddNewTaskToReadyList+0x110>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d903      	bls.n	800a400 <prvAddNewTaskToReadyList+0xb0>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	4a18      	ldr	r2, [pc, #96]	; (800a460 <prvAddNewTaskToReadyList+0x110>)
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	4613      	mov	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4a15      	ldr	r2, [pc, #84]	; (800a464 <prvAddNewTaskToReadyList+0x114>)
 800a40e:	441a      	add	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	3304      	adds	r3, #4
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f7fe fbdf 	bl	8008bda <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a41c:	f7fe fdc4 	bl	8008fa8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a420:	4b0d      	ldr	r3, [pc, #52]	; (800a458 <prvAddNewTaskToReadyList+0x108>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00e      	beq.n	800a446 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <prvAddNewTaskToReadyList+0x104>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	429a      	cmp	r2, r3
 800a434:	d207      	bcs.n	800a446 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <prvAddNewTaskToReadyList+0x118>)
 800a438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bdb0      	pop	{r4, r5, r7, pc}
 800a44e:	bf00      	nop
 800a450:	20002e24 	.word	0x20002e24
 800a454:	20002950 	.word	0x20002950
 800a458:	20002e30 	.word	0x20002e30
 800a45c:	20002e40 	.word	0x20002e40
 800a460:	20002e2c 	.word	0x20002e2c
 800a464:	20002954 	.word	0x20002954
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800a474:	f7fe fd68 	bl	8008f48 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <vTaskDelete+0x18>
 800a47e:	4b39      	ldr	r3, [pc, #228]	; (800a564 <vTaskDelete+0xf8>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	e000      	b.n	800a486 <vTaskDelete+0x1a>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fc01 	bl	8008c94 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <vTaskDelete+0x38>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3318      	adds	r3, #24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fbf8 	bl	8008c94 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800a4a4:	4b30      	ldr	r3, [pc, #192]	; (800a568 <vTaskDelete+0xfc>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	4a2f      	ldr	r2, [pc, #188]	; (800a568 <vTaskDelete+0xfc>)
 800a4ac:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800a4ae:	4b2d      	ldr	r3, [pc, #180]	; (800a564 <vTaskDelete+0xf8>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d118      	bne.n	800a4ea <vTaskDelete+0x7e>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4619      	mov	r1, r3
 800a4be:	482b      	ldr	r0, [pc, #172]	; (800a56c <vTaskDelete+0x100>)
 800a4c0:	f7fe fb8b 	bl	8008bda <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800a4c4:	4b2a      	ldr	r3, [pc, #168]	; (800a570 <vTaskDelete+0x104>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	4a29      	ldr	r2, [pc, #164]	; (800a570 <vTaskDelete+0x104>)
 800a4cc:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f002 fd8d 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4619      	mov	r1, r3
 800a4da:	2022      	movs	r0, #34	; 0x22
 800a4dc:	f001 ff66 	bl	800c3ac <SEGGER_SYSVIEW_RecordU32>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f002 fffa 	bl	800d4dc <SYSVIEW_DeleteTask>
 800a4e8:	e016      	b.n	800a518 <vTaskDelete+0xac>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800a4ea:	4b22      	ldr	r3, [pc, #136]	; (800a574 <vTaskDelete+0x108>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	4a20      	ldr	r2, [pc, #128]	; (800a574 <vTaskDelete+0x108>)
 800a4f2:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f002 fd7a 	bl	800cff0 <SEGGER_SYSVIEW_ShrinkId>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	4619      	mov	r1, r3
 800a500:	2022      	movs	r0, #34	; 0x22
 800a502:	f001 ff53 	bl	800c3ac <SEGGER_SYSVIEW_RecordU32>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4618      	mov	r0, r3
 800a50a:	f002 ffe7 	bl	800d4dc <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fd0c 	bl	800af2c <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800a514:	f000 fd3a 	bl	800af8c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800a518:	f7fe fd46 	bl	8008fa8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800a51c:	4b16      	ldr	r3, [pc, #88]	; (800a578 <vTaskDelete+0x10c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d01b      	beq.n	800a55c <vTaskDelete+0xf0>
        {
            if( pxTCB == pxCurrentTCB )
 800a524:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <vTaskDelete+0xf8>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d116      	bne.n	800a55c <vTaskDelete+0xf0>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <vTaskDelete+0x110>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <vTaskDelete+0xe0>
        __asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	60bb      	str	r3, [r7, #8]
    }
 800a548:	bf00      	nop
 800a54a:	e7fe      	b.n	800a54a <vTaskDelete+0xde>
                portYIELD_WITHIN_API();
 800a54c:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <vTaskDelete+0x114>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a55c:	bf00      	nop
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20002950 	.word	0x20002950
 800a568:	20002e40 	.word	0x20002e40
 800a56c:	20002df8 	.word	0x20002df8
 800a570:	20002e0c 	.word	0x20002e0c
 800a574:	20002e24 	.word	0x20002e24
 800a578:	20002e30 	.word	0x20002e30
 800a57c:	20002e4c 	.word	0x20002e4c
 800a580:	e000ed04 	.word	0xe000ed04

0800a584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01b      	beq.n	800a5ce <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800a596:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <vTaskDelay+0x68>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <vTaskDelay+0x30>
        __asm volatile
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	60bb      	str	r3, [r7, #8]
    }
 800a5b0:	bf00      	nop
 800a5b2:	e7fe      	b.n	800a5b2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800a5b4:	f000 f898 	bl	800a6e8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800a5b8:	6879      	ldr	r1, [r7, #4]
 800a5ba:	2023      	movs	r0, #35	; 0x23
 800a5bc:	f001 fef6 	bl	800c3ac <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fea2 	bl	800b30c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800a5c8:	f000 f89c 	bl	800a704 <xTaskResumeAll>
 800a5cc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d107      	bne.n	800a5e4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800a5d4:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <vTaskDelay+0x6c>)
 800a5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20002e4c 	.word	0x20002e4c
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08a      	sub	sp, #40	; 0x28
 800a5f8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a602:	463a      	mov	r2, r7
 800a604:	1d39      	adds	r1, r7, #4
 800a606:	f107 0308 	add.w	r3, r7, #8
 800a60a:	4618      	mov	r0, r3
 800a60c:	f005 fbb8 	bl	800fd80 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	9202      	str	r2, [sp, #8]
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	2300      	movs	r3, #0
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	2300      	movs	r3, #0
 800a620:	460a      	mov	r2, r1
 800a622:	4929      	ldr	r1, [pc, #164]	; (800a6c8 <vTaskStartScheduler+0xd4>)
 800a624:	4829      	ldr	r0, [pc, #164]	; (800a6cc <vTaskStartScheduler+0xd8>)
 800a626:	f7ff fd5b 	bl	800a0e0 <xTaskCreateStatic>
 800a62a:	4603      	mov	r3, r0
 800a62c:	4a28      	ldr	r2, [pc, #160]	; (800a6d0 <vTaskStartScheduler+0xdc>)
 800a62e:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800a630:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <vTaskStartScheduler+0xdc>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800a638:	2301      	movs	r3, #1
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	e001      	b.n	800a642 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800a63e:	2300      	movs	r3, #0
 800a640:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d102      	bne.n	800a64e <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800a648:	f000 fec0 	bl	800b3cc <xTimerCreateTimerTask>
 800a64c:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d124      	bne.n	800a69e <vTaskStartScheduler+0xaa>
        __asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	613b      	str	r3, [r7, #16]
    }
 800a666:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a668:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <vTaskStartScheduler+0xe0>)
 800a66a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a66e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a670:	4b19      	ldr	r3, [pc, #100]	; (800a6d8 <vTaskStartScheduler+0xe4>)
 800a672:	2201      	movs	r2, #1
 800a674:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a676:	4b19      	ldr	r3, [pc, #100]	; (800a6dc <vTaskStartScheduler+0xe8>)
 800a678:	2200      	movs	r2, #0
 800a67a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a67c:	4b18      	ldr	r3, [pc, #96]	; (800a6e0 <vTaskStartScheduler+0xec>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <vTaskStartScheduler+0xdc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d102      	bne.n	800a68e <vTaskStartScheduler+0x9a>
 800a688:	f002 fb70 	bl	800cd6c <SEGGER_SYSVIEW_OnIdle>
 800a68c:	e004      	b.n	800a698 <vTaskStartScheduler+0xa4>
 800a68e:	4b14      	ldr	r3, [pc, #80]	; (800a6e0 <vTaskStartScheduler+0xec>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4618      	mov	r0, r3
 800a694:	f002 fbc8 	bl	800ce28 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a698:	f7fe fbb4 	bl	8008e04 <xPortStartScheduler>
 800a69c:	e00e      	b.n	800a6bc <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a4:	d10a      	bne.n	800a6bc <vTaskStartScheduler+0xc8>
        __asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	60fb      	str	r3, [r7, #12]
    }
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a6bc:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <vTaskStartScheduler+0xf0>)
 800a6be:	681b      	ldr	r3, [r3, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	08013954 	.word	0x08013954
 800a6cc:	0800adb1 	.word	0x0800adb1
 800a6d0:	20002e48 	.word	0x20002e48
 800a6d4:	20002e44 	.word	0x20002e44
 800a6d8:	20002e30 	.word	0x20002e30
 800a6dc:	20002e28 	.word	0x20002e28
 800a6e0:	20002950 	.word	0x20002950
 800a6e4:	20000010 	.word	0x20000010

0800a6e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a6ec:	4b04      	ldr	r3, [pc, #16]	; (800a700 <vTaskSuspendAll+0x18>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	4a03      	ldr	r2, [pc, #12]	; (800a700 <vTaskSuspendAll+0x18>)
 800a6f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a6f6:	bf00      	nop
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	20002e4c 	.word	0x20002e4c

0800a704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a70e:	2300      	movs	r3, #0
 800a710:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a712:	4b44      	ldr	r3, [pc, #272]	; (800a824 <xTaskResumeAll+0x120>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <xTaskResumeAll+0x2c>
        __asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	603b      	str	r3, [r7, #0]
    }
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a730:	f7fe fc0a 	bl	8008f48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a734:	4b3b      	ldr	r3, [pc, #236]	; (800a824 <xTaskResumeAll+0x120>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3b01      	subs	r3, #1
 800a73a:	4a3a      	ldr	r2, [pc, #232]	; (800a824 <xTaskResumeAll+0x120>)
 800a73c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a73e:	4b39      	ldr	r3, [pc, #228]	; (800a824 <xTaskResumeAll+0x120>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d166      	bne.n	800a814 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a746:	4b38      	ldr	r3, [pc, #224]	; (800a828 <xTaskResumeAll+0x124>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d062      	beq.n	800a814 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a74e:	e033      	b.n	800a7b8 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a750:	4b36      	ldr	r3, [pc, #216]	; (800a82c <xTaskResumeAll+0x128>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3318      	adds	r3, #24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe fa99 	bl	8008c94 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3304      	adds	r3, #4
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fa94 	bl	8008c94 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4618      	mov	r0, r3
 800a770:	f002 fb9c 	bl	800ceac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	4b2d      	ldr	r3, [pc, #180]	; (800a830 <xTaskResumeAll+0x12c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d903      	bls.n	800a788 <xTaskResumeAll+0x84>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a2a      	ldr	r2, [pc, #168]	; (800a830 <xTaskResumeAll+0x12c>)
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a27      	ldr	r2, [pc, #156]	; (800a834 <xTaskResumeAll+0x130>)
 800a796:	441a      	add	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7fe fa1b 	bl	8008bda <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a8:	4b23      	ldr	r3, [pc, #140]	; (800a838 <xTaskResumeAll+0x134>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d302      	bcc.n	800a7b8 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a7b2:	4b22      	ldr	r3, [pc, #136]	; (800a83c <xTaskResumeAll+0x138>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7b8:	4b1c      	ldr	r3, [pc, #112]	; (800a82c <xTaskResumeAll+0x128>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1c7      	bne.n	800a750 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d001      	beq.n	800a7ca <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a7c6:	f000 fbe1 	bl	800af8c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7ca:	4b1d      	ldr	r3, [pc, #116]	; (800a840 <xTaskResumeAll+0x13c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d010      	beq.n	800a7f8 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a7d6:	f000 f859 	bl	800a88c <xTaskIncrementTick>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a7e0:	4b16      	ldr	r3, [pc, #88]	; (800a83c <xTaskResumeAll+0x138>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1f1      	bne.n	800a7d6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a7f2:	4b13      	ldr	r3, [pc, #76]	; (800a840 <xTaskResumeAll+0x13c>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a7f8:	4b10      	ldr	r3, [pc, #64]	; (800a83c <xTaskResumeAll+0x138>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d009      	beq.n	800a814 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a800:	2301      	movs	r3, #1
 800a802:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a804:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <xTaskResumeAll+0x140>)
 800a806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a814:	f7fe fbc8 	bl	8008fa8 <vPortExitCritical>

    return xAlreadyYielded;
 800a818:	68bb      	ldr	r3, [r7, #8]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20002e4c 	.word	0x20002e4c
 800a828:	20002e24 	.word	0x20002e24
 800a82c:	20002de4 	.word	0x20002de4
 800a830:	20002e2c 	.word	0x20002e2c
 800a834:	20002954 	.word	0x20002954
 800a838:	20002950 	.word	0x20002950
 800a83c:	20002e38 	.word	0x20002e38
 800a840:	20002e34 	.word	0x20002e34
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a84e:	4b05      	ldr	r3, [pc, #20]	; (800a864 <xTaskGetTickCount+0x1c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a854:	687b      	ldr	r3, [r7, #4]
}
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	20002e28 	.word	0x20002e28

0800a868 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a86e:	f7fe fc55 	bl	800911c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a872:	2300      	movs	r3, #0
 800a874:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a876:	4b04      	ldr	r3, [pc, #16]	; (800a888 <xTaskGetTickCountFromISR+0x20>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a87c:	683b      	ldr	r3, [r7, #0]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20002e28 	.word	0x20002e28

0800a88c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a896:	4b51      	ldr	r3, [pc, #324]	; (800a9dc <xTaskIncrementTick+0x150>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f040 8093 	bne.w	800a9c6 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8a0:	4b4f      	ldr	r3, [pc, #316]	; (800a9e0 <xTaskIncrementTick+0x154>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a8a8:	4a4d      	ldr	r2, [pc, #308]	; (800a9e0 <xTaskIncrementTick+0x154>)
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d120      	bne.n	800a8f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800a8b4:	4b4b      	ldr	r3, [pc, #300]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00a      	beq.n	800a8d4 <xTaskIncrementTick+0x48>
        __asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	603b      	str	r3, [r7, #0]
    }
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <xTaskIncrementTick+0x46>
 800a8d4:	4b43      	ldr	r3, [pc, #268]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
 800a8da:	4b43      	ldr	r3, [pc, #268]	; (800a9e8 <xTaskIncrementTick+0x15c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a41      	ldr	r2, [pc, #260]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4a41      	ldr	r2, [pc, #260]	; (800a9e8 <xTaskIncrementTick+0x15c>)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	4b40      	ldr	r3, [pc, #256]	; (800a9ec <xTaskIncrementTick+0x160>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	4a3f      	ldr	r2, [pc, #252]	; (800a9ec <xTaskIncrementTick+0x160>)
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	f000 fb4b 	bl	800af8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a8f6:	4b3e      	ldr	r3, [pc, #248]	; (800a9f0 <xTaskIncrementTick+0x164>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d34d      	bcc.n	800a99c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a900:	4b38      	ldr	r3, [pc, #224]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d104      	bne.n	800a914 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a90a:	4b39      	ldr	r3, [pc, #228]	; (800a9f0 <xTaskIncrementTick+0x164>)
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a910:	601a      	str	r2, [r3, #0]
                    break;
 800a912:	e043      	b.n	800a99c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a914:	4b33      	ldr	r3, [pc, #204]	; (800a9e4 <xTaskIncrementTick+0x158>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d203      	bcs.n	800a934 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a92c:	4a30      	ldr	r2, [pc, #192]	; (800a9f0 <xTaskIncrementTick+0x164>)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a932:	e033      	b.n	800a99c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3304      	adds	r3, #4
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe f9ab 	bl	8008c94 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a942:	2b00      	cmp	r3, #0
 800a944:	d004      	beq.n	800a950 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	3318      	adds	r3, #24
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe f9a2 	bl	8008c94 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	4618      	mov	r0, r3
 800a954:	f002 faaa 	bl	800ceac <SEGGER_SYSVIEW_OnTaskStartReady>
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95c:	4b25      	ldr	r3, [pc, #148]	; (800a9f4 <xTaskIncrementTick+0x168>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d903      	bls.n	800a96c <xTaskIncrementTick+0xe0>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	4a22      	ldr	r2, [pc, #136]	; (800a9f4 <xTaskIncrementTick+0x168>)
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4a1f      	ldr	r2, [pc, #124]	; (800a9f8 <xTaskIncrementTick+0x16c>)
 800a97a:	441a      	add	r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	3304      	adds	r3, #4
 800a980:	4619      	mov	r1, r3
 800a982:	4610      	mov	r0, r2
 800a984:	f7fe f929 	bl	8008bda <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98c:	4b1b      	ldr	r3, [pc, #108]	; (800a9fc <xTaskIncrementTick+0x170>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	429a      	cmp	r2, r3
 800a994:	d3b4      	bcc.n	800a900 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800a996:	2301      	movs	r3, #1
 800a998:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a99a:	e7b1      	b.n	800a900 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a99c:	4b17      	ldr	r3, [pc, #92]	; (800a9fc <xTaskIncrementTick+0x170>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	4915      	ldr	r1, [pc, #84]	; (800a9f8 <xTaskIncrementTick+0x16c>)
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	440b      	add	r3, r1
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d901      	bls.n	800a9b8 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a9b8:	4b11      	ldr	r3, [pc, #68]	; (800aa00 <xTaskIncrementTick+0x174>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	617b      	str	r3, [r7, #20]
 800a9c4:	e004      	b.n	800a9d0 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <xTaskIncrementTick+0x178>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	4a0d      	ldr	r2, [pc, #52]	; (800aa04 <xTaskIncrementTick+0x178>)
 800a9ce:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a9d0:	697b      	ldr	r3, [r7, #20]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20002e4c 	.word	0x20002e4c
 800a9e0:	20002e28 	.word	0x20002e28
 800a9e4:	20002ddc 	.word	0x20002ddc
 800a9e8:	20002de0 	.word	0x20002de0
 800a9ec:	20002e3c 	.word	0x20002e3c
 800a9f0:	20002e44 	.word	0x20002e44
 800a9f4:	20002e2c 	.word	0x20002e2c
 800a9f8:	20002954 	.word	0x20002954
 800a9fc:	20002950 	.word	0x20002950
 800aa00:	20002e38 	.word	0x20002e38
 800aa04:	20002e34 	.word	0x20002e34

0800aa08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa0e:	4b41      	ldr	r3, [pc, #260]	; (800ab14 <vTaskSwitchContext+0x10c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800aa16:	4b40      	ldr	r3, [pc, #256]	; (800ab18 <vTaskSwitchContext+0x110>)
 800aa18:	2201      	movs	r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800aa1c:	e076      	b.n	800ab0c <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 800aa1e:	4b3e      	ldr	r3, [pc, #248]	; (800ab18 <vTaskSwitchContext+0x110>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 800aa24:	4b3d      	ldr	r3, [pc, #244]	; (800ab1c <vTaskSwitchContext+0x114>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2a:	613b      	str	r3, [r7, #16]
 800aa2c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d111      	bne.n	800aa60 <vTaskSwitchContext+0x58>
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d10b      	bne.n	800aa60 <vTaskSwitchContext+0x58>
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d105      	bne.n	800aa60 <vTaskSwitchContext+0x58>
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	330c      	adds	r3, #12
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d008      	beq.n	800aa72 <vTaskSwitchContext+0x6a>
 800aa60:	4b2e      	ldr	r3, [pc, #184]	; (800ab1c <vTaskSwitchContext+0x114>)
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	4b2d      	ldr	r3, [pc, #180]	; (800ab1c <vTaskSwitchContext+0x114>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3334      	adds	r3, #52	; 0x34
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f005 f977 	bl	800fd60 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa72:	4b2b      	ldr	r3, [pc, #172]	; (800ab20 <vTaskSwitchContext+0x118>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e010      	b.n	800aa9c <vTaskSwitchContext+0x94>
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <vTaskSwitchContext+0x8e>
        __asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	607b      	str	r3, [r7, #4]
    }
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <vTaskSwitchContext+0x8c>
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	4921      	ldr	r1, [pc, #132]	; (800ab24 <vTaskSwitchContext+0x11c>)
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	440b      	add	r3, r1
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0e4      	beq.n	800aa7a <vTaskSwitchContext+0x72>
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <vTaskSwitchContext+0x11c>)
 800aabc:	4413      	add	r3, r2
 800aabe:	60bb      	str	r3, [r7, #8]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	605a      	str	r2, [r3, #4]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	3308      	adds	r3, #8
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d104      	bne.n	800aae0 <vTaskSwitchContext+0xd8>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	605a      	str	r2, [r3, #4]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	4a0d      	ldr	r2, [pc, #52]	; (800ab1c <vTaskSwitchContext+0x114>)
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	4a0d      	ldr	r2, [pc, #52]	; (800ab20 <vTaskSwitchContext+0x118>)
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800aaf0:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <vTaskSwitchContext+0x114>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	4b0c      	ldr	r3, [pc, #48]	; (800ab28 <vTaskSwitchContext+0x120>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d102      	bne.n	800ab02 <vTaskSwitchContext+0xfa>
 800aafc:	f002 f936 	bl	800cd6c <SEGGER_SYSVIEW_OnIdle>
}
 800ab00:	e004      	b.n	800ab0c <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 800ab02:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <vTaskSwitchContext+0x114>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f002 f98e 	bl	800ce28 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800ab0c:	bf00      	nop
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20002e4c 	.word	0x20002e4c
 800ab18:	20002e38 	.word	0x20002e38
 800ab1c:	20002950 	.word	0x20002950
 800ab20:	20002e2c 	.word	0x20002e2c
 800ab24:	20002954 	.word	0x20002954
 800ab28:	20002e48 	.word	0x20002e48

0800ab2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	60fb      	str	r3, [r7, #12]
    }
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab52:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <vTaskPlaceOnEventList+0x44>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3318      	adds	r3, #24
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7fe f861 	bl	8008c22 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab60:	2101      	movs	r1, #1
 800ab62:	6838      	ldr	r0, [r7, #0]
 800ab64:	f000 fbd2 	bl	800b30c <prvAddCurrentTaskToDelayedList>
}
 800ab68:	bf00      	nop
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	20002950 	.word	0x20002950

0800ab74 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10a      	bne.n	800ab9c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	617b      	str	r3, [r7, #20]
    }
 800ab98:	bf00      	nop
 800ab9a:	e7fe      	b.n	800ab9a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab9c:	4b0b      	ldr	r3, [pc, #44]	; (800abcc <vTaskPlaceOnEventListRestricted+0x58>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3318      	adds	r3, #24
 800aba2:	4619      	mov	r1, r3
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f7fe f818 	bl	8008bda <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800abb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abb4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800abb6:	2024      	movs	r0, #36	; 0x24
 800abb8:	f001 fbda 	bl	800c370 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	68b8      	ldr	r0, [r7, #8]
 800abc0:	f000 fba4 	bl	800b30c <prvAddCurrentTaskToDelayedList>
    }
 800abc4:	bf00      	nop
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20002950 	.word	0x20002950

0800abd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10a      	bne.n	800abfc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	60fb      	str	r3, [r7, #12]
    }
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	3318      	adds	r3, #24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe f847 	bl	8008c94 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac06:	4b20      	ldr	r3, [pc, #128]	; (800ac88 <xTaskRemoveFromEventList+0xb8>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d121      	bne.n	800ac52 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	3304      	adds	r3, #4
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe f83e 	bl	8008c94 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f002 f946 	bl	800ceac <SEGGER_SYSVIEW_OnTaskStartReady>
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac24:	4b19      	ldr	r3, [pc, #100]	; (800ac8c <xTaskRemoveFromEventList+0xbc>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d903      	bls.n	800ac34 <xTaskRemoveFromEventList+0x64>
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	4a16      	ldr	r2, [pc, #88]	; (800ac8c <xTaskRemoveFromEventList+0xbc>)
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4a13      	ldr	r2, [pc, #76]	; (800ac90 <xTaskRemoveFromEventList+0xc0>)
 800ac42:	441a      	add	r2, r3
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	3304      	adds	r3, #4
 800ac48:	4619      	mov	r1, r3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	f7fd ffc5 	bl	8008bda <vListInsertEnd>
 800ac50:	e005      	b.n	800ac5e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	3318      	adds	r3, #24
 800ac56:	4619      	mov	r1, r3
 800ac58:	480e      	ldr	r0, [pc, #56]	; (800ac94 <xTaskRemoveFromEventList+0xc4>)
 800ac5a:	f7fd ffbe 	bl	8008bda <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac62:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <xTaskRemoveFromEventList+0xc8>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d905      	bls.n	800ac78 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800ac70:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <xTaskRemoveFromEventList+0xcc>)
 800ac72:	2201      	movs	r2, #1
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	e001      	b.n	800ac7c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800ac7c:	697b      	ldr	r3, [r7, #20]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3718      	adds	r7, #24
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20002e4c 	.word	0x20002e4c
 800ac8c:	20002e2c 	.word	0x20002e2c
 800ac90:	20002954 	.word	0x20002954
 800ac94:	20002de4 	.word	0x20002de4
 800ac98:	20002950 	.word	0x20002950
 800ac9c:	20002e38 	.word	0x20002e38

0800aca0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aca8:	4b06      	ldr	r3, [pc, #24]	; (800acc4 <vTaskInternalSetTimeOutState+0x24>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800acb0:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <vTaskInternalSetTimeOutState+0x28>)
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	605a      	str	r2, [r3, #4]
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	20002e3c 	.word	0x20002e3c
 800acc8:	20002e28 	.word	0x20002e28

0800accc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	613b      	str	r3, [r7, #16]
    }
 800acee:	bf00      	nop
 800acf0:	e7fe      	b.n	800acf0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60fb      	str	r3, [r7, #12]
    }
 800ad0a:	bf00      	nop
 800ad0c:	e7fe      	b.n	800ad0c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800ad0e:	f7fe f91b 	bl	8008f48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800ad12:	4b1f      	ldr	r3, [pc, #124]	; (800ad90 <xTaskCheckForTimeOut+0xc4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad2a:	d102      	bne.n	800ad32 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	61fb      	str	r3, [r7, #28]
 800ad30:	e026      	b.n	800ad80 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	4b17      	ldr	r3, [pc, #92]	; (800ad94 <xTaskCheckForTimeOut+0xc8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d00a      	beq.n	800ad54 <xTaskCheckForTimeOut+0x88>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d305      	bcc.n	800ad54 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	e015      	b.n	800ad80 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d20b      	bcs.n	800ad76 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	1ad2      	subs	r2, r2, r3
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff ff98 	bl	800aca0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	61fb      	str	r3, [r7, #28]
 800ad74:	e004      	b.n	800ad80 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800ad80:	f7fe f912 	bl	8008fa8 <vPortExitCritical>

    return xReturn;
 800ad84:	69fb      	ldr	r3, [r7, #28]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3720      	adds	r7, #32
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20002e28 	.word	0x20002e28
 800ad94:	20002e3c 	.word	0x20002e3c

0800ad98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800ad9c:	4b03      	ldr	r3, [pc, #12]	; (800adac <vTaskMissedYield+0x14>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	601a      	str	r2, [r3, #0]
}
 800ada2:	bf00      	nop
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20002e38 	.word	0x20002e38

0800adb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800adb8:	f000 f852 	bl	800ae60 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800adbc:	4b06      	ldr	r3, [pc, #24]	; (800add8 <prvIdleTask+0x28>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d9f9      	bls.n	800adb8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800adc4:	4b05      	ldr	r3, [pc, #20]	; (800addc <prvIdleTask+0x2c>)
 800adc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800add4:	e7f0      	b.n	800adb8 <prvIdleTask+0x8>
 800add6:	bf00      	nop
 800add8:	20002954 	.word	0x20002954
 800addc:	e000ed04 	.word	0xe000ed04

0800ade0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ade6:	2300      	movs	r3, #0
 800ade8:	607b      	str	r3, [r7, #4]
 800adea:	e00c      	b.n	800ae06 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4a12      	ldr	r2, [pc, #72]	; (800ae40 <prvInitialiseTaskLists+0x60>)
 800adf8:	4413      	add	r3, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fd fec0 	bl	8008b80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3301      	adds	r3, #1
 800ae04:	607b      	str	r3, [r7, #4]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b37      	cmp	r3, #55	; 0x37
 800ae0a:	d9ef      	bls.n	800adec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ae0c:	480d      	ldr	r0, [pc, #52]	; (800ae44 <prvInitialiseTaskLists+0x64>)
 800ae0e:	f7fd feb7 	bl	8008b80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ae12:	480d      	ldr	r0, [pc, #52]	; (800ae48 <prvInitialiseTaskLists+0x68>)
 800ae14:	f7fd feb4 	bl	8008b80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ae18:	480c      	ldr	r0, [pc, #48]	; (800ae4c <prvInitialiseTaskLists+0x6c>)
 800ae1a:	f7fd feb1 	bl	8008b80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800ae1e:	480c      	ldr	r0, [pc, #48]	; (800ae50 <prvInitialiseTaskLists+0x70>)
 800ae20:	f7fd feae 	bl	8008b80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800ae24:	480b      	ldr	r0, [pc, #44]	; (800ae54 <prvInitialiseTaskLists+0x74>)
 800ae26:	f7fd feab 	bl	8008b80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <prvInitialiseTaskLists+0x78>)
 800ae2c:	4a05      	ldr	r2, [pc, #20]	; (800ae44 <prvInitialiseTaskLists+0x64>)
 800ae2e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae30:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <prvInitialiseTaskLists+0x7c>)
 800ae32:	4a05      	ldr	r2, [pc, #20]	; (800ae48 <prvInitialiseTaskLists+0x68>)
 800ae34:	601a      	str	r2, [r3, #0]
}
 800ae36:	bf00      	nop
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20002954 	.word	0x20002954
 800ae44:	20002db4 	.word	0x20002db4
 800ae48:	20002dc8 	.word	0x20002dc8
 800ae4c:	20002de4 	.word	0x20002de4
 800ae50:	20002df8 	.word	0x20002df8
 800ae54:	20002e10 	.word	0x20002e10
 800ae58:	20002ddc 	.word	0x20002ddc
 800ae5c:	20002de0 	.word	0x20002de0

0800ae60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae66:	e019      	b.n	800ae9c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800ae68:	f7fe f86e 	bl	8008f48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <prvCheckTasksWaitingTermination+0x50>)
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fd ff0b 	bl	8008c94 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <prvCheckTasksWaitingTermination+0x54>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	4a0b      	ldr	r2, [pc, #44]	; (800aeb4 <prvCheckTasksWaitingTermination+0x54>)
 800ae86:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800ae88:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <prvCheckTasksWaitingTermination+0x58>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	4a0a      	ldr	r2, [pc, #40]	; (800aeb8 <prvCheckTasksWaitingTermination+0x58>)
 800ae90:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800ae92:	f7fe f889 	bl	8008fa8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f848 	bl	800af2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae9c:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <prvCheckTasksWaitingTermination+0x58>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e1      	bne.n	800ae68 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800aea4:	bf00      	nop
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	20002df8 	.word	0x20002df8
 800aeb4:	20002e24 	.word	0x20002e24
 800aeb8:	20002e0c 	.word	0x20002e0c

0800aebc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aec8:	e005      	b.n	800aed6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3301      	adds	r3, #1
 800aece:	607b      	str	r3, [r7, #4]
            ulCount++;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3301      	adds	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	2ba5      	cmp	r3, #165	; 0xa5
 800aedc:	d0f5      	beq.n	800aeca <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	089b      	lsrs	r3, r3, #2
 800aee2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	b29b      	uxth	r3, r3
    }
 800aee8:	4618      	mov	r0, r3
 800aeea:	3714      	adds	r7, #20
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <uxTaskGetStackHighWaterMark+0x14>
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <uxTaskGetStackHighWaterMark+0x34>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	e000      	b.n	800af0a <uxTaskGetStackHighWaterMark+0x16>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af10:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800af12:	6938      	ldr	r0, [r7, #16]
 800af14:	f7ff ffd2 	bl	800aebc <prvTaskCheckFreeStackSpace>
 800af18:	4603      	mov	r3, r0
 800af1a:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 800af1c:	68fb      	ldr	r3, [r7, #12]
    }
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20002950 	.word	0x20002950

0800af2c <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d108      	bne.n	800af50 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af42:	4618      	mov	r0, r3
 800af44:	f7fd fcfe 	bl	8008944 <vPortFree>
                    vPortFree( pxTCB );
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7fd fcfb 	bl	8008944 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800af4e:	e018      	b.n	800af82 <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af56:	2b01      	cmp	r3, #1
 800af58:	d103      	bne.n	800af62 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7fd fcf2 	bl	8008944 <vPortFree>
    }
 800af60:	e00f      	b.n	800af82 <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d00a      	beq.n	800af82 <prvDeleteTCB+0x56>
        __asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	60fb      	str	r3, [r7, #12]
    }
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <prvDeleteTCB+0x54>
    }
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
	...

0800af8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af90:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <prvResetNextTaskUnblockTime+0x30>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d104      	bne.n	800afa4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800af9a:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <prvResetNextTaskUnblockTime+0x34>)
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afa0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800afa2:	e005      	b.n	800afb0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800afa4:	4b05      	ldr	r3, [pc, #20]	; (800afbc <prvResetNextTaskUnblockTime+0x30>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a04      	ldr	r2, [pc, #16]	; (800afc0 <prvResetNextTaskUnblockTime+0x34>)
 800afae:	6013      	str	r3, [r2, #0]
}
 800afb0:	bf00      	nop
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	20002ddc 	.word	0x20002ddc
 800afc0:	20002e44 	.word	0x20002e44

0800afc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <xTaskGetSchedulerState+0x34>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d102      	bne.n	800afd8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800afd2:	2301      	movs	r3, #1
 800afd4:	607b      	str	r3, [r7, #4]
 800afd6:	e008      	b.n	800afea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd8:	4b08      	ldr	r3, [pc, #32]	; (800affc <xTaskGetSchedulerState+0x38>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800afe0:	2302      	movs	r3, #2
 800afe2:	607b      	str	r3, [r7, #4]
 800afe4:	e001      	b.n	800afea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800afe6:	2300      	movs	r3, #0
 800afe8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800afea:	687b      	ldr	r3, [r7, #4]
    }
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	20002e30 	.word	0x20002e30
 800affc:	20002e4c 	.word	0x20002e4c

0800b000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d05a      	beq.n	800b0cc <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01a:	4b2f      	ldr	r3, [pc, #188]	; (800b0d8 <xTaskPriorityInherit+0xd8>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	429a      	cmp	r2, r3
 800b022:	d24a      	bcs.n	800b0ba <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	db06      	blt.n	800b03a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02c:	4b2a      	ldr	r3, [pc, #168]	; (800b0d8 <xTaskPriorityInherit+0xd8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b032:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	6959      	ldr	r1, [r3, #20]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4a24      	ldr	r2, [pc, #144]	; (800b0dc <xTaskPriorityInherit+0xdc>)
 800b04c:	4413      	add	r3, r2
 800b04e:	4299      	cmp	r1, r3
 800b050:	d126      	bne.n	800b0a0 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	3304      	adds	r3, #4
 800b056:	4618      	mov	r0, r3
 800b058:	f7fd fe1c 	bl	8008c94 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b05c:	4b1e      	ldr	r3, [pc, #120]	; (800b0d8 <xTaskPriorityInherit+0xd8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 ff1f 	bl	800ceac <SEGGER_SYSVIEW_OnTaskStartReady>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b072:	4b1b      	ldr	r3, [pc, #108]	; (800b0e0 <xTaskPriorityInherit+0xe0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d903      	bls.n	800b082 <xTaskPriorityInherit+0x82>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07e:	4a18      	ldr	r2, [pc, #96]	; (800b0e0 <xTaskPriorityInherit+0xe0>)
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4a13      	ldr	r2, [pc, #76]	; (800b0dc <xTaskPriorityInherit+0xdc>)
 800b090:	441a      	add	r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	3304      	adds	r3, #4
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7fd fd9e 	bl	8008bda <vListInsertEnd>
 800b09e:	e004      	b.n	800b0aa <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b0a0:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <xTaskPriorityInherit+0xd8>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	2049      	movs	r0, #73	; 0x49
 800b0b0:	f001 f97c 	bl	800c3ac <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	e008      	b.n	800b0cc <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0be:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <xTaskPriorityInherit+0xd8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d201      	bcs.n	800b0cc <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
    }
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20002950 	.word	0x20002950
 800b0dc:	20002954 	.word	0x20002954
 800b0e0:	20002e2c 	.word	0x20002e2c

0800b0e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d05f      	beq.n	800b1ba <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b0fa:	4b32      	ldr	r3, [pc, #200]	; (800b1c4 <xTaskPriorityDisinherit+0xe0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	429a      	cmp	r2, r3
 800b102:	d00a      	beq.n	800b11a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	60fb      	str	r3, [r7, #12]
    }
 800b116:	bf00      	nop
 800b118:	e7fe      	b.n	800b118 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	60bb      	str	r3, [r7, #8]
    }
 800b134:	bf00      	nop
 800b136:	e7fe      	b.n	800b136 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13c:	1e5a      	subs	r2, r3, #1
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d035      	beq.n	800b1ba <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b152:	2b00      	cmp	r3, #0
 800b154:	d131      	bne.n	800b1ba <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	3304      	adds	r3, #4
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fd fd9a 	bl	8008c94 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4619      	mov	r1, r3
 800b164:	204a      	movs	r0, #74	; 0x4a
 800b166:	f001 f921 	bl	800c3ac <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b176:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	4618      	mov	r0, r3
 800b182:	f001 fe93 	bl	800ceac <SEGGER_SYSVIEW_OnTaskStartReady>
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18a:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <xTaskPriorityDisinherit+0xe4>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d903      	bls.n	800b19a <xTaskPriorityDisinherit+0xb6>
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	4a0c      	ldr	r2, [pc, #48]	; (800b1c8 <xTaskPriorityDisinherit+0xe4>)
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19e:	4613      	mov	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4a09      	ldr	r2, [pc, #36]	; (800b1cc <xTaskPriorityDisinherit+0xe8>)
 800b1a8:	441a      	add	r2, r3
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f7fd fd12 	bl	8008bda <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b1ba:	697b      	ldr	r3, [r7, #20]
    }
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20002950 	.word	0x20002950
 800b1c8:	20002e2c 	.word	0x20002e2c
 800b1cc:	20002954 	.word	0x20002954

0800b1d0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b088      	sub	sp, #32
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d073      	beq.n	800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10a      	bne.n	800b206 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	60fb      	str	r3, [r7, #12]
    }
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d902      	bls.n	800b216 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	61fb      	str	r3, [r7, #28]
 800b214:	e002      	b.n	800b21c <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b21a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	429a      	cmp	r2, r3
 800b224:	d054      	beq.n	800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d14f      	bne.n	800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b230:	4b29      	ldr	r3, [pc, #164]	; (800b2d8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	429a      	cmp	r2, r3
 800b238:	d10a      	bne.n	800b250 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	60bb      	str	r3, [r7, #8]
    }
 800b24c:	bf00      	nop
 800b24e:	e7fe      	b.n	800b24e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4619      	mov	r1, r3
 800b254:	204a      	movs	r0, #74	; 0x4a
 800b256:	f001 f8a9 	bl	800c3ac <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	69fa      	ldr	r2, [r7, #28]
 800b264:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	db04      	blt.n	800b278 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	6959      	ldr	r1, [r3, #20]
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	4613      	mov	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4a15      	ldr	r2, [pc, #84]	; (800b2dc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b288:	4413      	add	r3, r2
 800b28a:	4299      	cmp	r1, r3
 800b28c:	d120      	bne.n	800b2d0 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	3304      	adds	r3, #4
 800b292:	4618      	mov	r0, r3
 800b294:	f7fd fcfe 	bl	8008c94 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f001 fe06 	bl	800ceac <SEGGER_SYSVIEW_OnTaskStartReady>
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a4:	4b0e      	ldr	r3, [pc, #56]	; (800b2e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d903      	bls.n	800b2b4 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	4a0b      	ldr	r2, [pc, #44]	; (800b2e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4a06      	ldr	r2, [pc, #24]	; (800b2dc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b2c2:	441a      	add	r2, r3
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f7fd fc85 	bl	8008bda <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b2d0:	bf00      	nop
 800b2d2:	3720      	adds	r7, #32
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20002950 	.word	0x20002950
 800b2dc:	20002954 	.word	0x20002954
 800b2e0:	20002e2c 	.word	0x20002e2c

0800b2e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b2e8:	4b07      	ldr	r3, [pc, #28]	; (800b308 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d004      	beq.n	800b2fa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b2f0:	4b05      	ldr	r3, [pc, #20]	; (800b308 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2f6:	3201      	adds	r2, #1
 800b2f8:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800b2fa:	4b03      	ldr	r3, [pc, #12]	; (800b308 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
    }
 800b2fe:	4618      	mov	r0, r3
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	20002950 	.word	0x20002950

0800b30c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b316:	4b27      	ldr	r3, [pc, #156]	; (800b3b4 <prvAddCurrentTaskToDelayedList+0xa8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b31c:	4b26      	ldr	r3, [pc, #152]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	3304      	adds	r3, #4
 800b322:	4618      	mov	r0, r3
 800b324:	f7fd fcb6 	bl	8008c94 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b32e:	d10a      	bne.n	800b346 <prvAddCurrentTaskToDelayedList+0x3a>
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d007      	beq.n	800b346 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b336:	4b20      	ldr	r3, [pc, #128]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4619      	mov	r1, r3
 800b33e:	481f      	ldr	r0, [pc, #124]	; (800b3bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b340:	f7fd fc4b 	bl	8008bda <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b344:	e032      	b.n	800b3ac <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4413      	add	r3, r2
 800b34c:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b34e:	4b1a      	ldr	r3, [pc, #104]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d20f      	bcs.n	800b37e <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b35e:	4b16      	ldr	r3, [pc, #88]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2104      	movs	r1, #4
 800b364:	4618      	mov	r0, r3
 800b366:	f001 fde3 	bl	800cf30 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b36a:	4b15      	ldr	r3, [pc, #84]	; (800b3c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3304      	adds	r3, #4
 800b374:	4619      	mov	r1, r3
 800b376:	4610      	mov	r0, r2
 800b378:	f7fd fc53 	bl	8008c22 <vListInsert>
}
 800b37c:	e016      	b.n	800b3ac <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 800b37e:	4b0e      	ldr	r3, [pc, #56]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2104      	movs	r1, #4
 800b384:	4618      	mov	r0, r3
 800b386:	f001 fdd3 	bl	800cf30 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b38a:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	4b0a      	ldr	r3, [pc, #40]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3304      	adds	r3, #4
 800b394:	4619      	mov	r1, r3
 800b396:	4610      	mov	r0, r2
 800b398:	f7fd fc43 	bl	8008c22 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b39c:	4b0a      	ldr	r3, [pc, #40]	; (800b3c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d202      	bcs.n	800b3ac <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800b3a6:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	6013      	str	r3, [r2, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	20002e28 	.word	0x20002e28
 800b3b8:	20002950 	.word	0x20002950
 800b3bc:	20002e10 	.word	0x20002e10
 800b3c0:	20002de0 	.word	0x20002de0
 800b3c4:	20002ddc 	.word	0x20002ddc
 800b3c8:	20002e44 	.word	0x20002e44

0800b3cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08a      	sub	sp, #40	; 0x28
 800b3d0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b3d6:	f000 fb63 	bl	800baa0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b3da:	4b1c      	ldr	r3, [pc, #112]	; (800b44c <xTimerCreateTimerTask+0x80>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d021      	beq.n	800b426 <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3ea:	1d3a      	adds	r2, r7, #4
 800b3ec:	f107 0108 	add.w	r1, r7, #8
 800b3f0:	f107 030c 	add.w	r3, r7, #12
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f004 fcdd 	bl	800fdb4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	9202      	str	r2, [sp, #8]
 800b402:	9301      	str	r3, [sp, #4]
 800b404:	2305      	movs	r3, #5
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	2300      	movs	r3, #0
 800b40a:	460a      	mov	r2, r1
 800b40c:	4910      	ldr	r1, [pc, #64]	; (800b450 <xTimerCreateTimerTask+0x84>)
 800b40e:	4811      	ldr	r0, [pc, #68]	; (800b454 <xTimerCreateTimerTask+0x88>)
 800b410:	f7fe fe66 	bl	800a0e0 <xTaskCreateStatic>
 800b414:	4603      	mov	r3, r0
 800b416:	4a10      	ldr	r2, [pc, #64]	; (800b458 <xTimerCreateTimerTask+0x8c>)
 800b418:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800b41a:	4b0f      	ldr	r3, [pc, #60]	; (800b458 <xTimerCreateTimerTask+0x8c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800b422:	2301      	movs	r3, #1
 800b424:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10a      	bne.n	800b442 <xTimerCreateTimerTask+0x76>
        __asm volatile
 800b42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b430:	f383 8811 	msr	BASEPRI, r3
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	613b      	str	r3, [r7, #16]
    }
 800b43e:	bf00      	nop
 800b440:	e7fe      	b.n	800b440 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800b442:	697b      	ldr	r3, [r7, #20]
    }
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20002e80 	.word	0x20002e80
 800b450:	0801395c 	.word	0x0801395c
 800b454:	0800b649 	.word	0x0800b649
 800b458:	20002e84 	.word	0x20002e84

0800b45c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af02      	add	r7, sp, #8
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b46a:	202c      	movs	r0, #44	; 0x2c
 800b46c:	f7fd f986 	bl	800877c <pvPortMalloc>
 800b470:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00d      	beq.n	800b494 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	9301      	str	r3, [sp, #4]
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f000 f805 	bl	800b49e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800b494:	697b      	ldr	r3, [r7, #20]
        }
 800b496:	4618      	mov	r0, r3
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b086      	sub	sp, #24
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]
 800b4aa:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10a      	bne.n	800b4c8 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	617b      	str	r3, [r7, #20]
    }
 800b4c4:	bf00      	nop
 800b4c6:	e7fe      	b.n	800b4c6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d01e      	beq.n	800b50c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800b4ce:	f000 fae7 	bl	800baa0 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fd fb66 	bl	8008bc0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d008      	beq.n	800b50c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b500:	f043 0304 	orr.w	r3, r3, #4
 800b504:	b2da      	uxtb	r2, r3
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800b50c:	bf00      	nop
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b514:	b580      	push	{r7, lr}
 800b516:	b08a      	sub	sp, #40	; 0x28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b522:	2300      	movs	r3, #0
 800b524:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <xTimerGenericCommand+0x2e>
        __asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	623b      	str	r3, [r7, #32]
    }
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b542:	4b1a      	ldr	r3, [pc, #104]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d02a      	beq.n	800b5a0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2b05      	cmp	r3, #5
 800b55a:	dc18      	bgt.n	800b58e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b55c:	f7ff fd32 	bl	800afc4 <xTaskGetSchedulerState>
 800b560:	4603      	mov	r3, r0
 800b562:	2b02      	cmp	r3, #2
 800b564:	d109      	bne.n	800b57a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b566:	4b11      	ldr	r3, [pc, #68]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	f107 0110 	add.w	r1, r7, #16
 800b56e:	2300      	movs	r3, #0
 800b570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b572:	f7fd fff7 	bl	8009564 <xQueueGenericSend>
 800b576:	6278      	str	r0, [r7, #36]	; 0x24
 800b578:	e012      	b.n	800b5a0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b57a:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	f107 0110 	add.w	r1, r7, #16
 800b582:	2300      	movs	r3, #0
 800b584:	2200      	movs	r2, #0
 800b586:	f7fd ffed 	bl	8009564 <xQueueGenericSend>
 800b58a:	6278      	str	r0, [r7, #36]	; 0x24
 800b58c:	e008      	b.n	800b5a0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b58e:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	f107 0110 	add.w	r1, r7, #16
 800b596:	2300      	movs	r3, #0
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	f7fe f909 	bl	80097b0 <xQueueGenericSendFromISR>
 800b59e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3728      	adds	r7, #40	; 0x28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20002e80 	.word	0x20002e80

0800b5b0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af02      	add	r7, sp, #8
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ba:	4b22      	ldr	r3, [pc, #136]	; (800b644 <prvProcessExpiredTimer+0x94>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fd fb63 	bl	8008c94 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d022      	beq.n	800b622 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	699a      	ldr	r2, [r3, #24]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	18d1      	adds	r1, r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	6978      	ldr	r0, [r7, #20]
 800b5ea:	f000 f8d1 	bl	800b790 <prvInsertTimerInActiveList>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d01f      	beq.n	800b634 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	6978      	ldr	r0, [r7, #20]
 800b600:	f7ff ff88 	bl	800b514 <xTimerGenericCommand>
 800b604:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d113      	bne.n	800b634 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	60fb      	str	r3, [r7, #12]
    }
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b628:	f023 0301 	bic.w	r3, r3, #1
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	6978      	ldr	r0, [r7, #20]
 800b63a:	4798      	blx	r3
    }
 800b63c:	bf00      	nop
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20002e78 	.word	0x20002e78

0800b648 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b650:	f107 0308 	add.w	r3, r7, #8
 800b654:	4618      	mov	r0, r3
 800b656:	f000 f857 	bl	800b708 <prvGetNextExpireTime>
 800b65a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	4619      	mov	r1, r3
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f803 	bl	800b66c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b666:	f000 f8d5 	bl	800b814 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b66a:	e7f1      	b.n	800b650 <prvTimerTask+0x8>

0800b66c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b676:	f7ff f837 	bl	800a6e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b67a:	f107 0308 	add.w	r3, r7, #8
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 f866 	bl	800b750 <prvSampleTimeNow>
 800b684:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d130      	bne.n	800b6ee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <prvProcessTimerOrBlockTask+0x3c>
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	429a      	cmp	r2, r3
 800b698:	d806      	bhi.n	800b6a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b69a:	f7ff f833 	bl	800a704 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b69e:	68f9      	ldr	r1, [r7, #12]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ff85 	bl	800b5b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b6a6:	e024      	b.n	800b6f2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d008      	beq.n	800b6c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6ae:	4b13      	ldr	r3, [pc, #76]	; (800b6fc <prvProcessTimerOrBlockTask+0x90>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <prvProcessTimerOrBlockTask+0x50>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e000      	b.n	800b6be <prvProcessTimerOrBlockTask+0x52>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6c0:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <prvProcessTimerOrBlockTask+0x94>)
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7fe fcd3 	bl	800a078 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b6d2:	f7ff f817 	bl	800a704 <xTaskResumeAll>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b6dc:	4b09      	ldr	r3, [pc, #36]	; (800b704 <prvProcessTimerOrBlockTask+0x98>)
 800b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	f3bf 8f6f 	isb	sy
    }
 800b6ec:	e001      	b.n	800b6f2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b6ee:	f7ff f809 	bl	800a704 <xTaskResumeAll>
    }
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20002e7c 	.word	0x20002e7c
 800b700:	20002e80 	.word	0x20002e80
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b710:	4b0e      	ldr	r3, [pc, #56]	; (800b74c <prvGetNextExpireTime+0x44>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <prvGetNextExpireTime+0x16>
 800b71a:	2201      	movs	r2, #1
 800b71c:	e000      	b.n	800b720 <prvGetNextExpireTime+0x18>
 800b71e:	2200      	movs	r2, #0
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d105      	bne.n	800b738 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b72c:	4b07      	ldr	r3, [pc, #28]	; (800b74c <prvGetNextExpireTime+0x44>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	e001      	b.n	800b73c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b73c:	68fb      	ldr	r3, [r7, #12]
    }
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20002e78 	.word	0x20002e78

0800b750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b758:	f7ff f876 	bl	800a848 <xTaskGetTickCount>
 800b75c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b75e:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <prvSampleTimeNow+0x3c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	d205      	bcs.n	800b774 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b768:	f000 f936 	bl	800b9d8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	e002      	b.n	800b77a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b77a:	4a04      	ldr	r2, [pc, #16]	; (800b78c <prvSampleTimeNow+0x3c>)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b780:	68fb      	ldr	r3, [r7, #12]
    }
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20002e88 	.word	0x20002e88

0800b790 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d812      	bhi.n	800b7dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	1ad2      	subs	r2, r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d302      	bcc.n	800b7ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	e01b      	b.n	800b802 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7ca:	4b10      	ldr	r3, [pc, #64]	; (800b80c <prvInsertTimerInActiveList+0x7c>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f7fd fa24 	bl	8008c22 <vListInsert>
 800b7da:	e012      	b.n	800b802 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d206      	bcs.n	800b7f2 <prvInsertTimerInActiveList+0x62>
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d302      	bcc.n	800b7f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	e007      	b.n	800b802 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <prvInsertTimerInActiveList+0x80>)
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	f7fd fa10 	bl	8008c22 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b802:	697b      	ldr	r3, [r7, #20]
    }
 800b804:	4618      	mov	r0, r3
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20002e7c 	.word	0x20002e7c
 800b810:	20002e78 	.word	0x20002e78

0800b814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b814:	b580      	push	{r7, lr}
 800b816:	b08e      	sub	sp, #56	; 0x38
 800b818:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b81a:	e0ca      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da18      	bge.n	800b854 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b822:	1d3b      	adds	r3, r7, #4
 800b824:	3304      	adds	r3, #4
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10a      	bne.n	800b844 <prvProcessReceivedCommands+0x30>
        __asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	61fb      	str	r3, [r7, #28]
    }
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b84a:	6850      	ldr	r0, [r2, #4]
 800b84c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b84e:	6892      	ldr	r2, [r2, #8]
 800b850:	4611      	mov	r1, r2
 800b852:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f2c0 80aa 	blt.w	800b9b0 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d004      	beq.n	800b872 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	3304      	adds	r3, #4
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fd fa11 	bl	8008c94 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b872:	463b      	mov	r3, r7
 800b874:	4618      	mov	r0, r3
 800b876:	f7ff ff6b 	bl	800b750 <prvSampleTimeNow>
 800b87a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b09      	cmp	r3, #9
 800b880:	f200 8097 	bhi.w	800b9b2 <prvProcessReceivedCommands+0x19e>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <prvProcessReceivedCommands+0x78>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b8b5 	.word	0x0800b8b5
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b8b5 	.word	0x0800b8b5
 800b898:	0800b929 	.word	0x0800b929
 800b89c:	0800b93d 	.word	0x0800b93d
 800b8a0:	0800b987 	.word	0x0800b987
 800b8a4:	0800b8b5 	.word	0x0800b8b5
 800b8a8:	0800b8b5 	.word	0x0800b8b5
 800b8ac:	0800b929 	.word	0x0800b929
 800b8b0:	0800b93d 	.word	0x0800b93d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ba:	f043 0301 	orr.w	r3, r3, #1
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	18d1      	adds	r1, r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d4:	f7ff ff5c 	bl	800b790 <prvInsertTimerInActiveList>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d069      	beq.n	800b9b2 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d05e      	beq.n	800b9b2 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	441a      	add	r2, r3
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	2300      	movs	r3, #0
 800b902:	2100      	movs	r1, #0
 800b904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b906:	f7ff fe05 	bl	800b514 <xTimerGenericCommand>
 800b90a:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d14f      	bne.n	800b9b2 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	61bb      	str	r3, [r7, #24]
    }
 800b924:	bf00      	nop
 800b926:	e7fe      	b.n	800b926 <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b92e:	f023 0301 	bic.w	r3, r3, #1
 800b932:	b2da      	uxtb	r2, r3
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800b93a:	e03a      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	b2da      	uxtb	r2, r3
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b952:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	617b      	str	r3, [r7, #20]
    }
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	699a      	ldr	r2, [r3, #24]
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	18d1      	adds	r1, r2, r3
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b980:	f7ff ff06 	bl	800b790 <prvInsertTimerInActiveList>
                        break;
 800b984:	e015      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b98c:	f003 0302 	and.w	r3, r3, #2
 800b990:	2b00      	cmp	r3, #0
 800b992:	d103      	bne.n	800b99c <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 800b994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b996:	f7fc ffd5 	bl	8008944 <vPortFree>
 800b99a:	e00a      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b9ae:	e000      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800b9b0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9b2:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <prvProcessReceivedCommands+0x1c0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	1d39      	adds	r1, r7, #4
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fd ffb6 	bl	800992c <xQueueReceive>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f47f af2a 	bne.w	800b81c <prvProcessReceivedCommands+0x8>
        }
    }
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	3730      	adds	r7, #48	; 0x30
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20002e80 	.word	0x20002e80

0800b9d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9de:	e048      	b.n	800ba72 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ea:	4b2b      	ldr	r3, [pc, #172]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fd f94b 	bl	8008c94 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d02e      	beq.n	800ba72 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d90e      	bls.n	800ba44 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba32:	4b19      	ldr	r3, [pc, #100]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3304      	adds	r3, #4
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f7fd f8f0 	bl	8008c22 <vListInsert>
 800ba42:	e016      	b.n	800ba72 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba44:	2300      	movs	r3, #0
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7ff fd60 	bl	800b514 <xTimerGenericCommand>
 800ba54:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	603b      	str	r3, [r7, #0]
    }
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1b1      	bne.n	800b9e0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800ba7c:	4b06      	ldr	r3, [pc, #24]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800ba82:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <prvSwitchTimerLists+0xc4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a04      	ldr	r2, [pc, #16]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba88:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ba8a:	4a04      	ldr	r2, [pc, #16]	; (800ba9c <prvSwitchTimerLists+0xc4>)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	6013      	str	r3, [r2, #0]
    }
 800ba90:	bf00      	nop
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20002e78 	.word	0x20002e78
 800ba9c:	20002e7c 	.word	0x20002e7c

0800baa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800baa6:	f7fd fa4f 	bl	8008f48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800baaa:	4b15      	ldr	r3, [pc, #84]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d120      	bne.n	800baf4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800bab2:	4814      	ldr	r0, [pc, #80]	; (800bb04 <prvCheckForValidListAndQueue+0x64>)
 800bab4:	f7fd f864 	bl	8008b80 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800bab8:	4813      	ldr	r0, [pc, #76]	; (800bb08 <prvCheckForValidListAndQueue+0x68>)
 800baba:	f7fd f861 	bl	8008b80 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800babe:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <prvCheckForValidListAndQueue+0x6c>)
 800bac0:	4a10      	ldr	r2, [pc, #64]	; (800bb04 <prvCheckForValidListAndQueue+0x64>)
 800bac2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800bac4:	4b12      	ldr	r3, [pc, #72]	; (800bb10 <prvCheckForValidListAndQueue+0x70>)
 800bac6:	4a10      	ldr	r2, [pc, #64]	; (800bb08 <prvCheckForValidListAndQueue+0x68>)
 800bac8:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800baca:	2300      	movs	r3, #0
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	4b11      	ldr	r3, [pc, #68]	; (800bb14 <prvCheckForValidListAndQueue+0x74>)
 800bad0:	4a11      	ldr	r2, [pc, #68]	; (800bb18 <prvCheckForValidListAndQueue+0x78>)
 800bad2:	2110      	movs	r1, #16
 800bad4:	200a      	movs	r0, #10
 800bad6:	f7fd fc0f 	bl	80092f8 <xQueueGenericCreateStatic>
 800bada:	4603      	mov	r3, r0
 800badc:	4a08      	ldr	r2, [pc, #32]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800bade:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bae8:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	490b      	ldr	r1, [pc, #44]	; (800bb1c <prvCheckForValidListAndQueue+0x7c>)
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe fa90 	bl	800a014 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800baf4:	f7fd fa58 	bl	8008fa8 <vPortExitCritical>
    }
 800baf8:	bf00      	nop
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20002e80 	.word	0x20002e80
 800bb04:	20002e50 	.word	0x20002e50
 800bb08:	20002e64 	.word	0x20002e64
 800bb0c:	20002e78 	.word	0x20002e78
 800bb10:	20002e7c 	.word	0x20002e7c
 800bb14:	20002f2c 	.word	0x20002f2c
 800bb18:	20002e8c 	.word	0x20002e8c
 800bb1c:	08013964 	.word	0x08013964

0800bb20 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800bb26:	4b24      	ldr	r3, [pc, #144]	; (800bbb8 <_DoInit+0x98>)
 800bb28:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2203      	movs	r2, #3
 800bb2e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2203      	movs	r2, #3
 800bb34:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a20      	ldr	r2, [pc, #128]	; (800bbbc <_DoInit+0x9c>)
 800bb3a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a20      	ldr	r2, [pc, #128]	; (800bbc0 <_DoInit+0xa0>)
 800bb40:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bb48:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a17      	ldr	r2, [pc, #92]	; (800bbbc <_DoInit+0x9c>)
 800bb60:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a17      	ldr	r2, [pc, #92]	; (800bbc4 <_DoInit+0xa4>)
 800bb66:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2210      	movs	r2, #16
 800bb6c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3307      	adds	r3, #7
 800bb84:	4a10      	ldr	r2, [pc, #64]	; (800bbc8 <_DoInit+0xa8>)
 800bb86:	6810      	ldr	r0, [r2, #0]
 800bb88:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bb8a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a0e      	ldr	r2, [pc, #56]	; (800bbcc <_DoInit+0xac>)
 800bb92:	6810      	ldr	r0, [r2, #0]
 800bb94:	6018      	str	r0, [r3, #0]
 800bb96:	8891      	ldrh	r1, [r2, #4]
 800bb98:	7992      	ldrb	r2, [r2, #6]
 800bb9a:	8099      	strh	r1, [r3, #4]
 800bb9c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bb9e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2220      	movs	r2, #32
 800bba6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bba8:	f3bf 8f5f 	dmb	sy
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20002f7c 	.word	0x20002f7c
 800bbbc:	0801396c 	.word	0x0801396c
 800bbc0:	20003024 	.word	0x20003024
 800bbc4:	20004024 	.word	0x20004024
 800bbc8:	08013978 	.word	0x08013978
 800bbcc:	0801397c 	.word	0x0801397c

0800bbd0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b08c      	sub	sp, #48	; 0x30
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800bbdc:	4b3e      	ldr	r3, [pc, #248]	; (800bcd8 <SEGGER_RTT_ReadNoLock+0x108>)
 800bbde:	623b      	str	r3, [r7, #32]
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <SEGGER_RTT_ReadNoLock+0x1e>
 800bbea:	f7ff ff99 	bl	800bb20 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	4413      	add	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	3360      	adds	r3, #96	; 0x60
 800bbfa:	4a37      	ldr	r2, [pc, #220]	; (800bcd8 <SEGGER_RTT_ReadNoLock+0x108>)
 800bbfc:	4413      	add	r3, r2
 800bbfe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800bc10:	2300      	movs	r3, #0
 800bc12:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800bc14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d92b      	bls.n	800bc74 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	689a      	ldr	r2, [r3, #8]
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bf28      	it	cs
 800bc2e:	4613      	movcs	r3, r2
 800bc30:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	4413      	add	r3, r2
 800bc3a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	6939      	ldr	r1, [r7, #16]
 800bc40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc42:	f007 f973 	bl	8012f2c <memcpy>
    NumBytesRead += NumBytesRem;
 800bc46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800bc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	4413      	add	r3, r2
 800bc54:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bc5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	4413      	add	r3, r2
 800bc64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d101      	bne.n	800bc74 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800bc70:	2300      	movs	r3, #0
 800bc72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4293      	cmp	r3, r2
 800bc82:	bf28      	it	cs
 800bc84:	4613      	movcs	r3, r2
 800bc86:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d019      	beq.n	800bcc2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	4413      	add	r3, r2
 800bc96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	6939      	ldr	r1, [r7, #16]
 800bc9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc9e:	f007 f945 	bl	8012f2c <memcpy>
    NumBytesRead += NumBytesRem;
 800bca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	4413      	add	r3, r2
 800bca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800bcaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	4413      	add	r3, r2
 800bcb0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bcba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bccc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3730      	adds	r7, #48	; 0x30
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20002f7c 	.word	0x20002f7c

0800bcdc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800bcea:	4b3d      	ldr	r3, [pc, #244]	; (800bde0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bcec:	61bb      	str	r3, [r7, #24]
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d101      	bne.n	800bcfc <SEGGER_RTT_AllocUpBuffer+0x20>
 800bcf8:	f7ff ff12 	bl	800bb20 <_DoInit>
  SEGGER_RTT_LOCK();
 800bcfc:	f3ef 8311 	mrs	r3, BASEPRI
 800bd00:	f04f 0120 	mov.w	r1, #32
 800bd04:	f381 8811 	msr	BASEPRI, r1
 800bd08:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bd0a:	4b35      	ldr	r3, [pc, #212]	; (800bde0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bd0c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800bd12:	6939      	ldr	r1, [r7, #16]
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	4613      	mov	r3, r2
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	4413      	add	r3, r2
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	440b      	add	r3, r1
 800bd22:	3304      	adds	r3, #4
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d008      	beq.n	800bd3c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	69fa      	ldr	r2, [r7, #28]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	dbeb      	blt.n	800bd12 <SEGGER_RTT_AllocUpBuffer+0x36>
 800bd3a:	e000      	b.n	800bd3e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800bd3c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	69fa      	ldr	r2, [r7, #28]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	da3f      	bge.n	800bdc8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800bd48:	6939      	ldr	r1, [r7, #16]
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	4613      	mov	r3, r2
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	4413      	add	r3, r2
 800bd54:	00db      	lsls	r3, r3, #3
 800bd56:	440b      	add	r3, r1
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800bd5c:	6939      	ldr	r1, [r7, #16]
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	4613      	mov	r3, r2
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	4413      	add	r3, r2
 800bd68:	00db      	lsls	r3, r3, #3
 800bd6a:	440b      	add	r3, r1
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800bd72:	6939      	ldr	r1, [r7, #16]
 800bd74:	69fa      	ldr	r2, [r7, #28]
 800bd76:	4613      	mov	r3, r2
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	4413      	add	r3, r2
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	440b      	add	r3, r1
 800bd80:	3320      	adds	r3, #32
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800bd86:	6939      	ldr	r1, [r7, #16]
 800bd88:	69fa      	ldr	r2, [r7, #28]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	4413      	add	r3, r2
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	440b      	add	r3, r1
 800bd94:	3328      	adds	r3, #40	; 0x28
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800bd9a:	6939      	ldr	r1, [r7, #16]
 800bd9c:	69fa      	ldr	r2, [r7, #28]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	4413      	add	r3, r2
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	440b      	add	r3, r1
 800bda8:	3324      	adds	r3, #36	; 0x24
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800bdae:	6939      	ldr	r1, [r7, #16]
 800bdb0:	69fa      	ldr	r2, [r7, #28]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	440b      	add	r3, r1
 800bdbc:	332c      	adds	r3, #44	; 0x2c
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bdc2:	f3bf 8f5f 	dmb	sy
 800bdc6:	e002      	b.n	800bdce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800bdc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdcc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800bdd4:	69fb      	ldr	r3, [r7, #28]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3720      	adds	r7, #32
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20002f7c 	.word	0x20002f7c

0800bde4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08a      	sub	sp, #40	; 0x28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800bdf2:	4b21      	ldr	r3, [pc, #132]	; (800be78 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800bdf4:	623b      	str	r3, [r7, #32]
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800be00:	f7ff fe8e 	bl	800bb20 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800be04:	4b1c      	ldr	r3, [pc, #112]	; (800be78 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800be06:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d82c      	bhi.n	800be68 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800be0e:	f3ef 8311 	mrs	r3, BASEPRI
 800be12:	f04f 0120 	mov.w	r1, #32
 800be16:	f381 8811 	msr	BASEPRI, r1
 800be1a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4613      	mov	r3, r2
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	4413      	add	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	3360      	adds	r3, #96	; 0x60
 800be28:	69fa      	ldr	r2, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00e      	beq.n	800be52 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2200      	movs	r2, #0
 800be4a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2200      	movs	r2, #0
 800be50:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be56:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800be58:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800be62:	2300      	movs	r3, #0
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
 800be66:	e002      	b.n	800be6e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800be68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be70:	4618      	mov	r0, r3
 800be72:	3728      	adds	r7, #40	; 0x28
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20002f7c 	.word	0x20002f7c

0800be7c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00f      	beq.n	800beb2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800be92:	e002      	b.n	800be9a <_EncodeStr+0x1e>
      Len++;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	3301      	adds	r3, #1
 800be98:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	4413      	add	r3, r2
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1f6      	bne.n	800be94 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d901      	bls.n	800beb2 <_EncodeStr+0x36>
      Len = Limit;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2bfe      	cmp	r3, #254	; 0xfe
 800beb6:	d806      	bhi.n	800bec6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	1c5a      	adds	r2, r3, #1
 800bebc:	60fa      	str	r2, [r7, #12]
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]
 800bec4:	e011      	b.n	800beea <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	60fa      	str	r2, [r7, #12]
 800becc:	22ff      	movs	r2, #255	; 0xff
 800bece:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	60fa      	str	r2, [r7, #12]
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	b2d2      	uxtb	r2, r2
 800beda:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	0a19      	lsrs	r1, r3, #8
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	60fa      	str	r2, [r7, #12]
 800bee6:	b2ca      	uxtb	r2, r1
 800bee8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800beee:	e00a      	b.n	800bf06 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	1c53      	adds	r3, r2, #1
 800bef4:	60bb      	str	r3, [r7, #8]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	1c59      	adds	r1, r3, #1
 800befa:	60f9      	str	r1, [r7, #12]
 800befc:	7812      	ldrb	r2, [r2, #0]
 800befe:	701a      	strb	r2, [r3, #0]
    n++;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	3301      	adds	r3, #1
 800bf04:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d3f0      	bcc.n	800bef0 <_EncodeStr+0x74>
  }
  return pPayload;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	371c      	adds	r7, #28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3304      	adds	r3, #4
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bf3a:	4b36      	ldr	r3, [pc, #216]	; (800c014 <_HandleIncomingPacket+0xe0>)
 800bf3c:	7e1b      	ldrb	r3, [r3, #24]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	1cfb      	adds	r3, r7, #3
 800bf42:	2201      	movs	r2, #1
 800bf44:	4619      	mov	r1, r3
 800bf46:	f7ff fe43 	bl	800bbd0 <SEGGER_RTT_ReadNoLock>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	dd54      	ble.n	800bffe <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	2b80      	cmp	r3, #128	; 0x80
 800bf58:	d032      	beq.n	800bfc0 <_HandleIncomingPacket+0x8c>
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	dc42      	bgt.n	800bfe4 <_HandleIncomingPacket+0xb0>
 800bf5e:	2b07      	cmp	r3, #7
 800bf60:	dc16      	bgt.n	800bf90 <_HandleIncomingPacket+0x5c>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	dd3e      	ble.n	800bfe4 <_HandleIncomingPacket+0xb0>
 800bf66:	3b01      	subs	r3, #1
 800bf68:	2b06      	cmp	r3, #6
 800bf6a:	d83b      	bhi.n	800bfe4 <_HandleIncomingPacket+0xb0>
 800bf6c:	a201      	add	r2, pc, #4	; (adr r2, 800bf74 <_HandleIncomingPacket+0x40>)
 800bf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf72:	bf00      	nop
 800bf74:	0800bf97 	.word	0x0800bf97
 800bf78:	0800bf9d 	.word	0x0800bf9d
 800bf7c:	0800bfa3 	.word	0x0800bfa3
 800bf80:	0800bfa9 	.word	0x0800bfa9
 800bf84:	0800bfaf 	.word	0x0800bfaf
 800bf88:	0800bfb5 	.word	0x0800bfb5
 800bf8c:	0800bfbb 	.word	0x0800bfbb
 800bf90:	2b7f      	cmp	r3, #127	; 0x7f
 800bf92:	d036      	beq.n	800c002 <_HandleIncomingPacket+0xce>
 800bf94:	e026      	b.n	800bfe4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800bf96:	f000 fba7 	bl	800c6e8 <SEGGER_SYSVIEW_Start>
      break;
 800bf9a:	e037      	b.n	800c00c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800bf9c:	f000 fc5e 	bl	800c85c <SEGGER_SYSVIEW_Stop>
      break;
 800bfa0:	e034      	b.n	800c00c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800bfa2:	f000 fe37 	bl	800cc14 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800bfa6:	e031      	b.n	800c00c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800bfa8:	f000 fdfc 	bl	800cba4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800bfac:	e02e      	b.n	800c00c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800bfae:	f000 fc7b 	bl	800c8a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800bfb2:	e02b      	b.n	800c00c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800bfb4:	f001 f8ca 	bl	800d14c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800bfb8:	e028      	b.n	800c00c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800bfba:	f001 f8a9 	bl	800d110 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800bfbe:	e025      	b.n	800c00c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bfc0:	4b14      	ldr	r3, [pc, #80]	; (800c014 <_HandleIncomingPacket+0xe0>)
 800bfc2:	7e1b      	ldrb	r3, [r3, #24]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	1cfb      	adds	r3, r7, #3
 800bfc8:	2201      	movs	r2, #1
 800bfca:	4619      	mov	r1, r3
 800bfcc:	f7ff fe00 	bl	800bbd0 <SEGGER_RTT_ReadNoLock>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	dd15      	ble.n	800c006 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800bfda:	78fb      	ldrb	r3, [r7, #3]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f001 f817 	bl	800d010 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800bfe2:	e010      	b.n	800c006 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800bfe4:	78fb      	ldrb	r3, [r7, #3]
 800bfe6:	b25b      	sxtb	r3, r3
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	da0e      	bge.n	800c00a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bfec:	4b09      	ldr	r3, [pc, #36]	; (800c014 <_HandleIncomingPacket+0xe0>)
 800bfee:	7e1b      	ldrb	r3, [r3, #24]
 800bff0:	4618      	mov	r0, r3
 800bff2:	1cfb      	adds	r3, r7, #3
 800bff4:	2201      	movs	r2, #1
 800bff6:	4619      	mov	r1, r3
 800bff8:	f7ff fdea 	bl	800bbd0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800bffc:	e005      	b.n	800c00a <_HandleIncomingPacket+0xd6>
    }
  }
 800bffe:	bf00      	nop
 800c000:	e004      	b.n	800c00c <_HandleIncomingPacket+0xd8>
      break;
 800c002:	bf00      	nop
 800c004:	e002      	b.n	800c00c <_HandleIncomingPacket+0xd8>
      break;
 800c006:	bf00      	nop
 800c008:	e000      	b.n	800c00c <_HandleIncomingPacket+0xd8>
      break;
 800c00a:	bf00      	nop
}
 800c00c:	bf00      	nop
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	2000443c 	.word	0x2000443c

0800c018 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08c      	sub	sp, #48	; 0x30
 800c01c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c01e:	2301      	movs	r3, #1
 800c020:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c022:	1d3b      	adds	r3, r7, #4
 800c024:	3301      	adds	r3, #1
 800c026:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c02c:	4b31      	ldr	r3, [pc, #196]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	62bb      	str	r3, [r7, #40]	; 0x28
 800c032:	e00b      	b.n	800c04c <_TrySendOverflowPacket+0x34>
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	b2da      	uxtb	r2, r3
 800c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03a:	1c59      	adds	r1, r3, #1
 800c03c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c03e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c042:	b2d2      	uxtb	r2, r2
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	09db      	lsrs	r3, r3, #7
 800c04a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	2b7f      	cmp	r3, #127	; 0x7f
 800c050:	d8f0      	bhi.n	800c034 <_TrySendOverflowPacket+0x1c>
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c05a:	b2d2      	uxtb	r2, r2
 800c05c:	701a      	strb	r2, [r3, #0]
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c062:	4b25      	ldr	r3, [pc, #148]	; (800c0f8 <_TrySendOverflowPacket+0xe0>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c068:	4b22      	ldr	r3, [pc, #136]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	627b      	str	r3, [r7, #36]	; 0x24
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	623b      	str	r3, [r7, #32]
 800c07a:	e00b      	b.n	800c094 <_TrySendOverflowPacket+0x7c>
 800c07c:	6a3b      	ldr	r3, [r7, #32]
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	1c59      	adds	r1, r3, #1
 800c084:	6279      	str	r1, [r7, #36]	; 0x24
 800c086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	701a      	strb	r2, [r3, #0]
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	09db      	lsrs	r3, r3, #7
 800c092:	623b      	str	r3, [r7, #32]
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	2b7f      	cmp	r3, #127	; 0x7f
 800c098:	d8f0      	bhi.n	800c07c <_TrySendOverflowPacket+0x64>
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	627a      	str	r2, [r7, #36]	; 0x24
 800c0a0:	6a3a      	ldr	r2, [r7, #32]
 800c0a2:	b2d2      	uxtb	r2, r2
 800c0a4:	701a      	strb	r2, [r3, #0]
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c0aa:	4b12      	ldr	r3, [pc, #72]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	1d3b      	adds	r3, r7, #4
 800c0b2:	69fa      	ldr	r2, [r7, #28]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	1d3b      	adds	r3, r7, #4
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	f7f4 f898 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d009      	beq.n	800c0de <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c0ca:	4a0a      	ldr	r2, [pc, #40]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c0d0:	4b08      	ldr	r3, [pc, #32]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	4b06      	ldr	r3, [pc, #24]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e004      	b.n	800c0e8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c0de:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	4a03      	ldr	r2, [pc, #12]	; (800c0f4 <_TrySendOverflowPacket+0xdc>)
 800c0e6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c0e8:	693b      	ldr	r3, [r7, #16]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3730      	adds	r7, #48	; 0x30
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	2000443c 	.word	0x2000443c
 800c0f8:	e0001004 	.word	0xe0001004

0800c0fc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08a      	sub	sp, #40	; 0x28
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c108:	4b6c      	ldr	r3, [pc, #432]	; (800c2bc <_SendPacket+0x1c0>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d010      	beq.n	800c132 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c110:	4b6a      	ldr	r3, [pc, #424]	; (800c2bc <_SendPacket+0x1c0>)
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 80a3 	beq.w	800c260 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c11a:	4b68      	ldr	r3, [pc, #416]	; (800c2bc <_SendPacket+0x1c0>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d109      	bne.n	800c136 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c122:	f7ff ff79 	bl	800c018 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c126:	4b65      	ldr	r3, [pc, #404]	; (800c2bc <_SendPacket+0x1c0>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	f040 809a 	bne.w	800c264 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c130:	e001      	b.n	800c136 <_SendPacket+0x3a>
    goto Send;
 800c132:	bf00      	nop
 800c134:	e000      	b.n	800c138 <_SendPacket+0x3c>
Send:
 800c136:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b1f      	cmp	r3, #31
 800c13c:	d809      	bhi.n	800c152 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c13e:	4b5f      	ldr	r3, [pc, #380]	; (800c2bc <_SendPacket+0x1c0>)
 800c140:	69da      	ldr	r2, [r3, #28]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	fa22 f303 	lsr.w	r3, r2, r3
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 808b 	bne.w	800c268 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b17      	cmp	r3, #23
 800c156:	d807      	bhi.n	800c168 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	b2da      	uxtb	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	701a      	strb	r2, [r3, #0]
 800c166:	e03d      	b.n	800c1e4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	2b7f      	cmp	r3, #127	; 0x7f
 800c174:	d912      	bls.n	800c19c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	09da      	lsrs	r2, r3, #7
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3b01      	subs	r3, #1
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	3a01      	subs	r2, #1
 800c18e:	60fa      	str	r2, [r7, #12]
 800c190:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c194:	b2da      	uxtb	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	701a      	strb	r2, [r3, #0]
 800c19a:	e006      	b.n	800c1aa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b7f      	cmp	r3, #127	; 0x7f
 800c1ae:	d912      	bls.n	800c1d6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	09da      	lsrs	r2, r3, #7
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	b2d2      	uxtb	r2, r2
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	3a01      	subs	r2, #1
 800c1c8:	60fa      	str	r2, [r7, #12]
 800c1ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	701a      	strb	r2, [r3, #0]
 800c1d4:	e006      	b.n	800c1e4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c1e4:	4b36      	ldr	r3, [pc, #216]	; (800c2c0 <_SendPacket+0x1c4>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c1ea:	4b34      	ldr	r3, [pc, #208]	; (800c2bc <_SendPacket+0x1c0>)
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	69ba      	ldr	r2, [r7, #24]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	623b      	str	r3, [r7, #32]
 800c1fc:	e00b      	b.n	800c216 <_SendPacket+0x11a>
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	b2da      	uxtb	r2, r3
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	1c59      	adds	r1, r3, #1
 800c206:	6279      	str	r1, [r7, #36]	; 0x24
 800c208:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c20c:	b2d2      	uxtb	r2, r2
 800c20e:	701a      	strb	r2, [r3, #0]
 800c210:	6a3b      	ldr	r3, [r7, #32]
 800c212:	09db      	lsrs	r3, r3, #7
 800c214:	623b      	str	r3, [r7, #32]
 800c216:	6a3b      	ldr	r3, [r7, #32]
 800c218:	2b7f      	cmp	r3, #127	; 0x7f
 800c21a:	d8f0      	bhi.n	800c1fe <_SendPacket+0x102>
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	627a      	str	r2, [r7, #36]	; 0x24
 800c222:	6a3a      	ldr	r2, [r7, #32]
 800c224:	b2d2      	uxtb	r2, r2
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c22c:	4b23      	ldr	r3, [pc, #140]	; (800c2bc <_SendPacket+0x1c0>)
 800c22e:	785b      	ldrb	r3, [r3, #1]
 800c230:	4618      	mov	r0, r3
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	461a      	mov	r2, r3
 800c23a:	68f9      	ldr	r1, [r7, #12]
 800c23c:	f7f3 ffd8 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c240:	4603      	mov	r3, r0
 800c242:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c24a:	4a1c      	ldr	r2, [pc, #112]	; (800c2bc <_SendPacket+0x1c0>)
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	60d3      	str	r3, [r2, #12]
 800c250:	e00b      	b.n	800c26a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c252:	4b1a      	ldr	r3, [pc, #104]	; (800c2bc <_SendPacket+0x1c0>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	3301      	adds	r3, #1
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	4b18      	ldr	r3, [pc, #96]	; (800c2bc <_SendPacket+0x1c0>)
 800c25c:	701a      	strb	r2, [r3, #0]
 800c25e:	e004      	b.n	800c26a <_SendPacket+0x16e>
    goto SendDone;
 800c260:	bf00      	nop
 800c262:	e002      	b.n	800c26a <_SendPacket+0x16e>
      goto SendDone;
 800c264:	bf00      	nop
 800c266:	e000      	b.n	800c26a <_SendPacket+0x16e>
      goto SendDone;
 800c268:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c26a:	4b14      	ldr	r3, [pc, #80]	; (800c2bc <_SendPacket+0x1c0>)
 800c26c:	7e1b      	ldrb	r3, [r3, #24]
 800c26e:	4619      	mov	r1, r3
 800c270:	4a14      	ldr	r2, [pc, #80]	; (800c2c4 <_SendPacket+0x1c8>)
 800c272:	460b      	mov	r3, r1
 800c274:	005b      	lsls	r3, r3, #1
 800c276:	440b      	add	r3, r1
 800c278:	00db      	lsls	r3, r3, #3
 800c27a:	4413      	add	r3, r2
 800c27c:	336c      	adds	r3, #108	; 0x6c
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	4b0e      	ldr	r3, [pc, #56]	; (800c2bc <_SendPacket+0x1c0>)
 800c282:	7e1b      	ldrb	r3, [r3, #24]
 800c284:	4618      	mov	r0, r3
 800c286:	490f      	ldr	r1, [pc, #60]	; (800c2c4 <_SendPacket+0x1c8>)
 800c288:	4603      	mov	r3, r0
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	4403      	add	r3, r0
 800c28e:	00db      	lsls	r3, r3, #3
 800c290:	440b      	add	r3, r1
 800c292:	3370      	adds	r3, #112	; 0x70
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	429a      	cmp	r2, r3
 800c298:	d00b      	beq.n	800c2b2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c29a:	4b08      	ldr	r3, [pc, #32]	; (800c2bc <_SendPacket+0x1c0>)
 800c29c:	789b      	ldrb	r3, [r3, #2]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d107      	bne.n	800c2b2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c2a2:	4b06      	ldr	r3, [pc, #24]	; (800c2bc <_SendPacket+0x1c0>)
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c2a8:	f7ff fe44 	bl	800bf34 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c2ac:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <_SendPacket+0x1c0>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c2b2:	bf00      	nop
 800c2b4:	3728      	adds	r7, #40	; 0x28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	2000443c 	.word	0x2000443c
 800c2c0:	e0001004 	.word	0xe0001004
 800c2c4:	20002f7c 	.word	0x20002f7c

0800c2c8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c2dc:	4917      	ldr	r1, [pc, #92]	; (800c33c <SEGGER_SYSVIEW_Init+0x74>)
 800c2de:	4818      	ldr	r0, [pc, #96]	; (800c340 <SEGGER_SYSVIEW_Init+0x78>)
 800c2e0:	f7ff fcfc 	bl	800bcdc <SEGGER_RTT_AllocUpBuffer>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	4b16      	ldr	r3, [pc, #88]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2ea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c2ec:	4b15      	ldr	r3, [pc, #84]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2ee:	785a      	ldrb	r2, [r3, #1]
 800c2f0:	4b14      	ldr	r3, [pc, #80]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2f2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c2f4:	4b13      	ldr	r3, [pc, #76]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c2f6:	7e1b      	ldrb	r3, [r3, #24]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	2308      	movs	r3, #8
 800c300:	4a11      	ldr	r2, [pc, #68]	; (800c348 <SEGGER_SYSVIEW_Init+0x80>)
 800c302:	490f      	ldr	r1, [pc, #60]	; (800c340 <SEGGER_SYSVIEW_Init+0x78>)
 800c304:	f7ff fd6e 	bl	800bde4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c308:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c30e:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <SEGGER_SYSVIEW_Init+0x84>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a0c      	ldr	r2, [pc, #48]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c314:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c316:	4a0b      	ldr	r2, [pc, #44]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c31c:	4a09      	ldr	r2, [pc, #36]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c322:	4a08      	ldr	r2, [pc, #32]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c328:	4a06      	ldr	r2, [pc, #24]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c32e:	4b05      	ldr	r3, [pc, #20]	; (800c344 <SEGGER_SYSVIEW_Init+0x7c>)
 800c330:	2200      	movs	r2, #0
 800c332:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c334:	bf00      	nop
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20004034 	.word	0x20004034
 800c340:	08013984 	.word	0x08013984
 800c344:	2000443c 	.word	0x2000443c
 800c348:	20004434 	.word	0x20004434
 800c34c:	e0001004 	.word	0xe0001004

0800c350 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c358:	4a04      	ldr	r2, [pc, #16]	; (800c36c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6113      	str	r3, [r2, #16]
}
 800c35e:	bf00      	nop
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	2000443c 	.word	0x2000443c

0800c370 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c378:	f3ef 8311 	mrs	r3, BASEPRI
 800c37c:	f04f 0120 	mov.w	r1, #32
 800c380:	f381 8811 	msr	BASEPRI, r1
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	4808      	ldr	r0, [pc, #32]	; (800c3a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c388:	f7ff fdc8 	bl	800bf1c <_PreparePacket>
 800c38c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	68b9      	ldr	r1, [r7, #8]
 800c392:	68b8      	ldr	r0, [r7, #8]
 800c394:	f7ff feb2 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f383 8811 	msr	BASEPRI, r3
}
 800c39e:	bf00      	nop
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	2000446c 	.word	0x2000446c

0800c3ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c3b6:	f3ef 8311 	mrs	r3, BASEPRI
 800c3ba:	f04f 0120 	mov.w	r1, #32
 800c3be:	f381 8811 	msr	BASEPRI, r1
 800c3c2:	617b      	str	r3, [r7, #20]
 800c3c4:	4816      	ldr	r0, [pc, #88]	; (800c420 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c3c6:	f7ff fda9 	bl	800bf1c <_PreparePacket>
 800c3ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	61fb      	str	r3, [r7, #28]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	61bb      	str	r3, [r7, #24]
 800c3d8:	e00b      	b.n	800c3f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	1c59      	adds	r1, r3, #1
 800c3e2:	61f9      	str	r1, [r7, #28]
 800c3e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3e8:	b2d2      	uxtb	r2, r2
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	09db      	lsrs	r3, r3, #7
 800c3f0:	61bb      	str	r3, [r7, #24]
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	2b7f      	cmp	r3, #127	; 0x7f
 800c3f6:	d8f0      	bhi.n	800c3da <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	61fa      	str	r2, [r7, #28]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	b2d2      	uxtb	r2, r2
 800c402:	701a      	strb	r2, [r3, #0]
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	68f9      	ldr	r1, [r7, #12]
 800c40c:	6938      	ldr	r0, [r7, #16]
 800c40e:	f7ff fe75 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f383 8811 	msr	BASEPRI, r3
}
 800c418:	bf00      	nop
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	2000446c 	.word	0x2000446c

0800c424 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c424:	b580      	push	{r7, lr}
 800c426:	b08c      	sub	sp, #48	; 0x30
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c430:	f3ef 8311 	mrs	r3, BASEPRI
 800c434:	f04f 0120 	mov.w	r1, #32
 800c438:	f381 8811 	msr	BASEPRI, r1
 800c43c:	61fb      	str	r3, [r7, #28]
 800c43e:	4825      	ldr	r0, [pc, #148]	; (800c4d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c440:	f7ff fd6c 	bl	800bf1c <_PreparePacket>
 800c444:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	62bb      	str	r3, [r7, #40]	; 0x28
 800c452:	e00b      	b.n	800c46c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	b2da      	uxtb	r2, r3
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	1c59      	adds	r1, r3, #1
 800c45c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c45e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	701a      	strb	r2, [r3, #0]
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	09db      	lsrs	r3, r3, #7
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	2b7f      	cmp	r3, #127	; 0x7f
 800c470:	d8f0      	bhi.n	800c454 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c47a:	b2d2      	uxtb	r2, r2
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c480:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	623b      	str	r3, [r7, #32]
 800c48a:	e00b      	b.n	800c4a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	1c59      	adds	r1, r3, #1
 800c494:	6279      	str	r1, [r7, #36]	; 0x24
 800c496:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	701a      	strb	r2, [r3, #0]
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	09db      	lsrs	r3, r3, #7
 800c4a2:	623b      	str	r3, [r7, #32]
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	2b7f      	cmp	r3, #127	; 0x7f
 800c4a8:	d8f0      	bhi.n	800c48c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	1c5a      	adds	r2, r3, #1
 800c4ae:	627a      	str	r2, [r7, #36]	; 0x24
 800c4b0:	6a3a      	ldr	r2, [r7, #32]
 800c4b2:	b2d2      	uxtb	r2, r2
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	6979      	ldr	r1, [r7, #20]
 800c4be:	69b8      	ldr	r0, [r7, #24]
 800c4c0:	f7ff fe1c 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	f383 8811 	msr	BASEPRI, r3
}
 800c4ca:	bf00      	nop
 800c4cc:	3730      	adds	r7, #48	; 0x30
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	2000446c 	.word	0x2000446c

0800c4d8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08e      	sub	sp, #56	; 0x38
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c4e6:	f3ef 8311 	mrs	r3, BASEPRI
 800c4ea:	f04f 0120 	mov.w	r1, #32
 800c4ee:	f381 8811 	msr	BASEPRI, r1
 800c4f2:	61fb      	str	r3, [r7, #28]
 800c4f4:	4832      	ldr	r0, [pc, #200]	; (800c5c0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c4f6:	f7ff fd11 	bl	800bf1c <_PreparePacket>
 800c4fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	637b      	str	r3, [r7, #52]	; 0x34
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	633b      	str	r3, [r7, #48]	; 0x30
 800c508:	e00b      	b.n	800c522 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	1c59      	adds	r1, r3, #1
 800c512:	6379      	str	r1, [r7, #52]	; 0x34
 800c514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c518:	b2d2      	uxtb	r2, r2
 800c51a:	701a      	strb	r2, [r3, #0]
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	09db      	lsrs	r3, r3, #7
 800c520:	633b      	str	r3, [r7, #48]	; 0x30
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2b7f      	cmp	r3, #127	; 0x7f
 800c526:	d8f0      	bhi.n	800c50a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	637a      	str	r2, [r7, #52]	; 0x34
 800c52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c530:	b2d2      	uxtb	r2, r2
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c536:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c540:	e00b      	b.n	800c55a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c544:	b2da      	uxtb	r2, r3
 800c546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c548:	1c59      	adds	r1, r3, #1
 800c54a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c54c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c550:	b2d2      	uxtb	r2, r2
 800c552:	701a      	strb	r2, [r3, #0]
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	09db      	lsrs	r3, r3, #7
 800c558:	62bb      	str	r3, [r7, #40]	; 0x28
 800c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55c:	2b7f      	cmp	r3, #127	; 0x7f
 800c55e:	d8f0      	bhi.n	800c542 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	627b      	str	r3, [r7, #36]	; 0x24
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	623b      	str	r3, [r7, #32]
 800c578:	e00b      	b.n	800c592 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c580:	1c59      	adds	r1, r3, #1
 800c582:	6279      	str	r1, [r7, #36]	; 0x24
 800c584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c588:	b2d2      	uxtb	r2, r2
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	09db      	lsrs	r3, r3, #7
 800c590:	623b      	str	r3, [r7, #32]
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	2b7f      	cmp	r3, #127	; 0x7f
 800c596:	d8f0      	bhi.n	800c57a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	627a      	str	r2, [r7, #36]	; 0x24
 800c59e:	6a3a      	ldr	r2, [r7, #32]
 800c5a0:	b2d2      	uxtb	r2, r2
 800c5a2:	701a      	strb	r2, [r3, #0]
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	6979      	ldr	r1, [r7, #20]
 800c5ac:	69b8      	ldr	r0, [r7, #24]
 800c5ae:	f7ff fda5 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	f383 8811 	msr	BASEPRI, r3
}
 800c5b8:	bf00      	nop
 800c5ba:	3738      	adds	r7, #56	; 0x38
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	2000446c 	.word	0x2000446c

0800c5c4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b090      	sub	sp, #64	; 0x40
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c5d2:	f3ef 8311 	mrs	r3, BASEPRI
 800c5d6:	f04f 0120 	mov.w	r1, #32
 800c5da:	f381 8811 	msr	BASEPRI, r1
 800c5de:	61fb      	str	r3, [r7, #28]
 800c5e0:	4840      	ldr	r0, [pc, #256]	; (800c6e4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c5e2:	f7ff fc9b 	bl	800bf1c <_PreparePacket>
 800c5e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5f4:	e00b      	b.n	800c60e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5fc:	1c59      	adds	r1, r3, #1
 800c5fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c604:	b2d2      	uxtb	r2, r2
 800c606:	701a      	strb	r2, [r3, #0]
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	09db      	lsrs	r3, r3, #7
 800c60c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	2b7f      	cmp	r3, #127	; 0x7f
 800c612:	d8f0      	bhi.n	800c5f6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c616:	1c5a      	adds	r2, r3, #1
 800c618:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c61a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	701a      	strb	r2, [r3, #0]
 800c620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c622:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	637b      	str	r3, [r7, #52]	; 0x34
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30
 800c62c:	e00b      	b.n	800c646 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c630:	b2da      	uxtb	r2, r3
 800c632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c634:	1c59      	adds	r1, r3, #1
 800c636:	6379      	str	r1, [r7, #52]	; 0x34
 800c638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c63c:	b2d2      	uxtb	r2, r2
 800c63e:	701a      	strb	r2, [r3, #0]
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	09db      	lsrs	r3, r3, #7
 800c644:	633b      	str	r3, [r7, #48]	; 0x30
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	2b7f      	cmp	r3, #127	; 0x7f
 800c64a:	d8f0      	bhi.n	800c62e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	637a      	str	r2, [r7, #52]	; 0x34
 800c652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c654:	b2d2      	uxtb	r2, r2
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28
 800c664:	e00b      	b.n	800c67e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	1c59      	adds	r1, r3, #1
 800c66e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c674:	b2d2      	uxtb	r2, r2
 800c676:	701a      	strb	r2, [r3, #0]
 800c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67a:	09db      	lsrs	r3, r3, #7
 800c67c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	2b7f      	cmp	r3, #127	; 0x7f
 800c682:	d8f0      	bhi.n	800c666 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c68c:	b2d2      	uxtb	r2, r2
 800c68e:	701a      	strb	r2, [r3, #0]
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	627b      	str	r3, [r7, #36]	; 0x24
 800c698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c69a:	623b      	str	r3, [r7, #32]
 800c69c:	e00b      	b.n	800c6b6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c69e:	6a3b      	ldr	r3, [r7, #32]
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	1c59      	adds	r1, r3, #1
 800c6a6:	6279      	str	r1, [r7, #36]	; 0x24
 800c6a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6ac:	b2d2      	uxtb	r2, r2
 800c6ae:	701a      	strb	r2, [r3, #0]
 800c6b0:	6a3b      	ldr	r3, [r7, #32]
 800c6b2:	09db      	lsrs	r3, r3, #7
 800c6b4:	623b      	str	r3, [r7, #32]
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	2b7f      	cmp	r3, #127	; 0x7f
 800c6ba:	d8f0      	bhi.n	800c69e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	627a      	str	r2, [r7, #36]	; 0x24
 800c6c2:	6a3a      	ldr	r2, [r7, #32]
 800c6c4:	b2d2      	uxtb	r2, r2
 800c6c6:	701a      	strb	r2, [r3, #0]
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	6979      	ldr	r1, [r7, #20]
 800c6d0:	69b8      	ldr	r0, [r7, #24]
 800c6d2:	f7ff fd13 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	f383 8811 	msr	BASEPRI, r3
}
 800c6dc:	bf00      	nop
 800c6de:	3740      	adds	r7, #64	; 0x40
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	2000446c 	.word	0x2000446c

0800c6e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08c      	sub	sp, #48	; 0x30
 800c6ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c6ee:	4b58      	ldr	r3, [pc, #352]	; (800c850 <SEGGER_SYSVIEW_Start+0x168>)
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c6f4:	f3ef 8311 	mrs	r3, BASEPRI
 800c6f8:	f04f 0120 	mov.w	r1, #32
 800c6fc:	f381 8811 	msr	BASEPRI, r1
 800c700:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c702:	4b53      	ldr	r3, [pc, #332]	; (800c850 <SEGGER_SYSVIEW_Start+0x168>)
 800c704:	785b      	ldrb	r3, [r3, #1]
 800c706:	220a      	movs	r2, #10
 800c708:	4952      	ldr	r1, [pc, #328]	; (800c854 <SEGGER_SYSVIEW_Start+0x16c>)
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7f3 fd70 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c716:	200a      	movs	r0, #10
 800c718:	f7ff fe2a 	bl	800c370 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c71c:	f3ef 8311 	mrs	r3, BASEPRI
 800c720:	f04f 0120 	mov.w	r1, #32
 800c724:	f381 8811 	msr	BASEPRI, r1
 800c728:	60bb      	str	r3, [r7, #8]
 800c72a:	484b      	ldr	r0, [pc, #300]	; (800c858 <SEGGER_SYSVIEW_Start+0x170>)
 800c72c:	f7ff fbf6 	bl	800bf1c <_PreparePacket>
 800c730:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c73a:	4b45      	ldr	r3, [pc, #276]	; (800c850 <SEGGER_SYSVIEW_Start+0x168>)
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c740:	e00b      	b.n	800c75a <SEGGER_SYSVIEW_Start+0x72>
 800c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c744:	b2da      	uxtb	r2, r3
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	1c59      	adds	r1, r3, #1
 800c74a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c74c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c750:	b2d2      	uxtb	r2, r2
 800c752:	701a      	strb	r2, [r3, #0]
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	09db      	lsrs	r3, r3, #7
 800c758:	62bb      	str	r3, [r7, #40]	; 0x28
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	2b7f      	cmp	r3, #127	; 0x7f
 800c75e:	d8f0      	bhi.n	800c742 <SEGGER_SYSVIEW_Start+0x5a>
 800c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c762:	1c5a      	adds	r2, r3, #1
 800c764:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c768:	b2d2      	uxtb	r2, r2
 800c76a:	701a      	strb	r2, [r3, #0]
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	627b      	str	r3, [r7, #36]	; 0x24
 800c774:	4b36      	ldr	r3, [pc, #216]	; (800c850 <SEGGER_SYSVIEW_Start+0x168>)
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	623b      	str	r3, [r7, #32]
 800c77a:	e00b      	b.n	800c794 <SEGGER_SYSVIEW_Start+0xac>
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	1c59      	adds	r1, r3, #1
 800c784:	6279      	str	r1, [r7, #36]	; 0x24
 800c786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c78a:	b2d2      	uxtb	r2, r2
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	09db      	lsrs	r3, r3, #7
 800c792:	623b      	str	r3, [r7, #32]
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	2b7f      	cmp	r3, #127	; 0x7f
 800c798:	d8f0      	bhi.n	800c77c <SEGGER_SYSVIEW_Start+0x94>
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	1c5a      	adds	r2, r3, #1
 800c79e:	627a      	str	r2, [r7, #36]	; 0x24
 800c7a0:	6a3a      	ldr	r2, [r7, #32]
 800c7a2:	b2d2      	uxtb	r2, r2
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	4b28      	ldr	r3, [pc, #160]	; (800c850 <SEGGER_SYSVIEW_Start+0x168>)
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	61bb      	str	r3, [r7, #24]
 800c7b4:	e00b      	b.n	800c7ce <SEGGER_SYSVIEW_Start+0xe6>
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	1c59      	adds	r1, r3, #1
 800c7be:	61f9      	str	r1, [r7, #28]
 800c7c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7c4:	b2d2      	uxtb	r2, r2
 800c7c6:	701a      	strb	r2, [r3, #0]
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	09db      	lsrs	r3, r3, #7
 800c7cc:	61bb      	str	r3, [r7, #24]
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	2b7f      	cmp	r3, #127	; 0x7f
 800c7d2:	d8f0      	bhi.n	800c7b6 <SEGGER_SYSVIEW_Start+0xce>
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	61fa      	str	r2, [r7, #28]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	b2d2      	uxtb	r2, r2
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	617b      	str	r3, [r7, #20]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	e00b      	b.n	800c806 <SEGGER_SYSVIEW_Start+0x11e>
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	1c59      	adds	r1, r3, #1
 800c7f6:	6179      	str	r1, [r7, #20]
 800c7f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7fc:	b2d2      	uxtb	r2, r2
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	09db      	lsrs	r3, r3, #7
 800c804:	613b      	str	r3, [r7, #16]
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b7f      	cmp	r3, #127	; 0x7f
 800c80a:	d8f0      	bhi.n	800c7ee <SEGGER_SYSVIEW_Start+0x106>
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	617a      	str	r2, [r7, #20]
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	b2d2      	uxtb	r2, r2
 800c816:	701a      	strb	r2, [r3, #0]
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c81c:	2218      	movs	r2, #24
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff fc6b 	bl	800c0fc <_SendPacket>
      RECORD_END();
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c82c:	4b08      	ldr	r3, [pc, #32]	; (800c850 <SEGGER_SYSVIEW_Start+0x168>)
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c834:	4b06      	ldr	r3, [pc, #24]	; (800c850 <SEGGER_SYSVIEW_Start+0x168>)
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c83a:	f000 f9eb 	bl	800cc14 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c83e:	f000 f9b1 	bl	800cba4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c842:	f000 fc83 	bl	800d14c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c846:	bf00      	nop
 800c848:	3730      	adds	r7, #48	; 0x30
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	2000443c 	.word	0x2000443c
 800c854:	080141f4 	.word	0x080141f4
 800c858:	2000446c 	.word	0x2000446c

0800c85c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c862:	f3ef 8311 	mrs	r3, BASEPRI
 800c866:	f04f 0120 	mov.w	r1, #32
 800c86a:	f381 8811 	msr	BASEPRI, r1
 800c86e:	607b      	str	r3, [r7, #4]
 800c870:	480b      	ldr	r0, [pc, #44]	; (800c8a0 <SEGGER_SYSVIEW_Stop+0x44>)
 800c872:	f7ff fb53 	bl	800bf1c <_PreparePacket>
 800c876:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c878:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d007      	beq.n	800c890 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c880:	220b      	movs	r2, #11
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6838      	ldr	r0, [r7, #0]
 800c886:	f7ff fc39 	bl	800c0fc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c88a:	4b06      	ldr	r3, [pc, #24]	; (800c8a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f383 8811 	msr	BASEPRI, r3
}
 800c896:	bf00      	nop
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	2000446c 	.word	0x2000446c
 800c8a4:	2000443c 	.word	0x2000443c

0800c8a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08c      	sub	sp, #48	; 0x30
 800c8ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c8ae:	f3ef 8311 	mrs	r3, BASEPRI
 800c8b2:	f04f 0120 	mov.w	r1, #32
 800c8b6:	f381 8811 	msr	BASEPRI, r1
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	4845      	ldr	r0, [pc, #276]	; (800c9d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c8be:	f7ff fb2d 	bl	800bf1c <_PreparePacket>
 800c8c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8cc:	4b42      	ldr	r3, [pc, #264]	; (800c9d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8d2:	e00b      	b.n	800c8ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	1c59      	adds	r1, r3, #1
 800c8dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c8de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
 800c8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e8:	09db      	lsrs	r3, r3, #7
 800c8ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c8f0:	d8f0      	bhi.n	800c8d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8fa:	b2d2      	uxtb	r2, r2
 800c8fc:	701a      	strb	r2, [r3, #0]
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	627b      	str	r3, [r7, #36]	; 0x24
 800c906:	4b34      	ldr	r3, [pc, #208]	; (800c9d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	623b      	str	r3, [r7, #32]
 800c90c:	e00b      	b.n	800c926 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c90e:	6a3b      	ldr	r3, [r7, #32]
 800c910:	b2da      	uxtb	r2, r3
 800c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c914:	1c59      	adds	r1, r3, #1
 800c916:	6279      	str	r1, [r7, #36]	; 0x24
 800c918:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	701a      	strb	r2, [r3, #0]
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	09db      	lsrs	r3, r3, #7
 800c924:	623b      	str	r3, [r7, #32]
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	2b7f      	cmp	r3, #127	; 0x7f
 800c92a:	d8f0      	bhi.n	800c90e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	627a      	str	r2, [r7, #36]	; 0x24
 800c932:	6a3a      	ldr	r2, [r7, #32]
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	61fb      	str	r3, [r7, #28]
 800c940:	4b25      	ldr	r3, [pc, #148]	; (800c9d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	61bb      	str	r3, [r7, #24]
 800c946:	e00b      	b.n	800c960 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	1c59      	adds	r1, r3, #1
 800c950:	61f9      	str	r1, [r7, #28]
 800c952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c956:	b2d2      	uxtb	r2, r2
 800c958:	701a      	strb	r2, [r3, #0]
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	09db      	lsrs	r3, r3, #7
 800c95e:	61bb      	str	r3, [r7, #24]
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	2b7f      	cmp	r3, #127	; 0x7f
 800c964:	d8f0      	bhi.n	800c948 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	61fa      	str	r2, [r7, #28]
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	b2d2      	uxtb	r2, r2
 800c970:	701a      	strb	r2, [r3, #0]
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	2300      	movs	r3, #0
 800c97c:	613b      	str	r3, [r7, #16]
 800c97e:	e00b      	b.n	800c998 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	b2da      	uxtb	r2, r3
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	1c59      	adds	r1, r3, #1
 800c988:	6179      	str	r1, [r7, #20]
 800c98a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c98e:	b2d2      	uxtb	r2, r2
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	09db      	lsrs	r3, r3, #7
 800c996:	613b      	str	r3, [r7, #16]
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	2b7f      	cmp	r3, #127	; 0x7f
 800c99c:	d8f0      	bhi.n	800c980 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	1c5a      	adds	r2, r3, #1
 800c9a2:	617a      	str	r2, [r7, #20]
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	b2d2      	uxtb	r2, r2
 800c9a8:	701a      	strb	r2, [r3, #0]
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c9ae:	2218      	movs	r2, #24
 800c9b0:	6879      	ldr	r1, [r7, #4]
 800c9b2:	68b8      	ldr	r0, [r7, #8]
 800c9b4:	f7ff fba2 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c9c6:	4b04      	ldr	r3, [pc, #16]	; (800c9d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ca:	4798      	blx	r3
  }
}
 800c9cc:	bf00      	nop
 800c9ce:	3730      	adds	r7, #48	; 0x30
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	2000446c 	.word	0x2000446c
 800c9d8:	2000443c 	.word	0x2000443c

0800c9dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b092      	sub	sp, #72	; 0x48
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c9e4:	f3ef 8311 	mrs	r3, BASEPRI
 800c9e8:	f04f 0120 	mov.w	r1, #32
 800c9ec:	f381 8811 	msr	BASEPRI, r1
 800c9f0:	617b      	str	r3, [r7, #20]
 800c9f2:	486a      	ldr	r0, [pc, #424]	; (800cb9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c9f4:	f7ff fa92 	bl	800bf1c <_PreparePacket>
 800c9f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	647b      	str	r3, [r7, #68]	; 0x44
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	4b66      	ldr	r3, [pc, #408]	; (800cba0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ca0e:	e00b      	b.n	800ca28 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800ca10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca16:	1c59      	adds	r1, r3, #1
 800ca18:	6479      	str	r1, [r7, #68]	; 0x44
 800ca1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca1e:	b2d2      	uxtb	r2, r2
 800ca20:	701a      	strb	r2, [r3, #0]
 800ca22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca24:	09db      	lsrs	r3, r3, #7
 800ca26:	643b      	str	r3, [r7, #64]	; 0x40
 800ca28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ca2c:	d8f0      	bhi.n	800ca10 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800ca2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	647a      	str	r2, [r7, #68]	; 0x44
 800ca34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca36:	b2d2      	uxtb	r2, r2
 800ca38:	701a      	strb	r2, [r3, #0]
 800ca3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca48:	e00b      	b.n	800ca62 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	1c59      	adds	r1, r3, #1
 800ca52:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ca54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca58:	b2d2      	uxtb	r2, r2
 800ca5a:	701a      	strb	r2, [r3, #0]
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	09db      	lsrs	r3, r3, #7
 800ca60:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca64:	2b7f      	cmp	r3, #127	; 0x7f
 800ca66:	d8f0      	bhi.n	800ca4a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800ca68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ca6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca70:	b2d2      	uxtb	r2, r2
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca76:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	2220      	movs	r2, #32
 800ca7e:	4619      	mov	r1, r3
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f7ff f9fb 	bl	800be7c <_EncodeStr>
 800ca86:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800ca88:	2209      	movs	r2, #9
 800ca8a:	68f9      	ldr	r1, [r7, #12]
 800ca8c:	6938      	ldr	r0, [r7, #16]
 800ca8e:	f7ff fb35 	bl	800c0fc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	637b      	str	r3, [r7, #52]	; 0x34
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	4b40      	ldr	r3, [pc, #256]	; (800cba0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	633b      	str	r3, [r7, #48]	; 0x30
 800caa6:	e00b      	b.n	800cac0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caae:	1c59      	adds	r1, r3, #1
 800cab0:	6379      	str	r1, [r7, #52]	; 0x34
 800cab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cab6:	b2d2      	uxtb	r2, r2
 800cab8:	701a      	strb	r2, [r3, #0]
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	09db      	lsrs	r3, r3, #7
 800cabe:	633b      	str	r3, [r7, #48]	; 0x30
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	2b7f      	cmp	r3, #127	; 0x7f
 800cac4:	d8f0      	bhi.n	800caa8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800cac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	637a      	str	r2, [r7, #52]	; 0x34
 800cacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cace:	b2d2      	uxtb	r2, r2
 800cad0:	701a      	strb	r2, [r3, #0]
 800cad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	62bb      	str	r3, [r7, #40]	; 0x28
 800cae0:	e00b      	b.n	800cafa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	1c59      	adds	r1, r3, #1
 800caea:	62f9      	str	r1, [r7, #44]	; 0x2c
 800caec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800caf0:	b2d2      	uxtb	r2, r2
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	09db      	lsrs	r3, r3, #7
 800caf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	2b7f      	cmp	r3, #127	; 0x7f
 800cafe:	d8f0      	bhi.n	800cae2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800cb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb08:	b2d2      	uxtb	r2, r2
 800cb0a:	701a      	strb	r2, [r3, #0]
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	627b      	str	r3, [r7, #36]	; 0x24
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	623b      	str	r3, [r7, #32]
 800cb1a:	e00b      	b.n	800cb34 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800cb1c:	6a3b      	ldr	r3, [r7, #32]
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	1c59      	adds	r1, r3, #1
 800cb24:	6279      	str	r1, [r7, #36]	; 0x24
 800cb26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb2a:	b2d2      	uxtb	r2, r2
 800cb2c:	701a      	strb	r2, [r3, #0]
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	09db      	lsrs	r3, r3, #7
 800cb32:	623b      	str	r3, [r7, #32]
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	2b7f      	cmp	r3, #127	; 0x7f
 800cb38:	d8f0      	bhi.n	800cb1c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	627a      	str	r2, [r7, #36]	; 0x24
 800cb40:	6a3a      	ldr	r2, [r7, #32]
 800cb42:	b2d2      	uxtb	r2, r2
 800cb44:	701a      	strb	r2, [r3, #0]
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	61fb      	str	r3, [r7, #28]
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61bb      	str	r3, [r7, #24]
 800cb52:	e00b      	b.n	800cb6c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	1c59      	adds	r1, r3, #1
 800cb5c:	61f9      	str	r1, [r7, #28]
 800cb5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb62:	b2d2      	uxtb	r2, r2
 800cb64:	701a      	strb	r2, [r3, #0]
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	09db      	lsrs	r3, r3, #7
 800cb6a:	61bb      	str	r3, [r7, #24]
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b7f      	cmp	r3, #127	; 0x7f
 800cb70:	d8f0      	bhi.n	800cb54 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	61fa      	str	r2, [r7, #28]
 800cb78:	69ba      	ldr	r2, [r7, #24]
 800cb7a:	b2d2      	uxtb	r2, r2
 800cb7c:	701a      	strb	r2, [r3, #0]
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800cb82:	2215      	movs	r2, #21
 800cb84:	68f9      	ldr	r1, [r7, #12]
 800cb86:	6938      	ldr	r0, [r7, #16]
 800cb88:	f7ff fab8 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	f383 8811 	msr	BASEPRI, r3
}
 800cb92:	bf00      	nop
 800cb94:	3748      	adds	r7, #72	; 0x48
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	2000446c 	.word	0x2000446c
 800cba0:	2000443c 	.word	0x2000443c

0800cba4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800cba8:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cbaa:	6a1b      	ldr	r3, [r3, #32]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d008      	beq.n	800cbc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800cbb0:	4b05      	ldr	r3, [pc, #20]	; (800cbc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800cbba:	4b03      	ldr	r3, [pc, #12]	; (800cbc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	4798      	blx	r3
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	2000443c 	.word	0x2000443c

0800cbcc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cbd4:	f3ef 8311 	mrs	r3, BASEPRI
 800cbd8:	f04f 0120 	mov.w	r1, #32
 800cbdc:	f381 8811 	msr	BASEPRI, r1
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	480b      	ldr	r0, [pc, #44]	; (800cc10 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800cbe4:	f7ff f99a 	bl	800bf1c <_PreparePacket>
 800cbe8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cbea:	2280      	movs	r2, #128	; 0x80
 800cbec:	6879      	ldr	r1, [r7, #4]
 800cbee:	6938      	ldr	r0, [r7, #16]
 800cbf0:	f7ff f944 	bl	800be7c <_EncodeStr>
 800cbf4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800cbf6:	220e      	movs	r2, #14
 800cbf8:	68f9      	ldr	r1, [r7, #12]
 800cbfa:	6938      	ldr	r0, [r7, #16]
 800cbfc:	f7ff fa7e 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f383 8811 	msr	BASEPRI, r3
}
 800cc06:	bf00      	nop
 800cc08:	3718      	adds	r7, #24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	2000446c 	.word	0x2000446c

0800cc14 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800cc14:	b590      	push	{r4, r7, lr}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800cc1a:	4b15      	ldr	r3, [pc, #84]	; (800cc70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d01a      	beq.n	800cc58 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800cc22:	4b13      	ldr	r3, [pc, #76]	; (800cc70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d015      	beq.n	800cc58 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800cc2c:	4b10      	ldr	r3, [pc, #64]	; (800cc70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4798      	blx	r3
 800cc34:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cc38:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800cc3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc3e:	f04f 0200 	mov.w	r2, #0
 800cc42:	f04f 0300 	mov.w	r3, #0
 800cc46:	000a      	movs	r2, r1
 800cc48:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4621      	mov	r1, r4
 800cc50:	200d      	movs	r0, #13
 800cc52:	f7ff fbe7 	bl	800c424 <SEGGER_SYSVIEW_RecordU32x2>
 800cc56:	e006      	b.n	800cc66 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	200c      	movs	r0, #12
 800cc60:	f7ff fba4 	bl	800c3ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop
 800cc68:	370c      	adds	r7, #12
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd90      	pop	{r4, r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	2000443c 	.word	0x2000443c
 800cc74:	e0001004 	.word	0xe0001004

0800cc78 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cc7e:	f3ef 8311 	mrs	r3, BASEPRI
 800cc82:	f04f 0120 	mov.w	r1, #32
 800cc86:	f381 8811 	msr	BASEPRI, r1
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	4819      	ldr	r0, [pc, #100]	; (800ccf4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800cc8e:	f7ff f945 	bl	800bf1c <_PreparePacket>
 800cc92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800cc98:	4b17      	ldr	r3, [pc, #92]	; (800ccf8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	613b      	str	r3, [r7, #16]
 800ccaa:	e00b      	b.n	800ccc4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	1c59      	adds	r1, r3, #1
 800ccb4:	6179      	str	r1, [r7, #20]
 800ccb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccba:	b2d2      	uxtb	r2, r2
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	09db      	lsrs	r3, r3, #7
 800ccc2:	613b      	str	r3, [r7, #16]
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	2b7f      	cmp	r3, #127	; 0x7f
 800ccc8:	d8f0      	bhi.n	800ccac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	617a      	str	r2, [r7, #20]
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	b2d2      	uxtb	r2, r2
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800ccda:	2202      	movs	r2, #2
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	68b8      	ldr	r0, [r7, #8]
 800cce0:	f7ff fa0c 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f383 8811 	msr	BASEPRI, r3
}
 800ccea:	bf00      	nop
 800ccec:	3718      	adds	r7, #24
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	2000446c 	.word	0x2000446c
 800ccf8:	e000ed04 	.word	0xe000ed04

0800ccfc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cd02:	f3ef 8311 	mrs	r3, BASEPRI
 800cd06:	f04f 0120 	mov.w	r1, #32
 800cd0a:	f381 8811 	msr	BASEPRI, r1
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	4807      	ldr	r0, [pc, #28]	; (800cd30 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800cd12:	f7ff f903 	bl	800bf1c <_PreparePacket>
 800cd16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800cd18:	2203      	movs	r2, #3
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6838      	ldr	r0, [r7, #0]
 800cd1e:	f7ff f9ed 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f383 8811 	msr	BASEPRI, r3
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	2000446c 	.word	0x2000446c

0800cd34 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cd3a:	f3ef 8311 	mrs	r3, BASEPRI
 800cd3e:	f04f 0120 	mov.w	r1, #32
 800cd42:	f381 8811 	msr	BASEPRI, r1
 800cd46:	607b      	str	r3, [r7, #4]
 800cd48:	4807      	ldr	r0, [pc, #28]	; (800cd68 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800cd4a:	f7ff f8e7 	bl	800bf1c <_PreparePacket>
 800cd4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800cd50:	2212      	movs	r2, #18
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6838      	ldr	r0, [r7, #0]
 800cd56:	f7ff f9d1 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f383 8811 	msr	BASEPRI, r3
}
 800cd60:	bf00      	nop
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	2000446c 	.word	0x2000446c

0800cd6c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cd72:	f3ef 8311 	mrs	r3, BASEPRI
 800cd76:	f04f 0120 	mov.w	r1, #32
 800cd7a:	f381 8811 	msr	BASEPRI, r1
 800cd7e:	607b      	str	r3, [r7, #4]
 800cd80:	4807      	ldr	r0, [pc, #28]	; (800cda0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800cd82:	f7ff f8cb 	bl	800bf1c <_PreparePacket>
 800cd86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800cd88:	2211      	movs	r2, #17
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6838      	ldr	r0, [r7, #0]
 800cd8e:	f7ff f9b5 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f383 8811 	msr	BASEPRI, r3
}
 800cd98:	bf00      	nop
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	2000446c 	.word	0x2000446c

0800cda4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cdac:	f3ef 8311 	mrs	r3, BASEPRI
 800cdb0:	f04f 0120 	mov.w	r1, #32
 800cdb4:	f381 8811 	msr	BASEPRI, r1
 800cdb8:	617b      	str	r3, [r7, #20]
 800cdba:	4819      	ldr	r0, [pc, #100]	; (800ce20 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800cdbc:	f7ff f8ae 	bl	800bf1c <_PreparePacket>
 800cdc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cdc6:	4b17      	ldr	r3, [pc, #92]	; (800ce24 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	61fb      	str	r3, [r7, #28]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	61bb      	str	r3, [r7, #24]
 800cdd8:	e00b      	b.n	800cdf2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	1c59      	adds	r1, r3, #1
 800cde2:	61f9      	str	r1, [r7, #28]
 800cde4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cde8:	b2d2      	uxtb	r2, r2
 800cdea:	701a      	strb	r2, [r3, #0]
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	09db      	lsrs	r3, r3, #7
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	2b7f      	cmp	r3, #127	; 0x7f
 800cdf6:	d8f0      	bhi.n	800cdda <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	61fa      	str	r2, [r7, #28]
 800cdfe:	69ba      	ldr	r2, [r7, #24]
 800ce00:	b2d2      	uxtb	r2, r2
 800ce02:	701a      	strb	r2, [r3, #0]
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800ce08:	2208      	movs	r2, #8
 800ce0a:	68f9      	ldr	r1, [r7, #12]
 800ce0c:	6938      	ldr	r0, [r7, #16]
 800ce0e:	f7ff f975 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f383 8811 	msr	BASEPRI, r3
}
 800ce18:	bf00      	nop
 800ce1a:	3720      	adds	r7, #32
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2000446c 	.word	0x2000446c
 800ce24:	2000443c 	.word	0x2000443c

0800ce28 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ce30:	f3ef 8311 	mrs	r3, BASEPRI
 800ce34:	f04f 0120 	mov.w	r1, #32
 800ce38:	f381 8811 	msr	BASEPRI, r1
 800ce3c:	617b      	str	r3, [r7, #20]
 800ce3e:	4819      	ldr	r0, [pc, #100]	; (800cea4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800ce40:	f7ff f86c 	bl	800bf1c <_PreparePacket>
 800ce44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ce4a:	4b17      	ldr	r3, [pc, #92]	; (800cea8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	61fb      	str	r3, [r7, #28]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	61bb      	str	r3, [r7, #24]
 800ce5c:	e00b      	b.n	800ce76 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	1c59      	adds	r1, r3, #1
 800ce66:	61f9      	str	r1, [r7, #28]
 800ce68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	09db      	lsrs	r3, r3, #7
 800ce74:	61bb      	str	r3, [r7, #24]
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	2b7f      	cmp	r3, #127	; 0x7f
 800ce7a:	d8f0      	bhi.n	800ce5e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	61fa      	str	r2, [r7, #28]
 800ce82:	69ba      	ldr	r2, [r7, #24]
 800ce84:	b2d2      	uxtb	r2, r2
 800ce86:	701a      	strb	r2, [r3, #0]
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800ce8c:	2204      	movs	r2, #4
 800ce8e:	68f9      	ldr	r1, [r7, #12]
 800ce90:	6938      	ldr	r0, [r7, #16]
 800ce92:	f7ff f933 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f383 8811 	msr	BASEPRI, r3
}
 800ce9c:	bf00      	nop
 800ce9e:	3720      	adds	r7, #32
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	2000446c 	.word	0x2000446c
 800cea8:	2000443c 	.word	0x2000443c

0800ceac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ceb4:	f3ef 8311 	mrs	r3, BASEPRI
 800ceb8:	f04f 0120 	mov.w	r1, #32
 800cebc:	f381 8811 	msr	BASEPRI, r1
 800cec0:	617b      	str	r3, [r7, #20]
 800cec2:	4819      	ldr	r0, [pc, #100]	; (800cf28 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800cec4:	f7ff f82a 	bl	800bf1c <_PreparePacket>
 800cec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cece:	4b17      	ldr	r3, [pc, #92]	; (800cf2c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	61fb      	str	r3, [r7, #28]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	61bb      	str	r3, [r7, #24]
 800cee0:	e00b      	b.n	800cefa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	1c59      	adds	r1, r3, #1
 800ceea:	61f9      	str	r1, [r7, #28]
 800ceec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cef0:	b2d2      	uxtb	r2, r2
 800cef2:	701a      	strb	r2, [r3, #0]
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	09db      	lsrs	r3, r3, #7
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	2b7f      	cmp	r3, #127	; 0x7f
 800cefe:	d8f0      	bhi.n	800cee2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	61fa      	str	r2, [r7, #28]
 800cf06:	69ba      	ldr	r2, [r7, #24]
 800cf08:	b2d2      	uxtb	r2, r2
 800cf0a:	701a      	strb	r2, [r3, #0]
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800cf10:	2206      	movs	r2, #6
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	6938      	ldr	r0, [r7, #16]
 800cf16:	f7ff f8f1 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f383 8811 	msr	BASEPRI, r3
}
 800cf20:	bf00      	nop
 800cf22:	3720      	adds	r7, #32
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	2000446c 	.word	0x2000446c
 800cf2c:	2000443c 	.word	0x2000443c

0800cf30 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08a      	sub	sp, #40	; 0x28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800cf3a:	f3ef 8311 	mrs	r3, BASEPRI
 800cf3e:	f04f 0120 	mov.w	r1, #32
 800cf42:	f381 8811 	msr	BASEPRI, r1
 800cf46:	617b      	str	r3, [r7, #20]
 800cf48:	4827      	ldr	r0, [pc, #156]	; (800cfe8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800cf4a:	f7fe ffe7 	bl	800bf1c <_PreparePacket>
 800cf4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cf54:	4b25      	ldr	r3, [pc, #148]	; (800cfec <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	627b      	str	r3, [r7, #36]	; 0x24
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	623b      	str	r3, [r7, #32]
 800cf66:	e00b      	b.n	800cf80 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	6279      	str	r1, [r7, #36]	; 0x24
 800cf72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf76:	b2d2      	uxtb	r2, r2
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	6a3b      	ldr	r3, [r7, #32]
 800cf7c:	09db      	lsrs	r3, r3, #7
 800cf7e:	623b      	str	r3, [r7, #32]
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	2b7f      	cmp	r3, #127	; 0x7f
 800cf84:	d8f0      	bhi.n	800cf68 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	1c5a      	adds	r2, r3, #1
 800cf8a:	627a      	str	r2, [r7, #36]	; 0x24
 800cf8c:	6a3a      	ldr	r2, [r7, #32]
 800cf8e:	b2d2      	uxtb	r2, r2
 800cf90:	701a      	strb	r2, [r3, #0]
 800cf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	61fb      	str	r3, [r7, #28]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	61bb      	str	r3, [r7, #24]
 800cf9e:	e00b      	b.n	800cfb8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	1c59      	adds	r1, r3, #1
 800cfa8:	61f9      	str	r1, [r7, #28]
 800cfaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	701a      	strb	r2, [r3, #0]
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	09db      	lsrs	r3, r3, #7
 800cfb6:	61bb      	str	r3, [r7, #24]
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	2b7f      	cmp	r3, #127	; 0x7f
 800cfbc:	d8f0      	bhi.n	800cfa0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	1c5a      	adds	r2, r3, #1
 800cfc2:	61fa      	str	r2, [r7, #28]
 800cfc4:	69ba      	ldr	r2, [r7, #24]
 800cfc6:	b2d2      	uxtb	r2, r2
 800cfc8:	701a      	strb	r2, [r3, #0]
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800cfce:	2207      	movs	r2, #7
 800cfd0:	68f9      	ldr	r1, [r7, #12]
 800cfd2:	6938      	ldr	r0, [r7, #16]
 800cfd4:	f7ff f892 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f383 8811 	msr	BASEPRI, r3
}
 800cfde:	bf00      	nop
 800cfe0:	3728      	adds	r7, #40	; 0x28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	2000446c 	.word	0x2000446c
 800cfec:	2000443c 	.word	0x2000443c

0800cff0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800cff8:	4b04      	ldr	r3, [pc, #16]	; (800d00c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	1ad3      	subs	r3, r2, r3
}
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	2000443c 	.word	0x2000443c

0800d010 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d010:	b580      	push	{r7, lr}
 800d012:	b08c      	sub	sp, #48	; 0x30
 800d014:	af00      	add	r7, sp, #0
 800d016:	4603      	mov	r3, r0
 800d018:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d01a:	4b3b      	ldr	r3, [pc, #236]	; (800d108 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d06d      	beq.n	800d0fe <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d022:	4b39      	ldr	r3, [pc, #228]	; (800d108 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d028:	2300      	movs	r3, #0
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d02c:	e008      	b.n	800d040 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d007      	beq.n	800d04a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	3301      	adds	r3, #1
 800d03e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d044:	429a      	cmp	r2, r3
 800d046:	d3f2      	bcc.n	800d02e <SEGGER_SYSVIEW_SendModule+0x1e>
 800d048:	e000      	b.n	800d04c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d04a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d055      	beq.n	800d0fe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d052:	f3ef 8311 	mrs	r3, BASEPRI
 800d056:	f04f 0120 	mov.w	r1, #32
 800d05a:	f381 8811 	msr	BASEPRI, r1
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	482a      	ldr	r0, [pc, #168]	; (800d10c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d062:	f7fe ff5b 	bl	800bf1c <_PreparePacket>
 800d066:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	627b      	str	r3, [r7, #36]	; 0x24
 800d070:	79fb      	ldrb	r3, [r7, #7]
 800d072:	623b      	str	r3, [r7, #32]
 800d074:	e00b      	b.n	800d08e <SEGGER_SYSVIEW_SendModule+0x7e>
 800d076:	6a3b      	ldr	r3, [r7, #32]
 800d078:	b2da      	uxtb	r2, r3
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	1c59      	adds	r1, r3, #1
 800d07e:	6279      	str	r1, [r7, #36]	; 0x24
 800d080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d084:	b2d2      	uxtb	r2, r2
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	09db      	lsrs	r3, r3, #7
 800d08c:	623b      	str	r3, [r7, #32]
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2b7f      	cmp	r3, #127	; 0x7f
 800d092:	d8f0      	bhi.n	800d076 <SEGGER_SYSVIEW_SendModule+0x66>
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	1c5a      	adds	r2, r3, #1
 800d098:	627a      	str	r2, [r7, #36]	; 0x24
 800d09a:	6a3a      	ldr	r2, [r7, #32]
 800d09c:	b2d2      	uxtb	r2, r2
 800d09e:	701a      	strb	r2, [r3, #0]
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	61fb      	str	r3, [r7, #28]
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	61bb      	str	r3, [r7, #24]
 800d0ae:	e00b      	b.n	800d0c8 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	1c59      	adds	r1, r3, #1
 800d0b8:	61f9      	str	r1, [r7, #28]
 800d0ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	09db      	lsrs	r3, r3, #7
 800d0c6:	61bb      	str	r3, [r7, #24]
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	2b7f      	cmp	r3, #127	; 0x7f
 800d0cc:	d8f0      	bhi.n	800d0b0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	61fa      	str	r2, [r7, #28]
 800d0d4:	69ba      	ldr	r2, [r7, #24]
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2280      	movs	r2, #128	; 0x80
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f7fe fec8 	bl	800be7c <_EncodeStr>
 800d0ec:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d0ee:	2216      	movs	r2, #22
 800d0f0:	68f9      	ldr	r1, [r7, #12]
 800d0f2:	6938      	ldr	r0, [r7, #16]
 800d0f4:	f7ff f802 	bl	800c0fc <_SendPacket>
      RECORD_END();
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d0fe:	bf00      	nop
 800d100:	3730      	adds	r7, #48	; 0x30
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20004464 	.word	0x20004464
 800d10c:	2000446c 	.word	0x2000446c

0800d110 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d116:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00f      	beq.n	800d13e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d11e:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1f2      	bne.n	800d124 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	20004464 	.word	0x20004464

0800d14c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d152:	f3ef 8311 	mrs	r3, BASEPRI
 800d156:	f04f 0120 	mov.w	r1, #32
 800d15a:	f381 8811 	msr	BASEPRI, r1
 800d15e:	60fb      	str	r3, [r7, #12]
 800d160:	4817      	ldr	r0, [pc, #92]	; (800d1c0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d162:	f7fe fedb 	bl	800bf1c <_PreparePacket>
 800d166:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	617b      	str	r3, [r7, #20]
 800d170:	4b14      	ldr	r3, [pc, #80]	; (800d1c4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	613b      	str	r3, [r7, #16]
 800d176:	e00b      	b.n	800d190 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	1c59      	adds	r1, r3, #1
 800d180:	6179      	str	r1, [r7, #20]
 800d182:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d186:	b2d2      	uxtb	r2, r2
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	09db      	lsrs	r3, r3, #7
 800d18e:	613b      	str	r3, [r7, #16]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2b7f      	cmp	r3, #127	; 0x7f
 800d194:	d8f0      	bhi.n	800d178 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	1c5a      	adds	r2, r3, #1
 800d19a:	617a      	str	r2, [r7, #20]
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	b2d2      	uxtb	r2, r2
 800d1a0:	701a      	strb	r2, [r3, #0]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d1a6:	221b      	movs	r2, #27
 800d1a8:	6879      	ldr	r1, [r7, #4]
 800d1aa:	68b8      	ldr	r0, [r7, #8]
 800d1ac:	f7fe ffa6 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f383 8811 	msr	BASEPRI, r3
}
 800d1b6:	bf00      	nop
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	2000446c 	.word	0x2000446c
 800d1c4:	20004468 	.word	0x20004468

0800d1c8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d1d0:	f3ef 8311 	mrs	r3, BASEPRI
 800d1d4:	f04f 0120 	mov.w	r1, #32
 800d1d8:	f381 8811 	msr	BASEPRI, r1
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	4827      	ldr	r0, [pc, #156]	; (800d27c <SEGGER_SYSVIEW_Warn+0xb4>)
 800d1e0:	f7fe fe9c 	bl	800bf1c <_PreparePacket>
 800d1e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d1e6:	2280      	movs	r2, #128	; 0x80
 800d1e8:	6879      	ldr	r1, [r7, #4]
 800d1ea:	6938      	ldr	r0, [r7, #16]
 800d1ec:	f7fe fe46 	bl	800be7c <_EncodeStr>
 800d1f0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	623b      	str	r3, [r7, #32]
 800d1fa:	e00b      	b.n	800d214 <SEGGER_SYSVIEW_Warn+0x4c>
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	1c59      	adds	r1, r3, #1
 800d204:	6279      	str	r1, [r7, #36]	; 0x24
 800d206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d20a:	b2d2      	uxtb	r2, r2
 800d20c:	701a      	strb	r2, [r3, #0]
 800d20e:	6a3b      	ldr	r3, [r7, #32]
 800d210:	09db      	lsrs	r3, r3, #7
 800d212:	623b      	str	r3, [r7, #32]
 800d214:	6a3b      	ldr	r3, [r7, #32]
 800d216:	2b7f      	cmp	r3, #127	; 0x7f
 800d218:	d8f0      	bhi.n	800d1fc <SEGGER_SYSVIEW_Warn+0x34>
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	627a      	str	r2, [r7, #36]	; 0x24
 800d220:	6a3a      	ldr	r2, [r7, #32]
 800d222:	b2d2      	uxtb	r2, r2
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	61fb      	str	r3, [r7, #28]
 800d22e:	2300      	movs	r3, #0
 800d230:	61bb      	str	r3, [r7, #24]
 800d232:	e00b      	b.n	800d24c <SEGGER_SYSVIEW_Warn+0x84>
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	b2da      	uxtb	r2, r3
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	1c59      	adds	r1, r3, #1
 800d23c:	61f9      	str	r1, [r7, #28]
 800d23e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d242:	b2d2      	uxtb	r2, r2
 800d244:	701a      	strb	r2, [r3, #0]
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	09db      	lsrs	r3, r3, #7
 800d24a:	61bb      	str	r3, [r7, #24]
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	2b7f      	cmp	r3, #127	; 0x7f
 800d250:	d8f0      	bhi.n	800d234 <SEGGER_SYSVIEW_Warn+0x6c>
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	61fa      	str	r2, [r7, #28]
 800d258:	69ba      	ldr	r2, [r7, #24]
 800d25a:	b2d2      	uxtb	r2, r2
 800d25c:	701a      	strb	r2, [r3, #0]
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d262:	221a      	movs	r2, #26
 800d264:	68f9      	ldr	r1, [r7, #12]
 800d266:	6938      	ldr	r0, [r7, #16]
 800d268:	f7fe ff48 	bl	800c0fc <_SendPacket>
  RECORD_END();
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f383 8811 	msr	BASEPRI, r3
}
 800d272:	bf00      	nop
 800d274:	3728      	adds	r7, #40	; 0x28
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	2000446c 	.word	0x2000446c

0800d280 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800d280:	b580      	push	{r7, lr}
 800d282:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800d284:	4803      	ldr	r0, [pc, #12]	; (800d294 <_cbSendSystemDesc+0x14>)
 800d286:	f7ff fca1 	bl	800cbcc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800d28a:	4803      	ldr	r0, [pc, #12]	; (800d298 <_cbSendSystemDesc+0x18>)
 800d28c:	f7ff fc9e 	bl	800cbcc <SEGGER_SYSVIEW_SendSysDesc>
}
 800d290:	bf00      	nop
 800d292:	bd80      	pop	{r7, pc}
 800d294:	0801398c 	.word	0x0801398c
 800d298:	080139c0 	.word	0x080139c0

0800d29c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800d29c:	b580      	push	{r7, lr}
 800d29e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800d2a0:	4b06      	ldr	r3, [pc, #24]	; (800d2bc <SEGGER_SYSVIEW_Conf+0x20>)
 800d2a2:	6818      	ldr	r0, [r3, #0]
 800d2a4:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <SEGGER_SYSVIEW_Conf+0x20>)
 800d2a6:	6819      	ldr	r1, [r3, #0]
 800d2a8:	4b05      	ldr	r3, [pc, #20]	; (800d2c0 <SEGGER_SYSVIEW_Conf+0x24>)
 800d2aa:	4a06      	ldr	r2, [pc, #24]	; (800d2c4 <SEGGER_SYSVIEW_Conf+0x28>)
 800d2ac:	f7ff f80c 	bl	800c2c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800d2b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d2b4:	f7ff f84c 	bl	800c350 <SEGGER_SYSVIEW_SetRAMBase>
}
 800d2b8:	bf00      	nop
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20000014 	.word	0x20000014
 800d2c0:	0800d281 	.word	0x0800d281
 800d2c4:	08014200 	.word	0x08014200

0800d2c8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800d2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	607b      	str	r3, [r7, #4]
 800d2d2:	e048      	b.n	800d366 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800d2d4:	4929      	ldr	r1, [pc, #164]	; (800d37c <_cbSendTaskList+0xb4>)
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	440b      	add	r3, r1
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fd fe05 	bl	800aef4 <uxTaskGetStackHighWaterMark>
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	4823      	ldr	r0, [pc, #140]	; (800d37c <_cbSendTaskList+0xb4>)
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4403      	add	r3, r0
 800d2fa:	3310      	adds	r3, #16
 800d2fc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800d2fe:	491f      	ldr	r1, [pc, #124]	; (800d37c <_cbSendTaskList+0xb4>)
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	4613      	mov	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4413      	add	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	440b      	add	r3, r1
 800d30c:	6818      	ldr	r0, [r3, #0]
 800d30e:	491b      	ldr	r1, [pc, #108]	; (800d37c <_cbSendTaskList+0xb4>)
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	4613      	mov	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	440b      	add	r3, r1
 800d31c:	3304      	adds	r3, #4
 800d31e:	6819      	ldr	r1, [r3, #0]
 800d320:	4c16      	ldr	r4, [pc, #88]	; (800d37c <_cbSendTaskList+0xb4>)
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	4613      	mov	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4423      	add	r3, r4
 800d32e:	3308      	adds	r3, #8
 800d330:	681c      	ldr	r4, [r3, #0]
 800d332:	4d12      	ldr	r5, [pc, #72]	; (800d37c <_cbSendTaskList+0xb4>)
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4613      	mov	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	442b      	add	r3, r5
 800d340:	330c      	adds	r3, #12
 800d342:	681d      	ldr	r5, [r3, #0]
 800d344:	4e0d      	ldr	r6, [pc, #52]	; (800d37c <_cbSendTaskList+0xb4>)
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	4613      	mov	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	4413      	add	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4433      	add	r3, r6
 800d352:	3310      	adds	r3, #16
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	462b      	mov	r3, r5
 800d35a:	4622      	mov	r2, r4
 800d35c:	f000 f97a 	bl	800d654 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	3301      	adds	r3, #1
 800d364:	607b      	str	r3, [r7, #4]
 800d366:	4b06      	ldr	r3, [pc, #24]	; (800d380 <_cbSendTaskList+0xb8>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d3b1      	bcc.n	800d2d4 <_cbSendTaskList+0xc>
  }
}
 800d370:	bf00      	nop
 800d372:	bf00      	nop
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20004550 	.word	0x20004550
 800d380:	200045f0 	.word	0x200045f0

0800d384 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800d384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d388:	b082      	sub	sp, #8
 800d38a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800d38c:	f7fd fa6c 	bl	800a868 <xTaskGetTickCountFromISR>
 800d390:	4603      	mov	r3, r0
 800d392:	2200      	movs	r2, #0
 800d394:	469a      	mov	sl, r3
 800d396:	4693      	mov	fp, r2
 800d398:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800d39c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	f04f 0a00 	mov.w	sl, #0
 800d3a8:	f04f 0b00 	mov.w	fp, #0
 800d3ac:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800d3b0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800d3b4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800d3b8:	4652      	mov	r2, sl
 800d3ba:	465b      	mov	r3, fp
 800d3bc:	1a14      	subs	r4, r2, r0
 800d3be:	eb63 0501 	sbc.w	r5, r3, r1
 800d3c2:	f04f 0200 	mov.w	r2, #0
 800d3c6:	f04f 0300 	mov.w	r3, #0
 800d3ca:	00ab      	lsls	r3, r5, #2
 800d3cc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d3d0:	00a2      	lsls	r2, r4, #2
 800d3d2:	4614      	mov	r4, r2
 800d3d4:	461d      	mov	r5, r3
 800d3d6:	eb14 0800 	adds.w	r8, r4, r0
 800d3da:	eb45 0901 	adc.w	r9, r5, r1
 800d3de:	f04f 0200 	mov.w	r2, #0
 800d3e2:	f04f 0300 	mov.w	r3, #0
 800d3e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d3ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d3ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d3f2:	4690      	mov	r8, r2
 800d3f4:	4699      	mov	r9, r3
 800d3f6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800d3fa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800d3fe:	4610      	mov	r0, r2
 800d400:	4619      	mov	r1, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d40c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b086      	sub	sp, #24
 800d410:	af02      	add	r7, sp, #8
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800d41a:	2205      	movs	r2, #5
 800d41c:	492b      	ldr	r1, [pc, #172]	; (800d4cc <SYSVIEW_AddTask+0xc0>)
 800d41e:	68b8      	ldr	r0, [r7, #8]
 800d420:	f005 fd74 	bl	8012f0c <memcmp>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d04b      	beq.n	800d4c2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800d42a:	4b29      	ldr	r3, [pc, #164]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b07      	cmp	r3, #7
 800d430:	d903      	bls.n	800d43a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800d432:	4828      	ldr	r0, [pc, #160]	; (800d4d4 <SYSVIEW_AddTask+0xc8>)
 800d434:	f7ff fec8 	bl	800d1c8 <SEGGER_SYSVIEW_Warn>
    return;
 800d438:	e044      	b.n	800d4c4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800d43a:	4b25      	ldr	r3, [pc, #148]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	4926      	ldr	r1, [pc, #152]	; (800d4d8 <SYSVIEW_AddTask+0xcc>)
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	440b      	add	r3, r1
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800d44e:	4b20      	ldr	r3, [pc, #128]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	4921      	ldr	r1, [pc, #132]	; (800d4d8 <SYSVIEW_AddTask+0xcc>)
 800d454:	4613      	mov	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	440b      	add	r3, r1
 800d45e:	3304      	adds	r3, #4
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800d464:	4b1a      	ldr	r3, [pc, #104]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	491b      	ldr	r1, [pc, #108]	; (800d4d8 <SYSVIEW_AddTask+0xcc>)
 800d46a:	4613      	mov	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	4413      	add	r3, r2
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	440b      	add	r3, r1
 800d474:	3308      	adds	r3, #8
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800d47a:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	4916      	ldr	r1, [pc, #88]	; (800d4d8 <SYSVIEW_AddTask+0xcc>)
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	440b      	add	r3, r1
 800d48a:	330c      	adds	r3, #12
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800d490:	4b0f      	ldr	r3, [pc, #60]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	4910      	ldr	r1, [pc, #64]	; (800d4d8 <SYSVIEW_AddTask+0xcc>)
 800d496:	4613      	mov	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4413      	add	r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	440b      	add	r3, r1
 800d4a0:	3310      	adds	r3, #16
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800d4a6:	4b0a      	ldr	r3, [pc, #40]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <SYSVIEW_AddTask+0xc4>)
 800d4ae:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	68b9      	ldr	r1, [r7, #8]
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f000 f8ca 	bl	800d654 <SYSVIEW_SendTaskInfo>
 800d4c0:	e000      	b.n	800d4c4 <SYSVIEW_AddTask+0xb8>
    return;
 800d4c2:	bf00      	nop

}
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	080139d0 	.word	0x080139d0
 800d4d0:	200045f0 	.word	0x200045f0
 800d4d4:	080139d8 	.word	0x080139d8
 800d4d8:	20004550 	.word	0x20004550

0800d4dc <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800d4e4:	4b59      	ldr	r3, [pc, #356]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f000 80ab 	beq.w	800d644 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	e00d      	b.n	800d510 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800d4f4:	4956      	ldr	r1, [pc, #344]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	440b      	add	r3, r1
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	429a      	cmp	r2, r3
 800d508:	d008      	beq.n	800d51c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	3301      	adds	r3, #1
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	4b4e      	ldr	r3, [pc, #312]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	429a      	cmp	r2, r3
 800d518:	d3ec      	bcc.n	800d4f4 <SYSVIEW_DeleteTask+0x18>
 800d51a:	e000      	b.n	800d51e <SYSVIEW_DeleteTask+0x42>
      break;
 800d51c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800d51e:	4b4b      	ldr	r3, [pc, #300]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3b01      	subs	r3, #1
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	429a      	cmp	r2, r3
 800d528:	d111      	bne.n	800d54e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	4613      	mov	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	4413      	add	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4a46      	ldr	r2, [pc, #280]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d536:	4413      	add	r3, r2
 800d538:	2214      	movs	r2, #20
 800d53a:	2100      	movs	r1, #0
 800d53c:	4618      	mov	r0, r3
 800d53e:	f005 fd03 	bl	8012f48 <memset>
    _NumTasks--;
 800d542:	4b42      	ldr	r3, [pc, #264]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3b01      	subs	r3, #1
 800d548:	4a40      	ldr	r2, [pc, #256]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d54a:	6013      	str	r3, [r2, #0]
 800d54c:	e07b      	b.n	800d646 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800d54e:	4b3f      	ldr	r3, [pc, #252]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	429a      	cmp	r2, r3
 800d556:	d276      	bcs.n	800d646 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800d558:	4b3c      	ldr	r3, [pc, #240]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	1e5a      	subs	r2, r3, #1
 800d55e:	493c      	ldr	r1, [pc, #240]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	440b      	add	r3, r1
 800d56a:	6819      	ldr	r1, [r3, #0]
 800d56c:	4838      	ldr	r0, [pc, #224]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	4613      	mov	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4413      	add	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4403      	add	r3, r0
 800d57a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 800d57c:	4b33      	ldr	r3, [pc, #204]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	1e5a      	subs	r2, r3, #1
 800d582:	4933      	ldr	r1, [pc, #204]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d584:	4613      	mov	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	440b      	add	r3, r1
 800d58e:	3304      	adds	r3, #4
 800d590:	6819      	ldr	r1, [r3, #0]
 800d592:	482f      	ldr	r0, [pc, #188]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	4613      	mov	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4403      	add	r3, r0
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800d5a4:	4b29      	ldr	r3, [pc, #164]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	1e5a      	subs	r2, r3, #1
 800d5aa:	4929      	ldr	r1, [pc, #164]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	440b      	add	r3, r1
 800d5b6:	3308      	adds	r3, #8
 800d5b8:	6819      	ldr	r1, [r3, #0]
 800d5ba:	4825      	ldr	r0, [pc, #148]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4403      	add	r3, r0
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800d5cc:	4b1f      	ldr	r3, [pc, #124]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	1e5a      	subs	r2, r3, #1
 800d5d2:	491f      	ldr	r1, [pc, #124]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4413      	add	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	440b      	add	r3, r1
 800d5de:	330c      	adds	r3, #12
 800d5e0:	6819      	ldr	r1, [r3, #0]
 800d5e2:	481b      	ldr	r0, [pc, #108]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4403      	add	r3, r0
 800d5f0:	330c      	adds	r3, #12
 800d5f2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800d5f4:	4b15      	ldr	r3, [pc, #84]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	1e5a      	subs	r2, r3, #1
 800d5fa:	4915      	ldr	r1, [pc, #84]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4413      	add	r3, r2
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	440b      	add	r3, r1
 800d606:	3310      	adds	r3, #16
 800d608:	6819      	ldr	r1, [r3, #0]
 800d60a:	4811      	ldr	r0, [pc, #68]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4613      	mov	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4413      	add	r3, r2
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4403      	add	r3, r0
 800d618:	3310      	adds	r3, #16
 800d61a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800d61c:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	1e5a      	subs	r2, r3, #1
 800d622:	4613      	mov	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	4413      	add	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4a09      	ldr	r2, [pc, #36]	; (800d650 <SYSVIEW_DeleteTask+0x174>)
 800d62c:	4413      	add	r3, r2
 800d62e:	2214      	movs	r2, #20
 800d630:	2100      	movs	r1, #0
 800d632:	4618      	mov	r0, r3
 800d634:	f005 fc88 	bl	8012f48 <memset>
    _NumTasks--;
 800d638:	4b04      	ldr	r3, [pc, #16]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	4a03      	ldr	r2, [pc, #12]	; (800d64c <SYSVIEW_DeleteTask+0x170>)
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	e000      	b.n	800d646 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800d644:	bf00      	nop
  }
}
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	200045f0 	.word	0x200045f0
 800d650:	20004550 	.word	0x20004550

0800d654 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800d654:	b580      	push	{r7, lr}
 800d656:	b08a      	sub	sp, #40	; 0x28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800d662:	f107 0314 	add.w	r3, r7, #20
 800d666:	2214      	movs	r2, #20
 800d668:	2100      	movs	r1, #0
 800d66a:	4618      	mov	r0, r3
 800d66c:	f005 fc6c 	bl	8012f48 <memset>
  TaskInfo.TaskID     = TaskID;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800d680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d682:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800d684:	f107 0314 	add.w	r3, r7, #20
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff f9a7 	bl	800c9dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800d68e:	bf00      	nop
 800d690:	3728      	adds	r7, #40	; 0x28
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800d696:	b480      	push	{r7}
 800d698:	b083      	sub	sp, #12
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	78fa      	ldrb	r2, [r7, #3]
 800d6a6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800d6aa:	bf00      	nop
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b086      	sub	sp, #24
 800d6ba:	af02      	add	r7, sp, #8
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	4608      	mov	r0, r1
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	70fb      	strb	r3, [r7, #3]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70bb      	strb	r3, [r7, #2]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800d6d6:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bf0c      	ite	eq
 800d6de:	2301      	moveq	r3, #1
 800d6e0:	2300      	movne	r3, #0
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	737b      	strb	r3, [r7, #13]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800d6e6:	78fa      	ldrb	r2, [r7, #3]
 800d6e8:	787b      	ldrb	r3, [r7, #1]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	b2d8      	uxtb	r0, r3
 800d6ee:	78bb      	ldrb	r3, [r7, #2]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	78ba      	ldrb	r2, [r7, #2]
 800d6f6:	78f9      	ldrb	r1, [r7, #3]
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fac5 	bl	800dc8c <u8g2_IsIntersection>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d040      	beq.n	800d78a <u8g2_DrawHorizontalBitmap+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 800d708:	2380      	movs	r3, #128	; 0x80
 800d70a:	73fb      	strb	r3, [r7, #15]
  while(len > 0)
 800d70c:	e035      	b.n	800d77a <u8g2_DrawHorizontalBitmap+0xc4>
  {
    if ( *b & mask ) {
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	781a      	ldrb	r2, [r3, #0]
 800d712:	7bfb      	ldrb	r3, [r7, #15]
 800d714:	4013      	ands	r3, r2
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00c      	beq.n	800d736 <u8g2_DrawHorizontalBitmap+0x80>
      u8g2->draw_color = color;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	7bba      	ldrb	r2, [r7, #14]
 800d720:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800d724:	78ba      	ldrb	r2, [r7, #2]
 800d726:	78f9      	ldrb	r1, [r7, #3]
 800d728:	2300      	movs	r3, #0
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	2301      	movs	r3, #1
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f9df 	bl	800daf2 <u8g2_DrawHVLine>
 800d734:	e010      	b.n	800d758 <u8g2_DrawHorizontalBitmap+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10b      	bne.n	800d758 <u8g2_DrawHorizontalBitmap+0xa2>
      u8g2->draw_color = ncolor;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	7b7a      	ldrb	r2, [r7, #13]
 800d744:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800d748:	78ba      	ldrb	r2, [r7, #2]
 800d74a:	78f9      	ldrb	r1, [r7, #3]
 800d74c:	2300      	movs	r3, #0
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	2301      	movs	r3, #1
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f9cd 	bl	800daf2 <u8g2_DrawHVLine>
    }

    x++;
 800d758:	78fb      	ldrb	r3, [r7, #3]
 800d75a:	3301      	adds	r3, #1
 800d75c:	70fb      	strb	r3, [r7, #3]
    mask >>= 1;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	085b      	lsrs	r3, r3, #1
 800d762:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d104      	bne.n	800d774 <u8g2_DrawHorizontalBitmap+0xbe>
    {
      mask = 128;
 800d76a:	2380      	movs	r3, #128	; 0x80
 800d76c:	73fb      	strb	r3, [r7, #15]
      b++;
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	3301      	adds	r3, #1
 800d772:	61bb      	str	r3, [r7, #24]
    }
    len--;
 800d774:	787b      	ldrb	r3, [r7, #1]
 800d776:	3b01      	subs	r3, #1
 800d778:	707b      	strb	r3, [r7, #1]
  while(len > 0)
 800d77a:	787b      	ldrb	r3, [r7, #1]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1c6      	bne.n	800d70e <u8g2_DrawHorizontalBitmap+0x58>
  }
  u8g2->draw_color = color;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	7bba      	ldrb	r2, [r7, #14]
 800d784:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 800d788:	e000      	b.n	800d78c <u8g2_DrawHorizontalBitmap+0xd6>
    return;
 800d78a:	bf00      	nop
}
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b086      	sub	sp, #24
 800d796:	af02      	add	r7, sp, #8
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	4608      	mov	r0, r1
 800d79c:	4611      	mov	r1, r2
 800d79e:	461a      	mov	r2, r3
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	70fb      	strb	r3, [r7, #3]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	70bb      	strb	r3, [r7, #2]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t w;
  w = cnt;
 800d7ac:	787b      	ldrb	r3, [r7, #1]
 800d7ae:	73fb      	strb	r3, [r7, #15]
  w *= 8;
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800d7b6:	78fa      	ldrb	r2, [r7, #3]
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	b2d8      	uxtb	r0, r3
 800d7be:	78ba      	ldrb	r2, [r7, #2]
 800d7c0:	7e3b      	ldrb	r3, [r7, #24]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	78ba      	ldrb	r2, [r7, #2]
 800d7c8:	78f9      	ldrb	r1, [r7, #3]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 fa5c 	bl	800dc8c <u8g2_IsIntersection>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d017      	beq.n	800d80a <u8g2_DrawBitmap+0x78>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800d7da:	e012      	b.n	800d802 <u8g2_DrawBitmap+0x70>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 800d7dc:	7bf8      	ldrb	r0, [r7, #15]
 800d7de:	78ba      	ldrb	r2, [r7, #2]
 800d7e0:	78f9      	ldrb	r1, [r7, #3]
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7ff ff64 	bl	800d6b6 <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 800d7ee:	787b      	ldrb	r3, [r7, #1]
 800d7f0:	69fa      	ldr	r2, [r7, #28]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	61fb      	str	r3, [r7, #28]
    y++;
 800d7f6:	78bb      	ldrb	r3, [r7, #2]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	70bb      	strb	r3, [r7, #2]
    h--;
 800d7fc:	7e3b      	ldrb	r3, [r7, #24]
 800d7fe:	3b01      	subs	r3, #1
 800d800:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 800d802:	7e3b      	ldrb	r3, [r7, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1e9      	bne.n	800d7dc <u8g2_DrawBitmap+0x4a>
 800d808:	e000      	b.n	800d80c <u8g2_DrawBitmap+0x7a>
    return;
 800d80a:	bf00      	nop
  }
}
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b084      	sub	sp, #16
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	7c1b      	ldrb	r3, [r3, #16]
 800d820:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d828:	461a      	mov	r2, r3
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	fb02 f303 	mul.w	r3, r2, r3
 800d830:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	00db      	lsls	r3, r3, #3
 800d836:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	2100      	movs	r1, #0
 800d840:	4618      	mov	r0, r3
 800d842:	f005 fb81 	bl	8012f48 <memset>
}
 800d846:	bf00      	nop
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b086      	sub	sp, #24
 800d852:	af02      	add	r7, sp, #8
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	70fb      	strb	r3, [r7, #3]
 800d85a:	4613      	mov	r3, r2
 800d85c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	7c1b      	ldrb	r3, [r3, #16]
 800d864:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800d866:	78fb      	ldrb	r3, [r7, #3]
 800d868:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	b29b      	uxth	r3, r3
 800d874:	89ba      	ldrh	r2, [r7, #12]
 800d876:	fb12 f303 	smulbb	r3, r2, r3
 800d87a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800d87c:	89bb      	ldrh	r3, [r7, #12]
 800d87e:	00db      	lsls	r3, r3, #3
 800d880:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800d882:	89bb      	ldrh	r3, [r7, #12]
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	4413      	add	r3, r2
 800d888:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800d88a:	7bf9      	ldrb	r1, [r7, #15]
 800d88c:	78ba      	ldrb	r2, [r7, #2]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	460b      	mov	r3, r1
 800d894:	2100      	movs	r1, #0
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fe83 	bl	800e5a2 <u8x8_DrawTile>
}
 800d89c:	bf00      	nop
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8b6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8be:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	7c5b      	ldrb	r3, [r3, #17]
 800d8c6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800d8c8:	7bba      	ldrb	r2, [r7, #14]
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7ff ffbd 	bl	800d84e <u8g2_send_tile_row>
    src_row++;
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800d8da:	7bbb      	ldrb	r3, [r7, #14]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800d8e0:	7bfa      	ldrb	r2, [r7, #15]
 800d8e2:	7b7b      	ldrb	r3, [r7, #13]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d203      	bcs.n	800d8f0 <u8g2_send_buffer+0x4c>
 800d8e8:	7bba      	ldrb	r2, [r7, #14]
 800d8ea:	7b3b      	ldrb	r3, [r7, #12]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d3eb      	bcc.n	800d8c8 <u8g2_send_buffer+0x24>
}
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff ffcf 	bl	800d8a4 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fe9c 	bl	800e644 <u8x8_RefreshDisplay>
}
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	78fa      	ldrb	r2, [r7, #3]
 800d924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	4798      	blx	r3
}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f7ff ff5b 	bl	800d812 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800d95c:	2100      	movs	r1, #0
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff ffd8 	bl	800d914 <u8g2_SetBufferCurrTileRow>
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2208      	movs	r2, #8
 800d978:	701a      	strb	r2, [r3, #0]
  return buf;
 800d97a:	4b03      	ldr	r3, [pc, #12]	; (800d988 <u8g2_m_16_8_f+0x1c>)
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	200045f4 	.word	0x200045f4

0800d98c <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af02      	add	r7, sp, #8
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a0b      	ldr	r2, [pc, #44]	; (800d9d0 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800d9a2:	490c      	ldr	r1, [pc, #48]	; (800d9d4 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f000 feb1 	bl	800e70c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800d9aa:	f107 0313 	add.w	r3, r7, #19
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff ffdc 	bl	800d96c <u8g2_m_16_8_f>
 800d9b4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800d9b6:	7cfa      	ldrb	r2, [r7, #19]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	4b06      	ldr	r3, [pc, #24]	; (800d9d8 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800d9be:	6979      	ldr	r1, [r7, #20]
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f000 fa4c 	bl	800de5e <u8g2_SetupBuffer>
}
 800d9c6:	bf00      	nop
 800d9c8:	3718      	adds	r7, #24
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	0800e2c5 	.word	0x0800e2c5
 800d9d4:	0800e49d 	.word	0x0800e49d
 800d9d8:	0800dce3 	.word	0x0800dce3

0800d9dc <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  return 0;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a04      	ldr	r2, [pc, #16]	; (800da10 <u8g2_SetFontPosBaseline+0x1c>)
 800da00:	655a      	str	r2, [r3, #84]	; 0x54
}
 800da02:	bf00      	nop
 800da04:	370c      	adds	r7, #12
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	0800d9dd 	.word	0x0800d9dd

0800da14 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800da14:	b480      	push	{r7}
 800da16:	b087      	sub	sp, #28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	4611      	mov	r1, r2
 800da20:	461a      	mov	r2, r3
 800da22:	460b      	mov	r3, r1
 800da24:	71fb      	strb	r3, [r7, #7]
 800da26:	4613      	mov	r3, r2
 800da28:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	7dbb      	ldrb	r3, [r7, #22]
 800da3a:	4413      	add	r3, r2
 800da3c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800da3e:	7dfa      	ldrb	r2, [r7, #23]
 800da40:	7dbb      	ldrb	r3, [r7, #22]
 800da42:	429a      	cmp	r2, r3
 800da44:	d90b      	bls.n	800da5e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800da46:	7dfa      	ldrb	r2, [r7, #23]
 800da48:	79bb      	ldrb	r3, [r7, #6]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d205      	bcs.n	800da5a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800da4e:	79bb      	ldrb	r3, [r7, #6]
 800da50:	75bb      	strb	r3, [r7, #22]
      b--;
 800da52:	7dbb      	ldrb	r3, [r7, #22]
 800da54:	3b01      	subs	r3, #1
 800da56:	75bb      	strb	r3, [r7, #22]
 800da58:	e001      	b.n	800da5e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800da5e:	7dfa      	ldrb	r2, [r7, #23]
 800da60:	79bb      	ldrb	r3, [r7, #6]
 800da62:	429a      	cmp	r2, r3
 800da64:	d301      	bcc.n	800da6a <u8g2_clip_intersection2+0x56>
    return 0;
 800da66:	2300      	movs	r3, #0
 800da68:	e01c      	b.n	800daa4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800da6a:	7dba      	ldrb	r2, [r7, #22]
 800da6c:	79fb      	ldrb	r3, [r7, #7]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d801      	bhi.n	800da76 <u8g2_clip_intersection2+0x62>
    return 0;
 800da72:	2300      	movs	r3, #0
 800da74:	e016      	b.n	800daa4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800da76:	7dfa      	ldrb	r2, [r7, #23]
 800da78:	79fb      	ldrb	r3, [r7, #7]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d201      	bcs.n	800da82 <u8g2_clip_intersection2+0x6e>
    a = c;
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800da82:	7dba      	ldrb	r2, [r7, #22]
 800da84:	79bb      	ldrb	r3, [r7, #6]
 800da86:	429a      	cmp	r2, r3
 800da88:	d901      	bls.n	800da8e <u8g2_clip_intersection2+0x7a>
    b = d;
 800da8a:	79bb      	ldrb	r3, [r7, #6]
 800da8c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	7dfa      	ldrb	r2, [r7, #23]
 800da92:	701a      	strb	r2, [r3, #0]
  b -= a;
 800da94:	7dba      	ldrb	r2, [r7, #22]
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	7dba      	ldrb	r2, [r7, #22]
 800daa0:	701a      	strb	r2, [r3, #0]
  return 1;
 800daa2:	2301      	movs	r3, #1
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	371c      	adds	r7, #28
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	4608      	mov	r0, r1
 800daba:	4611      	mov	r1, r2
 800dabc:	461a      	mov	r2, r3
 800dabe:	4603      	mov	r3, r0
 800dac0:	70fb      	strb	r3, [r7, #3]
 800dac2:	460b      	mov	r3, r1
 800dac4:	70bb      	strb	r3, [r7, #2]
 800dac6:	4613      	mov	r3, r2
 800dac8:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dad0:	78ba      	ldrb	r2, [r7, #2]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800dada:	7878      	ldrb	r0, [r7, #1]
 800dadc:	78ba      	ldrb	r2, [r7, #2]
 800dade:	78f9      	ldrb	r1, [r7, #3]
 800dae0:	7e3b      	ldrb	r3, [r7, #24]
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	4603      	mov	r3, r0
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	47a0      	blx	r4
}
 800daea:	bf00      	nop
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd90      	pop	{r4, r7, pc}

0800daf2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800daf2:	b590      	push	{r4, r7, lr}
 800daf4:	b085      	sub	sp, #20
 800daf6:	af02      	add	r7, sp, #8
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	4608      	mov	r0, r1
 800dafc:	4611      	mov	r1, r2
 800dafe:	461a      	mov	r2, r3
 800db00:	4603      	mov	r3, r0
 800db02:	70fb      	strb	r3, [r7, #3]
 800db04:	460b      	mov	r3, r1
 800db06:	70bb      	strb	r3, [r7, #2]
 800db08:	4613      	mov	r3, r2
 800db0a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db12:	2b00      	cmp	r3, #0
 800db14:	d06d      	beq.n	800dbf2 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800db16:	787b      	ldrb	r3, [r7, #1]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d06a      	beq.n	800dbf2 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800db1c:	787b      	ldrb	r3, [r7, #1]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d918      	bls.n	800db54 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800db22:	7e3b      	ldrb	r3, [r7, #24]
 800db24:	2b02      	cmp	r3, #2
 800db26:	d109      	bne.n	800db3c <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800db28:	78fa      	ldrb	r2, [r7, #3]
 800db2a:	787b      	ldrb	r3, [r7, #1]
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	70fb      	strb	r3, [r7, #3]
	  x++;
 800db32:	78fb      	ldrb	r3, [r7, #3]
 800db34:	3301      	adds	r3, #1
 800db36:	b2db      	uxtb	r3, r3
 800db38:	70fb      	strb	r3, [r7, #3]
 800db3a:	e00b      	b.n	800db54 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800db3c:	7e3b      	ldrb	r3, [r7, #24]
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d108      	bne.n	800db54 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800db42:	78ba      	ldrb	r2, [r7, #2]
 800db44:	787b      	ldrb	r3, [r7, #1]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	70bb      	strb	r3, [r7, #2]
	  y++;
 800db4c:	78bb      	ldrb	r3, [r7, #2]
 800db4e:	3301      	adds	r3, #1
 800db50:	b2db      	uxtb	r3, r3
 800db52:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800db54:	7e3b      	ldrb	r3, [r7, #24]
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800db5c:	7e3b      	ldrb	r3, [r7, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d119      	bne.n	800db96 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800db68:	78bb      	ldrb	r3, [r7, #2]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d838      	bhi.n	800dbe0 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800db74:	78bb      	ldrb	r3, [r7, #2]
 800db76:	429a      	cmp	r2, r3
 800db78:	d934      	bls.n	800dbe4 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800db86:	1c79      	adds	r1, r7, #1
 800db88:	1cf8      	adds	r0, r7, #3
 800db8a:	f7ff ff43 	bl	800da14 <u8g2_clip_intersection2>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d119      	bne.n	800dbc8 <u8g2_DrawHVLine+0xd6>
	  return;
 800db94:	e02d      	b.n	800dbf2 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800db9c:	78fb      	ldrb	r3, [r7, #3]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d822      	bhi.n	800dbe8 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800dba8:	78fb      	ldrb	r3, [r7, #3]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d91e      	bls.n	800dbec <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dbba:	1c79      	adds	r1, r7, #1
 800dbbc:	1cb8      	adds	r0, r7, #2
 800dbbe:	f7ff ff29 	bl	800da14 <u8g2_clip_intersection2>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d013      	beq.n	800dbf0 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbcc:	689c      	ldr	r4, [r3, #8]
 800dbce:	78f9      	ldrb	r1, [r7, #3]
 800dbd0:	78ba      	ldrb	r2, [r7, #2]
 800dbd2:	7878      	ldrb	r0, [r7, #1]
 800dbd4:	7e3b      	ldrb	r3, [r7, #24]
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	4603      	mov	r3, r0
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	47a0      	blx	r4
 800dbde:	e008      	b.n	800dbf2 <u8g2_DrawHVLine+0x100>
	  return;
 800dbe0:	bf00      	nop
 800dbe2:	e006      	b.n	800dbf2 <u8g2_DrawHVLine+0x100>
	  return;
 800dbe4:	bf00      	nop
 800dbe6:	e004      	b.n	800dbf2 <u8g2_DrawHVLine+0x100>
	  return;
 800dbe8:	bf00      	nop
 800dbea:	e002      	b.n	800dbf2 <u8g2_DrawHVLine+0x100>
	  return;
 800dbec:	bf00      	nop
 800dbee:	e000      	b.n	800dbf2 <u8g2_DrawHVLine+0x100>
	  return;
 800dbf0:	bf00      	nop
    }
}
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd90      	pop	{r4, r7, pc}

0800dbf8 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	78fa      	ldrb	r2, [r7, #3]
 800dc08:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 800dc0c:	78fb      	ldrb	r3, [r7, #3]
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d903      	bls.n	800dc1a <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800dc26:	b490      	push	{r4, r7}
 800dc28:	b082      	sub	sp, #8
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	4608      	mov	r0, r1
 800dc30:	4611      	mov	r1, r2
 800dc32:	461a      	mov	r2, r3
 800dc34:	4623      	mov	r3, r4
 800dc36:	71fb      	strb	r3, [r7, #7]
 800dc38:	4603      	mov	r3, r0
 800dc3a:	71bb      	strb	r3, [r7, #6]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	717b      	strb	r3, [r7, #5]
 800dc40:	4613      	mov	r3, r2
 800dc42:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800dc44:	797a      	ldrb	r2, [r7, #5]
 800dc46:	79bb      	ldrb	r3, [r7, #6]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d20d      	bcs.n	800dc68 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800dc4c:	793a      	ldrb	r2, [r7, #4]
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d901      	bls.n	800dc58 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e014      	b.n	800dc82 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800dc58:	797a      	ldrb	r2, [r7, #5]
 800dc5a:	793b      	ldrb	r3, [r7, #4]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d901      	bls.n	800dc64 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800dc60:	2301      	movs	r3, #1
 800dc62:	e00e      	b.n	800dc82 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	e00c      	b.n	800dc82 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800dc68:	793a      	ldrb	r2, [r7, #4]
 800dc6a:	79fb      	ldrb	r3, [r7, #7]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d907      	bls.n	800dc80 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800dc70:	797a      	ldrb	r2, [r7, #5]
 800dc72:	793b      	ldrb	r3, [r7, #4]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d901      	bls.n	800dc7c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e002      	b.n	800dc82 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e000      	b.n	800dc82 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800dc80:	2300      	movs	r3, #0
    }
  }
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bc90      	pop	{r4, r7}
 800dc8a:	4770      	bx	lr

0800dc8c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	4608      	mov	r0, r1
 800dc96:	4611      	mov	r1, r2
 800dc98:	461a      	mov	r2, r3
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	70fb      	strb	r3, [r7, #3]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	70bb      	strb	r3, [r7, #2]
 800dca2:	4613      	mov	r3, r2
 800dca4:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800dcb2:	7c3b      	ldrb	r3, [r7, #16]
 800dcb4:	78ba      	ldrb	r2, [r7, #2]
 800dcb6:	f7ff ffb6 	bl	800dc26 <u8g2_is_intersection_decision_tree>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d101      	bne.n	800dcc4 <u8g2_IsIntersection+0x38>
    return 0; 
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	e00a      	b.n	800dcda <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800dcd0:	787b      	ldrb	r3, [r7, #1]
 800dcd2:	78fa      	ldrb	r2, [r7, #3]
 800dcd4:	f7ff ffa7 	bl	800dc26 <u8g2_is_intersection_decision_tree>
 800dcd8:	4603      	mov	r3, r0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800dce2:	b480      	push	{r7}
 800dce4:	b087      	sub	sp, #28
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
 800dcea:	4608      	mov	r0, r1
 800dcec:	4611      	mov	r1, r2
 800dcee:	461a      	mov	r2, r3
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	70fb      	strb	r3, [r7, #3]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	70bb      	strb	r3, [r7, #2]
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800dcfc:	78bb      	ldrb	r3, [r7, #2]
 800dcfe:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800dd00:	7cfb      	ldrb	r3, [r7, #19]
 800dd02:	f003 0307 	and.w	r3, r3, #7
 800dd06:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800dd0c:	7c3a      	ldrb	r2, [r7, #16]
 800dd0e:	7cfb      	ldrb	r3, [r7, #19]
 800dd10:	fa02 f303 	lsl.w	r3, r2, r3
 800dd14:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d801      	bhi.n	800dd2c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800dd28:	7c3b      	ldrb	r3, [r7, #16]
 800dd2a:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d001      	beq.n	800dd3a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800dd36:	7c3b      	ldrb	r3, [r7, #16]
 800dd38:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800dd3a:	78bb      	ldrb	r3, [r7, #2]
 800dd3c:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800dd3e:	89fb      	ldrh	r3, [r7, #14]
 800dd40:	f023 0307 	bic.w	r3, r3, #7
 800dd44:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	7c1b      	ldrb	r3, [r3, #16]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	89fa      	ldrh	r2, [r7, #14]
 800dd50:	fb12 f303 	smulbb	r3, r2, r3
 800dd54:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd5a:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800dd5c:	89fb      	ldrh	r3, [r7, #14]
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	4413      	add	r3, r2
 800dd62:	617b      	str	r3, [r7, #20]
  ptr += x;
 800dd64:	78fb      	ldrb	r3, [r7, #3]
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	4413      	add	r3, r2
 800dd6a:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800dd6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d117      	bne.n	800dda4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	781a      	ldrb	r2, [r3, #0]
 800dd78:	7cbb      	ldrb	r3, [r7, #18]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	781a      	ldrb	r2, [r3, #0]
 800dd86:	7c7b      	ldrb	r3, [r7, #17]
 800dd88:	4053      	eors	r3, r2
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	701a      	strb	r2, [r3, #0]
	ptr++;
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	3301      	adds	r3, #1
 800dd94:	617b      	str	r3, [r7, #20]
	len--;
 800dd96:	787b      	ldrb	r3, [r7, #1]
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800dd9c:	787b      	ldrb	r3, [r7, #1]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e8      	bne.n	800dd74 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800dda2:	e039      	b.n	800de18 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	781a      	ldrb	r2, [r3, #0]
 800dda8:	7cbb      	ldrb	r3, [r7, #18]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	781a      	ldrb	r2, [r3, #0]
 800ddb6:	7c7b      	ldrb	r3, [r7, #17]
 800ddb8:	4053      	eors	r3, r2
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800ddc0:	7cfb      	ldrb	r3, [r7, #19]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800ddc6:	7cfb      	ldrb	r3, [r7, #19]
 800ddc8:	f003 0307 	and.w	r3, r3, #7
 800ddcc:	74fb      	strb	r3, [r7, #19]
      len--;
 800ddce:	787b      	ldrb	r3, [r7, #1]
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800ddd4:	7cfb      	ldrb	r3, [r7, #19]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d115      	bne.n	800de06 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dde0:	461a      	mov	r2, r3
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	4413      	add	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d801      	bhi.n	800ddf6 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d008      	beq.n	800de12 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800de00:	2301      	movs	r3, #1
 800de02:	747b      	strb	r3, [r7, #17]
 800de04:	e005      	b.n	800de12 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800de06:	7cbb      	ldrb	r3, [r7, #18]
 800de08:	005b      	lsls	r3, r3, #1
 800de0a:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800de0c:	7c7b      	ldrb	r3, [r7, #17]
 800de0e:	005b      	lsls	r3, r3, #1
 800de10:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800de12:	787b      	ldrb	r3, [r7, #1]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1c5      	bne.n	800dda4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800de18:	bf00      	nop
 800de1a:	371c      	adds	r7, #28
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	22ff      	movs	r2, #255	; 0xff
 800de40:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	22ff      	movs	r2, #255	; 0xff
 800de48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	4798      	blx	r3
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b084      	sub	sp, #16
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	603b      	str	r3, [r7, #0]
 800de6a:	4613      	mov	r3, r2
 800de6c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	68ba      	ldr	r2, [r7, #8]
 800de7e:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	79fa      	ldrb	r2, [r7, #7]
 800de84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7ff ffaf 	bl	800de24 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f7ff fd94 	bl	800d9f4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800ded4:	bf00      	nop
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800def0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800def2:	7bfb      	ldrb	r3, [r7, #15]
 800def4:	00db      	lsls	r3, r3, #3
 800def6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	7bfa      	ldrb	r2, [r7, #15]
 800defc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	7c1b      	ldrb	r3, [r3, #16]
 800df04:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800df06:	7bfb      	ldrb	r3, [r7, #15]
 800df08:	2b1f      	cmp	r3, #31
 800df0a:	d901      	bls.n	800df10 <u8g2_update_dimension_common+0x34>
    t = 31;
 800df0c:	231f      	movs	r3, #31
 800df0e:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	7bfa      	ldrb	r2, [r7, #15]
 800df1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df24:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	7bfa      	ldrb	r2, [r7, #15]
 800df30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df3a:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800df44:	4413      	add	r3, r2
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	7c52      	ldrb	r2, [r2, #17]
 800df4a:	4293      	cmp	r3, r2
 800df4c:	dd06      	ble.n	800df5c <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	7c5a      	ldrb	r2, [r3, #17]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	00db      	lsls	r3, r3, #3
 800df60:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800df80:	7bfb      	ldrb	r3, [r7, #15]
 800df82:	4413      	add	r3, r2
 800df84:	b2da      	uxtb	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	22f0      	movs	r2, #240	; 0xf0
 800df90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	8a9b      	ldrh	r3, [r3, #20]
 800df98:	2bf0      	cmp	r3, #240	; 0xf0
 800df9a:	d805      	bhi.n	800dfa8 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	8a9b      	ldrh	r3, [r3, #20]
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	8adb      	ldrh	r3, [r3, #22]
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800dfb4:	bf00      	nop
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7ff fe51 	bl	800dc8c <u8g2_IsIntersection>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d104      	bne.n	800dffa <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800dff8:	e03b      	b.n	800e072 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e00e:	429a      	cmp	r2, r3
 800e010:	d205      	bcs.n	800e01e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d905      	bls.n	800e03a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e046:	429a      	cmp	r2, r3
 800e048:	d205      	bcs.n	800e056 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e062:	429a      	cmp	r2, r3
 800e064:	d905      	bls.n	800e072 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800e072:	bf00      	nop
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b082      	sub	sp, #8
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff ff2a 	bl	800dedc <u8g2_update_dimension_common>
}
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff ff7b 	bl	800dfc0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800e0ca:	bf00      	nop
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af02      	add	r7, sp, #8
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	4608      	mov	r0, r1
 800e0dc:	4611      	mov	r1, r2
 800e0de:	461a      	mov	r2, r3
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	70fb      	strb	r3, [r7, #3]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70bb      	strb	r3, [r7, #2]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800e0ec:	7878      	ldrb	r0, [r7, #1]
 800e0ee:	78ba      	ldrb	r2, [r7, #2]
 800e0f0:	78f9      	ldrb	r1, [r7, #3]
 800e0f2:	7c3b      	ldrb	r3, [r7, #16]
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fcd9 	bl	800dab0 <u8g2_draw_hv_line_2dir>
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800e106:	b590      	push	{r4, r7, lr}
 800e108:	b083      	sub	sp, #12
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	460b      	mov	r3, r1
 800e110:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	691c      	ldr	r4, [r3, #16]
 800e116:	78fa      	ldrb	r2, [r7, #3]
 800e118:	2300      	movs	r3, #0
 800e11a:	2120      	movs	r1, #32
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	47a0      	blx	r4
 800e120:	4603      	mov	r3, r0
}
 800e122:	4618      	mov	r0, r3
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	bd90      	pop	{r4, r7, pc}

0800e12a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800e12a:	b590      	push	{r4, r7, lr}
 800e12c:	b085      	sub	sp, #20
 800e12e:	af00      	add	r7, sp, #0
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	460b      	mov	r3, r1
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	691c      	ldr	r4, [r3, #16]
 800e13c:	7afa      	ldrb	r2, [r7, #11]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2117      	movs	r1, #23
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	47a0      	blx	r4
 800e146:	4603      	mov	r3, r0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3714      	adds	r7, #20
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd90      	pop	{r4, r7, pc}

0800e150 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800e15c:	1cfb      	adds	r3, r7, #3
 800e15e:	461a      	mov	r2, r3
 800e160:	2101      	movs	r1, #1
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7ff ffe1 	bl	800e12a <u8x8_byte_SendBytes>
 800e168:	4603      	mov	r3, r0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800e172:	b590      	push	{r4, r7, lr}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	460b      	mov	r3, r1
 800e17c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	68dc      	ldr	r4, [r3, #12]
 800e182:	78fa      	ldrb	r2, [r7, #3]
 800e184:	2300      	movs	r3, #0
 800e186:	2115      	movs	r1, #21
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	47a0      	blx	r4
 800e18c:	4603      	mov	r3, r0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	370c      	adds	r7, #12
 800e192:	46bd      	mov	sp, r7
 800e194:	bd90      	pop	{r4, r7, pc}

0800e196 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800e196:	b590      	push	{r4, r7, lr}
 800e198:	b083      	sub	sp, #12
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68dc      	ldr	r4, [r3, #12]
 800e1a6:	78fa      	ldrb	r2, [r7, #3]
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	2116      	movs	r1, #22
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	47a0      	blx	r4
 800e1b0:	4603      	mov	r3, r0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd90      	pop	{r4, r7, pc}

0800e1ba <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800e1ba:	b590      	push	{r4, r7, lr}
 800e1bc:	b085      	sub	sp, #20
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	60f8      	str	r0, [r7, #12]
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	607a      	str	r2, [r7, #4]
 800e1c6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	68dc      	ldr	r4, [r3, #12]
 800e1cc:	7afa      	ldrb	r2, [r7, #11]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2117      	movs	r1, #23
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	47a0      	blx	r4
 800e1d6:	4603      	mov	r3, r0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd90      	pop	{r4, r7, pc}

0800e1e0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800e1e0:	b590      	push	{r4, r7, lr}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	68dc      	ldr	r4, [r3, #12]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	2118      	movs	r1, #24
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	47a0      	blx	r4
 800e1f6:	4603      	mov	r3, r0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd90      	pop	{r4, r7, pc}

0800e200 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800e200:	b590      	push	{r4, r7, lr}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	68dc      	ldr	r4, [r3, #12]
 800e20c:	2300      	movs	r3, #0
 800e20e:	2200      	movs	r2, #0
 800e210:	2119      	movs	r1, #25
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	47a0      	blx	r4
 800e216:	4603      	mov	r3, r0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd90      	pop	{r4, r7, pc}

0800e220 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800e220:	b590      	push	{r4, r7, lr}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	73fb      	strb	r3, [r7, #15]
    data++;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800e236:	7bfb      	ldrb	r3, [r7, #15]
 800e238:	2bfe      	cmp	r3, #254	; 0xfe
 800e23a:	d031      	beq.n	800e2a0 <u8x8_cad_SendSequence+0x80>
 800e23c:	2bfe      	cmp	r3, #254	; 0xfe
 800e23e:	dc3d      	bgt.n	800e2bc <u8x8_cad_SendSequence+0x9c>
 800e240:	2b19      	cmp	r3, #25
 800e242:	dc3b      	bgt.n	800e2bc <u8x8_cad_SendSequence+0x9c>
 800e244:	2b18      	cmp	r3, #24
 800e246:	da23      	bge.n	800e290 <u8x8_cad_SendSequence+0x70>
 800e248:	2b16      	cmp	r3, #22
 800e24a:	dc02      	bgt.n	800e252 <u8x8_cad_SendSequence+0x32>
 800e24c:	2b15      	cmp	r3, #21
 800e24e:	da03      	bge.n	800e258 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800e250:	e034      	b.n	800e2bc <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800e252:	2b17      	cmp	r3, #23
 800e254:	d00e      	beq.n	800e274 <u8x8_cad_SendSequence+0x54>
	return;
 800e256:	e031      	b.n	800e2bc <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	68dc      	ldr	r4, [r3, #12]
 800e262:	7bba      	ldrb	r2, [r7, #14]
 800e264:	7bf9      	ldrb	r1, [r7, #15]
 800e266:	2300      	movs	r3, #0
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	47a0      	blx	r4
	  data++;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	3301      	adds	r3, #1
 800e270:	603b      	str	r3, [r7, #0]
	  break;
 800e272:	e022      	b.n	800e2ba <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800e27a:	f107 030e 	add.w	r3, r7, #14
 800e27e:	461a      	mov	r2, r3
 800e280:	2101      	movs	r1, #1
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff ff99 	bl	800e1ba <u8x8_cad_SendData>
	  data++;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	3301      	adds	r3, #1
 800e28c:	603b      	str	r3, [r7, #0]
	  break;
 800e28e:	e014      	b.n	800e2ba <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68dc      	ldr	r4, [r3, #12]
 800e294:	7bf9      	ldrb	r1, [r7, #15]
 800e296:	2300      	movs	r3, #0
 800e298:	2200      	movs	r2, #0
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	47a0      	blx	r4
	  break;
 800e29e:	e00c      	b.n	800e2ba <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800e2a6:	7bbb      	ldrb	r3, [r7, #14]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	2129      	movs	r1, #41	; 0x29
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 f9d8 	bl	800e662 <u8x8_gpio_call>
	  data++;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	603b      	str	r3, [r7, #0]
	  break;
 800e2b8:	bf00      	nop
    cmd = *data;
 800e2ba:	e7b6      	b.n	800e22a <u8x8_cad_SendSequence+0xa>
	return;
 800e2bc:	bf00      	nop
    }
  }
}
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd90      	pop	{r4, r7, pc}

0800e2c4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e2c4:	b590      	push	{r4, r7, lr}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	607b      	str	r3, [r7, #4]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	72fb      	strb	r3, [r7, #11]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800e2d6:	7afb      	ldrb	r3, [r7, #11]
 800e2d8:	3b14      	subs	r3, #20
 800e2da:	2b05      	cmp	r3, #5
 800e2dc:	d82f      	bhi.n	800e33e <u8x8_cad_001+0x7a>
 800e2de:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <u8x8_cad_001+0x20>)
 800e2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e4:	0800e32d 	.word	0x0800e32d
 800e2e8:	0800e2fd 	.word	0x0800e2fd
 800e2ec:	0800e311 	.word	0x0800e311
 800e2f0:	0800e325 	.word	0x0800e325
 800e2f4:	0800e32d 	.word	0x0800e32d
 800e2f8:	0800e32d 	.word	0x0800e32d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f7ff ff01 	bl	800e106 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800e304:	7abb      	ldrb	r3, [r7, #10]
 800e306:	4619      	mov	r1, r3
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff ff21 	bl	800e150 <u8x8_byte_SendByte>
      break;
 800e30e:	e018      	b.n	800e342 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800e310:	2100      	movs	r1, #0
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7ff fef7 	bl	800e106 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800e318:	7abb      	ldrb	r3, [r7, #10]
 800e31a:	4619      	mov	r1, r3
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f7ff ff17 	bl	800e150 <u8x8_byte_SendByte>
      break;
 800e322:	e00e      	b.n	800e342 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800e324:	2101      	movs	r1, #1
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f7ff feed 	bl	800e106 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	691c      	ldr	r4, [r3, #16]
 800e330:	7aba      	ldrb	r2, [r7, #10]
 800e332:	7af9      	ldrb	r1, [r7, #11]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	47a0      	blx	r4
 800e33a:	4603      	mov	r3, r0
 800e33c:	e002      	b.n	800e344 <u8x8_cad_001+0x80>
    default:
      return 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	e000      	b.n	800e344 <u8x8_cad_001+0x80>
  }
  return 1;
 800e342:	2301      	movs	r3, #1
}
 800e344:	4618      	mov	r0, r3
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd90      	pop	{r4, r7, pc}

0800e34c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	607b      	str	r3, [r7, #4]
 800e356:	460b      	mov	r3, r1
 800e358:	72fb      	strb	r3, [r7, #11]
 800e35a:	4613      	mov	r3, r2
 800e35c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800e35e:	7afb      	ldrb	r3, [r7, #11]
 800e360:	3b0b      	subs	r3, #11
 800e362:	2b04      	cmp	r3, #4
 800e364:	f200 808a 	bhi.w	800e47c <u8x8_d_ssd1306_sh1106_generic+0x130>
 800e368:	a201      	add	r2, pc, #4	; (adr r2, 800e370 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800e36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e36e:	bf00      	nop
 800e370:	0800e385 	.word	0x0800e385
 800e374:	0800e47d 	.word	0x0800e47d
 800e378:	0800e39f 	.word	0x0800e39f
 800e37c:	0800e3d1 	.word	0x0800e3d1
 800e380:	0800e3f1 	.word	0x0800e3f1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800e384:	7abb      	ldrb	r3, [r7, #10]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d104      	bne.n	800e394 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800e38a:	4940      	ldr	r1, [pc, #256]	; (800e48c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f7ff ff47 	bl	800e220 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800e392:	e075      	b.n	800e480 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800e394:	493e      	ldr	r1, [pc, #248]	; (800e490 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f7ff ff42 	bl	800e220 <u8x8_cad_SendSequence>
      break;
 800e39c:	e070      	b.n	800e480 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800e39e:	7abb      	ldrb	r3, [r7, #10]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10a      	bne.n	800e3ba <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800e3a4:	493b      	ldr	r1, [pc, #236]	; (800e494 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff ff3a 	bl	800e220 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	7c9a      	ldrb	r2, [r3, #18]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800e3b8:	e062      	b.n	800e480 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800e3ba:	4937      	ldr	r1, [pc, #220]	; (800e498 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f7ff ff2f 	bl	800e220 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	7cda      	ldrb	r2, [r3, #19]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800e3ce:	e057      	b.n	800e480 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f7ff ff05 	bl	800e1e0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800e3d6:	2181      	movs	r1, #129	; 0x81
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f7ff feca 	bl	800e172 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800e3de:	7abb      	ldrb	r3, [r7, #10]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f7ff fed7 	bl	800e196 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7ff ff09 	bl	800e200 <u8x8_cad_EndTransfer>
      break;
 800e3ee:	e047      	b.n	800e480 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7ff fef5 	bl	800e1e0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	795b      	ldrb	r3, [r3, #5]
 800e3fa:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800e3fc:	7dfb      	ldrb	r3, [r7, #23]
 800e3fe:	00db      	lsls	r3, r3, #3
 800e400:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800e408:	7dfb      	ldrb	r3, [r7, #23]
 800e40a:	4413      	add	r3, r2
 800e40c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800e40e:	2140      	movs	r1, #64	; 0x40
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f7ff feae 	bl	800e172 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800e416:	7dfb      	ldrb	r3, [r7, #23]
 800e418:	091b      	lsrs	r3, r3, #4
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	f043 0310 	orr.w	r3, r3, #16
 800e420:	b2db      	uxtb	r3, r3
 800e422:	4619      	mov	r1, r3
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f7ff fea4 	bl	800e172 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
 800e42c:	f003 030f 	and.w	r3, r3, #15
 800e430:	b2db      	uxtb	r3, r3
 800e432:	4619      	mov	r1, r3
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f7ff feae 	bl	800e196 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	799b      	ldrb	r3, [r3, #6]
 800e43e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800e442:	b2db      	uxtb	r3, r3
 800e444:	4619      	mov	r1, r3
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f7ff fea5 	bl	800e196 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	791b      	ldrb	r3, [r3, #4]
 800e450:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800e458:	7dbb      	ldrb	r3, [r7, #22]
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	693a      	ldr	r2, [r7, #16]
 800e460:	4619      	mov	r1, r3
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f7ff fea9 	bl	800e1ba <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800e468:	7abb      	ldrb	r3, [r7, #10]
 800e46a:	3b01      	subs	r3, #1
 800e46c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800e46e:	7abb      	ldrb	r3, [r7, #10]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1eb      	bne.n	800e44c <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f7ff fec3 	bl	800e200 <u8x8_cad_EndTransfer>
      break;
 800e47a:	e001      	b.n	800e480 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800e47c:	2300      	movs	r3, #0
 800e47e:	e000      	b.n	800e482 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800e480:	2301      	movs	r3, #1
}
 800e482:	4618      	mov	r0, r3
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	0801424c 	.word	0x0801424c
 800e490:	08014254 	.word	0x08014254
 800e494:	0801425c 	.word	0x0801425c
 800e498:	08014264 	.word	0x08014264

0800e49c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	607b      	str	r3, [r7, #4]
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	72fb      	strb	r3, [r7, #11]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800e4ae:	7aba      	ldrb	r2, [r7, #10]
 800e4b0:	7af9      	ldrb	r1, [r7, #11]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f7ff ff49 	bl	800e34c <u8x8_d_ssd1306_sh1106_generic>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e014      	b.n	800e4ee <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800e4c4:	7afb      	ldrb	r3, [r7, #11]
 800e4c6:	2b09      	cmp	r3, #9
 800e4c8:	d009      	beq.n	800e4de <u8x8_d_ssd1306_128x64_noname+0x42>
 800e4ca:	2b0a      	cmp	r3, #10
 800e4cc:	d10c      	bne.n	800e4e8 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f000 f82a 	bl	800e528 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800e4d4:	4908      	ldr	r1, [pc, #32]	; (800e4f8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f7ff fea2 	bl	800e220 <u8x8_cad_SendSequence>
      break;
 800e4dc:	e006      	b.n	800e4ec <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800e4de:	4907      	ldr	r1, [pc, #28]	; (800e4fc <u8x8_d_ssd1306_128x64_noname+0x60>)
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f000 f80d 	bl	800e500 <u8x8_d_helper_display_setup_memory>
      break;
 800e4e6:	e001      	b.n	800e4ec <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	e000      	b.n	800e4ee <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800e4ec:	2301      	movs	r3, #1
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	08014214 	.word	0x08014214
 800e4fc:	0801426c 	.word	0x0801426c

0800e500 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	7c9a      	ldrb	r2, [r3, #18]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800e528:	b590      	push	{r4, r7, lr}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	695c      	ldr	r4, [r3, #20]
 800e534:	2300      	movs	r3, #0
 800e536:	2200      	movs	r2, #0
 800e538:	2128      	movs	r1, #40	; 0x28
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	68dc      	ldr	r4, [r3, #12]
 800e542:	2300      	movs	r3, #0
 800e544:	2200      	movs	r2, #0
 800e546:	2114      	movs	r1, #20
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800e54c:	2201      	movs	r2, #1
 800e54e:	214b      	movs	r1, #75	; 0x4b
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 f886 	bl	800e662 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	791b      	ldrb	r3, [r3, #4]
 800e55c:	461a      	mov	r2, r3
 800e55e:	2129      	movs	r1, #41	; 0x29
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f87e 	bl	800e662 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800e566:	2200      	movs	r2, #0
 800e568:	214b      	movs	r1, #75	; 0x4b
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f879 	bl	800e662 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	791b      	ldrb	r3, [r3, #4]
 800e576:	461a      	mov	r2, r3
 800e578:	2129      	movs	r1, #41	; 0x29
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f871 	bl	800e662 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800e580:	2201      	movs	r2, #1
 800e582:	214b      	movs	r1, #75	; 0x4b
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f86c 	bl	800e662 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	795b      	ldrb	r3, [r3, #5]
 800e590:	461a      	mov	r2, r3
 800e592:	2129      	movs	r1, #41	; 0x29
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 f864 	bl	800e662 <u8x8_gpio_call>
}    
 800e59a:	bf00      	nop
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd90      	pop	{r4, r7, pc}

0800e5a2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800e5a2:	b590      	push	{r4, r7, lr}
 800e5a4:	b085      	sub	sp, #20
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
 800e5aa:	4608      	mov	r0, r1
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	70fb      	strb	r3, [r7, #3]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	70bb      	strb	r3, [r7, #2]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800e5bc:	78fb      	ldrb	r3, [r7, #3]
 800e5be:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800e5c0:	78bb      	ldrb	r3, [r7, #2]
 800e5c2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800e5c4:	787b      	ldrb	r3, [r7, #1]
 800e5c6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800e5c8:	6a3b      	ldr	r3, [r7, #32]
 800e5ca:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	689c      	ldr	r4, [r3, #8]
 800e5d0:	f107 0308 	add.w	r3, r7, #8
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	210f      	movs	r1, #15
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	47a0      	blx	r4
 800e5dc:	4603      	mov	r3, r0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3714      	adds	r7, #20
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd90      	pop	{r4, r7, pc}

0800e5e6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800e5e6:	b590      	push	{r4, r7, lr}
 800e5e8:	b083      	sub	sp, #12
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	689c      	ldr	r4, [r3, #8]
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	2109      	movs	r1, #9
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	47a0      	blx	r4
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	bd90      	pop	{r4, r7, pc}

0800e604 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800e604:	b590      	push	{r4, r7, lr}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	689c      	ldr	r4, [r3, #8]
 800e610:	2300      	movs	r3, #0
 800e612:	2200      	movs	r2, #0
 800e614:	210a      	movs	r1, #10
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	47a0      	blx	r4
}
 800e61a:	bf00      	nop
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd90      	pop	{r4, r7, pc}

0800e622 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800e622:	b590      	push	{r4, r7, lr}
 800e624:	b083      	sub	sp, #12
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
 800e62a:	460b      	mov	r3, r1
 800e62c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	689c      	ldr	r4, [r3, #8]
 800e632:	78fa      	ldrb	r2, [r7, #3]
 800e634:	2300      	movs	r3, #0
 800e636:	210b      	movs	r1, #11
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	47a0      	blx	r4
}
 800e63c:	bf00      	nop
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	bd90      	pop	{r4, r7, pc}

0800e644 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800e644:	b590      	push	{r4, r7, lr}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	689c      	ldr	r4, [r3, #8]
 800e650:	2300      	movs	r3, #0
 800e652:	2200      	movs	r2, #0
 800e654:	2110      	movs	r1, #16
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	47a0      	blx	r4
}
 800e65a:	bf00      	nop
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd90      	pop	{r4, r7, pc}

0800e662 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800e662:	b590      	push	{r4, r7, lr}
 800e664:	b083      	sub	sp, #12
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	460b      	mov	r3, r1
 800e66c:	70fb      	strb	r3, [r7, #3]
 800e66e:	4613      	mov	r3, r2
 800e670:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	695c      	ldr	r4, [r3, #20]
 800e676:	78ba      	ldrb	r2, [r7, #2]
 800e678:	78f9      	ldrb	r1, [r7, #3]
 800e67a:	2300      	movs	r3, #0
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	47a0      	blx	r4
}
 800e680:	bf00      	nop
 800e682:	370c      	adds	r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	bd90      	pop	{r4, r7, pc}

0800e688 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800e688:	b480      	push	{r7}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	607b      	str	r3, [r7, #4]
 800e692:	460b      	mov	r3, r1
 800e694:	72fb      	strb	r3, [r7, #11]
 800e696:	4613      	mov	r3, r2
 800e698:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a13      	ldr	r2, [pc, #76]	; (800e708 <u8x8_SetupDefaults+0x60>)
 800e6ba:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a12      	ldr	r2, [pc, #72]	; (800e708 <u8x8_SetupDefaults+0x60>)
 800e6c0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4a10      	ldr	r2, [pc, #64]	; (800e708 <u8x8_SetupDefaults+0x60>)
 800e6c6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a0f      	ldr	r2, [pc, #60]	; (800e708 <u8x8_SetupDefaults+0x60>)
 800e6cc:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	22ff      	movs	r2, #255	; 0xff
 800e6f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	22ff      	movs	r2, #255	; 0xff
 800e6f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr
 800e708:	0800e689 	.word	0x0800e689

0800e70c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f7ff ffc4 	bl	800e6a8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	69ba      	ldr	r2, [r7, #24]
 800e736:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f7ff ff54 	bl	800e5e6 <u8x8_SetupMemory>
}
 800e73e:	bf00      	nop
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <LL_ADC_REG_SetSequencerRanks>:
{
 800e746:	b480      	push	{r7}
 800e748:	b089      	sub	sp, #36	; 0x24
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	60f8      	str	r0, [r7, #12]
 800e74e:	60b9      	str	r1, [r7, #8]
 800e750:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	332c      	adds	r3, #44	; 0x2c
 800e756:	4619      	mov	r1, r3
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e75e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800e762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e764:	69ba      	ldr	r2, [r7, #24]
 800e766:	fa92 f2a2 	rbit	r2, r2
 800e76a:	617a      	str	r2, [r7, #20]
  return result;
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	fab2 f282 	clz	r2, r2
 800e772:	b2d2      	uxtb	r2, r2
 800e774:	40d3      	lsrs	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	440b      	add	r3, r1
 800e77a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	f003 031f 	and.w	r3, r3, #31
 800e786:	211f      	movs	r1, #31
 800e788:	fa01 f303 	lsl.w	r3, r1, r3
 800e78c:	43db      	mvns	r3, r3
 800e78e:	401a      	ands	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f003 011f 	and.w	r1, r3, #31
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	f003 031f 	and.w	r3, r3, #31
 800e79c:	fa01 f303 	lsl.w	r3, r1, r3
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	601a      	str	r2, [r3, #0]
}
 800e7a6:	bf00      	nop
 800e7a8:	3724      	adds	r7, #36	; 0x24
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b083      	sub	sp, #12
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	609a      	str	r2, [r3, #8]
}
 800e7cc:	bf00      	nop
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <LL_ADC_SetChannelSamplingTime>:
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b08d      	sub	sp, #52	; 0x34
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	330c      	adds	r3, #12
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e7f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e7f6:	69ba      	ldr	r2, [r7, #24]
 800e7f8:	fa92 f2a2 	rbit	r2, r2
 800e7fc:	617a      	str	r2, [r7, #20]
  return result;
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	fab2 f282 	clz	r2, r2
 800e804:	b2d2      	uxtb	r2, r2
 800e806:	40d3      	lsrs	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	440b      	add	r3, r1
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800e818:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800e81c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e81e:	6a39      	ldr	r1, [r7, #32]
 800e820:	fa91 f1a1 	rbit	r1, r1
 800e824:	61f9      	str	r1, [r7, #28]
  return result;
 800e826:	69f9      	ldr	r1, [r7, #28]
 800e828:	fab1 f181 	clz	r1, r1
 800e82c:	b2c9      	uxtb	r1, r1
 800e82e:	40cb      	lsrs	r3, r1
 800e830:	2107      	movs	r1, #7
 800e832:	fa01 f303 	lsl.w	r3, r1, r3
 800e836:	43db      	mvns	r3, r3
 800e838:	401a      	ands	r2, r3
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800e840:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800e844:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e848:	fa91 f1a1 	rbit	r1, r1
 800e84c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800e84e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e850:	fab1 f181 	clz	r1, r1
 800e854:	b2c9      	uxtb	r1, r1
 800e856:	40cb      	lsrs	r3, r1
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	fa01 f303 	lsl.w	r3, r1, r3
 800e85e:	431a      	orrs	r2, r3
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	601a      	str	r2, [r3, #0]
}
 800e864:	bf00      	nop
 800e866:	3734      	adds	r7, #52	; 0x34
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <LL_ADC_Enable>:
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	f043 0201 	orr.w	r2, r3, #1
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	609a      	str	r2, [r3, #8]
}
 800e884:	bf00      	nop
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	609a      	str	r2, [r3, #8]
}
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8bc:	b29b      	uxth	r3, r3
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	370c      	adds	r7, #12
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 0302 	and.w	r3, r3, #2
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	bf0c      	ite	eq
 800e8de:	2301      	moveq	r3, #1
 800e8e0:	2300      	movne	r3, #0
 800e8e2:	b2db      	uxtb	r3, r3
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <adc_init>:

#define ADC1_CONVERSION_TIMEOUT 1000

static void adc1_init(void);

void adc_init(AdcID id) {
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d108      	bne.n	800e912 <adc_init+0x22>
	case AdcId1:
		adc1_init();
 800e900:	f000 f85c 	bl	800e9bc <adc1_init>
		LL_ADC_Enable(ADC1);
 800e904:	4808      	ldr	r0, [pc, #32]	; (800e928 <adc_init+0x38>)
 800e906:	f7ff ffb3 	bl	800e870 <LL_ADC_Enable>
		hal_cli_printf("adc1 init");
 800e90a:	4808      	ldr	r0, [pc, #32]	; (800e92c <adc_init+0x3c>)
 800e90c:	f000 f99e 	bl	800ec4c <hal_cli_printf>
		break;
 800e910:	e005      	b.n	800e91e <adc_init+0x2e>

	default:
		hal_cli_printf("adc%d not exist",id);
 800e912:	79fb      	ldrb	r3, [r7, #7]
 800e914:	4619      	mov	r1, r3
 800e916:	4806      	ldr	r0, [pc, #24]	; (800e930 <adc_init+0x40>)
 800e918:	f000 f998 	bl	800ec4c <hal_cli_printf>
		break;
 800e91c:	bf00      	nop
	}
}
 800e91e:	bf00      	nop
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	40012000 	.word	0x40012000
 800e92c:	08013a28 	.word	0x08013a28
 800e930:	08013a34 	.word	0x08013a34

0800e934 <hal_adc_getdata>:

bool hal_adc_getdata(AdcID id, uint32_t* data) {
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	4603      	mov	r3, r0
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	73fb      	strb	r3, [r7, #15]
	coretex_timer timer;
	timer = hal_get_delay_timer(ADC1_CONVERSION_TIMEOUT);
 800e940:	463b      	mov	r3, r7
 800e942:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e946:	4618      	mov	r0, r3
 800e948:	f000 fc62 	bl	800f210 <hal_get_delay_timer>
 800e94c:	f107 0310 	add.w	r3, r7, #16
 800e950:	463a      	mov	r2, r7
 800e952:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e956:	e883 0003 	stmia.w	r3, {r0, r1}

	switch(id) {
 800e95a:	7bfb      	ldrb	r3, [r7, #15]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d11d      	bne.n	800e99c <hal_adc_getdata+0x68>
		case AdcId1:
			LL_ADC_REG_StartConversionSWStart(ADC1);
 800e960:	4813      	ldr	r0, [pc, #76]	; (800e9b0 <hal_adc_getdata+0x7c>)
 800e962:	f7ff ff95 	bl	800e890 <LL_ADC_REG_StartConversionSWStart>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800e966:	e009      	b.n	800e97c <hal_adc_getdata+0x48>
				if(hal_delay_timer_is_expired(&timer))
 800e968:	f107 0310 	add.w	r3, r7, #16
 800e96c:	4618      	mov	r0, r3
 800e96e:	f000 fc75 	bl	800f25c <hal_delay_timer_is_expired>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <hal_adc_getdata+0x48>
					return false;
 800e978:	2300      	movs	r3, #0
 800e97a:	e015      	b.n	800e9a8 <hal_adc_getdata+0x74>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 800e97c:	480c      	ldr	r0, [pc, #48]	; (800e9b0 <hal_adc_getdata+0x7c>)
 800e97e:	f7ff ffa4 	bl	800e8ca <LL_ADC_IsActiveFlag_EOCS>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d0ef      	beq.n	800e968 <hal_adc_getdata+0x34>
			}
			*data = LL_ADC_REG_ReadConversionData12(ADC1);
 800e988:	4809      	ldr	r0, [pc, #36]	; (800e9b0 <hal_adc_getdata+0x7c>)
 800e98a:	f7ff ff91 	bl	800e8b0 <LL_ADC_REG_ReadConversionData12>
 800e98e:	4603      	mov	r3, r0
 800e990:	461a      	mov	r2, r3
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	601a      	str	r2, [r3, #0]
			break;
 800e996:	bf00      	nop
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
			return false;
			break;
	}

	return true;
 800e998:	2301      	movs	r3, #1
 800e99a:	e005      	b.n	800e9a8 <hal_adc_getdata+0x74>
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
 800e99c:	2229      	movs	r2, #41	; 0x29
 800e99e:	4905      	ldr	r1, [pc, #20]	; (800e9b4 <hal_adc_getdata+0x80>)
 800e9a0:	4805      	ldr	r0, [pc, #20]	; (800e9b8 <hal_adc_getdata+0x84>)
 800e9a2:	f000 f953 	bl	800ec4c <hal_cli_printf>
			return false;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	40012000 	.word	0x40012000
 800e9b4:	08013a44 	.word	0x08013a44
 800e9b8:	08013a54 	.word	0x08013a54

0800e9bc <adc1_init>:

static void adc1_init(void)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08c      	sub	sp, #48	; 0x30
 800e9c0:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800e9c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	605a      	str	r2, [r3, #4]
 800e9cc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800e9ce:	f107 0310 	add.w	r3, r7, #16
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	605a      	str	r2, [r3, #4]
 800e9d8:	609a      	str	r2, [r3, #8]
 800e9da:	60da      	str	r2, [r3, #12]
 800e9dc:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800e9de:	463b      	mov	r3, r7
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	605a      	str	r2, [r3, #4]
 800e9e6:	609a      	str	r2, [r3, #8]
 800e9e8:	60da      	str	r2, [r3, #12]

  hal_gpio_init(&gpio_adc1_channel7, GpioModeAnalog, GpioPullNo, GpioSpeedFreqLow);
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	2105      	movs	r1, #5
 800e9f0:	481e      	ldr	r0, [pc, #120]	; (800ea6c <adc1_init+0xb0>)
 800e9f2:	f000 fe81 	bl	800f6f8 <hal_gpio_init>

  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800ea02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea06:	4619      	mov	r1, r3
 800ea08:	4819      	ldr	r0, [pc, #100]	; (800ea70 <adc1_init+0xb4>)
 800ea0a:	f7f4 fe65 	bl	80036d8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800ea12:	2300      	movs	r3, #0
 800ea14:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800ea16:	2300      	movs	r3, #0
 800ea18:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800ea22:	f107 0310 	add.w	r3, r7, #16
 800ea26:	4619      	mov	r1, r3
 800ea28:	4811      	ldr	r0, [pc, #68]	; (800ea70 <adc1_init+0xb4>)
 800ea2a:	f7f4 fe81 	bl	8003730 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 800ea2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ea32:	480f      	ldr	r0, [pc, #60]	; (800ea70 <adc1_init+0xb4>)
 800ea34:	f7ff febd 	bl	800e7b2 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800ea38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ea3c:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800ea42:	463b      	mov	r3, r7
 800ea44:	4619      	mov	r1, r3
 800ea46:	480b      	ldr	r0, [pc, #44]	; (800ea74 <adc1_init+0xb8>)
 800ea48:	f7f4 fdfe 	bl	8003648 <LL_ADC_CommonInit>


  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800ea4c:	4a0a      	ldr	r2, [pc, #40]	; (800ea78 <adc1_init+0xbc>)
 800ea4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea52:	4807      	ldr	r0, [pc, #28]	; (800ea70 <adc1_init+0xb4>)
 800ea54:	f7ff fe77 	bl	800e746 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 800ea58:	2200      	movs	r2, #0
 800ea5a:	4907      	ldr	r1, [pc, #28]	; (800ea78 <adc1_init+0xbc>)
 800ea5c:	4804      	ldr	r0, [pc, #16]	; (800ea70 <adc1_init+0xb4>)
 800ea5e:	f7ff febb 	bl	800e7d8 <LL_ADC_SetChannelSamplingTime>
}
 800ea62:	bf00      	nop
 800ea64:	3730      	adds	r7, #48	; 0x30
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	080142cc 	.word	0x080142cc
 800ea70:	40012000 	.word	0x40012000
 800ea74:	40012300 	.word	0x40012300
 800ea78:	03500007 	.word	0x03500007

0800ea7c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b089      	sub	sp, #36	; 0x24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	330c      	adds	r3, #12
 800ea88:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	e853 3f00 	ldrex	r3, [r3]
 800ea90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	f043 0310 	orr.w	r3, r3, #16
 800ea98:	61fb      	str	r3, [r7, #28]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	330c      	adds	r3, #12
 800ea9e:	69fa      	ldr	r2, [r7, #28]
 800eaa0:	61ba      	str	r2, [r7, #24]
 800eaa2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa4:	6979      	ldr	r1, [r7, #20]
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	e841 2300 	strex	r3, r2, [r1]
 800eaac:	613b      	str	r3, [r7, #16]
   return(result);
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1e7      	bne.n	800ea84 <LL_USART_EnableIT_IDLE+0x8>
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop
 800eab8:	3724      	adds	r7, #36	; 0x24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800eac2:	b480      	push	{r7}
 800eac4:	b089      	sub	sp, #36	; 0x24
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	3314      	adds	r3, #20
 800eace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	e853 3f00 	ldrex	r3, [r3]
 800ead6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eade:	61fb      	str	r3, [r7, #28]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	3314      	adds	r3, #20
 800eae4:	69fa      	ldr	r2, [r7, #28]
 800eae6:	61ba      	str	r2, [r7, #24]
 800eae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	6979      	ldr	r1, [r7, #20]
 800eaec:	69ba      	ldr	r2, [r7, #24]
 800eaee:	e841 2300 	strex	r3, r2, [r1]
 800eaf2:	613b      	str	r3, [r7, #16]
   return(result);
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1e7      	bne.n	800eaca <LL_USART_EnableDMAReq_RX+0x8>
}
 800eafa:	bf00      	nop
 800eafc:	bf00      	nop
 800eafe:	3724      	adds	r7, #36	; 0x24
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800eb12:	4a0c      	ldr	r2, [pc, #48]	; (800eb44 <LL_DMA_EnableStream+0x3c>)
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	4413      	add	r3, r2
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4413      	add	r3, r2
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4908      	ldr	r1, [pc, #32]	; (800eb44 <LL_DMA_EnableStream+0x3c>)
 800eb24:	683a      	ldr	r2, [r7, #0]
 800eb26:	440a      	add	r2, r1
 800eb28:	7812      	ldrb	r2, [r2, #0]
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	440a      	add	r2, r1
 800eb30:	f043 0301 	orr.w	r3, r3, #1
 800eb34:	6013      	str	r3, [r2, #0]
}
 800eb36:	bf00      	nop
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop
 800eb44:	08014284 	.word	0x08014284

0800eb48 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800eb54:	4a0d      	ldr	r2, [pc, #52]	; (800eb8c <LL_DMA_SetDataLength+0x44>)
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	4413      	add	r3, r2
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	4413      	add	r3, r2
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	0c1b      	lsrs	r3, r3, #16
 800eb66:	041b      	lsls	r3, r3, #16
 800eb68:	4908      	ldr	r1, [pc, #32]	; (800eb8c <LL_DMA_SetDataLength+0x44>)
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	440a      	add	r2, r1
 800eb6e:	7812      	ldrb	r2, [r2, #0]
 800eb70:	4611      	mov	r1, r2
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	440a      	add	r2, r1
 800eb76:	4611      	mov	r1, r2
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	604b      	str	r3, [r1, #4]
}
 800eb7e:	bf00      	nop
 800eb80:	3714      	adds	r7, #20
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	08014284 	.word	0x08014284

0800eb90 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b085      	sub	sp, #20
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	60b9      	str	r1, [r7, #8]
 800eb9a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800eb9c:	4a07      	ldr	r2, [pc, #28]	; (800ebbc <LL_DMA_SetMemoryAddress+0x2c>)
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	4413      	add	r3, r2
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	461a      	mov	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	4413      	add	r3, r2
 800ebaa:	461a      	mov	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	60d3      	str	r3, [r2, #12]
}
 800ebb0:	bf00      	nop
 800ebb2:	3714      	adds	r7, #20
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	08014284 	.word	0x08014284

0800ebc0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b085      	sub	sp, #20
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800ebcc:	4a07      	ldr	r2, [pc, #28]	; (800ebec <LL_DMA_SetPeriphAddress+0x2c>)
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	4413      	add	r3, r2
 800ebda:	461a      	mov	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6093      	str	r3, [r2, #8]
}
 800ebe0:	bf00      	nop
 800ebe2:	3714      	adds	r7, #20
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	08014284 	.word	0x08014284

0800ebf0 <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 800ebf6:	f7fb fe27 	bl	800a848 <xTaskGetTickCount>
 800ebfa:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4a10      	ldr	r2, [pc, #64]	; (800ec40 <print_boottime+0x50>)
 800ec00:	fba2 2303 	umull	r2, r3, r2, r3
 800ec04:	099b      	lsrs	r3, r3, #6
 800ec06:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4a0d      	ldr	r2, [pc, #52]	; (800ec40 <print_boottime+0x50>)
 800ec0c:	fba2 1203 	umull	r1, r2, r2, r3
 800ec10:	0992      	lsrs	r2, r2, #6
 800ec12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ec16:	fb01 f202 	mul.w	r2, r1, r2
 800ec1a:	1a9b      	subs	r3, r3, r2
 800ec1c:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	4908      	ldr	r1, [pc, #32]	; (800ec44 <print_boottime+0x54>)
 800ec24:	4808      	ldr	r0, [pc, #32]	; (800ec48 <print_boottime+0x58>)
 800ec26:	f004 f997 	bl	8012f58 <siprintf>
 800ec2a:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	461a      	mov	r2, r3
 800ec30:	4905      	ldr	r1, [pc, #20]	; (800ec48 <print_boottime+0x58>)
 800ec32:	2000      	movs	r0, #0
 800ec34:	f003 fe72 	bl	801291c <hal_uart_transfer>
}
 800ec38:	bf00      	nop
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	10624dd3 	.word	0x10624dd3
 800ec44:	08013a64 	.word	0x08013a64
 800ec48:	200049f8 	.word	0x200049f8

0800ec4c <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 800ec4c:	b40f      	push	{r0, r1, r2, r3}
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b082      	sub	sp, #8
 800ec52:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 800ec54:	4b17      	ldr	r3, [pc, #92]	; (800ecb4 <hal_cli_printf+0x68>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fa ff75 	bl	8009b4c <xQueueSemaphoreTake>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d11d      	bne.n	800eca4 <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 800ec68:	f7ff ffc2 	bl	800ebf0 <print_boottime>

	va_start(valist, fmt);
 800ec6c:	f107 0314 	add.w	r3, r7, #20
 800ec70:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 800ec72:	683a      	ldr	r2, [r7, #0]
 800ec74:	6939      	ldr	r1, [r7, #16]
 800ec76:	4810      	ldr	r0, [pc, #64]	; (800ecb8 <hal_cli_printf+0x6c>)
 800ec78:	f004 f9a4 	bl	8012fc4 <vsiprintf>
 800ec7c:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	461a      	mov	r2, r3
 800ec82:	490d      	ldr	r1, [pc, #52]	; (800ecb8 <hal_cli_printf+0x6c>)
 800ec84:	2000      	movs	r0, #0
 800ec86:	f003 fe49 	bl	801291c <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	490b      	ldr	r1, [pc, #44]	; (800ecbc <hal_cli_printf+0x70>)
 800ec8e:	2000      	movs	r0, #0
 800ec90:	f003 fe44 	bl	801291c <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 800ec94:	4b07      	ldr	r3, [pc, #28]	; (800ecb4 <hal_cli_printf+0x68>)
 800ec96:	6818      	ldr	r0, [r3, #0]
 800ec98:	2300      	movs	r3, #0
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	f7fa fc61 	bl	8009564 <xQueueGenericSend>
 800eca2:	e000      	b.n	800eca6 <hal_cli_printf+0x5a>
		return;
 800eca4:	bf00      	nop
}
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ecae:	b004      	add	sp, #16
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	200049f4 	.word	0x200049f4
 800ecb8:	200049f8 	.word	0x200049f8
 800ecbc:	08013a70 	.word	0x08013a70

0800ecc0 <hal_cli_init>:

void hal_cli_init(void) {
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 800ecc4:	4b17      	ldr	r3, [pc, #92]	; (800ed24 <hal_cli_init+0x64>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 800eccc:	4b15      	ldr	r3, [pc, #84]	; (800ed24 <hal_cli_init+0x64>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 800ecd4:	4b13      	ldr	r3, [pc, #76]	; (800ed24 <hal_cli_init+0x64>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 800ecdc:	2001      	movs	r0, #1
 800ecde:	f7fa fc29 	bl	8009534 <xQueueCreateMutex>
 800ece2:	4603      	mov	r3, r0
 800ece4:	4a10      	ldr	r2, [pc, #64]	; (800ed28 <hal_cli_init+0x68>)
 800ece6:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 800ece8:	4b10      	ldr	r3, [pc, #64]	; (800ed2c <hal_cli_init+0x6c>)
 800ecea:	461a      	mov	r2, r3
 800ecec:	2102      	movs	r1, #2
 800ecee:	4810      	ldr	r0, [pc, #64]	; (800ed30 <hal_cli_init+0x70>)
 800ecf0:	f7ff ff4e 	bl	800eb90 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 800ecf4:	4a0f      	ldr	r2, [pc, #60]	; (800ed34 <hal_cli_init+0x74>)
 800ecf6:	2102      	movs	r1, #2
 800ecf8:	480d      	ldr	r0, [pc, #52]	; (800ed30 <hal_cli_init+0x70>)
 800ecfa:	f7ff ff61 	bl	800ebc0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 800ecfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed02:	2102      	movs	r1, #2
 800ed04:	480a      	ldr	r0, [pc, #40]	; (800ed30 <hal_cli_init+0x70>)
 800ed06:	f7ff ff1f 	bl	800eb48 <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 800ed0a:	480b      	ldr	r0, [pc, #44]	; (800ed38 <hal_cli_init+0x78>)
 800ed0c:	f7ff fed9 	bl	800eac2 <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 800ed10:	2102      	movs	r1, #2
 800ed12:	4807      	ldr	r0, [pc, #28]	; (800ed30 <hal_cli_init+0x70>)
 800ed14:	f7ff fef8 	bl	800eb08 <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 800ed18:	4807      	ldr	r0, [pc, #28]	; (800ed38 <hal_cli_init+0x78>)
 800ed1a:	f7ff feaf 	bl	800ea7c <LL_USART_EnableIT_IDLE>
}
 800ed1e:	bf00      	nop
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	200049f8 	.word	0x200049f8
 800ed28:	200049f4 	.word	0x200049f4
 800ed2c:	20004af8 	.word	0x20004af8
 800ed30:	40026400 	.word	0x40026400
 800ed34:	40011004 	.word	0x40011004
 800ed38:	40011000 	.word	0x40011000

0800ed3c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800ed44:	4b08      	ldr	r3, [pc, #32]	; (800ed68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ed46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed48:	4907      	ldr	r1, [pc, #28]	; (800ed68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800ed50:	4b05      	ldr	r3, [pc, #20]	; (800ed68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ed52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4013      	ands	r3, r2
 800ed58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
}
 800ed5c:	bf00      	nop
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	40023800 	.word	0x40023800

0800ed6c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800ed74:	4b08      	ldr	r3, [pc, #32]	; (800ed98 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ed76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed78:	4907      	ldr	r1, [pc, #28]	; (800ed98 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800ed80:	4b05      	ldr	r3, [pc, #20]	; (800ed98 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ed82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4013      	ands	r3, r2
 800ed88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
}
 800ed8c:	bf00      	nop
 800ed8e:	3714      	adds	r7, #20
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr
 800ed98:	40023800 	.word	0x40023800

0800ed9c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800eda4:	4b08      	ldr	r3, [pc, #32]	; (800edc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800eda6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eda8:	4907      	ldr	r1, [pc, #28]	; (800edc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4313      	orrs	r3, r2
 800edae:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800edb0:	4b05      	ldr	r3, [pc, #20]	; (800edc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800edb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4013      	ands	r3, r2
 800edb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800edba:	68fb      	ldr	r3, [r7, #12]
}
 800edbc:	bf00      	nop
 800edbe:	3714      	adds	r7, #20
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	40023800 	.word	0x40023800

0800edcc <LL_RCC_HSE_Enable>:
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800edd0:	4b05      	ldr	r3, [pc, #20]	; (800ede8 <LL_RCC_HSE_Enable+0x1c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a04      	ldr	r2, [pc, #16]	; (800ede8 <LL_RCC_HSE_Enable+0x1c>)
 800edd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edda:	6013      	str	r3, [r2, #0]
}
 800eddc:	bf00      	nop
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	40023800 	.word	0x40023800

0800edec <LL_RCC_HSE_IsReady>:
{
 800edec:	b480      	push	{r7}
 800edee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800edf0:	4b07      	ldr	r3, [pc, #28]	; (800ee10 <LL_RCC_HSE_IsReady+0x24>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edfc:	bf0c      	ite	eq
 800edfe:	2301      	moveq	r3, #1
 800ee00:	2300      	movne	r3, #0
 800ee02:	b2db      	uxtb	r3, r3
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop
 800ee10:	40023800 	.word	0x40023800

0800ee14 <LL_RCC_SetSysClkSource>:
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ee1c:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <LL_RCC_SetSysClkSource+0x24>)
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	f023 0203 	bic.w	r2, r3, #3
 800ee24:	4904      	ldr	r1, [pc, #16]	; (800ee38 <LL_RCC_SetSysClkSource+0x24>)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	608b      	str	r3, [r1, #8]
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	40023800 	.word	0x40023800

0800ee3c <LL_RCC_GetSysClkSource>:
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ee40:	4b04      	ldr	r3, [pc, #16]	; (800ee54 <LL_RCC_GetSysClkSource+0x18>)
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	f003 030c 	and.w	r3, r3, #12
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	40023800 	.word	0x40023800

0800ee58 <LL_RCC_SetAHBPrescaler>:
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ee60:	4b06      	ldr	r3, [pc, #24]	; (800ee7c <LL_RCC_SetAHBPrescaler+0x24>)
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ee68:	4904      	ldr	r1, [pc, #16]	; (800ee7c <LL_RCC_SetAHBPrescaler+0x24>)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	608b      	str	r3, [r1, #8]
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr
 800ee7c:	40023800 	.word	0x40023800

0800ee80 <LL_RCC_SetAPB1Prescaler>:
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ee88:	4b06      	ldr	r3, [pc, #24]	; (800eea4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ee90:	4904      	ldr	r1, [pc, #16]	; (800eea4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4313      	orrs	r3, r2
 800ee96:	608b      	str	r3, [r1, #8]
}
 800ee98:	bf00      	nop
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	40023800 	.word	0x40023800

0800eea8 <LL_RCC_SetAPB2Prescaler>:
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800eeb0:	4b06      	ldr	r3, [pc, #24]	; (800eecc <LL_RCC_SetAPB2Prescaler+0x24>)
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800eeb8:	4904      	ldr	r1, [pc, #16]	; (800eecc <LL_RCC_SetAPB2Prescaler+0x24>)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	608b      	str	r3, [r1, #8]
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	40023800 	.word	0x40023800

0800eed0 <LL_RCC_SetTIMPrescaler>:
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800eed8:	4b07      	ldr	r3, [pc, #28]	; (800eef8 <LL_RCC_SetTIMPrescaler+0x28>)
 800eeda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eede:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800eee2:	4905      	ldr	r1, [pc, #20]	; (800eef8 <LL_RCC_SetTIMPrescaler+0x28>)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800eeec:	bf00      	nop
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	40023800 	.word	0x40023800

0800eefc <LL_RCC_PLL_Enable>:
{
 800eefc:	b480      	push	{r7}
 800eefe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ef00:	4b05      	ldr	r3, [pc, #20]	; (800ef18 <LL_RCC_PLL_Enable+0x1c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a04      	ldr	r2, [pc, #16]	; (800ef18 <LL_RCC_PLL_Enable+0x1c>)
 800ef06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef0a:	6013      	str	r3, [r2, #0]
}
 800ef0c:	bf00      	nop
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	40023800 	.word	0x40023800

0800ef1c <LL_RCC_PLL_IsReady>:
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800ef20:	4b07      	ldr	r3, [pc, #28]	; (800ef40 <LL_RCC_PLL_IsReady+0x24>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef2c:	bf0c      	ite	eq
 800ef2e:	2301      	moveq	r3, #1
 800ef30:	2300      	movne	r3, #0
 800ef32:	b2db      	uxtb	r3, r3
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	40023800 	.word	0x40023800

0800ef44 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
 800ef50:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800ef52:	4b0d      	ldr	r3, [pc, #52]	; (800ef88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	4b0d      	ldr	r3, [pc, #52]	; (800ef8c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800ef58:	4013      	ands	r3, r2
 800ef5a:	68f9      	ldr	r1, [r7, #12]
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	4311      	orrs	r1, r2
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	0192      	lsls	r2, r2, #6
 800ef64:	430a      	orrs	r2, r1
 800ef66:	4908      	ldr	r1, [pc, #32]	; (800ef88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800ef6c:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ef74:	4904      	ldr	r1, [pc, #16]	; (800ef88 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	604b      	str	r3, [r1, #4]
}
 800ef7c:	bf00      	nop
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	40023800 	.word	0x40023800
 800ef8c:	ffbf8000 	.word	0xffbf8000

0800ef90 <LL_RCC_PLL_ConfigDomain_48M>:
{
 800ef90:	b480      	push	{r7}
 800ef92:	b085      	sub	sp, #20
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
 800ef9c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800ef9e:	4b0a      	ldr	r3, [pc, #40]	; (800efc8 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800efa0:	685a      	ldr	r2, [r3, #4]
 800efa2:	4b0a      	ldr	r3, [pc, #40]	; (800efcc <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 800efa4:	4013      	ands	r3, r2
 800efa6:	68f9      	ldr	r1, [r7, #12]
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	4311      	orrs	r1, r2
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	0192      	lsls	r2, r2, #6
 800efb0:	4311      	orrs	r1, r2
 800efb2:	683a      	ldr	r2, [r7, #0]
 800efb4:	430a      	orrs	r2, r1
 800efb6:	4904      	ldr	r1, [pc, #16]	; (800efc8 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800efb8:	4313      	orrs	r3, r2
 800efba:	604b      	str	r3, [r1, #4]
}
 800efbc:	bf00      	nop
 800efbe:	3714      	adds	r7, #20
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	40023800 	.word	0x40023800
 800efcc:	f0bf8000 	.word	0xf0bf8000

0800efd0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800efd8:	4b06      	ldr	r3, [pc, #24]	; (800eff4 <LL_FLASH_SetLatency+0x24>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f023 020f 	bic.w	r2, r3, #15
 800efe0:	4904      	ldr	r1, [pc, #16]	; (800eff4 <LL_FLASH_SetLatency+0x24>)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	600b      	str	r3, [r1, #0]
}
 800efe8:	bf00      	nop
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	40023c00 	.word	0x40023c00

0800eff8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800eff8:	b480      	push	{r7}
 800effa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800effc:	4b04      	ldr	r3, [pc, #16]	; (800f010 <LL_FLASH_GetLatency+0x18>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f003 030f 	and.w	r3, r3, #15
}
 800f004:	4618      	mov	r0, r3
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	40023c00 	.word	0x40023c00

0800f014 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800f014:	b480      	push	{r7}
 800f016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800f018:	4b05      	ldr	r3, [pc, #20]	; (800f030 <LL_PWR_EnableOverDriveMode+0x1c>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a04      	ldr	r2, [pc, #16]	; (800f030 <LL_PWR_EnableOverDriveMode+0x1c>)
 800f01e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f022:	6013      	str	r3, [r2, #0]
}
 800f024:	bf00      	nop
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	40007000 	.word	0x40007000

0800f034 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800f03c:	4b06      	ldr	r3, [pc, #24]	; (800f058 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f044:	4904      	ldr	r1, [pc, #16]	; (800f058 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4313      	orrs	r3, r2
 800f04a:	600b      	str	r3, [r1, #0]
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	40007000 	.word	0x40007000

0800f05c <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 800f05c:	b580      	push	{r7, lr}
 800f05e:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800f060:	2001      	movs	r0, #1
 800f062:	f7ff fe6b 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800f066:	2002      	movs	r0, #2
 800f068:	f7ff fe68 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800f06c:	2004      	movs	r0, #4
 800f06e:	f7ff fe65 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800f072:	2008      	movs	r0, #8
 800f074:	f7ff fe62 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800f078:	2010      	movs	r0, #16
 800f07a:	f7ff fe5f 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800f07e:	2020      	movs	r0, #32
 800f080:	f7ff fe5c 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800f084:	2040      	movs	r0, #64	; 0x40
 800f086:	f7ff fe59 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800f08a:	2080      	movs	r0, #128	; 0x80
 800f08c:	f7ff fe56 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800f090:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f094:	f7ff fe52 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800f098:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f09c:	f7ff fe4e 	bl	800ed3c <LL_AHB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800f0a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f0a4:	f7ff fe7a 	bl	800ed9c <LL_APB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800f0a8:	2004      	movs	r0, #4
 800f0aa:	f7ff fe5f 	bl	800ed6c <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800f0ae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800f0b2:	f7ff fe5b 	bl	800ed6c <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800f0b6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f0ba:	f7ff fe57 	bl	800ed6c <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800f0be:	2010      	movs	r0, #16
 800f0c0:	f7ff fe6c 	bl	800ed9c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800f0c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f0c8:	f7ff fe50 	bl	800ed6c <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800f0cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f0d0:	f7ff fe4c 	bl	800ed6c <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 800f0d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f0d8:	f7ff fe60 	bl	800ed9c <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 800f0dc:	bf00      	nop
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800f0e6:	2005      	movs	r0, #5
 800f0e8:	f7ff ff72 	bl	800efd0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800f0ec:	bf00      	nop
 800f0ee:	f7ff ff83 	bl	800eff8 <LL_FLASH_GetLatency>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b05      	cmp	r3, #5
 800f0f6:	d1fa      	bne.n	800f0ee <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800f0f8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800f0fc:	f7ff ff9a 	bl	800f034 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800f100:	f7ff ff88 	bl	800f014 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800f104:	f7ff fe62 	bl	800edcc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800f108:	bf00      	nop
 800f10a:	f7ff fe6f 	bl	800edec <LL_RCC_HSE_IsReady>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b01      	cmp	r3, #1
 800f112:	d1fa      	bne.n	800f10a <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800f114:	2300      	movs	r3, #0
 800f116:	22b4      	movs	r2, #180	; 0xb4
 800f118:	2104      	movs	r1, #4
 800f11a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f11e:	f7ff ff11 	bl	800ef44 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 800f122:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f126:	22b4      	movs	r2, #180	; 0xb4
 800f128:	2104      	movs	r1, #4
 800f12a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f12e:	f7ff ff2f 	bl	800ef90 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 800f132:	f7ff fee3 	bl	800eefc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800f136:	bf00      	nop
 800f138:	f7ff fef0 	bl	800ef1c <LL_RCC_PLL_IsReady>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d1fa      	bne.n	800f138 <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800f142:	2000      	movs	r0, #0
 800f144:	f7ff fe88 	bl	800ee58 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800f148:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800f14c:	f7ff fe98 	bl	800ee80 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800f150:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f154:	f7ff fea8 	bl	800eea8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800f158:	2002      	movs	r0, #2
 800f15a:	f7ff fe5b 	bl	800ee14 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800f15e:	bf00      	nop
 800f160:	f7ff fe6c 	bl	800ee3c <LL_RCC_GetSysClkSource>
 800f164:	4603      	mov	r3, r0
 800f166:	2b08      	cmp	r3, #8
 800f168:	d1fa      	bne.n	800f160 <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 800f16a:	4808      	ldr	r0, [pc, #32]	; (800f18c <hal_clock_init_early+0xac>)
 800f16c:	f7f6 f8b4 	bl	80052d8 <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800f170:	463b      	mov	r3, r7
 800f172:	4618      	mov	r0, r3
 800f174:	f7f4 fe4c 	bl	8003e10 <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800f178:	2005      	movs	r0, #5
 800f17a:	f002 feb1 	bl	8011ee0 <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800f17e:	2000      	movs	r0, #0
 800f180:	f7ff fea6 	bl	800eed0 <LL_RCC_SetTIMPrescaler>
}
 800f184:	bf00      	nop
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	0aba9500 	.word	0x0aba9500

0800f190 <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 800f190:	b480      	push	{r7}
 800f192:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800f194:	4b09      	ldr	r3, [pc, #36]	; (800f1bc <hal_dwt_init_early+0x2c>)
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	4a08      	ldr	r2, [pc, #32]	; (800f1bc <hal_dwt_init_early+0x2c>)
 800f19a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f19e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800f1a0:	4b07      	ldr	r3, [pc, #28]	; (800f1c0 <hal_dwt_init_early+0x30>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a06      	ldr	r2, [pc, #24]	; (800f1c0 <hal_dwt_init_early+0x30>)
 800f1a6:	f043 0301 	orr.w	r3, r3, #1
 800f1aa:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 800f1ac:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <hal_dwt_init_early+0x30>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	605a      	str	r2, [r3, #4]
}
 800f1b2:	bf00      	nop
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	e000edf0 	.word	0xe000edf0
 800f1c0:	e0001000 	.word	0xe0001000

0800f1c4 <hal_delay_us>:
#include "delay.h"
#include <stdbool.h>

void hal_delay_us(uint32_t microseconds) {
 800f1c4:	b480      	push	{r7}
 800f1c6:	b085      	sub	sp, #20
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800f1cc:	4b0d      	ldr	r3, [pc, #52]	; (800f204 <hal_delay_us+0x40>)
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	60fb      	str	r3, [r7, #12]
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
 800f1d2:	4b0d      	ldr	r3, [pc, #52]	; (800f208 <hal_delay_us+0x44>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4a0d      	ldr	r2, [pc, #52]	; (800f20c <hal_delay_us+0x48>)
 800f1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800f1dc:	0c9a      	lsrs	r2, r3, #18
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	fb02 f303 	mul.w	r3, r2, r3
 800f1e4:	60bb      	str	r3, [r7, #8]
    while((DWT->CYCCNT - start) < time_ticks) {
 800f1e6:	bf00      	nop
 800f1e8:	4b06      	ldr	r3, [pc, #24]	; (800f204 <hal_delay_us+0x40>)
 800f1ea:	685a      	ldr	r2, [r3, #4]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	68ba      	ldr	r2, [r7, #8]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d8f8      	bhi.n	800f1e8 <hal_delay_us+0x24>
    };
}
 800f1f6:	bf00      	nop
 800f1f8:	bf00      	nop
 800f1fa:	3714      	adds	r7, #20
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr
 800f204:	e0001000 	.word	0xe0001000
 800f208:	20000014 	.word	0x20000014
 800f20c:	431bde83 	.word	0x431bde83

0800f210 <hal_get_delay_timer>:

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 800f21a:	4b0d      	ldr	r3, [pc, #52]	; (800f250 <hal_get_delay_timer+0x40>)
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000) * timeout;
 800f220:	4b0c      	ldr	r3, [pc, #48]	; (800f254 <hal_get_delay_timer+0x44>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a0c      	ldr	r2, [pc, #48]	; (800f258 <hal_get_delay_timer+0x48>)
 800f226:	fba2 2303 	umull	r2, r3, r2, r3
 800f22a:	099b      	lsrs	r3, r3, #6
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	fb02 f303 	mul.w	r3, r2, r3
 800f232:	60fb      	str	r3, [r7, #12]
	return tmp;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	461a      	mov	r2, r3
 800f238:	f107 0308 	add.w	r3, r7, #8
 800f23c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f240:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	3714      	adds	r7, #20
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr
 800f250:	e0001000 	.word	0xe0001000
 800f254:	20000014 	.word	0x20000014
 800f258:	10624dd3 	.word	0x10624dd3

0800f25c <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 800f264:	4b08      	ldr	r3, [pc, #32]	; (800f288 <hal_delay_timer_is_expired+0x2c>)
 800f266:	685a      	ldr	r2, [r3, #4]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	1ad2      	subs	r2, r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	429a      	cmp	r2, r3
 800f274:	bf2c      	ite	cs
 800f276:	2301      	movcs	r3, #1
 800f278:	2300      	movcc	r3, #0
 800f27a:	b2db      	uxtb	r3, r3
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr
 800f288:	e0001000 	.word	0xe0001000

0800f28c <LL_GPIO_SetPinMode>:
{
 800f28c:	b480      	push	{r7}
 800f28e:	b089      	sub	sp, #36	; 0x24
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	fa93 f3a3 	rbit	r3, r3
 800f2a6:	613b      	str	r3, [r7, #16]
  return result;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	fab3 f383 	clz	r3, r3
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	2103      	movs	r1, #3
 800f2b4:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b8:	43db      	mvns	r3, r3
 800f2ba:	401a      	ands	r2, r3
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	fa93 f3a3 	rbit	r3, r3
 800f2c6:	61bb      	str	r3, [r7, #24]
  return result;
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	fab3 f383 	clz	r3, r3
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	6879      	ldr	r1, [r7, #4]
 800f2d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f2d8:	431a      	orrs	r2, r3
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	601a      	str	r2, [r3, #0]
}
 800f2de:	bf00      	nop
 800f2e0:	3724      	adds	r7, #36	; 0x24
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr

0800f2ea <LL_GPIO_SetPinOutputType>:
{
 800f2ea:	b480      	push	{r7}
 800f2ec:	b085      	sub	sp, #20
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	60f8      	str	r0, [r7, #12]
 800f2f2:	60b9      	str	r1, [r7, #8]
 800f2f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	685a      	ldr	r2, [r3, #4]
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	43db      	mvns	r3, r3
 800f2fe:	401a      	ands	r2, r3
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	6879      	ldr	r1, [r7, #4]
 800f304:	fb01 f303 	mul.w	r3, r1, r3
 800f308:	431a      	orrs	r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	605a      	str	r2, [r3, #4]
}
 800f30e:	bf00      	nop
 800f310:	3714      	adds	r7, #20
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr

0800f31a <LL_GPIO_SetPinSpeed>:
{
 800f31a:	b480      	push	{r7}
 800f31c:	b089      	sub	sp, #36	; 0x24
 800f31e:	af00      	add	r7, sp, #0
 800f320:	60f8      	str	r0, [r7, #12]
 800f322:	60b9      	str	r1, [r7, #8]
 800f324:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	689a      	ldr	r2, [r3, #8]
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	fa93 f3a3 	rbit	r3, r3
 800f334:	613b      	str	r3, [r7, #16]
  return result;
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	fab3 f383 	clz	r3, r3
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	005b      	lsls	r3, r3, #1
 800f340:	2103      	movs	r1, #3
 800f342:	fa01 f303 	lsl.w	r3, r1, r3
 800f346:	43db      	mvns	r3, r3
 800f348:	401a      	ands	r2, r3
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	fa93 f3a3 	rbit	r3, r3
 800f354:	61bb      	str	r3, [r7, #24]
  return result;
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	fab3 f383 	clz	r3, r3
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	fa01 f303 	lsl.w	r3, r1, r3
 800f366:	431a      	orrs	r2, r3
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	609a      	str	r2, [r3, #8]
}
 800f36c:	bf00      	nop
 800f36e:	3724      	adds	r7, #36	; 0x24
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <LL_GPIO_SetPinPull>:
{
 800f378:	b480      	push	{r7}
 800f37a:	b089      	sub	sp, #36	; 0x24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	68da      	ldr	r2, [r3, #12]
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	fa93 f3a3 	rbit	r3, r3
 800f392:	613b      	str	r3, [r7, #16]
  return result;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	fab3 f383 	clz	r3, r3
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	005b      	lsls	r3, r3, #1
 800f39e:	2103      	movs	r1, #3
 800f3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800f3a4:	43db      	mvns	r3, r3
 800f3a6:	401a      	ands	r2, r3
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	fa93 f3a3 	rbit	r3, r3
 800f3b2:	61bb      	str	r3, [r7, #24]
  return result;
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	fab3 f383 	clz	r3, r3
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	005b      	lsls	r3, r3, #1
 800f3be:	6879      	ldr	r1, [r7, #4]
 800f3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f3c4:	431a      	orrs	r2, r3
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	60da      	str	r2, [r3, #12]
}
 800f3ca:	bf00      	nop
 800f3cc:	3724      	adds	r7, #36	; 0x24
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <LL_GPIO_SetAFPin_0_7>:
{
 800f3d6:	b480      	push	{r7}
 800f3d8:	b089      	sub	sp, #36	; 0x24
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	60f8      	str	r0, [r7, #12]
 800f3de:	60b9      	str	r1, [r7, #8]
 800f3e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6a1a      	ldr	r2, [r3, #32]
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	fa93 f3a3 	rbit	r3, r3
 800f3f0:	613b      	str	r3, [r7, #16]
  return result;
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	fab3 f383 	clz	r3, r3
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	210f      	movs	r1, #15
 800f3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800f402:	43db      	mvns	r3, r3
 800f404:	401a      	ands	r2, r3
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	fa93 f3a3 	rbit	r3, r3
 800f410:	61bb      	str	r3, [r7, #24]
  return result;
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	fab3 f383 	clz	r3, r3
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	fa01 f303 	lsl.w	r3, r1, r3
 800f422:	431a      	orrs	r2, r3
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	621a      	str	r2, [r3, #32]
}
 800f428:	bf00      	nop
 800f42a:	3724      	adds	r7, #36	; 0x24
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <LL_GPIO_SetAFPin_8_15>:
{
 800f434:	b480      	push	{r7}
 800f436:	b089      	sub	sp, #36	; 0x24
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	0a1b      	lsrs	r3, r3, #8
 800f448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	fa93 f3a3 	rbit	r3, r3
 800f450:	613b      	str	r3, [r7, #16]
  return result;
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	fab3 f383 	clz	r3, r3
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	210f      	movs	r1, #15
 800f45e:	fa01 f303 	lsl.w	r3, r1, r3
 800f462:	43db      	mvns	r3, r3
 800f464:	401a      	ands	r2, r3
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	0a1b      	lsrs	r3, r3, #8
 800f46a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	fa93 f3a3 	rbit	r3, r3
 800f472:	61bb      	str	r3, [r7, #24]
  return result;
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	fab3 f383 	clz	r3, r3
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	6879      	ldr	r1, [r7, #4]
 800f480:	fa01 f303 	lsl.w	r3, r1, r3
 800f484:	431a      	orrs	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f48a:	bf00      	nop
 800f48c:	3724      	adds	r7, #36	; 0x24
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr
	...

0800f498 <LL_SYSCFG_SetEXTISource>:
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800f4a2:	4a13      	ldr	r2, [pc, #76]	; (800f4f0 <LL_SYSCFG_SetEXTISource+0x58>)
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	3302      	adds	r3, #2
 800f4aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	0c1b      	lsrs	r3, r3, #16
 800f4b2:	43db      	mvns	r3, r3
 800f4b4:	ea02 0103 	and.w	r1, r2, r3
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	0c1b      	lsrs	r3, r3, #16
 800f4bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	fa93 f3a3 	rbit	r3, r3
 800f4c4:	60bb      	str	r3, [r7, #8]
  return result;
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	fab3 f383 	clz	r3, r3
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	fa03 f202 	lsl.w	r2, r3, r2
 800f4d6:	4806      	ldr	r0, [pc, #24]	; (800f4f0 <LL_SYSCFG_SetEXTISource+0x58>)
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	430a      	orrs	r2, r1
 800f4de:	3302      	adds	r3, #2
 800f4e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800f4e4:	bf00      	nop
 800f4e6:	3714      	adds	r7, #20
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	40013800 	.word	0x40013800

0800f4f4 <LL_SYSCFG_GetEXTISource>:
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800f4fc:	4a0d      	ldr	r2, [pc, #52]	; (800f534 <LL_SYSCFG_GetEXTISource+0x40>)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	b2db      	uxtb	r3, r3
 800f502:	3302      	adds	r3, #2
 800f504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	0c1b      	lsrs	r3, r3, #16
 800f50c:	4013      	ands	r3, r2
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	0c12      	lsrs	r2, r2, #16
 800f512:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	fa92 f2a2 	rbit	r2, r2
 800f51a:	60ba      	str	r2, [r7, #8]
  return result;
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	fab2 f282 	clz	r2, r2
 800f522:	b2d2      	uxtb	r2, r2
 800f524:	40d3      	lsrs	r3, r2
}
 800f526:	4618      	mov	r0, r3
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop
 800f534:	40013800 	.word	0x40013800

0800f538 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800f540:	4b05      	ldr	r3, [pc, #20]	; (800f558 <LL_EXTI_EnableIT_0_31+0x20>)
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	4904      	ldr	r1, [pc, #16]	; (800f558 <LL_EXTI_EnableIT_0_31+0x20>)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4313      	orrs	r3, r2
 800f54a:	600b      	str	r3, [r1, #0]
}
 800f54c:	bf00      	nop
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr
 800f558:	40013c00 	.word	0x40013c00

0800f55c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800f564:	4b06      	ldr	r3, [pc, #24]	; (800f580 <LL_EXTI_DisableIT_0_31+0x24>)
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	43db      	mvns	r3, r3
 800f56c:	4904      	ldr	r1, [pc, #16]	; (800f580 <LL_EXTI_DisableIT_0_31+0x24>)
 800f56e:	4013      	ands	r3, r2
 800f570:	600b      	str	r3, [r1, #0]
}
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	40013c00 	.word	0x40013c00

0800f584 <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 800f58c:	4b07      	ldr	r3, [pc, #28]	; (800f5ac <LL_EXTI_IsEnabledIT_0_31+0x28>)
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4013      	ands	r3, r2
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	429a      	cmp	r2, r3
 800f598:	bf0c      	ite	eq
 800f59a:	2301      	moveq	r3, #1
 800f59c:	2300      	movne	r3, #0
 800f59e:	b2db      	uxtb	r3, r3
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	40013c00 	.word	0x40013c00

0800f5b0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800f5ba:	685a      	ldr	r2, [r3, #4]
 800f5bc:	4904      	ldr	r1, [pc, #16]	; (800f5d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	604b      	str	r3, [r1, #4]

}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	40013c00 	.word	0x40013c00

0800f5d4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800f5dc:	4b05      	ldr	r3, [pc, #20]	; (800f5f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800f5de:	689a      	ldr	r2, [r3, #8]
 800f5e0:	4904      	ldr	r1, [pc, #16]	; (800f5f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4313      	orrs	r3, r2
 800f5e6:	608b      	str	r3, [r1, #8]

}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	40013c00 	.word	0x40013c00

0800f5f8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800f600:	4b06      	ldr	r3, [pc, #24]	; (800f61c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800f602:	689a      	ldr	r2, [r3, #8]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	43db      	mvns	r3, r3
 800f608:	4904      	ldr	r1, [pc, #16]	; (800f61c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800f60a:	4013      	ands	r3, r2
 800f60c:	608b      	str	r3, [r1, #8]

}
 800f60e:	bf00      	nop
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	40013c00 	.word	0x40013c00

0800f620 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800f628:	4b05      	ldr	r3, [pc, #20]	; (800f640 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800f62a:	68da      	ldr	r2, [r3, #12]
 800f62c:	4904      	ldr	r1, [pc, #16]	; (800f640 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4313      	orrs	r3, r2
 800f632:	60cb      	str	r3, [r1, #12]
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr
 800f640:	40013c00 	.word	0x40013c00

0800f644 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800f64c:	4b06      	ldr	r3, [pc, #24]	; (800f668 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800f64e:	68da      	ldr	r2, [r3, #12]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	43db      	mvns	r3, r3
 800f654:	4904      	ldr	r1, [pc, #16]	; (800f668 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800f656:	4013      	ands	r3, r2
 800f658:	60cb      	str	r3, [r1, #12]
}
 800f65a:	bf00      	nop
 800f65c:	370c      	adds	r7, #12
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	40013c00 	.word	0x40013c00

0800f66c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800f674:	4b07      	ldr	r3, [pc, #28]	; (800f694 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800f676:	695a      	ldr	r2, [r3, #20]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4013      	ands	r3, r2
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	bf0c      	ite	eq
 800f682:	2301      	moveq	r3, #1
 800f684:	2300      	movne	r3, #0
 800f686:	b2db      	uxtb	r3, r3
}
 800f688:	4618      	mov	r0, r3
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	40013c00 	.word	0x40013c00

0800f698 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800f6a0:	4a04      	ldr	r2, [pc, #16]	; (800f6b4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6153      	str	r3, [r2, #20]
}
 800f6a6:	bf00      	nop
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	40013c00 	.word	0x40013c00

0800f6b8 <hal_gpio_get_pin_number>:
static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio);
static void hal_gpio_exti_call(uint16_t pin_num);

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	73fb      	strb	r3, [r7, #15]
 800f6c4:	e00c      	b.n	800f6e0 <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	889b      	ldrh	r3, [r3, #4]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
 800f6ce:	fa42 f303 	asr.w	r3, r2, r3
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d106      	bne.n	800f6e8 <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800f6da:	7bfb      	ldrb	r3, [r7, #15]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	73fb      	strb	r3, [r7, #15]
 800f6e0:	7bfb      	ldrb	r3, [r7, #15]
 800f6e2:	2b0f      	cmp	r3, #15
 800f6e4:	d9ef      	bls.n	800f6c6 <hal_gpio_get_pin_number+0xe>
 800f6e6:	e000      	b.n	800f6ea <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 800f6e8:	bf00      	nop
	}
	return pin_number;
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3714      	adds	r7, #20
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af02      	add	r7, sp, #8
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	4608      	mov	r0, r1
 800f702:	4611      	mov	r1, r2
 800f704:	461a      	mov	r2, r3
 800f706:	4603      	mov	r3, r0
 800f708:	70fb      	strb	r3, [r7, #3]
 800f70a:	460b      	mov	r3, r1
 800f70c:	70bb      	strb	r3, [r7, #2]
 800f70e:	4613      	mov	r3, r2
 800f710:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 800f712:	787b      	ldrb	r3, [r7, #1]
 800f714:	78ba      	ldrb	r2, [r7, #2]
 800f716:	78f9      	ldrb	r1, [r7, #3]
 800f718:	2010      	movs	r0, #16
 800f71a:	9000      	str	r0, [sp, #0]
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f805 	bl	800f72c <hal_gpio_init_alt>
}
 800f722:	bf00      	nop
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
	...

0800f72c <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b086      	sub	sp, #24
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	4608      	mov	r0, r1
 800f736:	4611      	mov	r1, r2
 800f738:	461a      	mov	r2, r3
 800f73a:	4603      	mov	r3, r0
 800f73c:	70fb      	strb	r3, [r7, #3]
 800f73e:	460b      	mov	r3, r1
 800f740:	70bb      	strb	r3, [r7, #2]
 800f742:	4613      	mov	r3, r2
 800f744:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a8d      	ldr	r2, [pc, #564]	; (800f980 <hal_gpio_init_alt+0x254>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d02b      	beq.n	800f7a8 <hal_gpio_init_alt+0x7c>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a8b      	ldr	r2, [pc, #556]	; (800f984 <hal_gpio_init_alt+0x258>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d024      	beq.n	800f7a4 <hal_gpio_init_alt+0x78>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4a8a      	ldr	r2, [pc, #552]	; (800f988 <hal_gpio_init_alt+0x25c>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d01d      	beq.n	800f7a0 <hal_gpio_init_alt+0x74>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4a88      	ldr	r2, [pc, #544]	; (800f98c <hal_gpio_init_alt+0x260>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d016      	beq.n	800f79c <hal_gpio_init_alt+0x70>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4a87      	ldr	r2, [pc, #540]	; (800f990 <hal_gpio_init_alt+0x264>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d00f      	beq.n	800f798 <hal_gpio_init_alt+0x6c>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a85      	ldr	r2, [pc, #532]	; (800f994 <hal_gpio_init_alt+0x268>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d008      	beq.n	800f794 <hal_gpio_init_alt+0x68>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a84      	ldr	r2, [pc, #528]	; (800f998 <hal_gpio_init_alt+0x26c>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d101      	bne.n	800f790 <hal_gpio_init_alt+0x64>
 800f78c:	2306      	movs	r3, #6
 800f78e:	e00c      	b.n	800f7aa <hal_gpio_init_alt+0x7e>
 800f790:	2307      	movs	r3, #7
 800f792:	e00a      	b.n	800f7aa <hal_gpio_init_alt+0x7e>
 800f794:	2305      	movs	r3, #5
 800f796:	e008      	b.n	800f7aa <hal_gpio_init_alt+0x7e>
 800f798:	2304      	movs	r3, #4
 800f79a:	e006      	b.n	800f7aa <hal_gpio_init_alt+0x7e>
 800f79c:	2303      	movs	r3, #3
 800f79e:	e004      	b.n	800f7aa <hal_gpio_init_alt+0x7e>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	e002      	b.n	800f7aa <hal_gpio_init_alt+0x7e>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e000      	b.n	800f7aa <hal_gpio_init_alt+0x7e>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	889b      	ldrh	r3, [r3, #4]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d05f      	beq.n	800f874 <hal_gpio_init_alt+0x148>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	889b      	ldrh	r3, [r3, #4]
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	d058      	beq.n	800f86e <hal_gpio_init_alt+0x142>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	889b      	ldrh	r3, [r3, #4]
 800f7c0:	2b04      	cmp	r3, #4
 800f7c2:	d051      	beq.n	800f868 <hal_gpio_init_alt+0x13c>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	889b      	ldrh	r3, [r3, #4]
 800f7c8:	2b08      	cmp	r3, #8
 800f7ca:	d04a      	beq.n	800f862 <hal_gpio_init_alt+0x136>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	889b      	ldrh	r3, [r3, #4]
 800f7d0:	2b10      	cmp	r3, #16
 800f7d2:	d044      	beq.n	800f85e <hal_gpio_init_alt+0x132>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	889b      	ldrh	r3, [r3, #4]
 800f7d8:	2b20      	cmp	r3, #32
 800f7da:	d03e      	beq.n	800f85a <hal_gpio_init_alt+0x12e>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	889b      	ldrh	r3, [r3, #4]
 800f7e0:	2b40      	cmp	r3, #64	; 0x40
 800f7e2:	d038      	beq.n	800f856 <hal_gpio_init_alt+0x12a>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	889b      	ldrh	r3, [r3, #4]
 800f7e8:	2b80      	cmp	r3, #128	; 0x80
 800f7ea:	d032      	beq.n	800f852 <hal_gpio_init_alt+0x126>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	889b      	ldrh	r3, [r3, #4]
 800f7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7f4:	d02b      	beq.n	800f84e <hal_gpio_init_alt+0x122>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	889b      	ldrh	r3, [r3, #4]
 800f7fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7fe:	d024      	beq.n	800f84a <hal_gpio_init_alt+0x11e>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	889b      	ldrh	r3, [r3, #4]
 800f804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f808:	d01d      	beq.n	800f846 <hal_gpio_init_alt+0x11a>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	889b      	ldrh	r3, [r3, #4]
 800f80e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f812:	d016      	beq.n	800f842 <hal_gpio_init_alt+0x116>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	889b      	ldrh	r3, [r3, #4]
 800f818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f81c:	d00f      	beq.n	800f83e <hal_gpio_init_alt+0x112>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	889b      	ldrh	r3, [r3, #4]
 800f822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f826:	d008      	beq.n	800f83a <hal_gpio_init_alt+0x10e>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	889b      	ldrh	r3, [r3, #4]
 800f82c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f830:	d101      	bne.n	800f836 <hal_gpio_init_alt+0x10a>
 800f832:	4b5a      	ldr	r3, [pc, #360]	; (800f99c <hal_gpio_init_alt+0x270>)
 800f834:	e020      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f836:	4b5a      	ldr	r3, [pc, #360]	; (800f9a0 <hal_gpio_init_alt+0x274>)
 800f838:	e01e      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f83a:	4b5a      	ldr	r3, [pc, #360]	; (800f9a4 <hal_gpio_init_alt+0x278>)
 800f83c:	e01c      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f83e:	4b5a      	ldr	r3, [pc, #360]	; (800f9a8 <hal_gpio_init_alt+0x27c>)
 800f840:	e01a      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f842:	4b5a      	ldr	r3, [pc, #360]	; (800f9ac <hal_gpio_init_alt+0x280>)
 800f844:	e018      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f846:	4b5a      	ldr	r3, [pc, #360]	; (800f9b0 <hal_gpio_init_alt+0x284>)
 800f848:	e016      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f84a:	4b5a      	ldr	r3, [pc, #360]	; (800f9b4 <hal_gpio_init_alt+0x288>)
 800f84c:	e014      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f84e:	4b5a      	ldr	r3, [pc, #360]	; (800f9b8 <hal_gpio_init_alt+0x28c>)
 800f850:	e012      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f852:	4b5a      	ldr	r3, [pc, #360]	; (800f9bc <hal_gpio_init_alt+0x290>)
 800f854:	e010      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f856:	4b5a      	ldr	r3, [pc, #360]	; (800f9c0 <hal_gpio_init_alt+0x294>)
 800f858:	e00e      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f85a:	4b5a      	ldr	r3, [pc, #360]	; (800f9c4 <hal_gpio_init_alt+0x298>)
 800f85c:	e00c      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f85e:	4b5a      	ldr	r3, [pc, #360]	; (800f9c8 <hal_gpio_init_alt+0x29c>)
 800f860:	e00a      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f862:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800f866:	e007      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f868:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800f86c:	e004      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f86e:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800f872:	e001      	b.n	800f878 <hal_gpio_init_alt+0x14c>
 800f874:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800f878:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	889b      	ldrh	r3, [r3, #4]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d064      	beq.n	800f94c <hal_gpio_init_alt+0x220>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	889b      	ldrh	r3, [r3, #4]
 800f886:	2b02      	cmp	r3, #2
 800f888:	d05e      	beq.n	800f948 <hal_gpio_init_alt+0x21c>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	889b      	ldrh	r3, [r3, #4]
 800f88e:	2b04      	cmp	r3, #4
 800f890:	d058      	beq.n	800f944 <hal_gpio_init_alt+0x218>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	889b      	ldrh	r3, [r3, #4]
 800f896:	2b08      	cmp	r3, #8
 800f898:	d052      	beq.n	800f940 <hal_gpio_init_alt+0x214>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	889b      	ldrh	r3, [r3, #4]
 800f89e:	2b10      	cmp	r3, #16
 800f8a0:	d04c      	beq.n	800f93c <hal_gpio_init_alt+0x210>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	889b      	ldrh	r3, [r3, #4]
 800f8a6:	2b20      	cmp	r3, #32
 800f8a8:	d046      	beq.n	800f938 <hal_gpio_init_alt+0x20c>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	889b      	ldrh	r3, [r3, #4]
 800f8ae:	2b40      	cmp	r3, #64	; 0x40
 800f8b0:	d040      	beq.n	800f934 <hal_gpio_init_alt+0x208>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	889b      	ldrh	r3, [r3, #4]
 800f8b6:	2b80      	cmp	r3, #128	; 0x80
 800f8b8:	d03a      	beq.n	800f930 <hal_gpio_init_alt+0x204>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	889b      	ldrh	r3, [r3, #4]
 800f8be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8c2:	d032      	beq.n	800f92a <hal_gpio_init_alt+0x1fe>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	889b      	ldrh	r3, [r3, #4]
 800f8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8cc:	d02a      	beq.n	800f924 <hal_gpio_init_alt+0x1f8>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	889b      	ldrh	r3, [r3, #4]
 800f8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8d6:	d022      	beq.n	800f91e <hal_gpio_init_alt+0x1f2>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	889b      	ldrh	r3, [r3, #4]
 800f8dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8e0:	d01a      	beq.n	800f918 <hal_gpio_init_alt+0x1ec>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	889b      	ldrh	r3, [r3, #4]
 800f8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8ea:	d012      	beq.n	800f912 <hal_gpio_init_alt+0x1e6>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	889b      	ldrh	r3, [r3, #4]
 800f8f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8f4:	d00a      	beq.n	800f90c <hal_gpio_init_alt+0x1e0>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	889b      	ldrh	r3, [r3, #4]
 800f8fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8fe:	d102      	bne.n	800f906 <hal_gpio_init_alt+0x1da>
 800f900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f904:	e023      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f90a:	e020      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f90c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f910:	e01d      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f916:	e01a      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f91c:	e017      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f91e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f922:	e014      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f924:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f928:	e011      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f92a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f92e:	e00e      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f930:	2380      	movs	r3, #128	; 0x80
 800f932:	e00c      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f934:	2340      	movs	r3, #64	; 0x40
 800f936:	e00a      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f938:	2320      	movs	r3, #32
 800f93a:	e008      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f93c:	2310      	movs	r3, #16
 800f93e:	e006      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f940:	2308      	movs	r3, #8
 800f942:	e004      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f944:	2304      	movs	r3, #4
 800f946:	e002      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f948:	2302      	movs	r3, #2
 800f94a:	e000      	b.n	800f94e <hal_gpio_init_alt+0x222>
 800f94c:	2301      	movs	r3, #1
 800f94e:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 800f950:	787b      	ldrb	r3, [r7, #1]
 800f952:	2b03      	cmp	r3, #3
 800f954:	d855      	bhi.n	800fa02 <hal_gpio_init_alt+0x2d6>
 800f956:	a201      	add	r2, pc, #4	; (adr r2, 800f95c <hal_gpio_init_alt+0x230>)
 800f958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95c:	0800f96d 	.word	0x0800f96d
 800f960:	0800f9cd 	.word	0x0800f9cd
 800f964:	0800f9df 	.word	0x0800f9df
 800f968:	0800f9f1 	.word	0x0800f9f1
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6818      	ldr	r0, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	889b      	ldrh	r3, [r3, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	4619      	mov	r1, r3
 800f978:	f7ff fccf 	bl	800f31a <LL_GPIO_SetPinSpeed>
		break;
 800f97c:	e041      	b.n	800fa02 <hal_gpio_init_alt+0x2d6>
 800f97e:	bf00      	nop
 800f980:	40020000 	.word	0x40020000
 800f984:	40020400 	.word	0x40020400
 800f988:	40020800 	.word	0x40020800
 800f98c:	40020c00 	.word	0x40020c00
 800f990:	40021000 	.word	0x40021000
 800f994:	40021400 	.word	0x40021400
 800f998:	40021800 	.word	0x40021800
 800f99c:	0f000003 	.word	0x0f000003
 800f9a0:	f0000003 	.word	0xf0000003
 800f9a4:	00f00003 	.word	0x00f00003
 800f9a8:	000f0003 	.word	0x000f0003
 800f9ac:	f0000002 	.word	0xf0000002
 800f9b0:	0f000002 	.word	0x0f000002
 800f9b4:	00f00002 	.word	0x00f00002
 800f9b8:	000f0002 	.word	0x000f0002
 800f9bc:	f0000001 	.word	0xf0000001
 800f9c0:	0f000001 	.word	0x0f000001
 800f9c4:	00f00001 	.word	0x00f00001
 800f9c8:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6818      	ldr	r0, [r3, #0]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	889b      	ldrh	r3, [r3, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	f7ff fc9f 	bl	800f31a <LL_GPIO_SetPinSpeed>
		break;
 800f9dc:	e011      	b.n	800fa02 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6818      	ldr	r0, [r3, #0]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	889b      	ldrh	r3, [r3, #4]
 800f9e6:	2202      	movs	r2, #2
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	f7ff fc96 	bl	800f31a <LL_GPIO_SetPinSpeed>
		break;
 800f9ee:	e008      	b.n	800fa02 <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6818      	ldr	r0, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	889b      	ldrh	r3, [r3, #4]
 800f9f8:	2203      	movs	r2, #3
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	f7ff fc8d 	bl	800f31a <LL_GPIO_SetPinSpeed>
		break;
 800fa00:	bf00      	nop
	}

	switch(pull) {
 800fa02:	78bb      	ldrb	r3, [r7, #2]
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	d018      	beq.n	800fa3a <hal_gpio_init_alt+0x30e>
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	dc1f      	bgt.n	800fa4c <hal_gpio_init_alt+0x320>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <hal_gpio_init_alt+0x2ea>
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d009      	beq.n	800fa28 <hal_gpio_init_alt+0x2fc>
 800fa14:	e01a      	b.n	800fa4c <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6818      	ldr	r0, [r3, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	889b      	ldrh	r3, [r3, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	4619      	mov	r1, r3
 800fa22:	f7ff fca9 	bl	800f378 <LL_GPIO_SetPinPull>
		break;
 800fa26:	e011      	b.n	800fa4c <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6818      	ldr	r0, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	889b      	ldrh	r3, [r3, #4]
 800fa30:	2201      	movs	r2, #1
 800fa32:	4619      	mov	r1, r3
 800fa34:	f7ff fca0 	bl	800f378 <LL_GPIO_SetPinPull>
		break;
 800fa38:	e008      	b.n	800fa4c <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6818      	ldr	r0, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	889b      	ldrh	r3, [r3, #4]
 800fa42:	2202      	movs	r2, #2
 800fa44:	4619      	mov	r1, r3
 800fa46:	f7ff fc97 	bl	800f378 <LL_GPIO_SetPinPull>
		break;
 800fa4a:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 800fa4c:	78fb      	ldrb	r3, [r7, #3]
 800fa4e:	2b05      	cmp	r3, #5
 800fa50:	d93d      	bls.n	800face <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6818      	ldr	r0, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	889b      	ldrh	r3, [r3, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	f7ff fc15 	bl	800f28c <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 800fa62:	6939      	ldr	r1, [r7, #16]
 800fa64:	6978      	ldr	r0, [r7, #20]
 800fa66:	f7ff fd17 	bl	800f498 <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 800fa6a:	78fb      	ldrb	r3, [r7, #3]
 800fa6c:	2b06      	cmp	r3, #6
 800fa6e:	d002      	beq.n	800fa76 <hal_gpio_init_alt+0x34a>
 800fa70:	78fb      	ldrb	r3, [r7, #3]
 800fa72:	2b08      	cmp	r3, #8
 800fa74:	d105      	bne.n	800fa82 <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f7ff fd5e 	bl	800f538 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f7ff fda9 	bl	800f5d4 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 800fa82:	78fb      	ldrb	r3, [r7, #3]
 800fa84:	2b07      	cmp	r3, #7
 800fa86:	d002      	beq.n	800fa8e <hal_gpio_init_alt+0x362>
 800fa88:	78fb      	ldrb	r3, [r7, #3]
 800fa8a:	2b08      	cmp	r3, #8
 800fa8c:	d105      	bne.n	800fa9a <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	f7ff fd52 	bl	800f538 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800fa94:	68f8      	ldr	r0, [r7, #12]
 800fa96:	f7ff fdc3 	bl	800f620 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	2b09      	cmp	r3, #9
 800fa9e:	d002      	beq.n	800faa6 <hal_gpio_init_alt+0x37a>
 800faa0:	78fb      	ldrb	r3, [r7, #3]
 800faa2:	2b0b      	cmp	r3, #11
 800faa4:	d105      	bne.n	800fab2 <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 800faa6:	68f8      	ldr	r0, [r7, #12]
 800faa8:	f7ff fd82 	bl	800f5b0 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f7ff fd91 	bl	800f5d4 <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 800fab2:	78fb      	ldrb	r3, [r7, #3]
 800fab4:	2b0a      	cmp	r3, #10
 800fab6:	d003      	beq.n	800fac0 <hal_gpio_init_alt+0x394>
 800fab8:	78fb      	ldrb	r3, [r7, #3]
 800faba:	2b0b      	cmp	r3, #11
 800fabc:	f040 80a7 	bne.w	800fc0e <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f7ff fd39 	bl	800f538 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f7ff fdaa 	bl	800f620 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 800facc:	e09f      	b.n	800fc0e <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800face:	6938      	ldr	r0, [r7, #16]
 800fad0:	f7ff fd10 	bl	800f4f4 <LL_SYSCFG_GetEXTISource>
 800fad4:	4602      	mov	r2, r0
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	4293      	cmp	r3, r2
 800fada:	d10e      	bne.n	800fafa <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f7ff fd51 	bl	800f584 <LL_EXTI_IsEnabledIT_0_31>
 800fae2:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d008      	beq.n	800fafa <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f7ff fd37 	bl	800f55c <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800faee:	68f8      	ldr	r0, [r7, #12]
 800faf0:	f7ff fda8 	bl	800f644 <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f7ff fd7f 	bl	800f5f8 <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	2b03      	cmp	r3, #3
 800fafe:	d002      	beq.n	800fb06 <hal_gpio_init_alt+0x3da>
 800fb00:	78fb      	ldrb	r3, [r7, #3]
 800fb02:	2b04      	cmp	r3, #4
 800fb04:	d11a      	bne.n	800fb3c <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7ff fdd6 	bl	800f6b8 <hal_gpio_get_pin_number>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b07      	cmp	r3, #7
 800fb10:	d80a      	bhi.n	800fb28 <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6818      	ldr	r0, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	889b      	ldrh	r3, [r3, #4]
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb20:	461a      	mov	r2, r3
 800fb22:	f7ff fc58 	bl	800f3d6 <LL_GPIO_SetAFPin_0_7>
 800fb26:	e009      	b.n	800fb3c <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6818      	ldr	r0, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	889b      	ldrh	r3, [r3, #4]
 800fb30:	4619      	mov	r1, r3
 800fb32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb36:	461a      	mov	r2, r3
 800fb38:	f7ff fc7c 	bl	800f434 <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 800fb3c:	78fb      	ldrb	r3, [r7, #3]
 800fb3e:	2b05      	cmp	r3, #5
 800fb40:	d864      	bhi.n	800fc0c <hal_gpio_init_alt+0x4e0>
 800fb42:	a201      	add	r2, pc, #4	; (adr r2, 800fb48 <hal_gpio_init_alt+0x41c>)
 800fb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb48:	0800fb61 	.word	0x0800fb61
 800fb4c:	0800fb73 	.word	0x0800fb73
 800fb50:	0800fb95 	.word	0x0800fb95
 800fb54:	0800fbb7 	.word	0x0800fbb7
 800fb58:	0800fbd9 	.word	0x0800fbd9
 800fb5c:	0800fbfb 	.word	0x0800fbfb
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6818      	ldr	r0, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	889b      	ldrh	r3, [r3, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	f7ff fb8e 	bl	800f28c <LL_GPIO_SetPinMode>
			break;
 800fb70:	e04d      	b.n	800fc0e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6818      	ldr	r0, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	889b      	ldrh	r3, [r3, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	f7ff fb85 	bl	800f28c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6818      	ldr	r0, [r3, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	889b      	ldrh	r3, [r3, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	f7ff fbac 	bl	800f2ea <LL_GPIO_SetPinOutputType>
			break;
 800fb92:	e03c      	b.n	800fc0e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6818      	ldr	r0, [r3, #0]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	889b      	ldrh	r3, [r3, #4]
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	4619      	mov	r1, r3
 800fba0:	f7ff fb74 	bl	800f28c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6818      	ldr	r0, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	889b      	ldrh	r3, [r3, #4]
 800fbac:	2201      	movs	r2, #1
 800fbae:	4619      	mov	r1, r3
 800fbb0:	f7ff fb9b 	bl	800f2ea <LL_GPIO_SetPinOutputType>
			break;
 800fbb4:	e02b      	b.n	800fc0e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6818      	ldr	r0, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	889b      	ldrh	r3, [r3, #4]
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	f7ff fb63 	bl	800f28c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6818      	ldr	r0, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	889b      	ldrh	r3, [r3, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	f7ff fb8a 	bl	800f2ea <LL_GPIO_SetPinOutputType>
			break;
 800fbd6:	e01a      	b.n	800fc0e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	889b      	ldrh	r3, [r3, #4]
 800fbe0:	2202      	movs	r2, #2
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	f7ff fb52 	bl	800f28c <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6818      	ldr	r0, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	889b      	ldrh	r3, [r3, #4]
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	f7ff fb79 	bl	800f2ea <LL_GPIO_SetPinOutputType>
			break;
 800fbf8:	e009      	b.n	800fc0e <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6818      	ldr	r0, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	889b      	ldrh	r3, [r3, #4]
 800fc02:	2203      	movs	r2, #3
 800fc04:	4619      	mov	r1, r3
 800fc06:	f7ff fb41 	bl	800f28c <LL_GPIO_SetPinMode>
			break;
 800fc0a:	e000      	b.n	800fc0e <hal_gpio_init_alt+0x4e2>
			break;
 800fc0c:	bf00      	nop
}
 800fc0e:	bf00      	nop
 800fc10:	3718      	adds	r7, #24
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop

0800fc18 <hal_gpio_exti_call>:
	gpio_interrupt[pin].context = context;
	gpio_interrupt[pin].ready = true;
	taskEXIT_CRITICAL();
}

static void hal_gpio_exti_call(uint16_t pin_num) {
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	4603      	mov	r3, r0
 800fc20:	80fb      	strh	r3, [r7, #6]
	if(gpio_interrupt[pin_num].callback && gpio_interrupt[pin_num].ready) {
 800fc22:	88fa      	ldrh	r2, [r7, #6]
 800fc24:	4915      	ldr	r1, [pc, #84]	; (800fc7c <hal_gpio_exti_call+0x64>)
 800fc26:	4613      	mov	r3, r2
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	4413      	add	r3, r2
 800fc2c:	009b      	lsls	r3, r3, #2
 800fc2e:	440b      	add	r3, r1
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d01e      	beq.n	800fc74 <hal_gpio_exti_call+0x5c>
 800fc36:	88fa      	ldrh	r2, [r7, #6]
 800fc38:	4910      	ldr	r1, [pc, #64]	; (800fc7c <hal_gpio_exti_call+0x64>)
 800fc3a:	4613      	mov	r3, r2
 800fc3c:	005b      	lsls	r3, r3, #1
 800fc3e:	4413      	add	r3, r2
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	440b      	add	r3, r1
 800fc44:	3308      	adds	r3, #8
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d012      	beq.n	800fc74 <hal_gpio_exti_call+0x5c>
		gpio_interrupt[pin_num].callback(gpio_interrupt[pin_num].context);
 800fc4e:	88fa      	ldrh	r2, [r7, #6]
 800fc50:	490a      	ldr	r1, [pc, #40]	; (800fc7c <hal_gpio_exti_call+0x64>)
 800fc52:	4613      	mov	r3, r2
 800fc54:	005b      	lsls	r3, r3, #1
 800fc56:	4413      	add	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	440b      	add	r3, r1
 800fc5c:	6819      	ldr	r1, [r3, #0]
 800fc5e:	88fa      	ldrh	r2, [r7, #6]
 800fc60:	4806      	ldr	r0, [pc, #24]	; (800fc7c <hal_gpio_exti_call+0x64>)
 800fc62:	4613      	mov	r3, r2
 800fc64:	005b      	lsls	r3, r3, #1
 800fc66:	4413      	add	r3, r2
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	4403      	add	r3, r0
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4618      	mov	r0, r3
 800fc72:	4788      	blx	r1
	}
}
 800fc74:	bf00      	nop
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	20004c0c 	.word	0x20004c0c

0800fc80 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0)) {
 800fc84:	2001      	movs	r0, #1
 800fc86:	f7ff fcf1 	bl	800f66c <LL_EXTI_IsActiveFlag_0_31>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d005      	beq.n	800fc9c <EXTI0_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800fc90:	2001      	movs	r0, #1
 800fc92:	f7ff fd01 	bl	800f698 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(0);
 800fc96:	2000      	movs	r0, #0
 800fc98:	f7ff ffbe 	bl	800fc18 <hal_gpio_exti_call>
    }
}
 800fc9c:	bf00      	nop
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 800fca0:	b580      	push	{r7, lr}
 800fca2:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1)) {
 800fca4:	2002      	movs	r0, #2
 800fca6:	f7ff fce1 	bl	800f66c <LL_EXTI_IsActiveFlag_0_31>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d005      	beq.n	800fcbc <EXTI1_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800fcb0:	2002      	movs	r0, #2
 800fcb2:	f7ff fcf1 	bl	800f698 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(1);
 800fcb6:	2001      	movs	r0, #1
 800fcb8:	f7ff ffae 	bl	800fc18 <hal_gpio_exti_call>
    }
}
 800fcbc:	bf00      	nop
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2)) {
 800fcc4:	2004      	movs	r0, #4
 800fcc6:	f7ff fcd1 	bl	800f66c <LL_EXTI_IsActiveFlag_0_31>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d005      	beq.n	800fcdc <EXTI2_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800fcd0:	2004      	movs	r0, #4
 800fcd2:	f7ff fce1 	bl	800f698 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(2);
 800fcd6:	2002      	movs	r0, #2
 800fcd8:	f7ff ff9e 	bl	800fc18 <hal_gpio_exti_call>
    }
}
 800fcdc:	bf00      	nop
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 800fce0:	b580      	push	{r7, lr}
 800fce2:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3)) {
 800fce4:	2008      	movs	r0, #8
 800fce6:	f7ff fcc1 	bl	800f66c <LL_EXTI_IsActiveFlag_0_31>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d005      	beq.n	800fcfc <EXTI3_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800fcf0:	2008      	movs	r0, #8
 800fcf2:	f7ff fcd1 	bl	800f698 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(3);
 800fcf6:	2003      	movs	r0, #3
 800fcf8:	f7ff ff8e 	bl	800fc18 <hal_gpio_exti_call>
    }
}
 800fcfc:	bf00      	nop
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 800fd00:	b580      	push	{r7, lr}
 800fd02:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4)) {
 800fd04:	2010      	movs	r0, #16
 800fd06:	f7ff fcb1 	bl	800f66c <LL_EXTI_IsActiveFlag_0_31>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d005      	beq.n	800fd1c <EXTI4_IRQHandler+0x1c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800fd10:	2010      	movs	r0, #16
 800fd12:	f7ff fcc1 	bl	800f698 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(4);
 800fd16:	2004      	movs	r0, #4
 800fd18:	f7ff ff7e 	bl	800fc18 <hal_gpio_exti_call>
    }
}
 800fd1c:	bf00      	nop
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 800fd20:	b580      	push	{r7, lr}
 800fd22:	af00      	add	r7, sp, #0
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8)) {
 800fd24:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fd28:	f7ff fca0 	bl	800f66c <LL_EXTI_IsActiveFlag_0_31>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d006      	beq.n	800fd40 <EXTI9_5_IRQHandler+0x20>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 800fd32:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fd36:	f7ff fcaf 	bl	800f698 <LL_EXTI_ClearFlag_0_31>
        hal_gpio_exti_call(8);
 800fd3a:	2008      	movs	r0, #8
 800fd3c:	f7ff ff6c 	bl	800fc18 <hal_gpio_exti_call>
    }
}
 800fd40:	bf00      	nop
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
        __asm volatile
 800fd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4e:	f383 8811 	msr	BASEPRI, r3
 800fd52:	f3bf 8f6f 	isb	sy
 800fd56:	f3bf 8f4f 	dsb	sy
 800fd5a:	607b      	str	r3, [r7, #4]
    }
 800fd5c:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800fd5e:	e7fe      	b.n	800fd5e <vApplicationMallocFailedHook+0x1a>

0800fd60 <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 800fd60:	b480      	push	{r7}
 800fd62:	b085      	sub	sp, #20
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
        __asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	60fb      	str	r3, [r7, #12]
    }
 800fd7c:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800fd7e:	e7fe      	b.n	800fd7e <vApplicationStackOverflowHook+0x1e>

0800fd80 <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4a07      	ldr	r2, [pc, #28]	; (800fdac <vApplicationGetIdleTaskMemory+0x2c>)
 800fd90:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	4a06      	ldr	r2, [pc, #24]	; (800fdb0 <vApplicationGetIdleTaskMemory+0x30>)
 800fd96:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd9e:	601a      	str	r2, [r3, #0]
}
 800fda0:	bf00      	nop
 800fda2:	3714      	adds	r7, #20
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	20004ccc 	.word	0x20004ccc
 800fdb0:	20004d28 	.word	0x20004d28

0800fdb4 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4a07      	ldr	r2, [pc, #28]	; (800fde0 <vApplicationGetTimerTaskMemory+0x2c>)
 800fdc4:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	4a06      	ldr	r2, [pc, #24]	; (800fde4 <vApplicationGetTimerTaskMemory+0x30>)
 800fdca:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdd2:	601a      	str	r2, [r3, #0]
}
 800fdd4:	bf00      	nop
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr
 800fde0:	20005528 	.word	0x20005528
 800fde4:	20005584 	.word	0x20005584

0800fde8 <__NVIC_GetPriorityGrouping>:
{
 800fde8:	b480      	push	{r7}
 800fdea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800fdec:	4b04      	ldr	r3, [pc, #16]	; (800fe00 <__NVIC_GetPriorityGrouping+0x18>)
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	0a1b      	lsrs	r3, r3, #8
 800fdf2:	f003 0307 	and.w	r3, r3, #7
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr
 800fe00:	e000ed00 	.word	0xe000ed00

0800fe04 <__NVIC_EnableIRQ>:
{
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	db0b      	blt.n	800fe2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fe16:	79fb      	ldrb	r3, [r7, #7]
 800fe18:	f003 021f 	and.w	r2, r3, #31
 800fe1c:	4907      	ldr	r1, [pc, #28]	; (800fe3c <__NVIC_EnableIRQ+0x38>)
 800fe1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe22:	095b      	lsrs	r3, r3, #5
 800fe24:	2001      	movs	r0, #1
 800fe26:	fa00 f202 	lsl.w	r2, r0, r2
 800fe2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fe2e:	bf00      	nop
 800fe30:	370c      	adds	r7, #12
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	e000e100 	.word	0xe000e100

0800fe40 <__NVIC_SetPriority>:
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	4603      	mov	r3, r0
 800fe48:	6039      	str	r1, [r7, #0]
 800fe4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	db0a      	blt.n	800fe6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	490c      	ldr	r1, [pc, #48]	; (800fe8c <__NVIC_SetPriority+0x4c>)
 800fe5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe5e:	0112      	lsls	r2, r2, #4
 800fe60:	b2d2      	uxtb	r2, r2
 800fe62:	440b      	add	r3, r1
 800fe64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fe68:	e00a      	b.n	800fe80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	b2da      	uxtb	r2, r3
 800fe6e:	4908      	ldr	r1, [pc, #32]	; (800fe90 <__NVIC_SetPriority+0x50>)
 800fe70:	79fb      	ldrb	r3, [r7, #7]
 800fe72:	f003 030f 	and.w	r3, r3, #15
 800fe76:	3b04      	subs	r3, #4
 800fe78:	0112      	lsls	r2, r2, #4
 800fe7a:	b2d2      	uxtb	r2, r2
 800fe7c:	440b      	add	r3, r1
 800fe7e:	761a      	strb	r2, [r3, #24]
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr
 800fe8c:	e000e100 	.word	0xe000e100
 800fe90:	e000ed00 	.word	0xe000ed00

0800fe94 <NVIC_EncodePriority>:
{
 800fe94:	b480      	push	{r7}
 800fe96:	b089      	sub	sp, #36	; 0x24
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f003 0307 	and.w	r3, r3, #7
 800fea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	f1c3 0307 	rsb	r3, r3, #7
 800feae:	2b04      	cmp	r3, #4
 800feb0:	bf28      	it	cs
 800feb2:	2304      	movcs	r3, #4
 800feb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	3304      	adds	r3, #4
 800feba:	2b06      	cmp	r3, #6
 800febc:	d902      	bls.n	800fec4 <NVIC_EncodePriority+0x30>
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	3b03      	subs	r3, #3
 800fec2:	e000      	b.n	800fec6 <NVIC_EncodePriority+0x32>
 800fec4:	2300      	movs	r3, #0
 800fec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	fa02 f303 	lsl.w	r3, r2, r3
 800fed2:	43da      	mvns	r2, r3
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	401a      	ands	r2, r3
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fedc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	fa01 f303 	lsl.w	r3, r1, r3
 800fee6:	43d9      	mvns	r1, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800feec:	4313      	orrs	r3, r2
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3724      	adds	r7, #36	; 0x24
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <LL_I2C_EnableClockStretching>:
{
 800fefa:	b480      	push	{r7}
 800fefc:	b083      	sub	sp, #12
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
}
 800ff0e:	bf00      	nop
 800ff10:	370c      	adds	r7, #12
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr

0800ff1a <LL_I2C_DisableGeneralCall>:
{
 800ff1a:	b480      	push	{r7}
 800ff1c:	b083      	sub	sp, #12
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	601a      	str	r2, [r3, #0]
}
 800ff2e:	bf00      	nop
 800ff30:	370c      	adds	r7, #12
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <LL_I2C_SetOwnAddress2>:
{
 800ff3a:	b480      	push	{r7}
 800ff3c:	b083      	sub	sp, #12
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	431a      	orrs	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	60da      	str	r2, [r3, #12]
}
 800ff54:	bf00      	nop
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <LL_I2C_DisableOwnAddress2>:
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	f023 0201 	bic.w	r2, r3, #1
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	60da      	str	r2, [r3, #12]
}
 800ff74:	bf00      	nop
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <LL_I2C_IsActiveFlag_TXE>:
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	695b      	ldr	r3, [r3, #20]
 800ff8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff90:	2b80      	cmp	r3, #128	; 0x80
 800ff92:	bf0c      	ite	eq
 800ff94:	2301      	moveq	r3, #1
 800ff96:	2300      	movne	r3, #0
 800ff98:	b2db      	uxtb	r3, r3
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <LL_I2C_IsActiveFlag_BTF>:
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b083      	sub	sp, #12
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	695b      	ldr	r3, [r3, #20]
 800ffb2:	f003 0304 	and.w	r3, r3, #4
 800ffb6:	2b04      	cmp	r3, #4
 800ffb8:	bf0c      	ite	eq
 800ffba:	2301      	moveq	r3, #1
 800ffbc:	2300      	movne	r3, #0
 800ffbe:	b2db      	uxtb	r3, r3
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <LL_I2C_IsActiveFlag_RXNE>:
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	695b      	ldr	r3, [r3, #20]
 800ffd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffdc:	2b40      	cmp	r3, #64	; 0x40
 800ffde:	bf0c      	ite	eq
 800ffe0:	2301      	moveq	r3, #1
 800ffe2:	2300      	movne	r3, #0
 800ffe4:	b2db      	uxtb	r3, r3
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	370c      	adds	r7, #12
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <LL_I2C_IsActiveFlag_SB>:
{
 800fff2:	b480      	push	{r7}
 800fff4:	b083      	sub	sp, #12
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	695b      	ldr	r3, [r3, #20]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b01      	cmp	r3, #1
 8010004:	bf0c      	ite	eq
 8010006:	2301      	moveq	r3, #1
 8010008:	2300      	movne	r3, #0
 801000a:	b2db      	uxtb	r3, r3
}
 801000c:	4618      	mov	r0, r3
 801000e:	370c      	adds	r7, #12
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr

08010018 <LL_I2C_IsActiveFlag_ADDR>:
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	695b      	ldr	r3, [r3, #20]
 8010024:	f003 0302 	and.w	r3, r3, #2
 8010028:	2b02      	cmp	r3, #2
 801002a:	bf0c      	ite	eq
 801002c:	2301      	moveq	r3, #1
 801002e:	2300      	movne	r3, #0
 8010030:	b2db      	uxtb	r3, r3
}
 8010032:	4618      	mov	r0, r3
 8010034:	370c      	adds	r7, #12
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <LL_I2C_IsActiveFlag_BUSY>:
{
 801003e:	b480      	push	{r7}
 8010040:	b083      	sub	sp, #12
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	699b      	ldr	r3, [r3, #24]
 801004a:	f003 0302 	and.w	r3, r3, #2
 801004e:	2b02      	cmp	r3, #2
 8010050:	bf0c      	ite	eq
 8010052:	2301      	moveq	r3, #1
 8010054:	2300      	movne	r3, #0
 8010056:	b2db      	uxtb	r3, r3
}
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <LL_I2C_ClearFlag_ADDR>:
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	695b      	ldr	r3, [r3, #20]
 8010070:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8010072:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 801007a:	68fb      	ldr	r3, [r7, #12]
}
 801007c:	bf00      	nop
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <LL_I2C_AcknowledgeNextData>:
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	431a      	orrs	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	601a      	str	r2, [r3, #0]
}
 80100a2:	bf00      	nop
 80100a4:	370c      	adds	r7, #12
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80100ae:	b480      	push	{r7}
 80100b0:	b083      	sub	sp, #12
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	601a      	str	r2, [r3, #0]
}
 80100c2:	bf00      	nop
 80100c4:	370c      	adds	r7, #12
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 80100ce:	b480      	push	{r7}
 80100d0:	b083      	sub	sp, #12
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	601a      	str	r2, [r3, #0]
}
 80100e2:	bf00      	nop
 80100e4:	370c      	adds	r7, #12
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr

080100ee <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80100ee:	b480      	push	{r7}
 80100f0:	b083      	sub	sp, #12
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	b2db      	uxtb	r3, r3
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	691b      	ldr	r3, [r3, #16]
 8010118:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801011c:	78fb      	ldrb	r3, [r7, #3]
 801011e:	431a      	orrs	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	611a      	str	r2, [r3, #16]
}
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <LL_DMA_SetDataTransferDirection>:
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 801013c:	4a0d      	ldr	r2, [pc, #52]	; (8010174 <LL_DMA_SetDataTransferDirection+0x44>)
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	4413      	add	r3, r2
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	461a      	mov	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	4413      	add	r3, r2
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010150:	4908      	ldr	r1, [pc, #32]	; (8010174 <LL_DMA_SetDataTransferDirection+0x44>)
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	440b      	add	r3, r1
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	4619      	mov	r1, r3
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	440b      	add	r3, r1
 801015e:	4619      	mov	r1, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	4313      	orrs	r3, r2
 8010164:	600b      	str	r3, [r1, #0]
}
 8010166:	bf00      	nop
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	0801428c 	.word	0x0801428c

08010178 <LL_DMA_SetMode>:
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8010184:	4a0d      	ldr	r2, [pc, #52]	; (80101bc <LL_DMA_SetMode+0x44>)
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	4413      	add	r3, r2
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	461a      	mov	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	4413      	add	r3, r2
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8010198:	4908      	ldr	r1, [pc, #32]	; (80101bc <LL_DMA_SetMode+0x44>)
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	440b      	add	r3, r1
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	4619      	mov	r1, r3
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	440b      	add	r3, r1
 80101a6:	4619      	mov	r1, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	4313      	orrs	r3, r2
 80101ac:	600b      	str	r3, [r1, #0]
}
 80101ae:	bf00      	nop
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	0801428c 	.word	0x0801428c

080101c0 <LL_DMA_SetPeriphIncMode>:
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80101cc:	4a0d      	ldr	r2, [pc, #52]	; (8010204 <LL_DMA_SetPeriphIncMode+0x44>)
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	4413      	add	r3, r2
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	461a      	mov	r2, r3
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	4413      	add	r3, r2
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80101e0:	4908      	ldr	r1, [pc, #32]	; (8010204 <LL_DMA_SetPeriphIncMode+0x44>)
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	440b      	add	r3, r1
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	4619      	mov	r1, r3
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	440b      	add	r3, r1
 80101ee:	4619      	mov	r1, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	600b      	str	r3, [r1, #0]
}
 80101f6:	bf00      	nop
 80101f8:	3714      	adds	r7, #20
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	0801428c 	.word	0x0801428c

08010208 <LL_DMA_SetMemoryIncMode>:
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8010214:	4a0d      	ldr	r2, [pc, #52]	; (801024c <LL_DMA_SetMemoryIncMode+0x44>)
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	4413      	add	r3, r2
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	461a      	mov	r2, r3
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	4413      	add	r3, r2
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010228:	4908      	ldr	r1, [pc, #32]	; (801024c <LL_DMA_SetMemoryIncMode+0x44>)
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	440b      	add	r3, r1
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	4619      	mov	r1, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	440b      	add	r3, r1
 8010236:	4619      	mov	r1, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4313      	orrs	r3, r2
 801023c:	600b      	str	r3, [r1, #0]
}
 801023e:	bf00      	nop
 8010240:	3714      	adds	r7, #20
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	0801428c 	.word	0x0801428c

08010250 <LL_DMA_SetPeriphSize>:
{
 8010250:	b480      	push	{r7}
 8010252:	b085      	sub	sp, #20
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 801025c:	4a0d      	ldr	r2, [pc, #52]	; (8010294 <LL_DMA_SetPeriphSize+0x44>)
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	4413      	add	r3, r2
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	461a      	mov	r2, r3
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	4413      	add	r3, r2
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010270:	4908      	ldr	r1, [pc, #32]	; (8010294 <LL_DMA_SetPeriphSize+0x44>)
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	440b      	add	r3, r1
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	4619      	mov	r1, r3
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	440b      	add	r3, r1
 801027e:	4619      	mov	r1, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4313      	orrs	r3, r2
 8010284:	600b      	str	r3, [r1, #0]
}
 8010286:	bf00      	nop
 8010288:	3714      	adds	r7, #20
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	0801428c 	.word	0x0801428c

08010298 <LL_DMA_SetMemorySize>:
{
 8010298:	b480      	push	{r7}
 801029a:	b085      	sub	sp, #20
 801029c:	af00      	add	r7, sp, #0
 801029e:	60f8      	str	r0, [r7, #12]
 80102a0:	60b9      	str	r1, [r7, #8]
 80102a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80102a4:	4a0d      	ldr	r2, [pc, #52]	; (80102dc <LL_DMA_SetMemorySize+0x44>)
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	4413      	add	r3, r2
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	461a      	mov	r2, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	4413      	add	r3, r2
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80102b8:	4908      	ldr	r1, [pc, #32]	; (80102dc <LL_DMA_SetMemorySize+0x44>)
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	440b      	add	r3, r1
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	4619      	mov	r1, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	440b      	add	r3, r1
 80102c6:	4619      	mov	r1, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4313      	orrs	r3, r2
 80102cc:	600b      	str	r3, [r1, #0]
}
 80102ce:	bf00      	nop
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	0801428c 	.word	0x0801428c

080102e0 <LL_DMA_SetStreamPriorityLevel>:
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80102ec:	4a0d      	ldr	r2, [pc, #52]	; (8010324 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	4413      	add	r3, r2
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	461a      	mov	r2, r3
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	4413      	add	r3, r2
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010300:	4908      	ldr	r1, [pc, #32]	; (8010324 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	440b      	add	r3, r1
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	4619      	mov	r1, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	440b      	add	r3, r1
 801030e:	4619      	mov	r1, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4313      	orrs	r3, r2
 8010314:	600b      	str	r3, [r1, #0]
}
 8010316:	bf00      	nop
 8010318:	3714      	adds	r7, #20
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	0801428c 	.word	0x0801428c

08010328 <LL_DMA_SetChannelSelection>:
{
 8010328:	b480      	push	{r7}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8010334:	4a0d      	ldr	r2, [pc, #52]	; (801036c <LL_DMA_SetChannelSelection+0x44>)
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	4413      	add	r3, r2
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	4413      	add	r3, r2
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8010348:	4908      	ldr	r1, [pc, #32]	; (801036c <LL_DMA_SetChannelSelection+0x44>)
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	440b      	add	r3, r1
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	4619      	mov	r1, r3
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	440b      	add	r3, r1
 8010356:	4619      	mov	r1, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4313      	orrs	r3, r2
 801035c:	600b      	str	r3, [r1, #0]
}
 801035e:	bf00      	nop
 8010360:	3714      	adds	r7, #20
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	0801428c 	.word	0x0801428c

08010370 <LL_DMA_DisableFifoMode>:
{
 8010370:	b480      	push	{r7}
 8010372:	b083      	sub	sp, #12
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 801037a:	4a0c      	ldr	r2, [pc, #48]	; (80103ac <LL_DMA_DisableFifoMode+0x3c>)
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	4413      	add	r3, r2
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	461a      	mov	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4413      	add	r3, r2
 8010388:	695b      	ldr	r3, [r3, #20]
 801038a:	4908      	ldr	r1, [pc, #32]	; (80103ac <LL_DMA_DisableFifoMode+0x3c>)
 801038c:	683a      	ldr	r2, [r7, #0]
 801038e:	440a      	add	r2, r1
 8010390:	7812      	ldrb	r2, [r2, #0]
 8010392:	4611      	mov	r1, r2
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	440a      	add	r2, r1
 8010398:	f023 0304 	bic.w	r3, r3, #4
 801039c:	6153      	str	r3, [r2, #20]
}
 801039e:	bf00      	nop
 80103a0:	370c      	adds	r7, #12
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	0801428c 	.word	0x0801428c

080103b0 <i2c_init>:

#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	4603      	mov	r3, r0
 80103b8:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 80103ba:	f7f8 fdc5 	bl	8008f48 <vPortEnterCritical>

	switch(i2c_id) {
 80103be:	79fb      	ldrb	r3, [r7, #7]
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d002      	beq.n	80103ca <i2c_init+0x1a>
 80103c4:	2b03      	cmp	r3, #3
 80103c6:	d00f      	beq.n	80103e8 <i2c_init+0x38>
 80103c8:	e01d      	b.n	8010406 <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 80103ca:	f000 faab 	bl	8010924 <i2c1_init>
		i2c1drv.i2c = I2C1;
 80103ce:	4b13      	ldr	r3, [pc, #76]	; (801041c <i2c_init+0x6c>)
 80103d0:	4a13      	ldr	r2, [pc, #76]	; (8010420 <i2c_init+0x70>)
 80103d2:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 80103d4:	2001      	movs	r0, #1
 80103d6:	f7f9 f8ad 	bl	8009534 <xQueueCreateMutex>
 80103da:	4603      	mov	r3, r0
 80103dc:	4a0f      	ldr	r2, [pc, #60]	; (801041c <i2c_init+0x6c>)
 80103de:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 80103e0:	4810      	ldr	r0, [pc, #64]	; (8010424 <i2c_init+0x74>)
 80103e2:	f7fe fc33 	bl	800ec4c <hal_cli_printf>
		break;
 80103e6:	e012      	b.n	801040e <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 80103e8:	f000 fb64 	bl	8010ab4 <i2c3_init>
		i2c3drv.i2c = I2C3;
 80103ec:	4b0e      	ldr	r3, [pc, #56]	; (8010428 <i2c_init+0x78>)
 80103ee:	4a0f      	ldr	r2, [pc, #60]	; (801042c <i2c_init+0x7c>)
 80103f0:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 80103f2:	2001      	movs	r0, #1
 80103f4:	f7f9 f89e 	bl	8009534 <xQueueCreateMutex>
 80103f8:	4603      	mov	r3, r0
 80103fa:	4a0b      	ldr	r2, [pc, #44]	; (8010428 <i2c_init+0x78>)
 80103fc:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 80103fe:	480c      	ldr	r0, [pc, #48]	; (8010430 <i2c_init+0x80>)
 8010400:	f7fe fc24 	bl	800ec4c <hal_cli_printf>
		break;
 8010404:	e003      	b.n	801040e <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 8010406:	480b      	ldr	r0, [pc, #44]	; (8010434 <i2c_init+0x84>)
 8010408:	f7fe fc20 	bl	800ec4c <hal_cli_printf>
		break;
 801040c:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 801040e:	f7f8 fdcb 	bl	8008fa8 <vPortExitCritical>
}
 8010412:	bf00      	nop
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	20005984 	.word	0x20005984
 8010420:	40005400 	.word	0x40005400
 8010424:	08013a74 	.word	0x08013a74
 8010428:	2000598c 	.word	0x2000598c
 801042c:	40005c00 	.word	0x40005c00
 8010430:	08013a80 	.word	0x08013a80
 8010434:	08013a8c 	.word	0x08013a8c

08010438 <hal_i2c_transfer>:

bool hal_i2c_transfer(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b08a      	sub	sp, #40	; 0x28
 801043c:	af00      	add	r7, sp, #0
 801043e:	6178      	str	r0, [r7, #20]
 8010440:	60fa      	str	r2, [r7, #12]
 8010442:	60bb      	str	r3, [r7, #8]
 8010444:	460b      	mov	r3, r1
 8010446:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 8010448:	2300      	movs	r3, #0
 801044a:	627b      	str	r3, [r7, #36]	; 0x24

	timeout *= 1000;
 801044c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801044e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010452:	fb02 f303 	mul.w	r3, r2, r3
 8010456:	637b      	str	r3, [r7, #52]	; 0x34

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010460:	4618      	mov	r0, r3
 8010462:	f7f9 fb73 	bl	8009b4c <xQueueSemaphoreTake>
 8010466:	4603      	mov	r3, r0
 8010468:	2b01      	cmp	r3, #1
 801046a:	d004      	beq.n	8010476 <hal_i2c_transfer+0x3e>
		hal_cli_printf("i2c semaphore take timeout");
 801046c:	4899      	ldr	r0, [pc, #612]	; (80106d4 <hal_i2c_transfer+0x29c>)
 801046e:	f7fe fbed 	bl	800ec4c <hal_cli_printf>
		return false;
 8010472:	2300      	movs	r3, #0
 8010474:	e129      	b.n	80106ca <hal_i2c_transfer+0x292>
	}

	timer = hal_get_delay_timer(timeout);
 8010476:	463b      	mov	r3, r7
 8010478:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe fec8 	bl	800f210 <hal_get_delay_timer>
 8010480:	f107 031c 	add.w	r3, r7, #28
 8010484:	463a      	mov	r2, r7
 8010486:	e892 0003 	ldmia.w	r2, {r0, r1}
 801048a:	e883 0003 	stmia.w	r3, {r0, r1}

	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 801048e:	e013      	b.n	80104b8 <hal_i2c_transfer+0x80>
		if(hal_delay_timer_is_expired(&timer)) {
 8010490:	f107 031c 	add.w	r3, r7, #28
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe fee1 	bl	800f25c <hal_delay_timer_is_expired>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00b      	beq.n	80104b8 <hal_i2c_transfer+0x80>
			xSemaphoreGive(drv->mutex);
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	6858      	ldr	r0, [r3, #4]
 80104a4:	2300      	movs	r3, #0
 80104a6:	2200      	movs	r2, #0
 80104a8:	2100      	movs	r1, #0
 80104aa:	f7f9 f85b 	bl	8009564 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 80104ae:	488a      	ldr	r0, [pc, #552]	; (80106d8 <hal_i2c_transfer+0x2a0>)
 80104b0:	f7fe fbcc 	bl	800ec4c <hal_cli_printf>
			return false;
 80104b4:	2300      	movs	r3, #0
 80104b6:	e108      	b.n	80106ca <hal_i2c_transfer+0x292>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7ff fdbe 	bl	801003e <LL_I2C_IsActiveFlag_BUSY>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1e3      	bne.n	8010490 <hal_i2c_transfer+0x58>
		}
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7ff fdee 	bl	80100ae <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 80104d2:	e018      	b.n	8010506 <hal_i2c_transfer+0xce>
		if(hal_delay_timer_is_expired(&timer)) {
 80104d4:	f107 031c 	add.w	r3, r7, #28
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe febf 	bl	800f25c <hal_delay_timer_is_expired>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d010      	beq.n	8010506 <hal_i2c_transfer+0xce>
			xSemaphoreGive(drv->mutex);
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	6858      	ldr	r0, [r3, #4]
 80104e8:	2300      	movs	r3, #0
 80104ea:	2200      	movs	r2, #0
 80104ec:	2100      	movs	r1, #0
 80104ee:	f7f9 f839 	bl	8009564 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7ff fde9 	bl	80100ce <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 80104fc:	4877      	ldr	r0, [pc, #476]	; (80106dc <hal_i2c_transfer+0x2a4>)
 80104fe:	f7fe fba5 	bl	800ec4c <hal_cli_printf>
			return false;
 8010502:	2300      	movs	r3, #0
 8010504:	e0e1      	b.n	80106ca <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4618      	mov	r0, r3
 801050c:	f7ff fd71 	bl	800fff2 <LL_I2C_IsActiveFlag_SB>
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0de      	beq.n	80104d4 <hal_i2c_transfer+0x9c>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr);
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	7cfa      	ldrb	r2, [r7, #19]
 801051c:	4611      	mov	r1, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff fdf2 	bl	8010108 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8010524:	e018      	b.n	8010558 <hal_i2c_transfer+0x120>
		if(hal_delay_timer_is_expired(&timer)) {
 8010526:	f107 031c 	add.w	r3, r7, #28
 801052a:	4618      	mov	r0, r3
 801052c:	f7fe fe96 	bl	800f25c <hal_delay_timer_is_expired>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d010      	beq.n	8010558 <hal_i2c_transfer+0x120>
			xSemaphoreGive(drv->mutex);
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	6858      	ldr	r0, [r3, #4]
 801053a:	2300      	movs	r3, #0
 801053c:	2200      	movs	r2, #0
 801053e:	2100      	movs	r1, #0
 8010540:	f7f9 f810 	bl	8009564 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff fdc0 	bl	80100ce <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 801054e:	4864      	ldr	r0, [pc, #400]	; (80106e0 <hal_i2c_transfer+0x2a8>)
 8010550:	f7fe fb7c 	bl	800ec4c <hal_cli_printf>
			return false;
 8010554:	2300      	movs	r3, #0
 8010556:	e0b8      	b.n	80106ca <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fd5b 	bl	8010018 <LL_I2C_IsActiveFlag_ADDR>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d0de      	beq.n	8010526 <hal_i2c_transfer+0xee>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff fd79 	bl	8010064 <LL_I2C_ClearFlag_ADDR>

	/* register address transfer */
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8010572:	e018      	b.n	80105a6 <hal_i2c_transfer+0x16e>
		if(hal_delay_timer_is_expired(&timer)) {
 8010574:	f107 031c 	add.w	r3, r7, #28
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe fe6f 	bl	800f25c <hal_delay_timer_is_expired>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d010      	beq.n	80105a6 <hal_i2c_transfer+0x16e>
			xSemaphoreGive(drv->mutex);
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	6858      	ldr	r0, [r3, #4]
 8010588:	2300      	movs	r3, #0
 801058a:	2200      	movs	r2, #0
 801058c:	2100      	movs	r1, #0
 801058e:	f7f8 ffe9 	bl	8009564 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4618      	mov	r0, r3
 8010598:	f7ff fd99 	bl	80100ce <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c register address transmit timeout");
 801059c:	4851      	ldr	r0, [pc, #324]	; (80106e4 <hal_i2c_transfer+0x2ac>)
 801059e:	f7fe fb55 	bl	800ec4c <hal_cli_printf>
			return false;
 80105a2:	2300      	movs	r3, #0
 80105a4:	e091      	b.n	80106ca <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff fce8 	bl	800ff80 <LL_I2C_IsActiveFlag_TXE>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d0de      	beq.n	8010574 <hal_i2c_transfer+0x13c>
		}
	}
	LL_I2C_TransmitData8(drv->i2c, regaddr);
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	b2d2      	uxtb	r2, r2
 80105be:	4611      	mov	r1, r2
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7ff fda1 	bl	8010108 <LL_I2C_TransmitData8>


	while(index < size) {
 80105c6:	e02b      	b.n	8010620 <hal_i2c_transfer+0x1e8>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 80105c8:	f107 031c 	add.w	r3, r7, #28
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fe fe45 	bl	800f25c <hal_delay_timer_is_expired>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d010      	beq.n	80105fa <hal_i2c_transfer+0x1c2>
				xSemaphoreGive(drv->mutex);
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	6858      	ldr	r0, [r3, #4]
 80105dc:	2300      	movs	r3, #0
 80105de:	2200      	movs	r2, #0
 80105e0:	2100      	movs	r1, #0
 80105e2:	f7f8 ffbf 	bl	8009564 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7ff fd6f 	bl	80100ce <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c TXE flag timeout");
 80105f0:	483d      	ldr	r0, [pc, #244]	; (80106e8 <hal_i2c_transfer+0x2b0>)
 80105f2:	f7fe fb2b 	bl	800ec4c <hal_cli_printf>
				return false;
 80105f6:	2300      	movs	r3, #0
 80105f8:	e067      	b.n	80106ca <hal_i2c_transfer+0x292>
		while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff fcbe 	bl	800ff80 <LL_I2C_IsActiveFlag_TXE>
 8010604:	4603      	mov	r3, r0
 8010606:	2b00      	cmp	r3, #0
 8010608:	d0de      	beq.n	80105c8 <hal_i2c_transfer+0x190>
			}
		}

		LL_I2C_TransmitData8(drv->i2c, buf[index++]);
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	6818      	ldr	r0, [r3, #0]
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	627a      	str	r2, [r7, #36]	; 0x24
 8010614:	68ba      	ldr	r2, [r7, #8]
 8010616:	4413      	add	r3, r2
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	4619      	mov	r1, r3
 801061c:	f7ff fd74 	bl	8010108 <LL_I2C_TransmitData8>
	while(index < size) {
 8010620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010624:	429a      	cmp	r2, r3
 8010626:	d3e8      	bcc.n	80105fa <hal_i2c_transfer+0x1c2>
	}


	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 8010628:	e018      	b.n	801065c <hal_i2c_transfer+0x224>
		if(hal_delay_timer_is_expired(&timer)) {
 801062a:	f107 031c 	add.w	r3, r7, #28
 801062e:	4618      	mov	r0, r3
 8010630:	f7fe fe14 	bl	800f25c <hal_delay_timer_is_expired>
 8010634:	4603      	mov	r3, r0
 8010636:	2b00      	cmp	r3, #0
 8010638:	d010      	beq.n	801065c <hal_i2c_transfer+0x224>
			xSemaphoreGive(drv->mutex);
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	6858      	ldr	r0, [r3, #4]
 801063e:	2300      	movs	r3, #0
 8010640:	2200      	movs	r2, #0
 8010642:	2100      	movs	r1, #0
 8010644:	f7f8 ff8e 	bl	8009564 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4618      	mov	r0, r3
 801064e:	f7ff fd3e 	bl	80100ce <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c TXE flag timeout");
 8010652:	4825      	ldr	r0, [pc, #148]	; (80106e8 <hal_i2c_transfer+0x2b0>)
 8010654:	f7fe fafa 	bl	800ec4c <hal_cli_printf>
			return false;
 8010658:	2300      	movs	r3, #0
 801065a:	e036      	b.n	80106ca <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_TXE(drv->i2c)) {
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4618      	mov	r0, r3
 8010662:	f7ff fc8d 	bl	800ff80 <LL_I2C_IsActiveFlag_TXE>
 8010666:	4603      	mov	r3, r0
 8010668:	2b00      	cmp	r3, #0
 801066a:	d0de      	beq.n	801062a <hal_i2c_transfer+0x1f2>
		}
	}

	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 801066c:	e018      	b.n	80106a0 <hal_i2c_transfer+0x268>
		if(hal_delay_timer_is_expired(&timer)) {
 801066e:	f107 031c 	add.w	r3, r7, #28
 8010672:	4618      	mov	r0, r3
 8010674:	f7fe fdf2 	bl	800f25c <hal_delay_timer_is_expired>
 8010678:	4603      	mov	r3, r0
 801067a:	2b00      	cmp	r3, #0
 801067c:	d010      	beq.n	80106a0 <hal_i2c_transfer+0x268>
			xSemaphoreGive(drv->mutex);
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	6858      	ldr	r0, [r3, #4]
 8010682:	2300      	movs	r3, #0
 8010684:	2200      	movs	r2, #0
 8010686:	2100      	movs	r1, #0
 8010688:	f7f8 ff6c 	bl	8009564 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4618      	mov	r0, r3
 8010692:	f7ff fd1c 	bl	80100ce <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c BTF flag timeout");
 8010696:	4815      	ldr	r0, [pc, #84]	; (80106ec <hal_i2c_transfer+0x2b4>)
 8010698:	f7fe fad8 	bl	800ec4c <hal_cli_printf>
			return false;
 801069c:	2300      	movs	r3, #0
 801069e:	e014      	b.n	80106ca <hal_i2c_transfer+0x292>
	while(!LL_I2C_IsActiveFlag_BTF(drv->i2c)) {
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff fc7e 	bl	800ffa6 <LL_I2C_IsActiveFlag_BTF>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d0de      	beq.n	801066e <hal_i2c_transfer+0x236>
		}
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7ff fd0a 	bl	80100ce <LL_I2C_GenerateStopCondition>
	xSemaphoreGive(drv->mutex);
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	6858      	ldr	r0, [r3, #4]
 80106be:	2300      	movs	r3, #0
 80106c0:	2200      	movs	r2, #0
 80106c2:	2100      	movs	r1, #0
 80106c4:	f7f8 ff4e 	bl	8009564 <xQueueGenericSend>

	return true;
 80106c8:	2301      	movs	r3, #1
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3728      	adds	r7, #40	; 0x28
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	08013aa0 	.word	0x08013aa0
 80106d8:	08013abc 	.word	0x08013abc
 80106dc:	08013ad4 	.word	0x08013ad4
 80106e0:	08013af0 	.word	0x08013af0
 80106e4:	08013b10 	.word	0x08013b10
 80106e8:	08013b38 	.word	0x08013b38
 80106ec:	08013b50 	.word	0x08013b50

080106f0 <hal_i2c_receive>:


bool hal_i2c_receive(i2cdrv_t* drv, uint8_t addr, uint32_t regaddr, uint8_t* buf, uint32_t size, uint32_t timeout)
{
 80106f0:	b590      	push	{r4, r7, lr}
 80106f2:	b08d      	sub	sp, #52	; 0x34
 80106f4:	af02      	add	r7, sp, #8
 80106f6:	6178      	str	r0, [r7, #20]
 80106f8:	60fa      	str	r2, [r7, #12]
 80106fa:	60bb      	str	r3, [r7, #8]
 80106fc:	460b      	mov	r3, r1
 80106fe:	74fb      	strb	r3, [r7, #19]
	coretex_timer timer;
	uint32_t index = 0;
 8010700:	2300      	movs	r3, #0
 8010702:	627b      	str	r3, [r7, #36]	; 0x24

	if(hal_i2c_transfer(drv,addr,regaddr,NULL,0,timeout) == false) {
 8010704:	7cf9      	ldrb	r1, [r7, #19]
 8010706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010708:	9301      	str	r3, [sp, #4]
 801070a:	2300      	movs	r3, #0
 801070c:	9300      	str	r3, [sp, #0]
 801070e:	2300      	movs	r3, #0
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	6978      	ldr	r0, [r7, #20]
 8010714:	f7ff fe90 	bl	8010438 <hal_i2c_transfer>
 8010718:	4603      	mov	r3, r0
 801071a:	f083 0301 	eor.w	r3, r3, #1
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	d004      	beq.n	801072e <hal_i2c_receive+0x3e>
		hal_cli_printf("i2c transfer error");
 8010724:	4879      	ldr	r0, [pc, #484]	; (801090c <hal_i2c_receive+0x21c>)
 8010726:	f7fe fa91 	bl	800ec4c <hal_cli_printf>
		return false;
 801072a:	2300      	movs	r3, #0
 801072c:	e0ea      	b.n	8010904 <hal_i2c_receive+0x214>
	}

	if(xSemaphoreTake(drv->mutex, I2C_MUTEX_TIMEOUT) != pdPASS) {
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010736:	4618      	mov	r0, r3
 8010738:	f7f9 fa08 	bl	8009b4c <xQueueSemaphoreTake>
 801073c:	4603      	mov	r3, r0
 801073e:	2b01      	cmp	r3, #1
 8010740:	d004      	beq.n	801074c <hal_i2c_receive+0x5c>
		hal_cli_printf("i2c semaphore take timeout");
 8010742:	4873      	ldr	r0, [pc, #460]	; (8010910 <hal_i2c_receive+0x220>)
 8010744:	f7fe fa82 	bl	800ec4c <hal_cli_printf>
		return false;
 8010748:	2300      	movs	r3, #0
 801074a:	e0db      	b.n	8010904 <hal_i2c_receive+0x214>
	}

	timer = hal_get_delay_timer(timeout);
 801074c:	463b      	mov	r3, r7
 801074e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010750:	4618      	mov	r0, r3
 8010752:	f7fe fd5d 	bl	800f210 <hal_get_delay_timer>
 8010756:	f107 031c 	add.w	r3, r7, #28
 801075a:	463a      	mov	r2, r7
 801075c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010760:	e883 0003 	stmia.w	r3, {r0, r1}


	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 8010764:	e013      	b.n	801078e <hal_i2c_receive+0x9e>
		if(hal_delay_timer_is_expired(&timer)) {
 8010766:	f107 031c 	add.w	r3, r7, #28
 801076a:	4618      	mov	r0, r3
 801076c:	f7fe fd76 	bl	800f25c <hal_delay_timer_is_expired>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00b      	beq.n	801078e <hal_i2c_receive+0x9e>
			xSemaphoreGive(drv->mutex);
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	6858      	ldr	r0, [r3, #4]
 801077a:	2300      	movs	r3, #0
 801077c:	2200      	movs	r2, #0
 801077e:	2100      	movs	r1, #0
 8010780:	f7f8 fef0 	bl	8009564 <xQueueGenericSend>
			hal_cli_printf("i2c busy flag timeout");
 8010784:	4863      	ldr	r0, [pc, #396]	; (8010914 <hal_i2c_receive+0x224>)
 8010786:	f7fe fa61 	bl	800ec4c <hal_cli_printf>
			return false;
 801078a:	2300      	movs	r3, #0
 801078c:	e0ba      	b.n	8010904 <hal_i2c_receive+0x214>
	while(LL_I2C_IsActiveFlag_BUSY(drv->i2c)) {
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	4618      	mov	r0, r3
 8010794:	f7ff fc53 	bl	801003e <LL_I2C_IsActiveFlag_BUSY>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1e3      	bne.n	8010766 <hal_i2c_receive+0x76>
		}
	}

	if(size == 1) {
 801079e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d106      	bne.n	80107b2 <hal_i2c_receive+0xc2>
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2100      	movs	r1, #0
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7ff fc6c 	bl	8010088 <LL_I2C_AcknowledgeNextData>
 80107b0:	e006      	b.n	80107c0 <hal_i2c_receive+0xd0>
	} else {
		LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_ACK);
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ff fc64 	bl	8010088 <LL_I2C_AcknowledgeNextData>
	}

	LL_I2C_GenerateStartCondition(drv->i2c);
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7ff fc72 	bl	80100ae <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 80107ca:	e018      	b.n	80107fe <hal_i2c_receive+0x10e>
		if(hal_delay_timer_is_expired(&timer)) {
 80107cc:	f107 031c 	add.w	r3, r7, #28
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7fe fd43 	bl	800f25c <hal_delay_timer_is_expired>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d010      	beq.n	80107fe <hal_i2c_receive+0x10e>
			xSemaphoreGive(drv->mutex);
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	6858      	ldr	r0, [r3, #4]
 80107e0:	2300      	movs	r3, #0
 80107e2:	2200      	movs	r2, #0
 80107e4:	2100      	movs	r1, #0
 80107e6:	f7f8 febd 	bl	8009564 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7ff fc6d 	bl	80100ce <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c start bit flag timeout");
 80107f4:	4848      	ldr	r0, [pc, #288]	; (8010918 <hal_i2c_receive+0x228>)
 80107f6:	f7fe fa29 	bl	800ec4c <hal_cli_printf>
			return false;
 80107fa:	2300      	movs	r3, #0
 80107fc:	e082      	b.n	8010904 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_SB(drv->i2c)) {
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	4618      	mov	r0, r3
 8010804:	f7ff fbf5 	bl	800fff2 <LL_I2C_IsActiveFlag_SB>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d0de      	beq.n	80107cc <hal_i2c_receive+0xdc>
		}
	}

	LL_I2C_TransmitData8(drv->i2c, addr | 0x01);
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	7cfb      	ldrb	r3, [r7, #19]
 8010814:	f043 0301 	orr.w	r3, r3, #1
 8010818:	b2db      	uxtb	r3, r3
 801081a:	4619      	mov	r1, r3
 801081c:	4610      	mov	r0, r2
 801081e:	f7ff fc73 	bl	8010108 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8010822:	e018      	b.n	8010856 <hal_i2c_receive+0x166>
		if(hal_delay_timer_is_expired(&timer)) {
 8010824:	f107 031c 	add.w	r3, r7, #28
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe fd17 	bl	800f25c <hal_delay_timer_is_expired>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d010      	beq.n	8010856 <hal_i2c_receive+0x166>
			xSemaphoreGive(drv->mutex);
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	6858      	ldr	r0, [r3, #4]
 8010838:	2300      	movs	r3, #0
 801083a:	2200      	movs	r2, #0
 801083c:	2100      	movs	r1, #0
 801083e:	f7f8 fe91 	bl	8009564 <xQueueGenericSend>
			LL_I2C_GenerateStopCondition(drv->i2c);
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4618      	mov	r0, r3
 8010848:	f7ff fc41 	bl	80100ce <LL_I2C_GenerateStopCondition>
			hal_cli_printf("i2c address transmit timeout");
 801084c:	4833      	ldr	r0, [pc, #204]	; (801091c <hal_i2c_receive+0x22c>)
 801084e:	f7fe f9fd 	bl	800ec4c <hal_cli_printf>
			return false;
 8010852:	2300      	movs	r3, #0
 8010854:	e056      	b.n	8010904 <hal_i2c_receive+0x214>
	while(!LL_I2C_IsActiveFlag_ADDR(drv->i2c)) {
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4618      	mov	r0, r3
 801085c:	f7ff fbdc 	bl	8010018 <LL_I2C_IsActiveFlag_ADDR>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d0de      	beq.n	8010824 <hal_i2c_receive+0x134>
		}
	}
	LL_I2C_ClearFlag_ADDR(drv->i2c);
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4618      	mov	r0, r3
 801086c:	f7ff fbfa 	bl	8010064 <LL_I2C_ClearFlag_ADDR>

	while(index < size) {
 8010870:	e037      	b.n	80108e2 <hal_i2c_receive+0x1f2>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8010872:	f107 031c 	add.w	r3, r7, #28
 8010876:	4618      	mov	r0, r3
 8010878:	f7fe fcf0 	bl	800f25c <hal_delay_timer_is_expired>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d010      	beq.n	80108a4 <hal_i2c_receive+0x1b4>
				xSemaphoreGive(drv->mutex);
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	6858      	ldr	r0, [r3, #4]
 8010886:	2300      	movs	r3, #0
 8010888:	2200      	movs	r2, #0
 801088a:	2100      	movs	r1, #0
 801088c:	f7f8 fe6a 	bl	8009564 <xQueueGenericSend>
				LL_I2C_GenerateStopCondition(drv->i2c);
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4618      	mov	r0, r3
 8010896:	f7ff fc1a 	bl	80100ce <LL_I2C_GenerateStopCondition>
				hal_cli_printf("i2c RXNE flag timeout");
 801089a:	4821      	ldr	r0, [pc, #132]	; (8010920 <hal_i2c_receive+0x230>)
 801089c:	f7fe f9d6 	bl	800ec4c <hal_cli_printf>
				return false;
 80108a0:	2300      	movs	r3, #0
 80108a2:	e02f      	b.n	8010904 <hal_i2c_receive+0x214>
		while(!LL_I2C_IsActiveFlag_RXNE(drv->i2c)) {
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff fb8f 	bl	800ffcc <LL_I2C_IsActiveFlag_RXNE>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d0de      	beq.n	8010872 <hal_i2c_receive+0x182>
			}
		}
		buf[index++] = LL_I2C_ReceiveData8(drv->i2c);
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	6819      	ldr	r1, [r3, #0]
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	1c5a      	adds	r2, r3, #1
 80108bc:	627a      	str	r2, [r7, #36]	; 0x24
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	18d4      	adds	r4, r2, r3
 80108c2:	4608      	mov	r0, r1
 80108c4:	f7ff fc13 	bl	80100ee <LL_I2C_ReceiveData8>
 80108c8:	4603      	mov	r3, r0
 80108ca:	7023      	strb	r3, [r4, #0]

		if(index == size - 1)
 80108cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ce:	3b01      	subs	r3, #1
 80108d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d105      	bne.n	80108e2 <hal_i2c_receive+0x1f2>
			LL_I2C_AcknowledgeNextData(drv->i2c, LL_I2C_NACK);
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	2100      	movs	r1, #0
 80108dc:	4618      	mov	r0, r3
 80108de:	f7ff fbd3 	bl	8010088 <LL_I2C_AcknowledgeNextData>
	while(index < size) {
 80108e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d3dc      	bcc.n	80108a4 <hal_i2c_receive+0x1b4>
	}

	LL_I2C_GenerateStopCondition(drv->i2c);
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7ff fbed 	bl	80100ce <LL_I2C_GenerateStopCondition>

	xSemaphoreGive(drv->mutex);
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	6858      	ldr	r0, [r3, #4]
 80108f8:	2300      	movs	r3, #0
 80108fa:	2200      	movs	r2, #0
 80108fc:	2100      	movs	r1, #0
 80108fe:	f7f8 fe31 	bl	8009564 <xQueueGenericSend>

	return true;
 8010902:	2301      	movs	r3, #1
}
 8010904:	4618      	mov	r0, r3
 8010906:	372c      	adds	r7, #44	; 0x2c
 8010908:	46bd      	mov	sp, r7
 801090a:	bd90      	pop	{r4, r7, pc}
 801090c:	08013b68 	.word	0x08013b68
 8010910:	08013aa0 	.word	0x08013aa0
 8010914:	08013abc 	.word	0x08013abc
 8010918:	08013ad4 	.word	0x08013ad4
 801091c:	08013af0 	.word	0x08013af0
 8010920:	08013b7c 	.word	0x08013b7c

08010924 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b08a      	sub	sp, #40	; 0x28
 8010928:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 801092a:	463b      	mov	r3, r7
 801092c:	2220      	movs	r2, #32
 801092e:	2100      	movs	r1, #0
 8010930:	4618      	mov	r0, r3
 8010932:	f002 fb09 	bl	8012f48 <memset>

	hal_gpio_init_alt(
 8010936:	2304      	movs	r3, #4
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	2303      	movs	r3, #3
 801093c:	2200      	movs	r2, #0
 801093e:	2104      	movs	r1, #4
 8010940:	4857      	ldr	r0, [pc, #348]	; (8010aa0 <i2c1_init+0x17c>)
 8010942:	f7fe fef3 	bl	800f72c <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 8010946:	2304      	movs	r3, #4
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	2303      	movs	r3, #3
 801094c:	2200      	movs	r2, #0
 801094e:	2104      	movs	r1, #4
 8010950:	4854      	ldr	r0, [pc, #336]	; (8010aa4 <i2c1_init+0x180>)
 8010952:	f7fe feeb 	bl	800f72c <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_TX_STREAM, DMA_I2C1_TX_CHANNEL);
 8010956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801095a:	2106      	movs	r1, #6
 801095c:	4852      	ldr	r0, [pc, #328]	; (8010aa8 <i2c1_init+0x184>)
 801095e:	f7ff fce3 	bl	8010328 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8010962:	2240      	movs	r2, #64	; 0x40
 8010964:	2106      	movs	r1, #6
 8010966:	4850      	ldr	r0, [pc, #320]	; (8010aa8 <i2c1_init+0x184>)
 8010968:	f7ff fbe2 	bl	8010130 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 801096c:	2200      	movs	r2, #0
 801096e:	2106      	movs	r1, #6
 8010970:	484d      	ldr	r0, [pc, #308]	; (8010aa8 <i2c1_init+0x184>)
 8010972:	f7ff fcb5 	bl	80102e0 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8010976:	2200      	movs	r2, #0
 8010978:	2106      	movs	r1, #6
 801097a:	484b      	ldr	r0, [pc, #300]	; (8010aa8 <i2c1_init+0x184>)
 801097c:	f7ff fbfc 	bl	8010178 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8010980:	2200      	movs	r2, #0
 8010982:	2106      	movs	r1, #6
 8010984:	4848      	ldr	r0, [pc, #288]	; (8010aa8 <i2c1_init+0x184>)
 8010986:	f7ff fc1b 	bl	80101c0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 801098a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801098e:	2106      	movs	r1, #6
 8010990:	4845      	ldr	r0, [pc, #276]	; (8010aa8 <i2c1_init+0x184>)
 8010992:	f7ff fc39 	bl	8010208 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8010996:	2200      	movs	r2, #0
 8010998:	2106      	movs	r1, #6
 801099a:	4843      	ldr	r0, [pc, #268]	; (8010aa8 <i2c1_init+0x184>)
 801099c:	f7ff fc58 	bl	8010250 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 80109a0:	2200      	movs	r2, #0
 80109a2:	2106      	movs	r1, #6
 80109a4:	4840      	ldr	r0, [pc, #256]	; (8010aa8 <i2c1_init+0x184>)
 80109a6:	f7ff fc77 	bl	8010298 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_TX_STREAM);
 80109aa:	2106      	movs	r1, #6
 80109ac:	483e      	ldr	r0, [pc, #248]	; (8010aa8 <i2c1_init+0x184>)
 80109ae:	f7ff fcdf 	bl	8010370 <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_RX_STREAM, DMA_I2C1_RX_CHANNEL);
 80109b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80109b6:	2100      	movs	r1, #0
 80109b8:	483b      	ldr	r0, [pc, #236]	; (8010aa8 <i2c1_init+0x184>)
 80109ba:	f7ff fcb5 	bl	8010328 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80109be:	2200      	movs	r2, #0
 80109c0:	2100      	movs	r1, #0
 80109c2:	4839      	ldr	r0, [pc, #228]	; (8010aa8 <i2c1_init+0x184>)
 80109c4:	f7ff fbb4 	bl	8010130 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 80109c8:	2200      	movs	r2, #0
 80109ca:	2100      	movs	r1, #0
 80109cc:	4836      	ldr	r0, [pc, #216]	; (8010aa8 <i2c1_init+0x184>)
 80109ce:	f7ff fc87 	bl	80102e0 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MODE_NORMAL);
 80109d2:	2200      	movs	r2, #0
 80109d4:	2100      	movs	r1, #0
 80109d6:	4834      	ldr	r0, [pc, #208]	; (8010aa8 <i2c1_init+0x184>)
 80109d8:	f7ff fbce 	bl	8010178 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 80109dc:	2200      	movs	r2, #0
 80109de:	2100      	movs	r1, #0
 80109e0:	4831      	ldr	r0, [pc, #196]	; (8010aa8 <i2c1_init+0x184>)
 80109e2:	f7ff fbed 	bl	80101c0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 80109e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80109ea:	2100      	movs	r1, #0
 80109ec:	482e      	ldr	r0, [pc, #184]	; (8010aa8 <i2c1_init+0x184>)
 80109ee:	f7ff fc0b 	bl	8010208 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 80109f2:	2200      	movs	r2, #0
 80109f4:	2100      	movs	r1, #0
 80109f6:	482c      	ldr	r0, [pc, #176]	; (8010aa8 <i2c1_init+0x184>)
 80109f8:	f7ff fc2a 	bl	8010250 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 80109fc:	2200      	movs	r2, #0
 80109fe:	2100      	movs	r1, #0
 8010a00:	4829      	ldr	r0, [pc, #164]	; (8010aa8 <i2c1_init+0x184>)
 8010a02:	f7ff fc49 	bl	8010298 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_RX_STREAM);
 8010a06:	2100      	movs	r1, #0
 8010a08:	4827      	ldr	r0, [pc, #156]	; (8010aa8 <i2c1_init+0x184>)
 8010a0a:	f7ff fcb1 	bl	8010370 <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010a0e:	f7ff f9eb 	bl	800fde8 <__NVIC_GetPriorityGrouping>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2200      	movs	r2, #0
 8010a16:	2105      	movs	r1, #5
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff fa3b 	bl	800fe94 <NVIC_EncodePriority>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	4619      	mov	r1, r3
 8010a22:	201f      	movs	r0, #31
 8010a24:	f7ff fa0c 	bl	800fe40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8010a28:	201f      	movs	r0, #31
 8010a2a:	f7ff f9eb 	bl	800fe04 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010a2e:	f7ff f9db 	bl	800fde8 <__NVIC_GetPriorityGrouping>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2200      	movs	r2, #0
 8010a36:	2105      	movs	r1, #5
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7ff fa2b 	bl	800fe94 <NVIC_EncodePriority>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	4619      	mov	r1, r3
 8010a42:	2020      	movs	r0, #32
 8010a44:	f7ff f9fc 	bl	800fe40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8010a48:	2020      	movs	r0, #32
 8010a4a:	f7ff f9db 	bl	800fe04 <__NVIC_EnableIRQ>

  /* I2C Initialization */
  LL_I2C_DisableOwnAddress2(I2C1);
 8010a4e:	4817      	ldr	r0, [pc, #92]	; (8010aac <i2c1_init+0x188>)
 8010a50:	f7ff fa86 	bl	800ff60 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8010a54:	4815      	ldr	r0, [pc, #84]	; (8010aac <i2c1_init+0x188>)
 8010a56:	f7ff fa60 	bl	800ff1a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8010a5a:	4814      	ldr	r0, [pc, #80]	; (8010aac <i2c1_init+0x188>)
 8010a5c:	f7ff fa4d 	bl	800fefa <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8010a60:	2300      	movs	r3, #0
 8010a62:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 400000;
 8010a64:	4b12      	ldr	r3, [pc, #72]	; (8010ab0 <i2c1_init+0x18c>)
 8010a66:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8010a70:	2300      	movs	r3, #0
 8010a72:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8010a74:	2300      	movs	r3, #0
 8010a76:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8010a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a7c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8010a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a82:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8010a84:	463b      	mov	r3, r7
 8010a86:	4619      	mov	r1, r3
 8010a88:	4808      	ldr	r0, [pc, #32]	; (8010aac <i2c1_init+0x188>)
 8010a8a:	f7f3 f917 	bl	8003cbc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8010a8e:	2100      	movs	r1, #0
 8010a90:	4806      	ldr	r0, [pc, #24]	; (8010aac <i2c1_init+0x188>)
 8010a92:	f7ff fa52 	bl	800ff3a <LL_I2C_SetOwnAddress2>
}
 8010a96:	bf00      	nop
 8010a98:	3720      	adds	r7, #32
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	080142e4 	.word	0x080142e4
 8010aa4:	080142ec 	.word	0x080142ec
 8010aa8:	40026000 	.word	0x40026000
 8010aac:	40005400 	.word	0x40005400
 8010ab0:	00061a80 	.word	0x00061a80

08010ab4 <i2c3_init>:

static void i2c3_init(void)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08a      	sub	sp, #40	; 0x28
 8010ab8:	af02      	add	r7, sp, #8
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8010aba:	463b      	mov	r3, r7
 8010abc:	2220      	movs	r2, #32
 8010abe:	2100      	movs	r1, #0
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f002 fa41 	bl	8012f48 <memset>

	hal_gpio_init_alt(
 8010ac6:	2304      	movs	r3, #4
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	2303      	movs	r3, #3
 8010acc:	2200      	movs	r2, #0
 8010ace:	2104      	movs	r1, #4
 8010ad0:	4829      	ldr	r0, [pc, #164]	; (8010b78 <i2c3_init+0xc4>)
 8010ad2:	f7fe fe2b 	bl	800f72c <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

	hal_gpio_init_alt(
 8010ad6:	2304      	movs	r3, #4
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	2303      	movs	r3, #3
 8010adc:	2200      	movs	r2, #0
 8010ade:	2104      	movs	r1, #4
 8010ae0:	4826      	ldr	r0, [pc, #152]	; (8010b7c <i2c3_init+0xc8>)
 8010ae2:	f7fe fe23 	bl	800f72c <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010ae6:	f7ff f97f 	bl	800fde8 <__NVIC_GetPriorityGrouping>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2200      	movs	r2, #0
 8010aee:	2105      	movs	r1, #5
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7ff f9cf 	bl	800fe94 <NVIC_EncodePriority>
 8010af6:	4603      	mov	r3, r0
 8010af8:	4619      	mov	r1, r3
 8010afa:	2048      	movs	r0, #72	; 0x48
 8010afc:	f7ff f9a0 	bl	800fe40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 8010b00:	2048      	movs	r0, #72	; 0x48
 8010b02:	f7ff f97f 	bl	800fe04 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010b06:	f7ff f96f 	bl	800fde8 <__NVIC_GetPriorityGrouping>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	2105      	movs	r1, #5
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff f9bf 	bl	800fe94 <NVIC_EncodePriority>
 8010b16:	4603      	mov	r3, r0
 8010b18:	4619      	mov	r1, r3
 8010b1a:	2049      	movs	r0, #73	; 0x49
 8010b1c:	f7ff f990 	bl	800fe40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 8010b20:	2049      	movs	r0, #73	; 0x49
 8010b22:	f7ff f96f 	bl	800fe04 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8010b26:	4816      	ldr	r0, [pc, #88]	; (8010b80 <i2c3_init+0xcc>)
 8010b28:	f7ff fa1a 	bl	800ff60 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8010b2c:	4814      	ldr	r0, [pc, #80]	; (8010b80 <i2c3_init+0xcc>)
 8010b2e:	f7ff f9f4 	bl	800ff1a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8010b32:	4813      	ldr	r0, [pc, #76]	; (8010b80 <i2c3_init+0xcc>)
 8010b34:	f7ff f9e1 	bl	800fefa <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 8010b3c:	4b11      	ldr	r3, [pc, #68]	; (8010b84 <i2c3_init+0xd0>)
 8010b3e:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8010b40:	2300      	movs	r3, #0
 8010b42:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8010b44:	2300      	movs	r3, #0
 8010b46:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8010b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b54:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8010b56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b5a:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8010b5c:	463b      	mov	r3, r7
 8010b5e:	4619      	mov	r1, r3
 8010b60:	4807      	ldr	r0, [pc, #28]	; (8010b80 <i2c3_init+0xcc>)
 8010b62:	f7f3 f8ab 	bl	8003cbc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8010b66:	2100      	movs	r1, #0
 8010b68:	4805      	ldr	r0, [pc, #20]	; (8010b80 <i2c3_init+0xcc>)
 8010b6a:	f7ff f9e6 	bl	800ff3a <LL_I2C_SetOwnAddress2>
}
 8010b6e:	bf00      	nop
 8010b70:	3720      	adds	r7, #32
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	080142f4 	.word	0x080142f4
 8010b7c:	080142fc 	.word	0x080142fc
 8010b80:	40005c00 	.word	0x40005c00
 8010b84:	000186a0 	.word	0x000186a0

08010b88 <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	af00      	add	r7, sp, #0

}
 8010b8c:	bf00      	nop
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr

08010b96 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8010b96:	b480      	push	{r7}
 8010b98:	af00      	add	r7, sp, #0

}
 8010b9a:	bf00      	nop
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr

08010ba4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	af00      	add	r7, sp, #0

}
 8010ba8:	bf00      	nop
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr

08010bb2 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8010bb2:	b480      	push	{r7}
 8010bb4:	af00      	add	r7, sp, #0

}
 8010bb6:	bf00      	nop
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	af00      	add	r7, sp, #0

}
 8010bc4:	bf00      	nop
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr

08010bce <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 8010bce:	b480      	push	{r7}
 8010bd0:	af00      	add	r7, sp, #0

}
 8010bd2:	bf00      	nop
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr

08010bdc <initThread>:
/* application */
#include "mp3_app.h"
#include "display_app.h"


static void initThread(void* param) {
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af02      	add	r7, sp, #8
 8010be2:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter initThread");
 8010be4:	481d      	ldr	r0, [pc, #116]	; (8010c5c <initThread+0x80>)
 8010be6:	f7fe f831 	bl	800ec4c <hal_cli_printf>

	sdio_init();
 8010bea:	f000 f9ff 	bl	8010fec <sdio_init>
	MX_FATFS_Init();
 8010bee:	f7f4 fd83 	bl	80056f8 <MX_FATFS_Init>

	i2c_init(I2cId1);
 8010bf2:	2001      	movs	r0, #1
 8010bf4:	f7ff fbdc 	bl	80103b0 <i2c_init>
	i2c_init(I2cId3);
 8010bf8:	2003      	movs	r0, #3
 8010bfa:	f7ff fbd9 	bl	80103b0 <i2c_init>

	spi_init(SpiId2);
 8010bfe:	2002      	movs	r0, #2
 8010c00:	f000 fd5a 	bl	80116b8 <spi_init>
	spi_init(SpiId4);
 8010c04:	2004      	movs	r0, #4
 8010c06:	f000 fd57 	bl	80116b8 <spi_init>

	adc_init(AdcId1);
 8010c0a:	2001      	movs	r0, #1
 8010c0c:	f7fd fe70 	bl	800e8f0 <adc_init>

	tim_init(TimId4);
 8010c10:	2004      	movs	r0, #4
 8010c12:	f001 fad3 	bl	80121bc <tim_init>

	hal_resources_init();
 8010c16:	f000 f91d 	bl	8010e54 <hal_resources_init>

	xTaskCreate(mp3Thread, "mp3_app", 512, NULL, 4, NULL);
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	9301      	str	r3, [sp, #4]
 8010c1e:	2304      	movs	r3, #4
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	2300      	movs	r3, #0
 8010c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c28:	490d      	ldr	r1, [pc, #52]	; (8010c60 <initThread+0x84>)
 8010c2a:	480e      	ldr	r0, [pc, #56]	; (8010c64 <initThread+0x88>)
 8010c2c:	f7f9 fab5 	bl	800a19a <xTaskCreate>
	xTaskCreate(displayThread, "display", 512, NULL, 3, NULL);
 8010c30:	2300      	movs	r3, #0
 8010c32:	9301      	str	r3, [sp, #4]
 8010c34:	2303      	movs	r3, #3
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	2300      	movs	r3, #0
 8010c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c3e:	490a      	ldr	r1, [pc, #40]	; (8010c68 <initThread+0x8c>)
 8010c40:	480a      	ldr	r0, [pc, #40]	; (8010c6c <initThread+0x90>)
 8010c42:	f7f9 faaa 	bl	800a19a <xTaskCreate>

	hal_cli_printf("exit initThread");
 8010c46:	480a      	ldr	r0, [pc, #40]	; (8010c70 <initThread+0x94>)
 8010c48:	f7fe f800 	bl	800ec4c <hal_cli_printf>

	vTaskDelete(NULL);
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	f7f9 fc0d 	bl	800a46c <vTaskDelete>
}
 8010c52:	bf00      	nop
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	08013b94 	.word	0x08013b94
 8010c60:	08013ba8 	.word	0x08013ba8
 8010c64:	08012bd1 	.word	0x08012bd1
 8010c68:	08013bb0 	.word	0x08013bb0
 8010c6c:	08012a15 	.word	0x08012a15
 8010c70:	08013bb8 	.word	0x08013bb8

08010c74 <main>:

int main(void) {
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af02      	add	r7, sp, #8
	HAL_Init();
 8010c7a:	f7f0 f9fd 	bl	8001078 <HAL_Init>

	hal_bus_init_early();
 8010c7e:	f7fe f9ed 	bl	800f05c <hal_bus_init_early>
	hal_clock_init_early();
 8010c82:	f7fe fa2d 	bl	800f0e0 <hal_clock_init_early>
	hal_dwt_init_early();
 8010c86:	f7fe fa83 	bl	800f190 <hal_dwt_init_early>

	hal_resources_init_early();
 8010c8a:	f000 f8c7 	bl	8010e1c <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 8010c8e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8010c92:	2000      	movs	r0, #0
 8010c94:	f001 fe32 	bl	80128fc <hal_uart_init>
	hal_cli_init();
 8010c98:	f7fe f812 	bl	800ecc0 <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 8010c9c:	4809      	ldr	r0, [pc, #36]	; (8010cc4 <main+0x50>)
 8010c9e:	f7fd ffd5 	bl	800ec4c <hal_cli_printf>

	traceSTART();
 8010ca2:	f7fc fafb 	bl	800d29c <SEGGER_SYSVIEW_Conf>
	xTaskCreate(initThread, "init", 256, NULL, 3, NULL);
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	9301      	str	r3, [sp, #4]
 8010caa:	2303      	movs	r3, #3
 8010cac:	9300      	str	r3, [sp, #0]
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010cb4:	4904      	ldr	r1, [pc, #16]	; (8010cc8 <main+0x54>)
 8010cb6:	4805      	ldr	r0, [pc, #20]	; (8010ccc <main+0x58>)
 8010cb8:	f7f9 fa6f 	bl	800a19a <xTaskCreate>
	vTaskStartScheduler();
 8010cbc:	f7f9 fc9a 	bl	800a5f4 <vTaskStartScheduler>

	for(;;);
 8010cc0:	e7fe      	b.n	8010cc0 <main+0x4c>
 8010cc2:	bf00      	nop
 8010cc4:	08013bc8 	.word	0x08013bc8
 8010cc8:	08013be0 	.word	0x08013be0
 8010ccc:	08010bdd 	.word	0x08010bdd

08010cd0 <__NVIC_GetPriorityGrouping>:
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010cd4:	4b04      	ldr	r3, [pc, #16]	; (8010ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	0a1b      	lsrs	r3, r3, #8
 8010cda:	f003 0307 	and.w	r3, r3, #7
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr
 8010ce8:	e000ed00 	.word	0xe000ed00

08010cec <__NVIC_EnableIRQ>:
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	db0b      	blt.n	8010d16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010cfe:	79fb      	ldrb	r3, [r7, #7]
 8010d00:	f003 021f 	and.w	r2, r3, #31
 8010d04:	4907      	ldr	r1, [pc, #28]	; (8010d24 <__NVIC_EnableIRQ+0x38>)
 8010d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d0a:	095b      	lsrs	r3, r3, #5
 8010d0c:	2001      	movs	r0, #1
 8010d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8010d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010d16:	bf00      	nop
 8010d18:	370c      	adds	r7, #12
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	e000e100 	.word	0xe000e100

08010d28 <__NVIC_SetPriority>:
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	4603      	mov	r3, r0
 8010d30:	6039      	str	r1, [r7, #0]
 8010d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	db0a      	blt.n	8010d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	b2da      	uxtb	r2, r3
 8010d40:	490c      	ldr	r1, [pc, #48]	; (8010d74 <__NVIC_SetPriority+0x4c>)
 8010d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d46:	0112      	lsls	r2, r2, #4
 8010d48:	b2d2      	uxtb	r2, r2
 8010d4a:	440b      	add	r3, r1
 8010d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010d50:	e00a      	b.n	8010d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	4908      	ldr	r1, [pc, #32]	; (8010d78 <__NVIC_SetPriority+0x50>)
 8010d58:	79fb      	ldrb	r3, [r7, #7]
 8010d5a:	f003 030f 	and.w	r3, r3, #15
 8010d5e:	3b04      	subs	r3, #4
 8010d60:	0112      	lsls	r2, r2, #4
 8010d62:	b2d2      	uxtb	r2, r2
 8010d64:	440b      	add	r3, r1
 8010d66:	761a      	strb	r2, [r3, #24]
}
 8010d68:	bf00      	nop
 8010d6a:	370c      	adds	r7, #12
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr
 8010d74:	e000e100 	.word	0xe000e100
 8010d78:	e000ed00 	.word	0xe000ed00

08010d7c <NVIC_EncodePriority>:
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b089      	sub	sp, #36	; 0x24
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f003 0307 	and.w	r3, r3, #7
 8010d8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	f1c3 0307 	rsb	r3, r3, #7
 8010d96:	2b04      	cmp	r3, #4
 8010d98:	bf28      	it	cs
 8010d9a:	2304      	movcs	r3, #4
 8010d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	3304      	adds	r3, #4
 8010da2:	2b06      	cmp	r3, #6
 8010da4:	d902      	bls.n	8010dac <NVIC_EncodePriority+0x30>
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	3b03      	subs	r3, #3
 8010daa:	e000      	b.n	8010dae <NVIC_EncodePriority+0x32>
 8010dac:	2300      	movs	r3, #0
 8010dae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dba:	43da      	mvns	r2, r3
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	401a      	ands	r2, r3
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	fa01 f303 	lsl.w	r3, r1, r3
 8010dce:	43d9      	mvns	r1, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010dd4:	4313      	orrs	r3, r2
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3724      	adds	r7, #36	; 0x24
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 8010de2:	b480      	push	{r7}
 8010de4:	b083      	sub	sp, #12
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	6078      	str	r0, [r7, #4]
 8010dea:	460b      	mov	r3, r1
 8010dec:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 8010dee:	78fb      	ldrb	r3, [r7, #3]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d005      	beq.n	8010e00 <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	889a      	ldrh	r2, [r3, #4]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 8010dfe:	e006      	b.n	8010e0e <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	889b      	ldrh	r3, [r3, #4]
 8010e04:	461a      	mov	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	0412      	lsls	r2, r2, #16
 8010e0c:	619a      	str	r2, [r3, #24]
}
 8010e0e:	bf00      	nop
 8010e10:	370c      	adds	r7, #12
 8010e12:	46bd      	mov	sp, r7
 8010e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e18:	4770      	bx	lr
	...

08010e1c <hal_resources_init_early>:
const GpioPin gpio_vs1053_dcs = {.port = VS1053_DCS_GPIO_PORT, .pin = VS1053_DCS_PIN};
const GpioPin gpio_vs1053_rst = {.port = VS1053_RST_GPIO_PORT, .pin = VS1053_RST_PIN};
const GpioPin gpio_vs1053_dreq = {.port = VS1053_DREQ_GPIO_PORT, .pin = VS1053_DREQ_PIN};


void hal_resources_init_early(void) {
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8010e20:	2300      	movs	r3, #0
 8010e22:	2201      	movs	r2, #1
 8010e24:	2101      	movs	r1, #1
 8010e26:	4809      	ldr	r0, [pc, #36]	; (8010e4c <hal_resources_init_early+0x30>)
 8010e28:	f7fe fc66 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 8010e2c:	2101      	movs	r1, #1
 8010e2e:	4807      	ldr	r0, [pc, #28]	; (8010e4c <hal_resources_init_early+0x30>)
 8010e30:	f7ff ffd7 	bl	8010de2 <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8010e34:	2300      	movs	r3, #0
 8010e36:	2201      	movs	r2, #1
 8010e38:	2101      	movs	r1, #1
 8010e3a:	4805      	ldr	r0, [pc, #20]	; (8010e50 <hal_resources_init_early+0x34>)
 8010e3c:	f7fe fc5c 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 8010e40:	2101      	movs	r1, #1
 8010e42:	4803      	ldr	r0, [pc, #12]	; (8010e50 <hal_resources_init_early+0x34>)
 8010e44:	f7ff ffcd 	bl	8010de2 <hal_gpio_write>
}
 8010e48:	bf00      	nop
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	08014294 	.word	0x08014294
 8010e50:	0801429c 	.word	0x0801429c

08010e54 <hal_resources_init>:

void hal_resources_init(void) {
 8010e54:	b580      	push	{r7, lr}
 8010e56:	af00      	add	r7, sp, #0
	/* button */
	hal_gpio_init(&gpio_button_left, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010e58:	2300      	movs	r3, #0
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	2107      	movs	r1, #7
 8010e5e:	4857      	ldr	r0, [pc, #348]	; (8010fbc <hal_resources_init+0x168>)
 8010e60:	f7fe fc4a 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_init(&gpio_button_right, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010e64:	2300      	movs	r3, #0
 8010e66:	2201      	movs	r2, #1
 8010e68:	2107      	movs	r1, #7
 8010e6a:	4855      	ldr	r0, [pc, #340]	; (8010fc0 <hal_resources_init+0x16c>)
 8010e6c:	f7fe fc44 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_init(&gpio_button_center, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010e70:	2300      	movs	r3, #0
 8010e72:	2201      	movs	r2, #1
 8010e74:	2107      	movs	r1, #7
 8010e76:	4853      	ldr	r0, [pc, #332]	; (8010fc4 <hal_resources_init+0x170>)
 8010e78:	f7fe fc3e 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_init(&gpio_button_up, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	2201      	movs	r2, #1
 8010e80:	2107      	movs	r1, #7
 8010e82:	4851      	ldr	r0, [pc, #324]	; (8010fc8 <hal_resources_init+0x174>)
 8010e84:	f7fe fc38 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_init(&gpio_button_down, GpioModeInterruptFall, GpioPullUp, GpioSpeedFreqLow);
 8010e88:	2300      	movs	r3, #0
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	2107      	movs	r1, #7
 8010e8e:	484f      	ldr	r0, [pc, #316]	; (8010fcc <hal_resources_init+0x178>)
 8010e90:	f7fe fc32 	bl	800f6f8 <hal_gpio_init>

	NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010e94:	f7ff ff1c 	bl	8010cd0 <__NVIC_GetPriorityGrouping>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	2105      	movs	r1, #5
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff ff6c 	bl	8010d7c <NVIC_EncodePriority>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	2006      	movs	r0, #6
 8010eaa:	f7ff ff3d 	bl	8010d28 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8010eae:	2006      	movs	r0, #6
 8010eb0:	f7ff ff1c 	bl	8010cec <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010eb4:	f7ff ff0c 	bl	8010cd0 <__NVIC_GetPriorityGrouping>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2200      	movs	r2, #0
 8010ebc:	2105      	movs	r1, #5
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff ff5c 	bl	8010d7c <NVIC_EncodePriority>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	2007      	movs	r0, #7
 8010eca:	f7ff ff2d 	bl	8010d28 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI1_IRQn);
 8010ece:	2007      	movs	r0, #7
 8010ed0:	f7ff ff0c 	bl	8010cec <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010ed4:	f7ff fefc 	bl	8010cd0 <__NVIC_GetPriorityGrouping>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2200      	movs	r2, #0
 8010edc:	2105      	movs	r1, #5
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7ff ff4c 	bl	8010d7c <NVIC_EncodePriority>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	2008      	movs	r0, #8
 8010eea:	f7ff ff1d 	bl	8010d28 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI2_IRQn);
 8010eee:	2008      	movs	r0, #8
 8010ef0:	f7ff fefc 	bl	8010cec <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010ef4:	f7ff feec 	bl	8010cd0 <__NVIC_GetPriorityGrouping>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2200      	movs	r2, #0
 8010efc:	2105      	movs	r1, #5
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff ff3c 	bl	8010d7c <NVIC_EncodePriority>
 8010f04:	4603      	mov	r3, r0
 8010f06:	4619      	mov	r1, r3
 8010f08:	2009      	movs	r0, #9
 8010f0a:	f7ff ff0d 	bl	8010d28 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8010f0e:	2009      	movs	r0, #9
 8010f10:	f7ff feec 	bl	8010cec <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8010f14:	f7ff fedc 	bl	8010cd0 <__NVIC_GetPriorityGrouping>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	2105      	movs	r1, #5
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff ff2c 	bl	8010d7c <NVIC_EncodePriority>
 8010f24:	4603      	mov	r3, r0
 8010f26:	4619      	mov	r1, r3
 8010f28:	200a      	movs	r0, #10
 8010f2a:	f7ff fefd 	bl	8010d28 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8010f2e:	200a      	movs	r0, #10
 8010f30:	f7ff fedc 	bl	8010cec <__NVIC_EnableIRQ>

	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8010f34:	2300      	movs	r3, #0
 8010f36:	2201      	movs	r2, #1
 8010f38:	2101      	movs	r1, #1
 8010f3a:	4825      	ldr	r0, [pc, #148]	; (8010fd0 <hal_resources_init+0x17c>)
 8010f3c:	f7fe fbdc 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 8010f40:	2101      	movs	r1, #1
 8010f42:	4823      	ldr	r0, [pc, #140]	; (8010fd0 <hal_resources_init+0x17c>)
 8010f44:	f7ff ff4d 	bl	8010de2 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8010f48:	2300      	movs	r3, #0
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	2101      	movs	r1, #1
 8010f4e:	4821      	ldr	r0, [pc, #132]	; (8010fd4 <hal_resources_init+0x180>)
 8010f50:	f7fe fbd2 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 8010f54:	2101      	movs	r1, #1
 8010f56:	481f      	ldr	r0, [pc, #124]	; (8010fd4 <hal_resources_init+0x180>)
 8010f58:	f7ff ff43 	bl	8010de2 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	2201      	movs	r2, #1
 8010f60:	2101      	movs	r1, #1
 8010f62:	481d      	ldr	r0, [pc, #116]	; (8010fd8 <hal_resources_init+0x184>)
 8010f64:	f7fe fbc8 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 8010f68:	2101      	movs	r1, #1
 8010f6a:	481b      	ldr	r0, [pc, #108]	; (8010fd8 <hal_resources_init+0x184>)
 8010f6c:	f7ff ff39 	bl	8010de2 <hal_gpio_write>

	/* vs1053 */
	hal_gpio_init(&gpio_vs1053_cs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8010f70:	2300      	movs	r3, #0
 8010f72:	2200      	movs	r2, #0
 8010f74:	2101      	movs	r1, #1
 8010f76:	4819      	ldr	r0, [pc, #100]	; (8010fdc <hal_resources_init+0x188>)
 8010f78:	f7fe fbbe 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 8010f7c:	2101      	movs	r1, #1
 8010f7e:	4818      	ldr	r0, [pc, #96]	; (8010fe0 <hal_resources_init+0x18c>)
 8010f80:	f7ff ff2f 	bl	8010de2 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dcs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8010f84:	2300      	movs	r3, #0
 8010f86:	2200      	movs	r2, #0
 8010f88:	2101      	movs	r1, #1
 8010f8a:	4815      	ldr	r0, [pc, #84]	; (8010fe0 <hal_resources_init+0x18c>)
 8010f8c:	f7fe fbb4 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 8010f90:	2101      	movs	r1, #1
 8010f92:	4813      	ldr	r0, [pc, #76]	; (8010fe0 <hal_resources_init+0x18c>)
 8010f94:	f7ff ff25 	bl	8010de2 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_rst, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 8010f98:	2300      	movs	r3, #0
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	4811      	ldr	r0, [pc, #68]	; (8010fe4 <hal_resources_init+0x190>)
 8010fa0:	f7fe fbaa 	bl	800f6f8 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_rst, 1);
 8010fa4:	2101      	movs	r1, #1
 8010fa6:	480f      	ldr	r0, [pc, #60]	; (8010fe4 <hal_resources_init+0x190>)
 8010fa8:	f7ff ff1b 	bl	8010de2 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dreq, GpioModeInput, GpioPullNo, GpioSpeedFreqLow);
 8010fac:	2300      	movs	r3, #0
 8010fae:	2200      	movs	r2, #0
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	480d      	ldr	r0, [pc, #52]	; (8010fe8 <hal_resources_init+0x194>)
 8010fb4:	f7fe fba0 	bl	800f6f8 <hal_gpio_init>

//	NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
//	NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8010fb8:	bf00      	nop
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	080142a4 	.word	0x080142a4
 8010fc0:	080142ac 	.word	0x080142ac
 8010fc4:	080142b4 	.word	0x080142b4
 8010fc8:	080142bc 	.word	0x080142bc
 8010fcc:	080142c4 	.word	0x080142c4
 8010fd0:	0801432c 	.word	0x0801432c
 8010fd4:	08014334 	.word	0x08014334
 8010fd8:	0801433c 	.word	0x0801433c
 8010fdc:	08014344 	.word	0x08014344
 8010fe0:	0801434c 	.word	0x0801434c
 8010fe4:	08014354 	.word	0x08014354
 8010fe8:	0801435c 	.word	0x0801435c

08010fec <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 8010fec:	b480      	push	{r7}
 8010fee:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	; (8011024 <sdio_init+0x38>)
 8010ff2:	4a0d      	ldr	r2, [pc, #52]	; (8011028 <sdio_init+0x3c>)
 8010ff4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8010ff6:	4b0b      	ldr	r3, [pc, #44]	; (8011024 <sdio_init+0x38>)
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8010ffc:	4b09      	ldr	r3, [pc, #36]	; (8011024 <sdio_init+0x38>)
 8010ffe:	2200      	movs	r2, #0
 8011000:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8011002:	4b08      	ldr	r3, [pc, #32]	; (8011024 <sdio_init+0x38>)
 8011004:	2200      	movs	r2, #0
 8011006:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8011008:	4b06      	ldr	r3, [pc, #24]	; (8011024 <sdio_init+0x38>)
 801100a:	2200      	movs	r2, #0
 801100c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 801100e:	4b05      	ldr	r3, [pc, #20]	; (8011024 <sdio_init+0x38>)
 8011010:	2200      	movs	r2, #0
 8011012:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 8011014:	4b03      	ldr	r3, [pc, #12]	; (8011024 <sdio_init+0x38>)
 8011016:	2200      	movs	r2, #0
 8011018:	619a      	str	r2, [r3, #24]
}
 801101a:	bf00      	nop
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr
 8011024:	20005994 	.word	0x20005994
 8011028:	40012c00 	.word	0x40012c00

0801102c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b08c      	sub	sp, #48	; 0x30
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 8011034:	2300      	movs	r3, #0
 8011036:	61bb      	str	r3, [r7, #24]
 8011038:	4b60      	ldr	r3, [pc, #384]	; (80111bc <HAL_SD_MspInit+0x190>)
 801103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801103c:	4a5f      	ldr	r2, [pc, #380]	; (80111bc <HAL_SD_MspInit+0x190>)
 801103e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011042:	6313      	str	r3, [r2, #48]	; 0x30
 8011044:	4b5d      	ldr	r3, [pc, #372]	; (80111bc <HAL_SD_MspInit+0x190>)
 8011046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801104c:	61bb      	str	r3, [r7, #24]
 801104e:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8011050:	2200      	movs	r2, #0
 8011052:	2105      	movs	r1, #5
 8011054:	203b      	movs	r0, #59	; 0x3b
 8011056:	f7f0 f92d 	bl	80012b4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801105a:	203b      	movs	r0, #59	; 0x3b
 801105c:	f7f0 f946 	bl	80012ec <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011060:	f107 031c 	add.w	r3, r7, #28
 8011064:	2200      	movs	r2, #0
 8011066:	601a      	str	r2, [r3, #0]
 8011068:	605a      	str	r2, [r3, #4]
 801106a:	609a      	str	r2, [r3, #8]
 801106c:	60da      	str	r2, [r3, #12]
 801106e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4a52      	ldr	r2, [pc, #328]	; (80111c0 <HAL_SD_MspInit+0x194>)
 8011076:	4293      	cmp	r3, r2
 8011078:	f040 809c 	bne.w	80111b4 <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 801107c:	2300      	movs	r3, #0
 801107e:	617b      	str	r3, [r7, #20]
 8011080:	4b4e      	ldr	r3, [pc, #312]	; (80111bc <HAL_SD_MspInit+0x190>)
 8011082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011084:	4a4d      	ldr	r2, [pc, #308]	; (80111bc <HAL_SD_MspInit+0x190>)
 8011086:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801108a:	6453      	str	r3, [r2, #68]	; 0x44
 801108c:	4b4b      	ldr	r3, [pc, #300]	; (80111bc <HAL_SD_MspInit+0x190>)
 801108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011094:	617b      	str	r3, [r7, #20]
 8011096:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011098:	2300      	movs	r3, #0
 801109a:	613b      	str	r3, [r7, #16]
 801109c:	4b47      	ldr	r3, [pc, #284]	; (80111bc <HAL_SD_MspInit+0x190>)
 801109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110a0:	4a46      	ldr	r2, [pc, #280]	; (80111bc <HAL_SD_MspInit+0x190>)
 80110a2:	f043 0304 	orr.w	r3, r3, #4
 80110a6:	6313      	str	r3, [r2, #48]	; 0x30
 80110a8:	4b44      	ldr	r3, [pc, #272]	; (80111bc <HAL_SD_MspInit+0x190>)
 80110aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ac:	f003 0304 	and.w	r3, r3, #4
 80110b0:	613b      	str	r3, [r7, #16]
 80110b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80110b4:	2300      	movs	r3, #0
 80110b6:	60fb      	str	r3, [r7, #12]
 80110b8:	4b40      	ldr	r3, [pc, #256]	; (80111bc <HAL_SD_MspInit+0x190>)
 80110ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110bc:	4a3f      	ldr	r2, [pc, #252]	; (80111bc <HAL_SD_MspInit+0x190>)
 80110be:	f043 0308 	orr.w	r3, r3, #8
 80110c2:	6313      	str	r3, [r2, #48]	; 0x30
 80110c4:	4b3d      	ldr	r3, [pc, #244]	; (80111bc <HAL_SD_MspInit+0x190>)
 80110c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110c8:	f003 0308 	and.w	r3, r3, #8
 80110cc:	60fb      	str	r3, [r7, #12]
 80110ce:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80110d0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80110d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110d6:	2302      	movs	r3, #2
 80110d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110da:	2300      	movs	r3, #0
 80110dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80110de:	2303      	movs	r3, #3
 80110e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80110e2:	230c      	movs	r3, #12
 80110e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80110e6:	f107 031c 	add.w	r3, r7, #28
 80110ea:	4619      	mov	r1, r3
 80110ec:	4835      	ldr	r0, [pc, #212]	; (80111c4 <HAL_SD_MspInit+0x198>)
 80110ee:	f7f0 fca9 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80110f2:	2304      	movs	r3, #4
 80110f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110f6:	2302      	movs	r3, #2
 80110f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110fa:	2300      	movs	r3, #0
 80110fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80110fe:	2303      	movs	r3, #3
 8011100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8011102:	230c      	movs	r3, #12
 8011104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011106:	f107 031c 	add.w	r3, r7, #28
 801110a:	4619      	mov	r1, r3
 801110c:	482e      	ldr	r0, [pc, #184]	; (80111c8 <HAL_SD_MspInit+0x19c>)
 801110e:	f7f0 fc99 	bl	8001a44 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8011112:	2200      	movs	r2, #0
 8011114:	2105      	movs	r1, #5
 8011116:	203b      	movs	r0, #59	; 0x3b
 8011118:	f7f0 f8cc 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801111c:	203b      	movs	r0, #59	; 0x3b
 801111e:	f7f0 f8e5 	bl	80012ec <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 8011122:	4b2a      	ldr	r3, [pc, #168]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011124:	4a2a      	ldr	r2, [pc, #168]	; (80111d0 <HAL_SD_MspInit+0x1a4>)
 8011126:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8011128:	4b28      	ldr	r3, [pc, #160]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 801112a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801112e:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011130:	4b26      	ldr	r3, [pc, #152]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011132:	2200      	movs	r2, #0
 8011134:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8011136:	4b25      	ldr	r3, [pc, #148]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011138:	2200      	movs	r2, #0
 801113a:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 801113c:	4b23      	ldr	r3, [pc, #140]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 801113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011142:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8011144:	4b21      	ldr	r3, [pc, #132]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801114a:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801114c:	4b1f      	ldr	r3, [pc, #124]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 801114e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011152:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8011154:	4b1d      	ldr	r3, [pc, #116]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011156:	2220      	movs	r2, #32
 8011158:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 801115a:	4b1c      	ldr	r3, [pc, #112]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 801115c:	2200      	movs	r2, #0
 801115e:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8011160:	4b1a      	ldr	r3, [pc, #104]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011162:	2204      	movs	r2, #4
 8011164:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8011166:	4b19      	ldr	r3, [pc, #100]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011168:	2203      	movs	r2, #3
 801116a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 801116c:	4b17      	ldr	r3, [pc, #92]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 801116e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011172:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8011174:	4b15      	ldr	r3, [pc, #84]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011176:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801117a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 801117c:	4813      	ldr	r0, [pc, #76]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 801117e:	f7f0 f8c3 	bl	8001308 <HAL_DMA_Init>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d001      	beq.n	801118c <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 8011188:	f001 fe68 	bl	8012e5c <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4a0f      	ldr	r2, [pc, #60]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011190:	641a      	str	r2, [r3, #64]	; 0x40
 8011192:	4a0e      	ldr	r2, [pc, #56]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4a0c      	ldr	r2, [pc, #48]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 801119c:	63da      	str	r2, [r3, #60]	; 0x3c
 801119e:	4a0b      	ldr	r2, [pc, #44]	; (80111cc <HAL_SD_MspInit+0x1a0>)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80111a4:	2200      	movs	r2, #0
 80111a6:	2105      	movs	r1, #5
 80111a8:	2031      	movs	r0, #49	; 0x31
 80111aa:	f7f0 f883 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80111ae:	2031      	movs	r0, #49	; 0x31
 80111b0:	f7f0 f89c 	bl	80012ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80111b4:	bf00      	nop
 80111b6:	3730      	adds	r7, #48	; 0x30
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	40023800 	.word	0x40023800
 80111c0:	40012c00 	.word	0x40012c00
 80111c4:	40020800 	.word	0x40020800
 80111c8:	40020c00 	.word	0x40020c00
 80111cc:	20005a18 	.word	0x20005a18
 80111d0:	40026458 	.word	0x40026458

080111d4 <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 80111d8:	4802      	ldr	r0, [pc, #8]	; (80111e4 <DMA2_Stream3_IRQHandler+0x10>)
 80111da:	f7f0 f9bd 	bl	8001558 <HAL_DMA_IRQHandler>
}
 80111de:	bf00      	nop
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	20005a18 	.word	0x20005a18

080111e8 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 80111ec:	4802      	ldr	r0, [pc, #8]	; (80111f8 <SDIO_IRQHandler+0x10>)
 80111ee:	f7f1 f89f 	bl	8002330 <HAL_SD_IRQHandler>
}
 80111f2:	bf00      	nop
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	20005994 	.word	0x20005994

080111fc <__NVIC_GetPriorityGrouping>:
{
 80111fc:	b480      	push	{r7}
 80111fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011200:	4b04      	ldr	r3, [pc, #16]	; (8011214 <__NVIC_GetPriorityGrouping+0x18>)
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	0a1b      	lsrs	r3, r3, #8
 8011206:	f003 0307 	and.w	r3, r3, #7
}
 801120a:	4618      	mov	r0, r3
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	e000ed00 	.word	0xe000ed00

08011218 <__NVIC_EnableIRQ>:
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	4603      	mov	r3, r0
 8011220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011226:	2b00      	cmp	r3, #0
 8011228:	db0b      	blt.n	8011242 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801122a:	79fb      	ldrb	r3, [r7, #7]
 801122c:	f003 021f 	and.w	r2, r3, #31
 8011230:	4907      	ldr	r1, [pc, #28]	; (8011250 <__NVIC_EnableIRQ+0x38>)
 8011232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011236:	095b      	lsrs	r3, r3, #5
 8011238:	2001      	movs	r0, #1
 801123a:	fa00 f202 	lsl.w	r2, r0, r2
 801123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011242:	bf00      	nop
 8011244:	370c      	adds	r7, #12
 8011246:	46bd      	mov	sp, r7
 8011248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124c:	4770      	bx	lr
 801124e:	bf00      	nop
 8011250:	e000e100 	.word	0xe000e100

08011254 <__NVIC_SetPriority>:
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
 801125a:	4603      	mov	r3, r0
 801125c:	6039      	str	r1, [r7, #0]
 801125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011264:	2b00      	cmp	r3, #0
 8011266:	db0a      	blt.n	801127e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	b2da      	uxtb	r2, r3
 801126c:	490c      	ldr	r1, [pc, #48]	; (80112a0 <__NVIC_SetPriority+0x4c>)
 801126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011272:	0112      	lsls	r2, r2, #4
 8011274:	b2d2      	uxtb	r2, r2
 8011276:	440b      	add	r3, r1
 8011278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801127c:	e00a      	b.n	8011294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	b2da      	uxtb	r2, r3
 8011282:	4908      	ldr	r1, [pc, #32]	; (80112a4 <__NVIC_SetPriority+0x50>)
 8011284:	79fb      	ldrb	r3, [r7, #7]
 8011286:	f003 030f 	and.w	r3, r3, #15
 801128a:	3b04      	subs	r3, #4
 801128c:	0112      	lsls	r2, r2, #4
 801128e:	b2d2      	uxtb	r2, r2
 8011290:	440b      	add	r3, r1
 8011292:	761a      	strb	r2, [r3, #24]
}
 8011294:	bf00      	nop
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	e000e100 	.word	0xe000e100
 80112a4:	e000ed00 	.word	0xe000ed00

080112a8 <NVIC_EncodePriority>:
{
 80112a8:	b480      	push	{r7}
 80112aa:	b089      	sub	sp, #36	; 0x24
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f003 0307 	and.w	r3, r3, #7
 80112ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	f1c3 0307 	rsb	r3, r3, #7
 80112c2:	2b04      	cmp	r3, #4
 80112c4:	bf28      	it	cs
 80112c6:	2304      	movcs	r3, #4
 80112c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80112ca:	69fb      	ldr	r3, [r7, #28]
 80112cc:	3304      	adds	r3, #4
 80112ce:	2b06      	cmp	r3, #6
 80112d0:	d902      	bls.n	80112d8 <NVIC_EncodePriority+0x30>
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	3b03      	subs	r3, #3
 80112d6:	e000      	b.n	80112da <NVIC_EncodePriority+0x32>
 80112d8:	2300      	movs	r3, #0
 80112da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80112dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	fa02 f303 	lsl.w	r3, r2, r3
 80112e6:	43da      	mvns	r2, r3
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	401a      	ands	r2, r3
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80112f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	fa01 f303 	lsl.w	r3, r1, r3
 80112fa:	43d9      	mvns	r1, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011300:	4313      	orrs	r3, r2
}
 8011302:	4618      	mov	r0, r3
 8011304:	3724      	adds	r7, #36	; 0x24
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr

0801130e <LL_SPI_Enable>:
{
 801130e:	b480      	push	{r7}
 8011310:	b083      	sub	sp, #12
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	601a      	str	r2, [r3, #0]
}
 8011322:	bf00      	nop
 8011324:	370c      	adds	r7, #12
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr

0801132e <LL_SPI_SetStandard>:
{
 801132e:	b480      	push	{r7}
 8011330:	b083      	sub	sp, #12
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
 8011336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	f023 0210 	bic.w	r2, r3, #16
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	431a      	orrs	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	605a      	str	r2, [r3, #4]
}
 8011348:	bf00      	nop
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	689b      	ldr	r3, [r3, #8]
 8011360:	f003 0301 	and.w	r3, r3, #1
 8011364:	2b01      	cmp	r3, #1
 8011366:	d101      	bne.n	801136c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8011368:	2301      	movs	r3, #1
 801136a:	e000      	b.n	801136e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 801136c:	2300      	movs	r3, #0
}
 801136e:	4618      	mov	r0, r3
 8011370:	370c      	adds	r7, #12
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr

0801137a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 801137a:	b480      	push	{r7}
 801137c:	b083      	sub	sp, #12
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	f003 0302 	and.w	r3, r3, #2
 801138a:	2b02      	cmp	r3, #2
 801138c:	d101      	bne.n	8011392 <LL_SPI_IsActiveFlag_TXE+0x18>
 801138e:	2301      	movs	r3, #1
 8011390:	e000      	b.n	8011394 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8011392:	2300      	movs	r3, #0
}
 8011394:	4618      	mov	r0, r3
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b083      	sub	sp, #12
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	689b      	ldr	r3, [r3, #8]
 80113ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113b0:	2b80      	cmp	r3, #128	; 0x80
 80113b2:	d101      	bne.n	80113b8 <LL_SPI_IsActiveFlag_BSY+0x18>
 80113b4:	2301      	movs	r3, #1
 80113b6:	e000      	b.n	80113ba <LL_SPI_IsActiveFlag_BSY+0x1a>
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80113c6:	b480      	push	{r7}
 80113c8:	b083      	sub	sp, #12
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	330c      	adds	r3, #12
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	b2db      	uxtb	r3, r3
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr

080113e2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80113e2:	b480      	push	{r7}
 80113e4:	b085      	sub	sp, #20
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
 80113ea:	460b      	mov	r3, r1
 80113ec:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	330c      	adds	r3, #12
 80113f2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	78fa      	ldrb	r2, [r7, #3]
 80113f8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80113fa:	bf00      	nop
 80113fc:	3714      	adds	r7, #20
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
	...

08011408 <LL_DMA_SetDataTransferDirection>:
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8011414:	4a0d      	ldr	r2, [pc, #52]	; (801144c <LL_DMA_SetDataTransferDirection+0x44>)
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	4413      	add	r3, r2
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	461a      	mov	r2, r3
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	4413      	add	r3, r2
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011428:	4908      	ldr	r1, [pc, #32]	; (801144c <LL_DMA_SetDataTransferDirection+0x44>)
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	440b      	add	r3, r1
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	4619      	mov	r1, r3
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	440b      	add	r3, r1
 8011436:	4619      	mov	r1, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4313      	orrs	r3, r2
 801143c:	600b      	str	r3, [r1, #0]
}
 801143e:	bf00      	nop
 8011440:	3714      	adds	r7, #20
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	08014364 	.word	0x08014364

08011450 <LL_DMA_SetMode>:
{
 8011450:	b480      	push	{r7}
 8011452:	b085      	sub	sp, #20
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 801145c:	4a0d      	ldr	r2, [pc, #52]	; (8011494 <LL_DMA_SetMode+0x44>)
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	4413      	add	r3, r2
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	461a      	mov	r2, r3
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	4413      	add	r3, r2
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8011470:	4908      	ldr	r1, [pc, #32]	; (8011494 <LL_DMA_SetMode+0x44>)
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	440b      	add	r3, r1
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	4619      	mov	r1, r3
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	440b      	add	r3, r1
 801147e:	4619      	mov	r1, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4313      	orrs	r3, r2
 8011484:	600b      	str	r3, [r1, #0]
}
 8011486:	bf00      	nop
 8011488:	3714      	adds	r7, #20
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	08014364 	.word	0x08014364

08011498 <LL_DMA_SetPeriphIncMode>:
{
 8011498:	b480      	push	{r7}
 801149a:	b085      	sub	sp, #20
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80114a4:	4a0d      	ldr	r2, [pc, #52]	; (80114dc <LL_DMA_SetPeriphIncMode+0x44>)
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	4413      	add	r3, r2
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	461a      	mov	r2, r3
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	4413      	add	r3, r2
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80114b8:	4908      	ldr	r1, [pc, #32]	; (80114dc <LL_DMA_SetPeriphIncMode+0x44>)
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	440b      	add	r3, r1
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	4619      	mov	r1, r3
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	440b      	add	r3, r1
 80114c6:	4619      	mov	r1, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	600b      	str	r3, [r1, #0]
}
 80114ce:	bf00      	nop
 80114d0:	3714      	adds	r7, #20
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop
 80114dc:	08014364 	.word	0x08014364

080114e0 <LL_DMA_SetMemoryIncMode>:
{
 80114e0:	b480      	push	{r7}
 80114e2:	b085      	sub	sp, #20
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80114ec:	4a0d      	ldr	r2, [pc, #52]	; (8011524 <LL_DMA_SetMemoryIncMode+0x44>)
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	4413      	add	r3, r2
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	461a      	mov	r2, r3
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	4413      	add	r3, r2
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011500:	4908      	ldr	r1, [pc, #32]	; (8011524 <LL_DMA_SetMemoryIncMode+0x44>)
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	440b      	add	r3, r1
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	4619      	mov	r1, r3
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	440b      	add	r3, r1
 801150e:	4619      	mov	r1, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4313      	orrs	r3, r2
 8011514:	600b      	str	r3, [r1, #0]
}
 8011516:	bf00      	nop
 8011518:	3714      	adds	r7, #20
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	08014364 	.word	0x08014364

08011528 <LL_DMA_SetPeriphSize>:
{
 8011528:	b480      	push	{r7}
 801152a:	b085      	sub	sp, #20
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8011534:	4a0d      	ldr	r2, [pc, #52]	; (801156c <LL_DMA_SetPeriphSize+0x44>)
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	4413      	add	r3, r2
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	461a      	mov	r2, r3
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	4413      	add	r3, r2
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011548:	4908      	ldr	r1, [pc, #32]	; (801156c <LL_DMA_SetPeriphSize+0x44>)
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	440b      	add	r3, r1
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	4619      	mov	r1, r3
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	440b      	add	r3, r1
 8011556:	4619      	mov	r1, r3
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	4313      	orrs	r3, r2
 801155c:	600b      	str	r3, [r1, #0]
}
 801155e:	bf00      	nop
 8011560:	3714      	adds	r7, #20
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	08014364 	.word	0x08014364

08011570 <LL_DMA_SetMemorySize>:
{
 8011570:	b480      	push	{r7}
 8011572:	b085      	sub	sp, #20
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 801157c:	4a0d      	ldr	r2, [pc, #52]	; (80115b4 <LL_DMA_SetMemorySize+0x44>)
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	4413      	add	r3, r2
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	461a      	mov	r2, r3
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	4413      	add	r3, r2
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8011590:	4908      	ldr	r1, [pc, #32]	; (80115b4 <LL_DMA_SetMemorySize+0x44>)
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	440b      	add	r3, r1
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	4619      	mov	r1, r3
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	440b      	add	r3, r1
 801159e:	4619      	mov	r1, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	4313      	orrs	r3, r2
 80115a4:	600b      	str	r3, [r1, #0]
}
 80115a6:	bf00      	nop
 80115a8:	3714      	adds	r7, #20
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop
 80115b4:	08014364 	.word	0x08014364

080115b8 <LL_DMA_SetStreamPriorityLevel>:
{
 80115b8:	b480      	push	{r7}
 80115ba:	b085      	sub	sp, #20
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80115c4:	4a0d      	ldr	r2, [pc, #52]	; (80115fc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	4413      	add	r3, r2
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	461a      	mov	r2, r3
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	4413      	add	r3, r2
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80115d8:	4908      	ldr	r1, [pc, #32]	; (80115fc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	440b      	add	r3, r1
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	4619      	mov	r1, r3
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	440b      	add	r3, r1
 80115e6:	4619      	mov	r1, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	4313      	orrs	r3, r2
 80115ec:	600b      	str	r3, [r1, #0]
}
 80115ee:	bf00      	nop
 80115f0:	3714      	adds	r7, #20
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	08014364 	.word	0x08014364

08011600 <LL_DMA_SetChannelSelection>:
{
 8011600:	b480      	push	{r7}
 8011602:	b085      	sub	sp, #20
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 801160c:	4a0d      	ldr	r2, [pc, #52]	; (8011644 <LL_DMA_SetChannelSelection+0x44>)
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	4413      	add	r3, r2
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	461a      	mov	r2, r3
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	4413      	add	r3, r2
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8011620:	4908      	ldr	r1, [pc, #32]	; (8011644 <LL_DMA_SetChannelSelection+0x44>)
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	440b      	add	r3, r1
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	4619      	mov	r1, r3
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	440b      	add	r3, r1
 801162e:	4619      	mov	r1, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	4313      	orrs	r3, r2
 8011634:	600b      	str	r3, [r1, #0]
}
 8011636:	bf00      	nop
 8011638:	3714      	adds	r7, #20
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	08014364 	.word	0x08014364

08011648 <LL_DMA_DisableFifoMode>:
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8011652:	4a0c      	ldr	r2, [pc, #48]	; (8011684 <LL_DMA_DisableFifoMode+0x3c>)
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	4413      	add	r3, r2
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	461a      	mov	r2, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4413      	add	r3, r2
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	4908      	ldr	r1, [pc, #32]	; (8011684 <LL_DMA_DisableFifoMode+0x3c>)
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	440a      	add	r2, r1
 8011668:	7812      	ldrb	r2, [r2, #0]
 801166a:	4611      	mov	r1, r2
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	440a      	add	r2, r1
 8011670:	f023 0304 	bic.w	r3, r3, #4
 8011674:	6153      	str	r3, [r2, #20]
}
 8011676:	bf00      	nop
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	08014364 	.word	0x08014364

08011688 <LL_APB2_GRP1_EnableClock>:
{
 8011688:	b480      	push	{r7}
 801168a:	b085      	sub	sp, #20
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8011690:	4b08      	ldr	r3, [pc, #32]	; (80116b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8011692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011694:	4907      	ldr	r1, [pc, #28]	; (80116b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4313      	orrs	r3, r2
 801169a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801169c:	4b05      	ldr	r3, [pc, #20]	; (80116b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 801169e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	4013      	ands	r3, r2
 80116a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80116a6:	68fb      	ldr	r3, [r7, #12]
}
 80116a8:	bf00      	nop
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr
 80116b4:	40023800 	.word	0x40023800

080116b8 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	4603      	mov	r3, r0
 80116c0:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 80116c2:	f7f7 fc41 	bl	8008f48 <vPortEnterCritical>

	switch(spi_id) {
 80116c6:	79fb      	ldrb	r3, [r7, #7]
 80116c8:	2b05      	cmp	r3, #5
 80116ca:	d014      	beq.n	80116f6 <spi_init+0x3e>
 80116cc:	2b05      	cmp	r3, #5
 80116ce:	dc19      	bgt.n	8011704 <spi_init+0x4c>
 80116d0:	2b02      	cmp	r3, #2
 80116d2:	d002      	beq.n	80116da <spi_init+0x22>
 80116d4:	2b04      	cmp	r3, #4
 80116d6:	d007      	beq.n	80116e8 <spi_init+0x30>
 80116d8:	e014      	b.n	8011704 <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 80116da:	480f      	ldr	r0, [pc, #60]	; (8011718 <spi_init+0x60>)
 80116dc:	f000 f900 	bl	80118e0 <spi2_init>
		hal_cli_printf("spi2 init");
 80116e0:	480e      	ldr	r0, [pc, #56]	; (801171c <spi_init+0x64>)
 80116e2:	f7fd fab3 	bl	800ec4c <hal_cli_printf>
		break;
 80116e6:	e011      	b.n	801170c <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 80116e8:	480d      	ldr	r0, [pc, #52]	; (8011720 <spi_init+0x68>)
 80116ea:	f000 f921 	bl	8011930 <spi4_init>
		hal_cli_printf("spi4 init");
 80116ee:	480d      	ldr	r0, [pc, #52]	; (8011724 <spi_init+0x6c>)
 80116f0:	f7fd faac 	bl	800ec4c <hal_cli_printf>
		break;
 80116f4:	e00a      	b.n	801170c <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 80116f6:	480c      	ldr	r0, [pc, #48]	; (8011728 <spi_init+0x70>)
 80116f8:	f000 f942 	bl	8011980 <spi5_init>
		hal_cli_printf("spi5 init");
 80116fc:	480b      	ldr	r0, [pc, #44]	; (801172c <spi_init+0x74>)
 80116fe:	f7fd faa5 	bl	800ec4c <hal_cli_printf>
		break;
 8011702:	e003      	b.n	801170c <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 8011704:	480a      	ldr	r0, [pc, #40]	; (8011730 <spi_init+0x78>)
 8011706:	f7fd faa1 	bl	800ec4c <hal_cli_printf>
		break;
 801170a:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 801170c:	f7f7 fc4c 	bl	8008fa8 <vPortExitCritical>
}
 8011710:	bf00      	nop
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	20005a78 	.word	0x20005a78
 801171c:	08013be8 	.word	0x08013be8
 8011720:	20005a8c 	.word	0x20005a8c
 8011724:	08013bf4 	.word	0x08013bf4
 8011728:	20005aa0 	.word	0x20005aa0
 801172c:	08013c00 	.word	0x08013c00
 8011730:	08013c0c 	.word	0x08013c0c

08011734 <hal_spi_transfer>:

bool hal_spi_transfer(spidrv_t* drv, uint8_t* data, uint32_t size, uint32_t timeout)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b088      	sub	sp, #32
 8011738:	af00      	add	r7, sp, #0
 801173a:	6178      	str	r0, [r7, #20]
 801173c:	6139      	str	r1, [r7, #16]
 801173e:	60fa      	str	r2, [r7, #12]
 8011740:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 8011742:	463b      	mov	r3, r7
 8011744:	68b9      	ldr	r1, [r7, #8]
 8011746:	4618      	mov	r0, r3
 8011748:	f7fd fd62 	bl	800f210 <hal_get_delay_timer>
 801174c:	f107 0318 	add.w	r3, r7, #24
 8011750:	463a      	mov	r2, r7
 8011752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011756:	e883 0003 	stmia.w	r3, {r0, r1}

	while(size > 0) {
 801175a:	e023      	b.n	80117a4 <hal_spi_transfer+0x70>
		LL_SPI_TransmitData8(drv->spi, *data);
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	4619      	mov	r1, r3
 8011766:	4610      	mov	r0, r2
 8011768:	f7ff fe3b 	bl	80113e2 <LL_SPI_TransmitData8>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 801176c:	e00c      	b.n	8011788 <hal_spi_transfer+0x54>
			if(hal_delay_timer_is_expired(&timer)) {
 801176e:	f107 0318 	add.w	r3, r7, #24
 8011772:	4618      	mov	r0, r3
 8011774:	f7fd fd72 	bl	800f25c <hal_delay_timer_is_expired>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d004      	beq.n	8011788 <hal_spi_transfer+0x54>
				hal_cli_printf("spi txe flag failed");
 801177e:	4818      	ldr	r0, [pc, #96]	; (80117e0 <hal_spi_transfer+0xac>)
 8011780:	f7fd fa64 	bl	800ec4c <hal_cli_printf>
				return false;
 8011784:	2300      	movs	r3, #0
 8011786:	e027      	b.n	80117d8 <hal_spi_transfer+0xa4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4618      	mov	r0, r3
 801178e:	f7ff fdf4 	bl	801137a <LL_SPI_IsActiveFlag_TXE>
 8011792:	4603      	mov	r3, r0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d0ea      	beq.n	801176e <hal_spi_transfer+0x3a>
			}
		}
		size--;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	3b01      	subs	r3, #1
 801179c:	60fb      	str	r3, [r7, #12]
		data++;
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	3301      	adds	r3, #1
 80117a2:	613b      	str	r3, [r7, #16]
	while(size > 0) {
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d1d8      	bne.n	801175c <hal_spi_transfer+0x28>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 80117aa:	e00c      	b.n	80117c6 <hal_spi_transfer+0x92>
		if(hal_delay_timer_is_expired(&timer)) {
 80117ac:	f107 0318 	add.w	r3, r7, #24
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fd fd53 	bl	800f25c <hal_delay_timer_is_expired>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d004      	beq.n	80117c6 <hal_spi_transfer+0x92>
			hal_cli_printf("spi busy flag failed");
 80117bc:	4809      	ldr	r0, [pc, #36]	; (80117e4 <hal_spi_transfer+0xb0>)
 80117be:	f7fd fa45 	bl	800ec4c <hal_cli_printf>
			return false;
 80117c2:	2300      	movs	r3, #0
 80117c4:	e008      	b.n	80117d8 <hal_spi_transfer+0xa4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7ff fde8 	bl	80113a0 <LL_SPI_IsActiveFlag_BSY>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d1ea      	bne.n	80117ac <hal_spi_transfer+0x78>
		}
	}

	return true;
 80117d6:	2301      	movs	r3, #1
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3720      	adds	r7, #32
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}
 80117e0:	08013c20 	.word	0x08013c20
 80117e4:	08013c34 	.word	0x08013c34

080117e8 <hal_spi_txrx>:

	return true;
}

bool hal_spi_txrx(spidrv_t* drv, uint8_t* tx, uint8_t* rx, uint32_t size, uint32_t timeout)
{
 80117e8:	b590      	push	{r4, r7, lr}
 80117ea:	b08b      	sub	sp, #44	; 0x2c
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6178      	str	r0, [r7, #20]
 80117f0:	6139      	str	r1, [r7, #16]
 80117f2:	60fa      	str	r2, [r7, #12]
 80117f4:	60bb      	str	r3, [r7, #8]
	coretex_timer timer;

	timer = hal_get_delay_timer(timeout);
 80117f6:	463b      	mov	r3, r7
 80117f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fd fd08 	bl	800f210 <hal_get_delay_timer>
 8011800:	f107 031c 	add.w	r3, r7, #28
 8011804:	463a      	mov	r2, r7
 8011806:	e892 0003 	ldmia.w	r2, {r0, r1}
 801180a:	e883 0003 	stmia.w	r3, {r0, r1}

	for(int i = 0; i < size; i++) {
 801180e:	2300      	movs	r3, #0
 8011810:	627b      	str	r3, [r7, #36]	; 0x24
 8011812:	e040      	b.n	8011896 <hal_spi_txrx+0xae>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
			if(hal_delay_timer_is_expired(&timer)) {
 8011814:	f107 031c 	add.w	r3, r7, #28
 8011818:	4618      	mov	r0, r3
 801181a:	f7fd fd1f 	bl	800f25c <hal_delay_timer_is_expired>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d004      	beq.n	801182e <hal_spi_txrx+0x46>
				hal_cli_printf("spi txe flag failed");
 8011824:	482b      	ldr	r0, [pc, #172]	; (80118d4 <hal_spi_txrx+0xec>)
 8011826:	f7fd fa11 	bl	800ec4c <hal_cli_printf>
				return false;
 801182a:	2300      	movs	r3, #0
 801182c:	e04e      	b.n	80118cc <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_TXE(drv->spi)) {
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4618      	mov	r0, r3
 8011834:	f7ff fda1 	bl	801137a <LL_SPI_IsActiveFlag_TXE>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0ea      	beq.n	8011814 <hal_spi_txrx+0x2c>
			}
		}
		LL_SPI_TransmitData8(drv->spi, tx[i]);
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	6818      	ldr	r0, [r3, #0]
 8011842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011844:	693a      	ldr	r2, [r7, #16]
 8011846:	4413      	add	r3, r2
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	4619      	mov	r1, r3
 801184c:	f7ff fdc9 	bl	80113e2 <LL_SPI_TransmitData8>

		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 8011850:	e00c      	b.n	801186c <hal_spi_txrx+0x84>
			if(hal_delay_timer_is_expired(&timer)) {
 8011852:	f107 031c 	add.w	r3, r7, #28
 8011856:	4618      	mov	r0, r3
 8011858:	f7fd fd00 	bl	800f25c <hal_delay_timer_is_expired>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d004      	beq.n	801186c <hal_spi_txrx+0x84>
				hal_cli_printf("spi rxne flag failed");
 8011862:	481d      	ldr	r0, [pc, #116]	; (80118d8 <hal_spi_txrx+0xf0>)
 8011864:	f7fd f9f2 	bl	800ec4c <hal_cli_printf>
				return false;
 8011868:	2300      	movs	r3, #0
 801186a:	e02f      	b.n	80118cc <hal_spi_txrx+0xe4>
		while(!LL_SPI_IsActiveFlag_RXNE(drv->spi)) {
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4618      	mov	r0, r3
 8011872:	f7ff fd6f 	bl	8011354 <LL_SPI_IsActiveFlag_RXNE>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d0ea      	beq.n	8011852 <hal_spi_txrx+0x6a>
			}
		}
		rx[i] = LL_SPI_ReceiveData8(drv->spi);
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	6819      	ldr	r1, [r3, #0]
 8011880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011882:	68fa      	ldr	r2, [r7, #12]
 8011884:	18d4      	adds	r4, r2, r3
 8011886:	4608      	mov	r0, r1
 8011888:	f7ff fd9d 	bl	80113c6 <LL_SPI_ReceiveData8>
 801188c:	4603      	mov	r3, r0
 801188e:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < size; i++) {
 8011890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011892:	3301      	adds	r3, #1
 8011894:	627b      	str	r3, [r7, #36]	; 0x24
 8011896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011898:	68ba      	ldr	r2, [r7, #8]
 801189a:	429a      	cmp	r2, r3
 801189c:	d8c7      	bhi.n	801182e <hal_spi_txrx+0x46>
	}

	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 801189e:	e00c      	b.n	80118ba <hal_spi_txrx+0xd2>
		if(hal_delay_timer_is_expired(&timer)) {
 80118a0:	f107 031c 	add.w	r3, r7, #28
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7fd fcd9 	bl	800f25c <hal_delay_timer_is_expired>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d004      	beq.n	80118ba <hal_spi_txrx+0xd2>
			hal_cli_printf("spi busy flag failed");
 80118b0:	480a      	ldr	r0, [pc, #40]	; (80118dc <hal_spi_txrx+0xf4>)
 80118b2:	f7fd f9cb 	bl	800ec4c <hal_cli_printf>
			return false;
 80118b6:	2300      	movs	r3, #0
 80118b8:	e008      	b.n	80118cc <hal_spi_txrx+0xe4>
	while(LL_SPI_IsActiveFlag_BSY(drv->spi)) {
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7ff fd6e 	bl	80113a0 <LL_SPI_IsActiveFlag_BSY>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d1ea      	bne.n	80118a0 <hal_spi_txrx+0xb8>
		}
	}
	return true;
 80118ca:	2301      	movs	r3, #1
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	372c      	adds	r7, #44	; 0x2c
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd90      	pop	{r4, r7, pc}
 80118d4:	08013c20 	.word	0x08013c20
 80118d8:	08013c4c 	.word	0x08013c4c
 80118dc:	08013c34 	.word	0x08013c34

080118e0 <spi2_init>:


static void spi2_init(spidrv_t* drv)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 80118e8:	f000 f872 	bl	80119d0 <spi2_pin_conf>
	spi2_dma_init();
 80118ec:	f000 f88a 	bl	8011a04 <spi2_dma_init>
	spi2_config();
 80118f0:	f000 f8cc 	bl	8011a8c <spi2_config>

	LL_SPI_Enable(SPI2);
 80118f4:	480c      	ldr	r0, [pc, #48]	; (8011928 <spi2_init+0x48>)
 80118f6:	f7ff fd0a 	bl	801130e <LL_SPI_Enable>

	drv->spi = SPI2;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	4a0a      	ldr	r2, [pc, #40]	; (8011928 <spi2_init+0x48>)
 80118fe:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	4a0a      	ldr	r2, [pc, #40]	; (801192c <spi2_init+0x4c>)
 8011904:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2204      	movs	r2, #4
 801190a:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2200      	movs	r2, #0
 8011910:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011912:	2001      	movs	r0, #1
 8011914:	f7f7 fe0e 	bl	8009534 <xQueueCreateMutex>
 8011918:	4602      	mov	r2, r0
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	605a      	str	r2, [r3, #4]
}
 801191e:	bf00      	nop
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	40003800 	.word	0x40003800
 801192c:	40026000 	.word	0x40026000

08011930 <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 8011938:	f000 f8e6 	bl	8011b08 <spi4_pin_conf>
	spi4_dma_init();
 801193c:	f000 f908 	bl	8011b50 <spi4_dma_init>
	spi4_config();
 8011940:	f000 f988 	bl	8011c54 <spi4_config>

	LL_SPI_Enable(SPI4);
 8011944:	480c      	ldr	r0, [pc, #48]	; (8011978 <spi4_init+0x48>)
 8011946:	f7ff fce2 	bl	801130e <LL_SPI_Enable>

	drv->spi = SPI4;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4a0a      	ldr	r2, [pc, #40]	; (8011978 <spi4_init+0x48>)
 801194e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	4a0a      	ldr	r2, [pc, #40]	; (801197c <spi4_init+0x4c>)
 8011954:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2201      	movs	r2, #1
 801195a:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 8011962:	2001      	movs	r0, #1
 8011964:	f7f7 fde6 	bl	8009534 <xQueueCreateMutex>
 8011968:	4602      	mov	r2, r0
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	605a      	str	r2, [r3, #4]
}
 801196e:	bf00      	nop
 8011970:	3708      	adds	r7, #8
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	40013400 	.word	0x40013400
 801197c:	40026400 	.word	0x40026400

08011980 <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b082      	sub	sp, #8
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 8011988:	f000 f9a2 	bl	8011cd0 <spi5_pin_conf>
	spi5_dma_init();
 801198c:	f000 f9c4 	bl	8011d18 <spi5_dma_init>
	spi5_config();
 8011990:	f000 fa06 	bl	8011da0 <spi5_config>

	LL_SPI_Enable(SPI5);
 8011994:	480c      	ldr	r0, [pc, #48]	; (80119c8 <spi5_init+0x48>)
 8011996:	f7ff fcba 	bl	801130e <LL_SPI_Enable>

	drv->spi = SPI5;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4a0a      	ldr	r2, [pc, #40]	; (80119c8 <spi5_init+0x48>)
 801199e:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	4a0a      	ldr	r2, [pc, #40]	; (80119cc <spi5_init+0x4c>)
 80119a4:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2204      	movs	r2, #4
 80119aa:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 80119b2:	2001      	movs	r0, #1
 80119b4:	f7f7 fdbe 	bl	8009534 <xQueueCreateMutex>
 80119b8:	4602      	mov	r2, r0
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	605a      	str	r2, [r3, #4]
}
 80119be:	bf00      	nop
 80119c0:	3708      	adds	r7, #8
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	40015000 	.word	0x40015000
 80119cc:	40026400 	.word	0x40026400

080119d0 <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 80119d6:	2305      	movs	r3, #5
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	2303      	movs	r3, #3
 80119dc:	2200      	movs	r2, #0
 80119de:	2103      	movs	r1, #3
 80119e0:	4806      	ldr	r0, [pc, #24]	; (80119fc <spi2_pin_conf+0x2c>)
 80119e2:	f7fd fea3 	bl	800f72c <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 80119e6:	2305      	movs	r3, #5
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	2303      	movs	r3, #3
 80119ec:	2200      	movs	r2, #0
 80119ee:	2103      	movs	r1, #3
 80119f0:	4803      	ldr	r0, [pc, #12]	; (8011a00 <spi2_pin_conf+0x30>)
 80119f2:	f7fd fe9b 	bl	800f72c <hal_gpio_init_alt>
		&gpio_spi2_mosi,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 80119f6:	bf00      	nop
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	08014304 	.word	0x08014304
 8011a00:	0801430c 	.word	0x0801430c

08011a04 <spi2_dma_init>:

static void spi2_dma_init(void)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011a08:	f7ff fbf8 	bl	80111fc <__NVIC_GetPriorityGrouping>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2200      	movs	r2, #0
 8011a10:	2105      	movs	r1, #5
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7ff fc48 	bl	80112a8 <NVIC_EncodePriority>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	200f      	movs	r0, #15
 8011a1e:	f7ff fc19 	bl	8011254 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8011a22:	200f      	movs	r0, #15
 8011a24:	f7ff fbf8 	bl	8011218 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, DMA_SPI2_TX_STREAM, DMA_SPI2_TX_CHANNEL);
 8011a28:	2200      	movs	r2, #0
 8011a2a:	2104      	movs	r1, #4
 8011a2c:	4816      	ldr	r0, [pc, #88]	; (8011a88 <spi2_dma_init+0x84>)
 8011a2e:	f7ff fde7 	bl	8011600 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011a32:	2240      	movs	r2, #64	; 0x40
 8011a34:	2104      	movs	r1, #4
 8011a36:	4814      	ldr	r0, [pc, #80]	; (8011a88 <spi2_dma_init+0x84>)
 8011a38:	f7ff fce6 	bl	8011408 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	2104      	movs	r1, #4
 8011a40:	4811      	ldr	r0, [pc, #68]	; (8011a88 <spi2_dma_init+0x84>)
 8011a42:	f7ff fdb9 	bl	80115b8 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011a46:	2200      	movs	r2, #0
 8011a48:	2104      	movs	r1, #4
 8011a4a:	480f      	ldr	r0, [pc, #60]	; (8011a88 <spi2_dma_init+0x84>)
 8011a4c:	f7ff fd00 	bl	8011450 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011a50:	2200      	movs	r2, #0
 8011a52:	2104      	movs	r1, #4
 8011a54:	480c      	ldr	r0, [pc, #48]	; (8011a88 <spi2_dma_init+0x84>)
 8011a56:	f7ff fd1f 	bl	8011498 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011a5e:	2104      	movs	r1, #4
 8011a60:	4809      	ldr	r0, [pc, #36]	; (8011a88 <spi2_dma_init+0x84>)
 8011a62:	f7ff fd3d 	bl	80114e0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011a66:	2200      	movs	r2, #0
 8011a68:	2104      	movs	r1, #4
 8011a6a:	4807      	ldr	r0, [pc, #28]	; (8011a88 <spi2_dma_init+0x84>)
 8011a6c:	f7ff fd5c 	bl	8011528 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011a70:	2200      	movs	r2, #0
 8011a72:	2104      	movs	r1, #4
 8011a74:	4804      	ldr	r0, [pc, #16]	; (8011a88 <spi2_dma_init+0x84>)
 8011a76:	f7ff fd7b 	bl	8011570 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, DMA_SPI2_TX_STREAM);
 8011a7a:	2104      	movs	r1, #4
 8011a7c:	4802      	ldr	r0, [pc, #8]	; (8011a88 <spi2_dma_init+0x84>)
 8011a7e:	f7ff fde3 	bl	8011648 <LL_DMA_DisableFifoMode>
}
 8011a82:	bf00      	nop
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	40026000 	.word	0x40026000

08011a8c <spi2_config>:

static void spi2_config(void)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08a      	sub	sp, #40	; 0x28
 8011a90:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011a92:	463b      	mov	r3, r7
 8011a94:	2228      	movs	r2, #40	; 0x28
 8011a96:	2100      	movs	r1, #0
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f001 fa55 	bl	8012f48 <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011a9e:	f7ff fbad 	bl	80111fc <__NVIC_GetPriorityGrouping>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	2105      	movs	r1, #5
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7ff fbfd 	bl	80112a8 <NVIC_EncodePriority>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	2024      	movs	r0, #36	; 0x24
 8011ab4:	f7ff fbce 	bl	8011254 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 8011ab8:	2024      	movs	r0, #36	; 0x24
 8011aba:	f7ff fbad 	bl	8011218 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011ac2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011ac6:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011acc:	2300      	movs	r3, #0
 8011ace:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ad8:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8011ada:	2318      	movs	r3, #24
 8011adc:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 8011ae6:	230a      	movs	r3, #10
 8011ae8:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 8011aea:	463b      	mov	r3, r7
 8011aec:	4619      	mov	r1, r3
 8011aee:	4805      	ldr	r0, [pc, #20]	; (8011b04 <spi2_config+0x78>)
 8011af0:	f7f2 ffad 	bl	8004a4e <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8011af4:	2100      	movs	r1, #0
 8011af6:	4803      	ldr	r0, [pc, #12]	; (8011b04 <spi2_config+0x78>)
 8011af8:	f7ff fc19 	bl	801132e <LL_SPI_SetStandard>
}
 8011afc:	bf00      	nop
 8011afe:	3728      	adds	r7, #40	; 0x28
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	40003800 	.word	0x40003800

08011b08 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 8011b0e:	2305      	movs	r3, #5
 8011b10:	9300      	str	r3, [sp, #0]
 8011b12:	2303      	movs	r3, #3
 8011b14:	2200      	movs	r2, #0
 8011b16:	2103      	movs	r1, #3
 8011b18:	480a      	ldr	r0, [pc, #40]	; (8011b44 <spi4_pin_conf+0x3c>)
 8011b1a:	f7fd fe07 	bl	800f72c <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011b1e:	2305      	movs	r3, #5
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	2303      	movs	r3, #3
 8011b24:	2200      	movs	r2, #0
 8011b26:	2103      	movs	r1, #3
 8011b28:	4807      	ldr	r0, [pc, #28]	; (8011b48 <spi4_pin_conf+0x40>)
 8011b2a:	f7fd fdff 	bl	800f72c <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 8011b2e:	2305      	movs	r3, #5
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	2303      	movs	r3, #3
 8011b34:	2200      	movs	r2, #0
 8011b36:	2103      	movs	r1, #3
 8011b38:	4804      	ldr	r0, [pc, #16]	; (8011b4c <spi4_pin_conf+0x44>)
 8011b3a:	f7fd fdf7 	bl	800f72c <hal_gpio_init_alt>
		&gpio_spi4_miso,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 8011b3e:	bf00      	nop
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	08014314 	.word	0x08014314
 8011b48:	0801431c 	.word	0x0801431c
 8011b4c:	08014324 	.word	0x08014324

08011b50 <spi4_dma_init>:

static void spi4_dma_init(void)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011b54:	f7ff fb52 	bl	80111fc <__NVIC_GetPriorityGrouping>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	2105      	movs	r1, #5
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7ff fba2 	bl	80112a8 <NVIC_EncodePriority>
 8011b64:	4603      	mov	r3, r0
 8011b66:	4619      	mov	r1, r3
 8011b68:	2038      	movs	r0, #56	; 0x38
 8011b6a:	f7ff fb73 	bl	8011254 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8011b6e:	2038      	movs	r0, #56	; 0x38
 8011b70:	f7ff fb52 	bl	8011218 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011b74:	f7ff fb42 	bl	80111fc <__NVIC_GetPriorityGrouping>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	2105      	movs	r1, #5
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff fb92 	bl	80112a8 <NVIC_EncodePriority>
 8011b84:	4603      	mov	r3, r0
 8011b86:	4619      	mov	r1, r3
 8011b88:	2039      	movs	r0, #57	; 0x39
 8011b8a:	f7ff fb63 	bl	8011254 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8011b8e:	2039      	movs	r0, #57	; 0x39
 8011b90:	f7ff fb42 	bl	8011218 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_RX_STREAM, DMA_SPI4_RX_CHANNEL);
 8011b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011b98:	2100      	movs	r1, #0
 8011b9a:	482d      	ldr	r0, [pc, #180]	; (8011c50 <spi4_dma_init+0x100>)
 8011b9c:	f7ff fd30 	bl	8011600 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	482a      	ldr	r0, [pc, #168]	; (8011c50 <spi4_dma_init+0x100>)
 8011ba6:	f7ff fc2f 	bl	8011408 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8011baa:	2200      	movs	r2, #0
 8011bac:	2100      	movs	r1, #0
 8011bae:	4828      	ldr	r0, [pc, #160]	; (8011c50 <spi4_dma_init+0x100>)
 8011bb0:	f7ff fd02 	bl	80115b8 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MODE_NORMAL);
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	4825      	ldr	r0, [pc, #148]	; (8011c50 <spi4_dma_init+0x100>)
 8011bba:	f7ff fc49 	bl	8011450 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	4823      	ldr	r0, [pc, #140]	; (8011c50 <spi4_dma_init+0x100>)
 8011bc4:	f7ff fc68 	bl	8011498 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011bcc:	2100      	movs	r1, #0
 8011bce:	4820      	ldr	r0, [pc, #128]	; (8011c50 <spi4_dma_init+0x100>)
 8011bd0:	f7ff fc86 	bl	80114e0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	481d      	ldr	r0, [pc, #116]	; (8011c50 <spi4_dma_init+0x100>)
 8011bda:	f7ff fca5 	bl	8011528 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011bde:	2200      	movs	r2, #0
 8011be0:	2100      	movs	r1, #0
 8011be2:	481b      	ldr	r0, [pc, #108]	; (8011c50 <spi4_dma_init+0x100>)
 8011be4:	f7ff fcc4 	bl	8011570 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_RX_STREAM);
 8011be8:	2100      	movs	r1, #0
 8011bea:	4819      	ldr	r0, [pc, #100]	; (8011c50 <spi4_dma_init+0x100>)
 8011bec:	f7ff fd2c 	bl	8011648 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_TX_STREAM, DMA_SPI4_TX_CHANNEL);
 8011bf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011bf4:	2101      	movs	r1, #1
 8011bf6:	4816      	ldr	r0, [pc, #88]	; (8011c50 <spi4_dma_init+0x100>)
 8011bf8:	f7ff fd02 	bl	8011600 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011bfc:	2240      	movs	r2, #64	; 0x40
 8011bfe:	2101      	movs	r1, #1
 8011c00:	4813      	ldr	r0, [pc, #76]	; (8011c50 <spi4_dma_init+0x100>)
 8011c02:	f7ff fc01 	bl	8011408 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8011c06:	2200      	movs	r2, #0
 8011c08:	2101      	movs	r1, #1
 8011c0a:	4811      	ldr	r0, [pc, #68]	; (8011c50 <spi4_dma_init+0x100>)
 8011c0c:	f7ff fcd4 	bl	80115b8 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MODE_NORMAL);
 8011c10:	2200      	movs	r2, #0
 8011c12:	2101      	movs	r1, #1
 8011c14:	480e      	ldr	r0, [pc, #56]	; (8011c50 <spi4_dma_init+0x100>)
 8011c16:	f7ff fc1b 	bl	8011450 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	2101      	movs	r1, #1
 8011c1e:	480c      	ldr	r0, [pc, #48]	; (8011c50 <spi4_dma_init+0x100>)
 8011c20:	f7ff fc3a 	bl	8011498 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8011c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011c28:	2101      	movs	r1, #1
 8011c2a:	4809      	ldr	r0, [pc, #36]	; (8011c50 <spi4_dma_init+0x100>)
 8011c2c:	f7ff fc58 	bl	80114e0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8011c30:	2200      	movs	r2, #0
 8011c32:	2101      	movs	r1, #1
 8011c34:	4806      	ldr	r0, [pc, #24]	; (8011c50 <spi4_dma_init+0x100>)
 8011c36:	f7ff fc77 	bl	8011528 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	2101      	movs	r1, #1
 8011c3e:	4804      	ldr	r0, [pc, #16]	; (8011c50 <spi4_dma_init+0x100>)
 8011c40:	f7ff fc96 	bl	8011570 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_TX_STREAM);
 8011c44:	2101      	movs	r1, #1
 8011c46:	4802      	ldr	r0, [pc, #8]	; (8011c50 <spi4_dma_init+0x100>)
 8011c48:	f7ff fcfe 	bl	8011648 <LL_DMA_DisableFifoMode>
}
 8011c4c:	bf00      	nop
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	40026400 	.word	0x40026400

08011c54 <spi4_config>:

static void spi4_config(void)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b08a      	sub	sp, #40	; 0x28
 8011c58:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011c5a:	463b      	mov	r3, r7
 8011c5c:	2228      	movs	r2, #40	; 0x28
 8011c5e:	2100      	movs	r1, #0
 8011c60:	4618      	mov	r0, r3
 8011c62:	f001 f971 	bl	8012f48 <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011c66:	f7ff fac9 	bl	80111fc <__NVIC_GetPriorityGrouping>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	2105      	movs	r1, #5
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7ff fb19 	bl	80112a8 <NVIC_EncodePriority>
 8011c76:	4603      	mov	r3, r0
 8011c78:	4619      	mov	r1, r3
 8011c7a:	2054      	movs	r0, #84	; 0x54
 8011c7c:	f7ff faea 	bl	8011254 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 8011c80:	2054      	movs	r0, #84	; 0x54
 8011c82:	f7ff fac9 	bl	8011218 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011c86:	2300      	movs	r3, #0
 8011c88:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011c8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011c8e:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011c90:	2300      	movs	r3, #0
 8011c92:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011c94:	2300      	movs	r3, #0
 8011c96:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ca0:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8011ca2:	2328      	movs	r3, #40	; 0x28
 8011ca4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011caa:	2300      	movs	r3, #0
 8011cac:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8011cae:	230a      	movs	r3, #10
 8011cb0:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 8011cb2:	463b      	mov	r3, r7
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4805      	ldr	r0, [pc, #20]	; (8011ccc <spi4_config+0x78>)
 8011cb8:	f7f2 fec9 	bl	8004a4e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8011cbc:	2100      	movs	r1, #0
 8011cbe:	4803      	ldr	r0, [pc, #12]	; (8011ccc <spi4_config+0x78>)
 8011cc0:	f7ff fb35 	bl	801132e <LL_SPI_SetStandard>
}
 8011cc4:	bf00      	nop
 8011cc6:	3728      	adds	r7, #40	; 0x28
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	40013400 	.word	0x40013400

08011cd0 <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b086      	sub	sp, #24
 8011cd4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cd6:	463b      	mov	r3, r7
 8011cd8:	2200      	movs	r2, #0
 8011cda:	601a      	str	r2, [r3, #0]
 8011cdc:	605a      	str	r2, [r3, #4]
 8011cde:	609a      	str	r2, [r3, #8]
 8011ce0:	60da      	str	r2, [r3, #12]
 8011ce2:	611a      	str	r2, [r3, #16]
 8011ce4:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8011ce6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8011cea:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011cec:	2302      	movs	r3, #2
 8011cee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011cf0:	2303      	movs	r3, #3
 8011cf2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8011cfc:	2305      	movs	r3, #5
 8011cfe:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011d00:	463b      	mov	r3, r7
 8011d02:	4619      	mov	r1, r3
 8011d04:	4803      	ldr	r0, [pc, #12]	; (8011d14 <spi5_pin_conf+0x44>)
 8011d06:	f7f1 fe5a 	bl	80039be <LL_GPIO_Init>
}
 8011d0a:	bf00      	nop
 8011d0c:	3718      	adds	r7, #24
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	40021400 	.word	0x40021400

08011d18 <spi5_dma_init>:

static void spi5_dma_init(void)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011d1c:	f7ff fa6e 	bl	80111fc <__NVIC_GetPriorityGrouping>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2200      	movs	r2, #0
 8011d24:	2105      	movs	r1, #5
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7ff fabe 	bl	80112a8 <NVIC_EncodePriority>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	4619      	mov	r1, r3
 8011d30:	203c      	movs	r0, #60	; 0x3c
 8011d32:	f7ff fa8f 	bl	8011254 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8011d36:	203c      	movs	r0, #60	; 0x3c
 8011d38:	f7ff fa6e 	bl	8011218 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 8011d3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011d40:	2104      	movs	r1, #4
 8011d42:	4816      	ldr	r0, [pc, #88]	; (8011d9c <spi5_dma_init+0x84>)
 8011d44:	f7ff fc5c 	bl	8011600 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8011d48:	2240      	movs	r2, #64	; 0x40
 8011d4a:	2104      	movs	r1, #4
 8011d4c:	4813      	ldr	r0, [pc, #76]	; (8011d9c <spi5_dma_init+0x84>)
 8011d4e:	f7ff fb5b 	bl	8011408 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8011d52:	2200      	movs	r2, #0
 8011d54:	2104      	movs	r1, #4
 8011d56:	4811      	ldr	r0, [pc, #68]	; (8011d9c <spi5_dma_init+0x84>)
 8011d58:	f7ff fc2e 	bl	80115b8 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	2104      	movs	r1, #4
 8011d60:	480e      	ldr	r0, [pc, #56]	; (8011d9c <spi5_dma_init+0x84>)
 8011d62:	f7ff fb75 	bl	8011450 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8011d66:	2200      	movs	r2, #0
 8011d68:	2104      	movs	r1, #4
 8011d6a:	480c      	ldr	r0, [pc, #48]	; (8011d9c <spi5_dma_init+0x84>)
 8011d6c:	f7ff fb94 	bl	8011498 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8011d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011d74:	2104      	movs	r1, #4
 8011d76:	4809      	ldr	r0, [pc, #36]	; (8011d9c <spi5_dma_init+0x84>)
 8011d78:	f7ff fbb2 	bl	80114e0 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	2104      	movs	r1, #4
 8011d80:	4806      	ldr	r0, [pc, #24]	; (8011d9c <spi5_dma_init+0x84>)
 8011d82:	f7ff fbd1 	bl	8011528 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8011d86:	2200      	movs	r2, #0
 8011d88:	2104      	movs	r1, #4
 8011d8a:	4804      	ldr	r0, [pc, #16]	; (8011d9c <spi5_dma_init+0x84>)
 8011d8c:	f7ff fbf0 	bl	8011570 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 8011d90:	2104      	movs	r1, #4
 8011d92:	4802      	ldr	r0, [pc, #8]	; (8011d9c <spi5_dma_init+0x84>)
 8011d94:	f7ff fc58 	bl	8011648 <LL_DMA_DisableFifoMode>
}
 8011d98:	bf00      	nop
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	40026400 	.word	0x40026400

08011da0 <spi5_config>:

static void spi5_config(void)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b08a      	sub	sp, #40	; 0x28
 8011da4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8011da6:	463b      	mov	r3, r7
 8011da8:	2228      	movs	r2, #40	; 0x28
 8011daa:	2100      	movs	r1, #0
 8011dac:	4618      	mov	r0, r3
 8011dae:	f001 f8cb 	bl	8012f48 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 8011db2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011db6:	f7ff fc67 	bl	8011688 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8011dba:	f7ff fa1f 	bl	80111fc <__NVIC_GetPriorityGrouping>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	2105      	movs	r1, #5
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff fa6f 	bl	80112a8 <NVIC_EncodePriority>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	4619      	mov	r1, r3
 8011dce:	2055      	movs	r0, #85	; 0x55
 8011dd0:	f7ff fa40 	bl	8011254 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 8011dd4:	2055      	movs	r0, #85	; 0x55
 8011dd6:	f7ff fa1f 	bl	8011218 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8011dde:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011de2:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8011de4:	2300      	movs	r3, #0
 8011de6:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8011de8:	2300      	movs	r3, #0
 8011dea:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8011dec:	2300      	movs	r3, #0
 8011dee:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8011df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011df4:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8011df6:	2318      	movs	r3, #24
 8011df8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 8011e02:	230a      	movs	r3, #10
 8011e04:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 8011e06:	463b      	mov	r3, r7
 8011e08:	4619      	mov	r1, r3
 8011e0a:	4805      	ldr	r0, [pc, #20]	; (8011e20 <spi5_config+0x80>)
 8011e0c:	f7f2 fe1f 	bl	8004a4e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 8011e10:	2100      	movs	r1, #0
 8011e12:	4803      	ldr	r0, [pc, #12]	; (8011e20 <spi5_config+0x80>)
 8011e14:	f7ff fa8b 	bl	801132e <LL_SPI_SetStandard>
}
 8011e18:	bf00      	nop
 8011e1a:	3728      	adds	r7, #40	; 0x28
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	40015000 	.word	0x40015000

08011e24 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8011e24:	b480      	push	{r7}
 8011e26:	af00      	add	r7, sp, #0

}
 8011e28:	bf00      	nop
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 8011e32:	b480      	push	{r7}
 8011e34:	af00      	add	r7, sp, #0

}
 8011e36:	bf00      	nop
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 8011e40:	b480      	push	{r7}
 8011e42:	af00      	add	r7, sp, #0

}
 8011e44:	bf00      	nop
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 8011e4e:	b480      	push	{r7}
 8011e50:	af00      	add	r7, sp, #0

}
 8011e52:	bf00      	nop
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr

08011e5c <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	af00      	add	r7, sp, #0

}
 8011e60:	bf00      	nop
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr

08011e6a <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 8011e6a:	b480      	push	{r7}
 8011e6c:	af00      	add	r7, sp, #0

}
 8011e6e:	bf00      	nop
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	af00      	add	r7, sp, #0

}
 8011e7c:	bf00      	nop
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e84:	4770      	bx	lr
	...

08011e88 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011e8e:	2300      	movs	r3, #0
 8011e90:	607b      	str	r3, [r7, #4]
 8011e92:	4b12      	ldr	r3, [pc, #72]	; (8011edc <HAL_MspInit+0x54>)
 8011e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e96:	4a11      	ldr	r2, [pc, #68]	; (8011edc <HAL_MspInit+0x54>)
 8011e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8011e9e:	4b0f      	ldr	r3, [pc, #60]	; (8011edc <HAL_MspInit+0x54>)
 8011ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ea6:	607b      	str	r3, [r7, #4]
 8011ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011eaa:	2300      	movs	r3, #0
 8011eac:	603b      	str	r3, [r7, #0]
 8011eae:	4b0b      	ldr	r3, [pc, #44]	; (8011edc <HAL_MspInit+0x54>)
 8011eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb2:	4a0a      	ldr	r2, [pc, #40]	; (8011edc <HAL_MspInit+0x54>)
 8011eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8011eba:	4b08      	ldr	r3, [pc, #32]	; (8011edc <HAL_MspInit+0x54>)
 8011ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ec2:	603b      	str	r3, [r7, #0]
 8011ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	210f      	movs	r1, #15
 8011eca:	f06f 0001 	mvn.w	r0, #1
 8011ece:	f7ef f9f1 	bl	80012b4 <HAL_NVIC_SetPriority>
}
 8011ed2:	bf00      	nop
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	40023800 	.word	0x40023800

08011ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08e      	sub	sp, #56	; 0x38
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8011eec:	2300      	movs	r3, #0
 8011eee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	60fb      	str	r3, [r7, #12]
 8011ef4:	4b33      	ldr	r3, [pc, #204]	; (8011fc4 <HAL_InitTick+0xe4>)
 8011ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ef8:	4a32      	ldr	r2, [pc, #200]	; (8011fc4 <HAL_InitTick+0xe4>)
 8011efa:	f043 0310 	orr.w	r3, r3, #16
 8011efe:	6413      	str	r3, [r2, #64]	; 0x40
 8011f00:	4b30      	ldr	r3, [pc, #192]	; (8011fc4 <HAL_InitTick+0xe4>)
 8011f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f04:	f003 0310 	and.w	r3, r3, #16
 8011f08:	60fb      	str	r3, [r7, #12]
 8011f0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011f0c:	f107 0210 	add.w	r2, r7, #16
 8011f10:	f107 0314 	add.w	r3, r7, #20
 8011f14:	4611      	mov	r1, r2
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7ef ff60 	bl	8001ddc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8011f1c:	6a3b      	ldr	r3, [r7, #32]
 8011f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8011f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d103      	bne.n	8011f2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8011f26:	f7ef ff45 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8011f2a:	6378      	str	r0, [r7, #52]	; 0x34
 8011f2c:	e004      	b.n	8011f38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8011f2e:	f7ef ff41 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8011f32:	4603      	mov	r3, r0
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8011f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f3a:	4a23      	ldr	r2, [pc, #140]	; (8011fc8 <HAL_InitTick+0xe8>)
 8011f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8011f40:	0c9b      	lsrs	r3, r3, #18
 8011f42:	3b01      	subs	r3, #1
 8011f44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8011f46:	4b21      	ldr	r3, [pc, #132]	; (8011fcc <HAL_InitTick+0xec>)
 8011f48:	4a21      	ldr	r2, [pc, #132]	; (8011fd0 <HAL_InitTick+0xf0>)
 8011f4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8011f4c:	4b1f      	ldr	r3, [pc, #124]	; (8011fcc <HAL_InitTick+0xec>)
 8011f4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011f52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8011f54:	4a1d      	ldr	r2, [pc, #116]	; (8011fcc <HAL_InitTick+0xec>)
 8011f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8011f5a:	4b1c      	ldr	r3, [pc, #112]	; (8011fcc <HAL_InitTick+0xec>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011f60:	4b1a      	ldr	r3, [pc, #104]	; (8011fcc <HAL_InitTick+0xec>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011f66:	4b19      	ldr	r3, [pc, #100]	; (8011fcc <HAL_InitTick+0xec>)
 8011f68:	2200      	movs	r2, #0
 8011f6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8011f6c:	4817      	ldr	r0, [pc, #92]	; (8011fcc <HAL_InitTick+0xec>)
 8011f6e:	f7f1 f897 	bl	80030a0 <HAL_TIM_Base_Init>
 8011f72:	4603      	mov	r3, r0
 8011f74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8011f78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d11b      	bne.n	8011fb8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8011f80:	4812      	ldr	r0, [pc, #72]	; (8011fcc <HAL_InitTick+0xec>)
 8011f82:	f7f1 f8e7 	bl	8003154 <HAL_TIM_Base_Start_IT>
 8011f86:	4603      	mov	r3, r0
 8011f88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8011f8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d111      	bne.n	8011fb8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011f94:	2036      	movs	r0, #54	; 0x36
 8011f96:	f7ef f9a9 	bl	80012ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2b0f      	cmp	r3, #15
 8011f9e:	d808      	bhi.n	8011fb2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	6879      	ldr	r1, [r7, #4]
 8011fa4:	2036      	movs	r0, #54	; 0x36
 8011fa6:	f7ef f985 	bl	80012b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011faa:	4a0a      	ldr	r2, [pc, #40]	; (8011fd4 <HAL_InitTick+0xf4>)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6013      	str	r3, [r2, #0]
 8011fb0:	e002      	b.n	8011fb8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8011fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3738      	adds	r7, #56	; 0x38
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	40023800 	.word	0x40023800
 8011fc8:	431bde83 	.word	0x431bde83
 8011fcc:	20005ab4 	.word	0x20005ab4
 8011fd0:	40001000 	.word	0x40001000
 8011fd4:	20000004 	.word	0x20000004

08011fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011fd8:	b480      	push	{r7}
 8011fda:	af00      	add	r7, sp, #0
  while (1)
 8011fdc:	e7fe      	b.n	8011fdc <NMI_Handler+0x4>

08011fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011fde:	b480      	push	{r7}
 8011fe0:	af00      	add	r7, sp, #0
  while (1)
 8011fe2:	e7fe      	b.n	8011fe2 <HardFault_Handler+0x4>

08011fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	af00      	add	r7, sp, #0
  while (1)
 8011fe8:	e7fe      	b.n	8011fe8 <MemManage_Handler+0x4>

08011fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011fea:	b480      	push	{r7}
 8011fec:	af00      	add	r7, sp, #0
  while (1)
 8011fee:	e7fe      	b.n	8011fee <BusFault_Handler+0x4>

08011ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	af00      	add	r7, sp, #0
  while (1)
 8011ff4:	e7fe      	b.n	8011ff4 <UsageFault_Handler+0x4>

08011ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011ff6:	b480      	push	{r7}
 8011ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011ffa:	bf00      	nop
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr

08012004 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8012008:	4802      	ldr	r0, [pc, #8]	; (8012014 <TIM6_DAC_IRQHandler+0x10>)
 801200a:	f7f1 f913 	bl	8003234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801200e:	bf00      	nop
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	20005ab4 	.word	0x20005ab4

08012018 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	4a04      	ldr	r2, [pc, #16]	; (8012038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012026:	4293      	cmp	r3, r2
 8012028:	d101      	bne.n	801202e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801202a:	f7ef f847 	bl	80010bc <HAL_IncTick>
  }
}
 801202e:	bf00      	nop
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	40001000 	.word	0x40001000

0801203c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801203c:	b480      	push	{r7}
 801203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012040:	4b06      	ldr	r3, [pc, #24]	; (801205c <SystemInit+0x20>)
 8012042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012046:	4a05      	ldr	r2, [pc, #20]	; (801205c <SystemInit+0x20>)
 8012048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012050:	bf00      	nop
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr
 801205a:	bf00      	nop
 801205c:	e000ed00 	.word	0xe000ed00

08012060 <__NVIC_GetPriorityGrouping>:
{
 8012060:	b480      	push	{r7}
 8012062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012064:	4b04      	ldr	r3, [pc, #16]	; (8012078 <__NVIC_GetPriorityGrouping+0x18>)
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	0a1b      	lsrs	r3, r3, #8
 801206a:	f003 0307 	and.w	r3, r3, #7
}
 801206e:	4618      	mov	r0, r3
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr
 8012078:	e000ed00 	.word	0xe000ed00

0801207c <__NVIC_EnableIRQ>:
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	4603      	mov	r3, r0
 8012084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801208a:	2b00      	cmp	r3, #0
 801208c:	db0b      	blt.n	80120a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801208e:	79fb      	ldrb	r3, [r7, #7]
 8012090:	f003 021f 	and.w	r2, r3, #31
 8012094:	4907      	ldr	r1, [pc, #28]	; (80120b4 <__NVIC_EnableIRQ+0x38>)
 8012096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801209a:	095b      	lsrs	r3, r3, #5
 801209c:	2001      	movs	r0, #1
 801209e:	fa00 f202 	lsl.w	r2, r0, r2
 80120a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80120a6:	bf00      	nop
 80120a8:	370c      	adds	r7, #12
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	e000e100 	.word	0xe000e100

080120b8 <__NVIC_SetPriority>:
{
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	4603      	mov	r3, r0
 80120c0:	6039      	str	r1, [r7, #0]
 80120c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80120c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	db0a      	blt.n	80120e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	b2da      	uxtb	r2, r3
 80120d0:	490c      	ldr	r1, [pc, #48]	; (8012104 <__NVIC_SetPriority+0x4c>)
 80120d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120d6:	0112      	lsls	r2, r2, #4
 80120d8:	b2d2      	uxtb	r2, r2
 80120da:	440b      	add	r3, r1
 80120dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80120e0:	e00a      	b.n	80120f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	b2da      	uxtb	r2, r3
 80120e6:	4908      	ldr	r1, [pc, #32]	; (8012108 <__NVIC_SetPriority+0x50>)
 80120e8:	79fb      	ldrb	r3, [r7, #7]
 80120ea:	f003 030f 	and.w	r3, r3, #15
 80120ee:	3b04      	subs	r3, #4
 80120f0:	0112      	lsls	r2, r2, #4
 80120f2:	b2d2      	uxtb	r2, r2
 80120f4:	440b      	add	r3, r1
 80120f6:	761a      	strb	r2, [r3, #24]
}
 80120f8:	bf00      	nop
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	e000e100 	.word	0xe000e100
 8012108:	e000ed00 	.word	0xe000ed00

0801210c <NVIC_EncodePriority>:
{
 801210c:	b480      	push	{r7}
 801210e:	b089      	sub	sp, #36	; 0x24
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f003 0307 	and.w	r3, r3, #7
 801211e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012120:	69fb      	ldr	r3, [r7, #28]
 8012122:	f1c3 0307 	rsb	r3, r3, #7
 8012126:	2b04      	cmp	r3, #4
 8012128:	bf28      	it	cs
 801212a:	2304      	movcs	r3, #4
 801212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	3304      	adds	r3, #4
 8012132:	2b06      	cmp	r3, #6
 8012134:	d902      	bls.n	801213c <NVIC_EncodePriority+0x30>
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	3b03      	subs	r3, #3
 801213a:	e000      	b.n	801213e <NVIC_EncodePriority+0x32>
 801213c:	2300      	movs	r3, #0
 801213e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	fa02 f303 	lsl.w	r3, r2, r3
 801214a:	43da      	mvns	r2, r3
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	401a      	ands	r2, r3
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012154:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	fa01 f303 	lsl.w	r3, r1, r3
 801215e:	43d9      	mvns	r1, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012164:	4313      	orrs	r3, r2
}
 8012166:	4618      	mov	r0, r3
 8012168:	3724      	adds	r7, #36	; 0x24
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr

08012172 <LL_TIM_DisableARRPreload>:
{
 8012172:	b480      	push	{r7}
 8012174:	b083      	sub	sp, #12
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	601a      	str	r2, [r3, #0]
}
 8012186:	bf00      	nop
 8012188:	370c      	adds	r7, #12
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <LL_TIM_SetClockSource>:
{
 8012192:	b480      	push	{r7}
 8012194:	b083      	sub	sp, #12
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	689b      	ldr	r3, [r3, #8]
 80121a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80121a4:	f023 0307 	bic.w	r3, r3, #7
 80121a8:	683a      	ldr	r2, [r7, #0]
 80121aa:	431a      	orrs	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	609a      	str	r2, [r3, #8]
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr

080121bc <tim_init>:
		LL_TIM_DisableCounter(TIM4);
		LL_TIM_DisableIT_UPDATE(TIM4);
	}
}

void tim_init(TimID id) {
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 80121c6:	79fb      	ldrb	r3, [r7, #7]
 80121c8:	2b04      	cmp	r3, #4
 80121ca:	d102      	bne.n	80121d2 <tim_init+0x16>
	case TimId4:
		tim4_init();
 80121cc:	f000 f80c 	bl	80121e8 <tim4_init>
	//	LL_TIM_EnableCounter(TIM4);
	//	LL_TIM_ClearFlag_UPDATE(TIM4);
		break;
 80121d0:	e003      	b.n	80121da <tim_init+0x1e>

	default:
		hal_cli_printf("timer init argument error");
 80121d2:	4804      	ldr	r0, [pc, #16]	; (80121e4 <tim_init+0x28>)
 80121d4:	f7fc fd3a 	bl	800ec4c <hal_cli_printf>
		break;
 80121d8:	bf00      	nop
	}
}
 80121da:	bf00      	nop
 80121dc:	3708      	adds	r7, #8
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	08013c64 	.word	0x08013c64

080121e8 <tim4_init>:

	return ret;
}

static void tim4_init(void)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80121ee:	1d3b      	adds	r3, r7, #4
 80121f0:	2200      	movs	r2, #0
 80121f2:	601a      	str	r2, [r3, #0]
 80121f4:	605a      	str	r2, [r3, #4]
 80121f6:	609a      	str	r2, [r3, #8]
 80121f8:	60da      	str	r2, [r3, #12]
 80121fa:	611a      	str	r2, [r3, #16]
#if 0
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
#endif

	NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80121fc:	f7ff ff30 	bl	8012060 <__NVIC_GetPriorityGrouping>
 8012200:	4603      	mov	r3, r0
 8012202:	2200      	movs	r2, #0
 8012204:	2105      	movs	r1, #5
 8012206:	4618      	mov	r0, r3
 8012208:	f7ff ff80 	bl	801210c <NVIC_EncodePriority>
 801220c:	4603      	mov	r3, r0
 801220e:	4619      	mov	r1, r3
 8012210:	201e      	movs	r0, #30
 8012212:	f7ff ff51 	bl	80120b8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 8012216:	201e      	movs	r0, #30
 8012218:	f7ff ff30 	bl	801207c <__NVIC_EnableIRQ>

	/* tim init */
	TIM_InitStruct.Prescaler = 180-(uint16_t)LL_TIM_IC_FILTER_FDIV1_N2;
 801221c:	23b4      	movs	r3, #180	; 0xb4
 801221e:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8012220:	2300      	movs	r3, #0
 8012222:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 2500-LL_TIM_IC_FILTER_FDIV1_N2;
 8012224:	4b09      	ldr	r3, [pc, #36]	; (801224c <tim4_init+0x64>)
 8012226:	60fb      	str	r3, [r7, #12]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8012228:	2300      	movs	r3, #0
 801222a:	613b      	str	r3, [r7, #16]
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 801222c:	1d3b      	adds	r3, r7, #4
 801222e:	4619      	mov	r1, r3
 8012230:	4807      	ldr	r0, [pc, #28]	; (8012250 <tim4_init+0x68>)
 8012232:	f7f2 fc99 	bl	8004b68 <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM4);
 8012236:	4806      	ldr	r0, [pc, #24]	; (8012250 <tim4_init+0x68>)
 8012238:	f7ff ff9b 	bl	8012172 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 801223c:	2100      	movs	r1, #0
 801223e:	4804      	ldr	r0, [pc, #16]	; (8012250 <tim4_init+0x68>)
 8012240:	f7ff ffa7 	bl	8012192 <LL_TIM_SetClockSource>
		GpioPullNo,
		GpioSpeedFreqLow,
		GpioAltFnTim4);

#endif
}
 8012244:	bf00      	nop
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	fff009c4 	.word	0xfff009c4
 8012250:	40000800 	.word	0x40000800

08012254 <hal_tim_int_call>:
	tim_interrupt[tim].context = context;
	tim_interrupt[tim].ready = true;
	taskEXIT_CRITICAL();
}

static void hal_tim_int_call(uint32_t tim) {
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
	if(tim_interrupt[tim].callback && tim_interrupt[tim].ready) {
 801225c:	4916      	ldr	r1, [pc, #88]	; (80122b8 <hal_tim_int_call+0x64>)
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	4613      	mov	r3, r2
 8012262:	005b      	lsls	r3, r3, #1
 8012264:	4413      	add	r3, r2
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	440b      	add	r3, r1
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d01e      	beq.n	80122ae <hal_tim_int_call+0x5a>
 8012270:	4911      	ldr	r1, [pc, #68]	; (80122b8 <hal_tim_int_call+0x64>)
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	4613      	mov	r3, r2
 8012276:	005b      	lsls	r3, r3, #1
 8012278:	4413      	add	r3, r2
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	440b      	add	r3, r1
 801227e:	3308      	adds	r3, #8
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	b2db      	uxtb	r3, r3
 8012284:	2b00      	cmp	r3, #0
 8012286:	d012      	beq.n	80122ae <hal_tim_int_call+0x5a>
		tim_interrupt[tim].callback(tim_interrupt[tim].context);
 8012288:	490b      	ldr	r1, [pc, #44]	; (80122b8 <hal_tim_int_call+0x64>)
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	4613      	mov	r3, r2
 801228e:	005b      	lsls	r3, r3, #1
 8012290:	4413      	add	r3, r2
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	440b      	add	r3, r1
 8012296:	6819      	ldr	r1, [r3, #0]
 8012298:	4807      	ldr	r0, [pc, #28]	; (80122b8 <hal_tim_int_call+0x64>)
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	4613      	mov	r3, r2
 801229e:	005b      	lsls	r3, r3, #1
 80122a0:	4413      	add	r3, r2
 80122a2:	009b      	lsls	r3, r3, #2
 80122a4:	4403      	add	r3, r0
 80122a6:	3304      	adds	r3, #4
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4618      	mov	r0, r3
 80122ac:	4788      	blx	r1
	}
}
 80122ae:	bf00      	nop
 80122b0:	3708      	adds	r7, #8
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	bf00      	nop
 80122b8:	20005afc 	.word	0x20005afc

080122bc <TIM4_IRQHandler>:


void TIM4_IRQHandler(void) {
 80122bc:	b580      	push	{r7, lr}
 80122be:	af00      	add	r7, sp, #0
	hal_tim_int_call(4);
 80122c0:	2004      	movs	r0, #4
 80122c2:	f7ff ffc7 	bl	8012254 <hal_tim_int_call>
}
 80122c6:	bf00      	nop
 80122c8:	bd80      	pop	{r7, pc}
	...

080122cc <__NVIC_GetPriorityGrouping>:
{
 80122cc:	b480      	push	{r7}
 80122ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80122d0:	4b04      	ldr	r3, [pc, #16]	; (80122e4 <__NVIC_GetPriorityGrouping+0x18>)
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	0a1b      	lsrs	r3, r3, #8
 80122d6:	f003 0307 	and.w	r3, r3, #7
}
 80122da:	4618      	mov	r0, r3
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr
 80122e4:	e000ed00 	.word	0xe000ed00

080122e8 <__NVIC_EnableIRQ>:
{
 80122e8:	b480      	push	{r7}
 80122ea:	b083      	sub	sp, #12
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	4603      	mov	r3, r0
 80122f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80122f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	db0b      	blt.n	8012312 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80122fa:	79fb      	ldrb	r3, [r7, #7]
 80122fc:	f003 021f 	and.w	r2, r3, #31
 8012300:	4907      	ldr	r1, [pc, #28]	; (8012320 <__NVIC_EnableIRQ+0x38>)
 8012302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012306:	095b      	lsrs	r3, r3, #5
 8012308:	2001      	movs	r0, #1
 801230a:	fa00 f202 	lsl.w	r2, r0, r2
 801230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012312:	bf00      	nop
 8012314:	370c      	adds	r7, #12
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	e000e100 	.word	0xe000e100

08012324 <__NVIC_SetPriority>:
{
 8012324:	b480      	push	{r7}
 8012326:	b083      	sub	sp, #12
 8012328:	af00      	add	r7, sp, #0
 801232a:	4603      	mov	r3, r0
 801232c:	6039      	str	r1, [r7, #0]
 801232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012334:	2b00      	cmp	r3, #0
 8012336:	db0a      	blt.n	801234e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	b2da      	uxtb	r2, r3
 801233c:	490c      	ldr	r1, [pc, #48]	; (8012370 <__NVIC_SetPriority+0x4c>)
 801233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012342:	0112      	lsls	r2, r2, #4
 8012344:	b2d2      	uxtb	r2, r2
 8012346:	440b      	add	r3, r1
 8012348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801234c:	e00a      	b.n	8012364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	b2da      	uxtb	r2, r3
 8012352:	4908      	ldr	r1, [pc, #32]	; (8012374 <__NVIC_SetPriority+0x50>)
 8012354:	79fb      	ldrb	r3, [r7, #7]
 8012356:	f003 030f 	and.w	r3, r3, #15
 801235a:	3b04      	subs	r3, #4
 801235c:	0112      	lsls	r2, r2, #4
 801235e:	b2d2      	uxtb	r2, r2
 8012360:	440b      	add	r3, r1
 8012362:	761a      	strb	r2, [r3, #24]
}
 8012364:	bf00      	nop
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	e000e100 	.word	0xe000e100
 8012374:	e000ed00 	.word	0xe000ed00

08012378 <NVIC_EncodePriority>:
{
 8012378:	b480      	push	{r7}
 801237a:	b089      	sub	sp, #36	; 0x24
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f003 0307 	and.w	r3, r3, #7
 801238a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	f1c3 0307 	rsb	r3, r3, #7
 8012392:	2b04      	cmp	r3, #4
 8012394:	bf28      	it	cs
 8012396:	2304      	movcs	r3, #4
 8012398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	3304      	adds	r3, #4
 801239e:	2b06      	cmp	r3, #6
 80123a0:	d902      	bls.n	80123a8 <NVIC_EncodePriority+0x30>
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	3b03      	subs	r3, #3
 80123a6:	e000      	b.n	80123aa <NVIC_EncodePriority+0x32>
 80123a8:	2300      	movs	r3, #0
 80123aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80123ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123b0:	69bb      	ldr	r3, [r7, #24]
 80123b2:	fa02 f303 	lsl.w	r3, r2, r3
 80123b6:	43da      	mvns	r2, r3
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	401a      	ands	r2, r3
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80123c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	fa01 f303 	lsl.w	r3, r1, r3
 80123ca:	43d9      	mvns	r1, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80123d0:	4313      	orrs	r3, r2
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3724      	adds	r7, #36	; 0x24
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr

080123de <LL_USART_Enable>:
{
 80123de:	b480      	push	{r7}
 80123e0:	b083      	sub	sp, #12
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	60da      	str	r2, [r3, #12]
}
 80123f2:	bf00      	nop
 80123f4:	370c      	adds	r7, #12
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr

080123fe <LL_USART_IsEnabled>:
{
 80123fe:	b480      	push	{r7}
 8012400:	b083      	sub	sp, #12
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801240e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012412:	bf0c      	ite	eq
 8012414:	2301      	moveq	r3, #1
 8012416:	2300      	movne	r3, #0
 8012418:	b2db      	uxtb	r3, r3
}
 801241a:	4618      	mov	r0, r3
 801241c:	370c      	adds	r7, #12
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr

08012426 <LL_USART_ConfigAsyncMode>:
{
 8012426:	b480      	push	{r7}
 8012428:	b083      	sub	sp, #12
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	695b      	ldr	r3, [r3, #20]
 801243e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	615a      	str	r2, [r3, #20]
}
 8012446:	bf00      	nop
 8012448:	370c      	adds	r7, #12
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr

08012452 <LL_USART_IsActiveFlag_IDLE>:
{
 8012452:	b480      	push	{r7}
 8012454:	b083      	sub	sp, #12
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	f003 0310 	and.w	r3, r3, #16
 8012462:	2b10      	cmp	r3, #16
 8012464:	bf0c      	ite	eq
 8012466:	2301      	moveq	r3, #1
 8012468:	2300      	movne	r3, #0
 801246a:	b2db      	uxtb	r3, r3
}
 801246c:	4618      	mov	r0, r3
 801246e:	370c      	adds	r7, #12
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr

08012478 <LL_USART_IsActiveFlag_TXE>:
{
 8012478:	b480      	push	{r7}
 801247a:	b083      	sub	sp, #12
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012488:	2b80      	cmp	r3, #128	; 0x80
 801248a:	bf0c      	ite	eq
 801248c:	2301      	moveq	r3, #1
 801248e:	2300      	movne	r3, #0
 8012490:	b2db      	uxtb	r3, r3
}
 8012492:	4618      	mov	r0, r3
 8012494:	370c      	adds	r7, #12
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr

0801249e <LL_USART_ClearFlag_IDLE>:
{
 801249e:	b480      	push	{r7}
 80124a0:	b085      	sub	sp, #20
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80124ac:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80124b4:	68fb      	ldr	r3, [r7, #12]
}
 80124b6:	bf00      	nop
 80124b8:	3714      	adds	r7, #20
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80124c2:	b480      	push	{r7}
 80124c4:	b083      	sub	sp, #12
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80124ce:	78fa      	ldrb	r2, [r7, #3]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	605a      	str	r2, [r3, #4]
}
 80124d4:	bf00      	nop
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <LL_DMA_SetDataTransferDirection>:
{
 80124e0:	b480      	push	{r7}
 80124e2:	b085      	sub	sp, #20
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80124ec:	4a0d      	ldr	r2, [pc, #52]	; (8012524 <LL_DMA_SetDataTransferDirection+0x44>)
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	4413      	add	r3, r2
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	461a      	mov	r2, r3
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	4413      	add	r3, r2
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012500:	4908      	ldr	r1, [pc, #32]	; (8012524 <LL_DMA_SetDataTransferDirection+0x44>)
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	440b      	add	r3, r1
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	4619      	mov	r1, r3
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	440b      	add	r3, r1
 801250e:	4619      	mov	r1, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	4313      	orrs	r3, r2
 8012514:	600b      	str	r3, [r1, #0]
}
 8012516:	bf00      	nop
 8012518:	3714      	adds	r7, #20
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	08014384 	.word	0x08014384

08012528 <LL_DMA_SetMode>:
{
 8012528:	b480      	push	{r7}
 801252a:	b085      	sub	sp, #20
 801252c:	af00      	add	r7, sp, #0
 801252e:	60f8      	str	r0, [r7, #12]
 8012530:	60b9      	str	r1, [r7, #8]
 8012532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8012534:	4a0d      	ldr	r2, [pc, #52]	; (801256c <LL_DMA_SetMode+0x44>)
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	4413      	add	r3, r2
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	461a      	mov	r2, r3
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	4413      	add	r3, r2
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8012548:	4908      	ldr	r1, [pc, #32]	; (801256c <LL_DMA_SetMode+0x44>)
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	440b      	add	r3, r1
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	4619      	mov	r1, r3
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	440b      	add	r3, r1
 8012556:	4619      	mov	r1, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4313      	orrs	r3, r2
 801255c:	600b      	str	r3, [r1, #0]
}
 801255e:	bf00      	nop
 8012560:	3714      	adds	r7, #20
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop
 801256c:	08014384 	.word	0x08014384

08012570 <LL_DMA_SetPeriphIncMode>:
{
 8012570:	b480      	push	{r7}
 8012572:	b085      	sub	sp, #20
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 801257c:	4a0d      	ldr	r2, [pc, #52]	; (80125b4 <LL_DMA_SetPeriphIncMode+0x44>)
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	4413      	add	r3, r2
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	461a      	mov	r2, r3
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	4413      	add	r3, r2
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012590:	4908      	ldr	r1, [pc, #32]	; (80125b4 <LL_DMA_SetPeriphIncMode+0x44>)
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	440b      	add	r3, r1
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	4619      	mov	r1, r3
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	440b      	add	r3, r1
 801259e:	4619      	mov	r1, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4313      	orrs	r3, r2
 80125a4:	600b      	str	r3, [r1, #0]
}
 80125a6:	bf00      	nop
 80125a8:	3714      	adds	r7, #20
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	08014384 	.word	0x08014384

080125b8 <LL_DMA_SetMemoryIncMode>:
{
 80125b8:	b480      	push	{r7}
 80125ba:	b085      	sub	sp, #20
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80125c4:	4a0d      	ldr	r2, [pc, #52]	; (80125fc <LL_DMA_SetMemoryIncMode+0x44>)
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	4413      	add	r3, r2
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	461a      	mov	r2, r3
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	4413      	add	r3, r2
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80125d8:	4908      	ldr	r1, [pc, #32]	; (80125fc <LL_DMA_SetMemoryIncMode+0x44>)
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	440b      	add	r3, r1
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	4619      	mov	r1, r3
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	440b      	add	r3, r1
 80125e6:	4619      	mov	r1, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4313      	orrs	r3, r2
 80125ec:	600b      	str	r3, [r1, #0]
}
 80125ee:	bf00      	nop
 80125f0:	3714      	adds	r7, #20
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr
 80125fa:	bf00      	nop
 80125fc:	08014384 	.word	0x08014384

08012600 <LL_DMA_SetPeriphSize>:
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 801260c:	4a0d      	ldr	r2, [pc, #52]	; (8012644 <LL_DMA_SetPeriphSize+0x44>)
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	4413      	add	r3, r2
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	461a      	mov	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	4413      	add	r3, r2
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012620:	4908      	ldr	r1, [pc, #32]	; (8012644 <LL_DMA_SetPeriphSize+0x44>)
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	440b      	add	r3, r1
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	4619      	mov	r1, r3
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	440b      	add	r3, r1
 801262e:	4619      	mov	r1, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	4313      	orrs	r3, r2
 8012634:	600b      	str	r3, [r1, #0]
}
 8012636:	bf00      	nop
 8012638:	3714      	adds	r7, #20
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	08014384 	.word	0x08014384

08012648 <LL_DMA_SetMemorySize>:
{
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8012654:	4a0d      	ldr	r2, [pc, #52]	; (801268c <LL_DMA_SetMemorySize+0x44>)
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	4413      	add	r3, r2
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	461a      	mov	r2, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	4413      	add	r3, r2
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8012668:	4908      	ldr	r1, [pc, #32]	; (801268c <LL_DMA_SetMemorySize+0x44>)
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	440b      	add	r3, r1
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	4619      	mov	r1, r3
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	440b      	add	r3, r1
 8012676:	4619      	mov	r1, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4313      	orrs	r3, r2
 801267c:	600b      	str	r3, [r1, #0]
}
 801267e:	bf00      	nop
 8012680:	3714      	adds	r7, #20
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	08014384 	.word	0x08014384

08012690 <LL_DMA_SetStreamPriorityLevel>:
{
 8012690:	b480      	push	{r7}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 801269c:	4a0d      	ldr	r2, [pc, #52]	; (80126d4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	4413      	add	r3, r2
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	461a      	mov	r2, r3
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	4413      	add	r3, r2
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80126b0:	4908      	ldr	r1, [pc, #32]	; (80126d4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	440b      	add	r3, r1
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	4619      	mov	r1, r3
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	440b      	add	r3, r1
 80126be:	4619      	mov	r1, r3
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4313      	orrs	r3, r2
 80126c4:	600b      	str	r3, [r1, #0]
}
 80126c6:	bf00      	nop
 80126c8:	3714      	adds	r7, #20
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	08014384 	.word	0x08014384

080126d8 <LL_DMA_GetDataLength>:
{
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 80126e2:	4a07      	ldr	r2, [pc, #28]	; (8012700 <LL_DMA_GetDataLength+0x28>)
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	4413      	add	r3, r2
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4413      	add	r3, r2
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	b29b      	uxth	r3, r3
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	370c      	adds	r7, #12
 80126f8:	46bd      	mov	sp, r7
 80126fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fe:	4770      	bx	lr
 8012700:	08014384 	.word	0x08014384

08012704 <LL_DMA_SetChannelSelection>:
{
 8012704:	b480      	push	{r7}
 8012706:	b085      	sub	sp, #20
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8012710:	4a0d      	ldr	r2, [pc, #52]	; (8012748 <LL_DMA_SetChannelSelection+0x44>)
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	4413      	add	r3, r2
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	461a      	mov	r2, r3
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	4413      	add	r3, r2
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8012724:	4908      	ldr	r1, [pc, #32]	; (8012748 <LL_DMA_SetChannelSelection+0x44>)
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	440b      	add	r3, r1
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	4619      	mov	r1, r3
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	440b      	add	r3, r1
 8012732:	4619      	mov	r1, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	4313      	orrs	r3, r2
 8012738:	600b      	str	r3, [r1, #0]
}
 801273a:	bf00      	nop
 801273c:	3714      	adds	r7, #20
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	08014384 	.word	0x08014384

0801274c <LL_DMA_DisableFifoMode>:
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8012756:	4a0c      	ldr	r2, [pc, #48]	; (8012788 <LL_DMA_DisableFifoMode+0x3c>)
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	4413      	add	r3, r2
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	461a      	mov	r2, r3
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	4413      	add	r3, r2
 8012764:	695b      	ldr	r3, [r3, #20]
 8012766:	4908      	ldr	r1, [pc, #32]	; (8012788 <LL_DMA_DisableFifoMode+0x3c>)
 8012768:	683a      	ldr	r2, [r7, #0]
 801276a:	440a      	add	r2, r1
 801276c:	7812      	ldrb	r2, [r2, #0]
 801276e:	4611      	mov	r1, r2
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	440a      	add	r2, r1
 8012774:	f023 0304 	bic.w	r3, r3, #4
 8012778:	6153      	str	r3, [r2, #20]
}
 801277a:	bf00      	nop
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	08014384 	.word	0x08014384

0801278c <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 801278c:	b580      	push	{r7, lr}
 801278e:	b08c      	sub	sp, #48	; 0x30
 8012790:	af02      	add	r7, sp, #8
 8012792:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 8012794:	2307      	movs	r3, #7
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	2303      	movs	r3, #3
 801279a:	2200      	movs	r2, #0
 801279c:	2103      	movs	r1, #3
 801279e:	4853      	ldr	r0, [pc, #332]	; (80128ec <hal_uart1_init+0x160>)
 80127a0:	f7fc ffc4 	bl	800f72c <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 80127a4:	2307      	movs	r3, #7
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	2303      	movs	r3, #3
 80127aa:	2200      	movs	r2, #0
 80127ac:	2103      	movs	r1, #3
 80127ae:	4850      	ldr	r0, [pc, #320]	; (80128f0 <hal_uart1_init+0x164>)
 80127b0:	f7fc ffbc 	bl	800f72c <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80127b4:	2200      	movs	r2, #0
 80127b6:	2105      	movs	r1, #5
 80127b8:	203a      	movs	r0, #58	; 0x3a
 80127ba:	f7ee fd7b 	bl	80012b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80127be:	203a      	movs	r0, #58	; 0x3a
 80127c0:	f7ee fd94 	bl	80012ec <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80127c4:	2200      	movs	r2, #0
 80127c6:	2105      	movs	r1, #5
 80127c8:	2046      	movs	r0, #70	; 0x46
 80127ca:	f7ee fd73 	bl	80012b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80127ce:	2046      	movs	r0, #70	; 0x46
 80127d0:	f7ee fd8c 	bl	80012ec <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 80127d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80127d8:	2102      	movs	r1, #2
 80127da:	4846      	ldr	r0, [pc, #280]	; (80128f4 <hal_uart1_init+0x168>)
 80127dc:	f7ff ff92 	bl	8012704 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80127e0:	2200      	movs	r2, #0
 80127e2:	2102      	movs	r1, #2
 80127e4:	4843      	ldr	r0, [pc, #268]	; (80128f4 <hal_uart1_init+0x168>)
 80127e6:	f7ff fe7b 	bl	80124e0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 80127ea:	2200      	movs	r2, #0
 80127ec:	2102      	movs	r1, #2
 80127ee:	4841      	ldr	r0, [pc, #260]	; (80128f4 <hal_uart1_init+0x168>)
 80127f0:	f7ff ff4e 	bl	8012690 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 80127f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80127f8:	2102      	movs	r1, #2
 80127fa:	483e      	ldr	r0, [pc, #248]	; (80128f4 <hal_uart1_init+0x168>)
 80127fc:	f7ff fe94 	bl	8012528 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8012800:	2200      	movs	r2, #0
 8012802:	2102      	movs	r1, #2
 8012804:	483b      	ldr	r0, [pc, #236]	; (80128f4 <hal_uart1_init+0x168>)
 8012806:	f7ff feb3 	bl	8012570 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 801280a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801280e:	2102      	movs	r1, #2
 8012810:	4838      	ldr	r0, [pc, #224]	; (80128f4 <hal_uart1_init+0x168>)
 8012812:	f7ff fed1 	bl	80125b8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012816:	2200      	movs	r2, #0
 8012818:	2102      	movs	r1, #2
 801281a:	4836      	ldr	r0, [pc, #216]	; (80128f4 <hal_uart1_init+0x168>)
 801281c:	f7ff fef0 	bl	8012600 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8012820:	2200      	movs	r2, #0
 8012822:	2102      	movs	r1, #2
 8012824:	4833      	ldr	r0, [pc, #204]	; (80128f4 <hal_uart1_init+0x168>)
 8012826:	f7ff ff0f 	bl	8012648 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 801282a:	2102      	movs	r1, #2
 801282c:	4831      	ldr	r0, [pc, #196]	; (80128f4 <hal_uart1_init+0x168>)
 801282e:	f7ff ff8d 	bl	801274c <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 8012832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012836:	2107      	movs	r1, #7
 8012838:	482e      	ldr	r0, [pc, #184]	; (80128f4 <hal_uart1_init+0x168>)
 801283a:	f7ff ff63 	bl	8012704 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 801283e:	2240      	movs	r2, #64	; 0x40
 8012840:	2107      	movs	r1, #7
 8012842:	482c      	ldr	r0, [pc, #176]	; (80128f4 <hal_uart1_init+0x168>)
 8012844:	f7ff fe4c 	bl	80124e0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 8012848:	2200      	movs	r2, #0
 801284a:	2107      	movs	r1, #7
 801284c:	4829      	ldr	r0, [pc, #164]	; (80128f4 <hal_uart1_init+0x168>)
 801284e:	f7ff ff1f 	bl	8012690 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 8012852:	2200      	movs	r2, #0
 8012854:	2107      	movs	r1, #7
 8012856:	4827      	ldr	r0, [pc, #156]	; (80128f4 <hal_uart1_init+0x168>)
 8012858:	f7ff fe66 	bl	8012528 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 801285c:	2200      	movs	r2, #0
 801285e:	2107      	movs	r1, #7
 8012860:	4824      	ldr	r0, [pc, #144]	; (80128f4 <hal_uart1_init+0x168>)
 8012862:	f7ff fe85 	bl	8012570 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8012866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801286a:	2107      	movs	r1, #7
 801286c:	4821      	ldr	r0, [pc, #132]	; (80128f4 <hal_uart1_init+0x168>)
 801286e:	f7ff fea3 	bl	80125b8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 8012872:	2200      	movs	r2, #0
 8012874:	2107      	movs	r1, #7
 8012876:	481f      	ldr	r0, [pc, #124]	; (80128f4 <hal_uart1_init+0x168>)
 8012878:	f7ff fec2 	bl	8012600 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 801287c:	2200      	movs	r2, #0
 801287e:	2107      	movs	r1, #7
 8012880:	481c      	ldr	r0, [pc, #112]	; (80128f4 <hal_uart1_init+0x168>)
 8012882:	f7ff fee1 	bl	8012648 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 8012886:	2107      	movs	r1, #7
 8012888:	481a      	ldr	r0, [pc, #104]	; (80128f4 <hal_uart1_init+0x168>)
 801288a:	f7ff ff5f 	bl	801274c <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8012892:	2300      	movs	r3, #0
 8012894:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8012896:	2300      	movs	r3, #0
 8012898:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 801289a:	2300      	movs	r3, #0
 801289c:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 801289e:	230c      	movs	r3, #12
 80128a0:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80128a2:	2300      	movs	r3, #0
 80128a4:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80128a6:	2300      	movs	r3, #0
 80128a8:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 80128aa:	f107 030c 	add.w	r3, r7, #12
 80128ae:	4619      	mov	r1, r3
 80128b0:	4811      	ldr	r0, [pc, #68]	; (80128f8 <hal_uart1_init+0x16c>)
 80128b2:	f7f2 fc59 	bl	8005168 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 80128b6:	4810      	ldr	r0, [pc, #64]	; (80128f8 <hal_uart1_init+0x16c>)
 80128b8:	f7ff fdb5 	bl	8012426 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 80128bc:	480e      	ldr	r0, [pc, #56]	; (80128f8 <hal_uart1_init+0x16c>)
 80128be:	f7ff fd8e 	bl	80123de <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80128c2:	f7ff fd03 	bl	80122cc <__NVIC_GetPriorityGrouping>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2200      	movs	r2, #0
 80128ca:	2105      	movs	r1, #5
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7ff fd53 	bl	8012378 <NVIC_EncodePriority>
 80128d2:	4603      	mov	r3, r0
 80128d4:	4619      	mov	r1, r3
 80128d6:	2025      	movs	r0, #37	; 0x25
 80128d8:	f7ff fd24 	bl	8012324 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80128dc:	2025      	movs	r0, #37	; 0x25
 80128de:	f7ff fd03 	bl	80122e8 <__NVIC_EnableIRQ>
}
 80128e2:	bf00      	nop
 80128e4:	3728      	adds	r7, #40	; 0x28
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	080142d4 	.word	0x080142d4
 80128f0:	080142dc 	.word	0x080142dc
 80128f4:	40026400 	.word	0x40026400
 80128f8:	40011000 	.word	0x40011000

080128fc <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	4603      	mov	r3, r0
 8012904:	6039      	str	r1, [r7, #0]
 8012906:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 8012908:	79fb      	ldrb	r3, [r7, #7]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d102      	bne.n	8012914 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 801290e:	6838      	ldr	r0, [r7, #0]
 8012910:	f7ff ff3c 	bl	801278c <hal_uart1_init>
}
 8012914:	bf00      	nop
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
 8012922:	4603      	mov	r3, r0
 8012924:	60b9      	str	r1, [r7, #8]
 8012926:	607a      	str	r2, [r7, #4]
 8012928:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 801292a:	7bfb      	ldrb	r3, [r7, #15]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d11e      	bne.n	801296e <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 8012930:	4810      	ldr	r0, [pc, #64]	; (8012974 <hal_uart_transfer+0x58>)
 8012932:	f7ff fd64 	bl	80123fe <LL_USART_IsEnabled>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d017      	beq.n	801296c <hal_uart_transfer+0x50>

        while(size > 0) {
 801293c:	e012      	b.n	8012964 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 801293e:	bf00      	nop
 8012940:	480c      	ldr	r0, [pc, #48]	; (8012974 <hal_uart_transfer+0x58>)
 8012942:	f7ff fd99 	bl	8012478 <LL_USART_IsActiveFlag_TXE>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d0f9      	beq.n	8012940 <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	4619      	mov	r1, r3
 8012952:	4808      	ldr	r0, [pc, #32]	; (8012974 <hal_uart_transfer+0x58>)
 8012954:	f7ff fdb5 	bl	80124c2 <LL_USART_TransmitData8>
            buf++;
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	3301      	adds	r3, #1
 801295c:	60bb      	str	r3, [r7, #8]
            size--;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	3b01      	subs	r3, #1
 8012962:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1e9      	bne.n	801293e <hal_uart_transfer+0x22>
 801296a:	e000      	b.n	801296e <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 801296c:	bf00      	nop
        }
    }
}
 801296e:	3710      	adds	r7, #16
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	40011000 	.word	0x40011000

08012978 <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 8012978:	b590      	push	{r4, r7, lr}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 801297e:	2300      	movs	r3, #0
 8012980:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8012982:	4813      	ldr	r0, [pc, #76]	; (80129d0 <USART1_IRQHandler+0x58>)
 8012984:	f7ff fd65 	bl	8012452 <LL_USART_IsActiveFlag_IDLE>
 8012988:	4603      	mov	r3, r0
 801298a:	2b00      	cmp	r3, #0
 801298c:	d01c      	beq.n	80129c8 <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 801298e:	4810      	ldr	r0, [pc, #64]	; (80129d0 <USART1_IRQHandler+0x58>)
 8012990:	f7ff fd85 	bl	801249e <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 8012994:	4b0f      	ldr	r3, [pc, #60]	; (80129d4 <USART1_IRQHandler+0x5c>)
 8012996:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 801299a:	2102      	movs	r1, #2
 801299c:	480e      	ldr	r0, [pc, #56]	; (80129d8 <USART1_IRQHandler+0x60>)
 801299e:	f7ff fe9b 	bl	80126d8 <LL_DMA_GetDataLength>
 80129a2:	4603      	mov	r3, r0
 80129a4:	4423      	add	r3, r4
 80129a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	bfb8      	it	lt
 80129ae:	425b      	neglt	r3, r3
 80129b0:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 80129b2:	4b08      	ldr	r3, [pc, #32]	; (80129d4 <USART1_IRQHandler+0x5c>)
 80129b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	4413      	add	r3, r2
 80129bc:	2bff      	cmp	r3, #255	; 0xff
 80129be:	d903      	bls.n	80129c8 <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 80129c0:	4b04      	ldr	r3, [pc, #16]	; (80129d4 <USART1_IRQHandler+0x5c>)
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 80129c8:	bf00      	nop
 80129ca:	370c      	adds	r7, #12
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd90      	pop	{r4, r7, pc}
 80129d0:	40011000 	.word	0x40011000
 80129d4:	200049f8 	.word	0x200049f8
 80129d8:	40026400 	.word	0x40026400

080129dc <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80129dc:	b480      	push	{r7}
 80129de:	af00      	add	r7, sp, #0

}
 80129e0:	bf00      	nop
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr

080129ea <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80129ea:	b480      	push	{r7}
 80129ec:	af00      	add	r7, sp, #0

}
 80129ee:	bf00      	nop
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <refresh_rtc_timercb>:

static u8g2_t u8g2;
static ds3231_time_t ds3231_time;
static TimerHandle_t rtc_timer;

static void refresh_rtc_timercb (TimerHandle_t xTimer) {
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
	ds3231_get_time(&ds3231_time);
 8012a00:	4803      	ldr	r0, [pc, #12]	; (8012a10 <refresh_rtc_timercb+0x18>)
 8012a02:	f7ed fe27 	bl	8000654 <ds3231_get_time>
}
 8012a06:	bf00      	nop
 8012a08:	3708      	adds	r7, #8
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	20005c44 	.word	0x20005c44

08012a14 <displayThread>:

void displayThread(void* param) {
 8012a14:	b590      	push	{r4, r7, lr}
 8012a16:	b085      	sub	sp, #20
 8012a18:	af02      	add	r7, sp, #8
 8012a1a:	6078      	str	r0, [r7, #4]
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8012a1c:	4b25      	ldr	r3, [pc, #148]	; (8012ab4 <displayThread+0xa0>)
 8012a1e:	4a26      	ldr	r2, [pc, #152]	; (8012ab8 <displayThread+0xa4>)
 8012a20:	4926      	ldr	r1, [pc, #152]	; (8012abc <displayThread+0xa8>)
 8012a22:	4827      	ldr	r0, [pc, #156]	; (8012ac0 <displayThread+0xac>)
 8012a24:	f7fa ffb2 	bl	800d98c <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2);
 8012a28:	4825      	ldr	r0, [pc, #148]	; (8012ac0 <displayThread+0xac>)
 8012a2a:	f7fb fdeb 	bl	800e604 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8012a2e:	2100      	movs	r1, #0
 8012a30:	4823      	ldr	r0, [pc, #140]	; (8012ac0 <displayThread+0xac>)
 8012a32:	f7fb fdf6 	bl	800e622 <u8x8_SetPowerSave>

	ds3231_register_driver(&i2c1drv);
 8012a36:	4823      	ldr	r0, [pc, #140]	; (8012ac4 <displayThread+0xb0>)
 8012a38:	f7ed fdfc 	bl	8000634 <ds3231_register_driver>

	rtc_timer = xTimerCreate("rtc",
 8012a3c:	4b22      	ldr	r3, [pc, #136]	; (8012ac8 <displayThread+0xb4>)
 8012a3e:	9300      	str	r3, [sp, #0]
 8012a40:	2300      	movs	r3, #0
 8012a42:	2201      	movs	r2, #1
 8012a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012a48:	4820      	ldr	r0, [pc, #128]	; (8012acc <displayThread+0xb8>)
 8012a4a:	f7f8 fd07 	bl	800b45c <xTimerCreate>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	4a1f      	ldr	r2, [pc, #124]	; (8012ad0 <displayThread+0xbc>)
 8012a52:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(RTC_TIMER_PERIOD),
							pdTRUE,
							(void*)0,
							refresh_rtc_timercb);

	if(rtc_timer == NULL) {
 8012a54:	4b1e      	ldr	r3, [pc, #120]	; (8012ad0 <displayThread+0xbc>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d103      	bne.n	8012a64 <displayThread+0x50>
		hal_cli_printf("rtc timer create failed");
 8012a5c:	481d      	ldr	r0, [pc, #116]	; (8012ad4 <displayThread+0xc0>)
 8012a5e:	f7fc f8f5 	bl	800ec4c <hal_cli_printf>
		return;
 8012a62:	e024      	b.n	8012aae <displayThread+0x9a>
	} else {
		if(xTimerStart(rtc_timer, 0) != pdPASS) {
 8012a64:	4b1a      	ldr	r3, [pc, #104]	; (8012ad0 <displayThread+0xbc>)
 8012a66:	681c      	ldr	r4, [r3, #0]
 8012a68:	f7f7 feee 	bl	800a848 <xTaskGetTickCount>
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	2300      	movs	r3, #0
 8012a70:	9300      	str	r3, [sp, #0]
 8012a72:	2300      	movs	r3, #0
 8012a74:	2101      	movs	r1, #1
 8012a76:	4620      	mov	r0, r4
 8012a78:	f7f8 fd4c 	bl	800b514 <xTimerGenericCommand>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d003      	beq.n	8012a8a <displayThread+0x76>
			hal_cli_printf("rtc timer start failed");
 8012a82:	4815      	ldr	r0, [pc, #84]	; (8012ad8 <displayThread+0xc4>)
 8012a84:	f7fc f8e2 	bl	800ec4c <hal_cli_printf>
			return;
 8012a88:	e011      	b.n	8012aae <displayThread+0x9a>
		}
	}


	while(1) {
	    u8g2_FirstPage(&u8g2);
 8012a8a:	480d      	ldr	r0, [pc, #52]	; (8012ac0 <displayThread+0xac>)
 8012a8c:	f7fa ff5a 	bl	800d944 <u8g2_FirstPage>
	    icon_draw_play(&u8g2, 0, 0);
 8012a90:	2200      	movs	r2, #0
 8012a92:	2100      	movs	r1, #0
 8012a94:	480a      	ldr	r0, [pc, #40]	; (8012ac0 <displayThread+0xac>)
 8012a96:	f7ed fe79 	bl	800078c <icon_draw_play>
	    icon_draw_pause(&u8g2, 120, 0);
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	2178      	movs	r1, #120	; 0x78
 8012a9e:	4808      	ldr	r0, [pc, #32]	; (8012ac0 <displayThread+0xac>)
 8012aa0:	f7ed fe98 	bl	80007d4 <icon_draw_pause>

#if 0
	    u8g2_SetFont(&u8g2, u8g2_font_6x13B_tf);
	    u8g2_DrawStr(&u8g2, 1, 14, "hello world!");
#endif
		vTaskDelay(1000);
 8012aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012aa8:	f7f7 fd6c 	bl	800a584 <vTaskDelay>
	    u8g2_FirstPage(&u8g2);
 8012aac:	e7ed      	b.n	8012a8a <displayThread+0x76>
	}
}
 8012aae:	370c      	adds	r7, #12
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd90      	pop	{r4, r7, pc}
 8012ab4:	08000859 	.word	0x08000859
 8012ab8:	08000979 	.word	0x08000979
 8012abc:	08014208 	.word	0x08014208
 8012ac0:	20005bbc 	.word	0x20005bbc
 8012ac4:	20005984 	.word	0x20005984
 8012ac8:	080129f9 	.word	0x080129f9
 8012acc:	08013cc0 	.word	0x08013cc0
 8012ad0:	20005c4c 	.word	0x20005c4c
 8012ad4:	08013cc4 	.word	0x08013cc4
 8012ad8:	08013cdc 	.word	0x08013cdc

08012adc <volume_control_timercb>:

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
#endif

static void volume_control_timercb(TimerHandle_t xTimer) {
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
	uint32_t potentiometer = 0;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	60bb      	str	r3, [r7, #8]
	uint8_t volume = 0xFF;
 8012ae8:	23ff      	movs	r3, #255	; 0xff
 8012aea:	73fb      	strb	r3, [r7, #15]

	hal_adc_getdata(1, &potentiometer);
 8012aec:	f107 0308 	add.w	r3, r7, #8
 8012af0:	4619      	mov	r1, r3
 8012af2:	2001      	movs	r0, #1
 8012af4:	f7fb ff1e 	bl	800e934 <hal_adc_getdata>
	potentiometer >>= 9; // 12bit adc resolution. only refer to msb 3bit to change the volume
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	0a5b      	lsrs	r3, r3, #9
 8012afc:	60bb      	str	r3, [r7, #8]

	if(prev_volume != potentiometer) {
 8012afe:	4b11      	ldr	r3, [pc, #68]	; (8012b44 <volume_control_timercb+0x68>)
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	461a      	mov	r2, r3
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d00c      	beq.n	8012b24 <volume_control_timercb+0x48>
		volume = convert_volume_level(potentiometer);
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f000 f81c 	bl	8012b4c <convert_volume_level>
 8012b14:	4603      	mov	r3, r0
 8012b16:	73fb      	strb	r3, [r7, #15]
		VS1053_SetVolume(volume, volume);
 8012b18:	7bfa      	ldrb	r2, [r7, #15]
 8012b1a:	7bfb      	ldrb	r3, [r7, #15]
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7ee f8a6 	bl	8000c70 <VS1053_SetVolume>
	}

	prev_volume = potentiometer;
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	b2da      	uxtb	r2, r3
 8012b28:	4b06      	ldr	r3, [pc, #24]	; (8012b44 <volume_control_timercb+0x68>)
 8012b2a:	701a      	strb	r2, [r3, #0]

	hal_cli_printf("%d", VS1053_GetDecodeTime());
 8012b2c:	f7ee f937 	bl	8000d9e <VS1053_GetDecodeTime>
 8012b30:	4603      	mov	r3, r0
 8012b32:	4619      	mov	r1, r3
 8012b34:	4804      	ldr	r0, [pc, #16]	; (8012b48 <volume_control_timercb+0x6c>)
 8012b36:	f7fc f889 	bl	800ec4c <hal_cli_printf>

}
 8012b3a:	bf00      	nop
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	20005c54 	.word	0x20005c54
 8012b48:	08013cf4 	.word	0x08013cf4

08012b4c <convert_volume_level>:

static uint8_t convert_volume_level(VolumeLevel vol) {
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b084      	sub	sp, #16
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	4603      	mov	r3, r0
 8012b54:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch(vol) {
 8012b56:	79fb      	ldrb	r3, [r7, #7]
 8012b58:	2b07      	cmp	r3, #7
 8012b5a:	d82b      	bhi.n	8012bb4 <convert_volume_level+0x68>
 8012b5c:	a201      	add	r2, pc, #4	; (adr r2, 8012b64 <convert_volume_level+0x18>)
 8012b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b62:	bf00      	nop
 8012b64:	08012baf 	.word	0x08012baf
 8012b68:	08012b85 	.word	0x08012b85
 8012b6c:	08012b8b 	.word	0x08012b8b
 8012b70:	08012b91 	.word	0x08012b91
 8012b74:	08012b97 	.word	0x08012b97
 8012b78:	08012b9d 	.word	0x08012b9d
 8012b7c:	08012ba3 	.word	0x08012ba3
 8012b80:	08012ba9 	.word	0x08012ba9
	case VOLUME_LEVEL_1:
		value = 0x0C;
 8012b84:	230c      	movs	r3, #12
 8012b86:	73fb      	strb	r3, [r7, #15]
		break;
 8012b88:	e01a      	b.n	8012bc0 <convert_volume_level+0x74>
	case VOLUME_LEVEL_2:
		value = 0x0A;
 8012b8a:	230a      	movs	r3, #10
 8012b8c:	73fb      	strb	r3, [r7, #15]
		break;
 8012b8e:	e017      	b.n	8012bc0 <convert_volume_level+0x74>
	case VOLUME_LEVEL_3:
		value = 0x08;
 8012b90:	2308      	movs	r3, #8
 8012b92:	73fb      	strb	r3, [r7, #15]
		break;
 8012b94:	e014      	b.n	8012bc0 <convert_volume_level+0x74>
	case VOLUME_LEVEL_4:
		value = 0x06;
 8012b96:	2306      	movs	r3, #6
 8012b98:	73fb      	strb	r3, [r7, #15]
		break;
 8012b9a:	e011      	b.n	8012bc0 <convert_volume_level+0x74>
	case VOLUME_LEVEL_5:
		value = 0x04;
 8012b9c:	2304      	movs	r3, #4
 8012b9e:	73fb      	strb	r3, [r7, #15]
		break;
 8012ba0:	e00e      	b.n	8012bc0 <convert_volume_level+0x74>
	case VOLUME_LEVEL_6:
		value = 0x02;
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	73fb      	strb	r3, [r7, #15]
		break;
 8012ba6:	e00b      	b.n	8012bc0 <convert_volume_level+0x74>
	case VOLUME_LEVEL_7:
		value = 0x00;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	73fb      	strb	r3, [r7, #15]
		break;
 8012bac:	e008      	b.n	8012bc0 <convert_volume_level+0x74>
	case VOLUME_OFF:
		value = 0xFF;
 8012bae:	23ff      	movs	r3, #255	; 0xff
 8012bb0:	73fb      	strb	r3, [r7, #15]
		break;
 8012bb2:	e005      	b.n	8012bc0 <convert_volume_level+0x74>
	default:
		value = 0xFF;
 8012bb4:	23ff      	movs	r3, #255	; 0xff
 8012bb6:	73fb      	strb	r3, [r7, #15]
		hal_cli_printf("volume level argument error");
 8012bb8:	4804      	ldr	r0, [pc, #16]	; (8012bcc <convert_volume_level+0x80>)
 8012bba:	f7fc f847 	bl	800ec4c <hal_cli_printf>
		break;
 8012bbe:	bf00      	nop
	}

	return value;
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	08013cf8 	.word	0x08013cf8

08012bd0 <mp3Thread>:



void mp3Thread(void* param) {
 8012bd0:	b590      	push	{r4, r7, lr}
 8012bd2:	b085      	sub	sp, #20
 8012bd4:	af02      	add	r7, sp, #8
 8012bd6:	6078      	str	r0, [r7, #4]
	MP3_Init();
 8012bd8:	f000 f83c 	bl	8012c54 <MP3_Init>
	MP3_Play("/mp3/Mercy.mp3");
 8012bdc:	4817      	ldr	r0, [pc, #92]	; (8012c3c <mp3Thread+0x6c>)
 8012bde:	f000 f857 	bl	8012c90 <MP3_Play>

	vs1053_volume_timer = xTimerCreate(
 8012be2:	4b17      	ldr	r3, [pc, #92]	; (8012c40 <mp3Thread+0x70>)
 8012be4:	9300      	str	r3, [sp, #0]
 8012be6:	2300      	movs	r3, #0
 8012be8:	2201      	movs	r2, #1
 8012bea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012bee:	4815      	ldr	r0, [pc, #84]	; (8012c44 <mp3Thread+0x74>)
 8012bf0:	f7f8 fc34 	bl	800b45c <xTimerCreate>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	4a14      	ldr	r2, [pc, #80]	; (8012c48 <mp3Thread+0x78>)
 8012bf8:	6013      	str	r3, [r2, #0]
							pdMS_TO_TICKS(VS1053_VOLUME_PERIOD),
							pdTRUE,
							(void*)0,
							volume_control_timercb);

	if(!vs1053_volume_timer) {
 8012bfa:	4b13      	ldr	r3, [pc, #76]	; (8012c48 <mp3Thread+0x78>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d103      	bne.n	8012c0a <mp3Thread+0x3a>
		hal_cli_printf("mp3 volume timer create failed");
 8012c02:	4812      	ldr	r0, [pc, #72]	; (8012c4c <mp3Thread+0x7c>)
 8012c04:	f7fc f822 	bl	800ec4c <hal_cli_printf>
		return;
 8012c08:	e015      	b.n	8012c36 <mp3Thread+0x66>
	} else {
		if(xTimerStart(vs1053_volume_timer, 0) != pdPASS) {
 8012c0a:	4b0f      	ldr	r3, [pc, #60]	; (8012c48 <mp3Thread+0x78>)
 8012c0c:	681c      	ldr	r4, [r3, #0]
 8012c0e:	f7f7 fe1b 	bl	800a848 <xTaskGetTickCount>
 8012c12:	4602      	mov	r2, r0
 8012c14:	2300      	movs	r3, #0
 8012c16:	9300      	str	r3, [sp, #0]
 8012c18:	2300      	movs	r3, #0
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f7f8 fc79 	bl	800b514 <xTimerGenericCommand>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d003      	beq.n	8012c30 <mp3Thread+0x60>
			hal_cli_printf("mp3 volume timer start failed");
 8012c28:	4809      	ldr	r0, [pc, #36]	; (8012c50 <mp3Thread+0x80>)
 8012c2a:	f7fc f80f 	bl	800ec4c <hal_cli_printf>
			return;
 8012c2e:	e002      	b.n	8012c36 <mp3Thread+0x66>
		}
	}

	while(1) {
			MP3_Feeder();
 8012c30:	f000 f8b6 	bl	8012da0 <MP3_Feeder>
 8012c34:	e7fc      	b.n	8012c30 <mp3Thread+0x60>
	}
}
 8012c36:	370c      	adds	r7, #12
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd90      	pop	{r4, r7, pc}
 8012c3c:	08013d14 	.word	0x08013d14
 8012c40:	08012add 	.word	0x08012add
 8012c44:	08013d24 	.word	0x08013d24
 8012c48:	20005c50 	.word	0x20005c50
 8012c4c:	08013d30 	.word	0x08013d30
 8012c50:	08013d50 	.word	0x08013d50

08012c54 <MP3_Init>:
FATFS fs;
FIL mp3File;

/* Initialize VS1053 & Open a file */
bool MP3_Init()
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	af00      	add	r7, sp, #0
	/* Initialize VS1053 */
    if(!VS1053_Init()) return false;
 8012c58:	f7ed ff40 	bl	8000adc <VS1053_Init>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	f083 0301 	eor.w	r3, r3, #1
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d001      	beq.n	8012c6c <MP3_Init+0x18>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	e00a      	b.n	8012c82 <MP3_Init+0x2e>

    /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK) return false;
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	4906      	ldr	r1, [pc, #24]	; (8012c88 <MP3_Init+0x34>)
 8012c70:	4806      	ldr	r0, [pc, #24]	; (8012c8c <MP3_Init+0x38>)
 8012c72:	f7f4 fe91 	bl	8007998 <f_mount>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d001      	beq.n	8012c80 <MP3_Init+0x2c>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	e000      	b.n	8012c82 <MP3_Init+0x2e>

    return true;
 8012c80:	2301      	movs	r3, #1
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	08013d70 	.word	0x08013d70
 8012c8c:	20005c84 	.word	0x20005c84

08012c90 <MP3_Play>:

bool MP3_Play(const char *filename)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
	if(isPlaying) MP3_Stop();
 8012c98:	4b25      	ldr	r3, [pc, #148]	; (8012d30 <MP3_Play+0xa0>)
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d001      	beq.n	8012ca4 <MP3_Play+0x14>
 8012ca0:	f000 f84e 	bl	8012d40 <MP3_Stop>

	if(!VS1053_SetMode(0x4800)) return false;	/* SM LINE1 | SM SDINEW */
 8012ca4:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8012ca8:	f7ee f805 	bl	8000cb6 <VS1053_SetMode>
 8012cac:	4603      	mov	r3, r0
 8012cae:	f083 0301 	eor.w	r3, r3, #1
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d001      	beq.n	8012cbc <MP3_Play+0x2c>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	e035      	b.n	8012d28 <MP3_Play+0x98>
	if(!VS1053_AutoResync()) return false;		/* AutoResync */
 8012cbc:	f7ee f829 	bl	8000d12 <VS1053_AutoResync>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	f083 0301 	eor.w	r3, r3, #1
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d001      	beq.n	8012cd0 <MP3_Play+0x40>
 8012ccc:	2300      	movs	r3, #0
 8012cce:	e02b      	b.n	8012d28 <MP3_Play+0x98>
	if(!VS1053_SetDecodeTime(0)) return false;	/* Set decode time */
 8012cd0:	2000      	movs	r0, #0
 8012cd2:	f7ee f83e 	bl	8000d52 <VS1053_SetDecodeTime>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	f083 0301 	eor.w	r3, r3, #1
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d001      	beq.n	8012ce6 <MP3_Play+0x56>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	e020      	b.n	8012d28 <MP3_Play+0x98>
	if(!VS1053_SetVolume( 0x0F, 0x0F )) return false;	/* Small number is louder */
 8012ce6:	210f      	movs	r1, #15
 8012ce8:	200f      	movs	r0, #15
 8012cea:	f7ed ffc1 	bl	8000c70 <VS1053_SetVolume>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	f083 0301 	eor.w	r3, r3, #1
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d001      	beq.n	8012cfe <MP3_Play+0x6e>
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	e014      	b.n	8012d28 <MP3_Play+0x98>

	/* Open file to read */
	if(f_open(&mp3File, filename, FA_READ) != FR_OK) return false;
 8012cfe:	2201      	movs	r2, #1
 8012d00:	6879      	ldr	r1, [r7, #4]
 8012d02:	480c      	ldr	r0, [pc, #48]	; (8012d34 <MP3_Play+0xa4>)
 8012d04:	f7f4 fe8e 	bl	8007a24 <f_open>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d001      	beq.n	8012d12 <MP3_Play+0x82>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	e00a      	b.n	8012d28 <MP3_Play+0x98>

	/* Get the file size */
	mp3FileSize = f_size(&mp3File);
 8012d12:	4b08      	ldr	r3, [pc, #32]	; (8012d34 <MP3_Play+0xa4>)
 8012d14:	68db      	ldr	r3, [r3, #12]
 8012d16:	4a08      	ldr	r2, [pc, #32]	; (8012d38 <MP3_Play+0xa8>)
 8012d18:	6013      	str	r3, [r2, #0]

	/* Set flags */
	isFileOpen = true;
 8012d1a:	4b08      	ldr	r3, [pc, #32]	; (8012d3c <MP3_Play+0xac>)
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	701a      	strb	r2, [r3, #0]
	isPlaying = true;
 8012d20:	4b03      	ldr	r3, [pc, #12]	; (8012d30 <MP3_Play+0xa0>)
 8012d22:	2201      	movs	r2, #1
 8012d24:	701a      	strb	r2, [r3, #0]

    return true;
 8012d26:	2301      	movs	r3, #1
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	20005c82 	.word	0x20005c82
 8012d34:	20006cbc 	.word	0x20006cbc
 8012d38:	20005c78 	.word	0x20005c78
 8012d3c:	20005c83 	.word	0x20005c83

08012d40 <MP3_Stop>:

void MP3_Stop(void)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
	/* Refer to page 49 of VS1053 datasheet */

	uint16_t mode;
	VS1053_SendEndFill(2052);	/* send endfill bytes */
 8012d46:	f640 0004 	movw	r0, #2052	; 0x804
 8012d4a:	f7ee f841 	bl	8000dd0 <VS1053_SendEndFill>
	VS1053_SetMode(0x4808);		/* SM LINE1 | SM SDINEW | SM CANCEL */
 8012d4e:	f644 0008 	movw	r0, #18440	; 0x4808
 8012d52:	f7ed ffb0 	bl	8000cb6 <VS1053_SetMode>
	VS1053_SendEndFill(32);		/* send endfill bytes */
 8012d56:	2020      	movs	r0, #32
 8012d58:	f7ee f83a 	bl	8000dd0 <VS1053_SendEndFill>
	LL_mDelay(100);
 8012d5c:	2064      	movs	r0, #100	; 0x64
 8012d5e:	f7f2 fa95 	bl	800528c <LL_mDelay>
	VS1053_GetMode(&mode);		/* get mode value */
 8012d62:	1dbb      	adds	r3, r7, #6
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7ed ffbe 	bl	8000ce6 <VS1053_GetMode>
	if((mode & 0x08) != 0x0)	/* if SM CANCEL is not clear, soft reset */
 8012d6a:	88fb      	ldrh	r3, [r7, #6]
 8012d6c:	f003 0308 	and.w	r3, r3, #8
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d001      	beq.n	8012d78 <MP3_Stop+0x38>
	{
		VS1053_SoftReset();
 8012d74:	f7ed ff66 	bl	8000c44 <VS1053_SoftReset>
	}

	f_close(&mp3File);
 8012d78:	4806      	ldr	r0, [pc, #24]	; (8012d94 <MP3_Stop+0x54>)
 8012d7a:	f7f5 faf8 	bl	800836e <f_close>
	isPlaying = false;			/* Stop flag */
 8012d7e:	4b06      	ldr	r3, [pc, #24]	; (8012d98 <MP3_Stop+0x58>)
 8012d80:	2200      	movs	r2, #0
 8012d82:	701a      	strb	r2, [r3, #0]
	isFileOpen = false;			/* Close flag */
 8012d84:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <MP3_Stop+0x5c>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	701a      	strb	r2, [r3, #0]
}
 8012d8a:	bf00      	nop
 8012d8c:	3708      	adds	r7, #8
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	20006cbc 	.word	0x20006cbc
 8012d98:	20005c82 	.word	0x20005c82
 8012d9c:	20005c83 	.word	0x20005c83

08012da0 <MP3_Feeder>:
	if(!isPlaying) isPlaying = true;
}

/* Send mp3 buffer to VS1053 */
void MP3_Feeder(void)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	af00      	add	r7, sp, #0
	if(!isPlaying || !isFileOpen) return;
 8012da4:	4b26      	ldr	r3, [pc, #152]	; (8012e40 <MP3_Feeder+0xa0>)
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	f083 0301 	eor.w	r3, r3, #1
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d144      	bne.n	8012e3c <MP3_Feeder+0x9c>
 8012db2:	4b24      	ldr	r3, [pc, #144]	; (8012e44 <MP3_Feeder+0xa4>)
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	f083 0301 	eor.w	r3, r3, #1
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d13d      	bne.n	8012e3c <MP3_Feeder+0x9c>

	if(mp3FileSize > BUFFER_SIZE)
 8012dc0:	4b21      	ldr	r3, [pc, #132]	; (8012e48 <MP3_Feeder+0xa8>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b20      	cmp	r3, #32
 8012dc6:	d90e      	bls.n	8012de6 <MP3_Feeder+0x46>
	{
		/* Fill the buffer */
		f_read(&mp3File, mp3Buffer, BUFFER_SIZE, (void*)&readBytes);
 8012dc8:	4b20      	ldr	r3, [pc, #128]	; (8012e4c <MP3_Feeder+0xac>)
 8012dca:	2220      	movs	r2, #32
 8012dcc:	4920      	ldr	r1, [pc, #128]	; (8012e50 <MP3_Feeder+0xb0>)
 8012dce:	4821      	ldr	r0, [pc, #132]	; (8012e54 <MP3_Feeder+0xb4>)
 8012dd0:	f7f5 f8f0 	bl	8007fb4 <f_read>

		/* Tx buffer */
		VS1053_SdiWrite32( mp3Buffer );
 8012dd4:	481e      	ldr	r0, [pc, #120]	; (8012e50 <MP3_Feeder+0xb0>)
 8012dd6:	f7ee f921 	bl	800101c <VS1053_SdiWrite32>

		/* bytes to send */
		mp3FileSize -= BUFFER_SIZE;
 8012dda:	4b1b      	ldr	r3, [pc, #108]	; (8012e48 <MP3_Feeder+0xa8>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	3b20      	subs	r3, #32
 8012de0:	4a19      	ldr	r2, [pc, #100]	; (8012e48 <MP3_Feeder+0xa8>)
 8012de2:	6013      	str	r3, [r2, #0]
 8012de4:	e02b      	b.n	8012e3e <MP3_Feeder+0x9e>
	}
	else
	{
		/* Read left bytes */
		f_read(&mp3File, mp3Buffer, mp3FileSize, (void*)&readBytes);
 8012de6:	4b18      	ldr	r3, [pc, #96]	; (8012e48 <MP3_Feeder+0xa8>)
 8012de8:	681a      	ldr	r2, [r3, #0]
 8012dea:	4b18      	ldr	r3, [pc, #96]	; (8012e4c <MP3_Feeder+0xac>)
 8012dec:	4918      	ldr	r1, [pc, #96]	; (8012e50 <MP3_Feeder+0xb0>)
 8012dee:	4819      	ldr	r0, [pc, #100]	; (8012e54 <MP3_Feeder+0xb4>)
 8012df0:	f7f5 f8e0 	bl	8007fb4 <f_read>

		/* Tx buffer */
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8012df4:	4b18      	ldr	r3, [pc, #96]	; (8012e58 <MP3_Feeder+0xb8>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	801a      	strh	r2, [r3, #0]
 8012dfa:	e015      	b.n	8012e28 <MP3_Feeder+0x88>
		{
			while(!VS1053_SdiWrite(*(mp3Buffer + cnt)));
 8012dfc:	bf00      	nop
 8012dfe:	4b16      	ldr	r3, [pc, #88]	; (8012e58 <MP3_Feeder+0xb8>)
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	461a      	mov	r2, r3
 8012e04:	4b12      	ldr	r3, [pc, #72]	; (8012e50 <MP3_Feeder+0xb0>)
 8012e06:	4413      	add	r3, r2
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7ee f8d8 	bl	8000fc0 <VS1053_SdiWrite>
 8012e10:	4603      	mov	r3, r0
 8012e12:	f083 0301 	eor.w	r3, r3, #1
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d1f0      	bne.n	8012dfe <MP3_Feeder+0x5e>
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8012e1c:	4b0e      	ldr	r3, [pc, #56]	; (8012e58 <MP3_Feeder+0xb8>)
 8012e1e:	881b      	ldrh	r3, [r3, #0]
 8012e20:	3301      	adds	r3, #1
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	4b0c      	ldr	r3, [pc, #48]	; (8012e58 <MP3_Feeder+0xb8>)
 8012e26:	801a      	strh	r2, [r3, #0]
 8012e28:	4b0b      	ldr	r3, [pc, #44]	; (8012e58 <MP3_Feeder+0xb8>)
 8012e2a:	881b      	ldrh	r3, [r3, #0]
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	4b06      	ldr	r3, [pc, #24]	; (8012e48 <MP3_Feeder+0xa8>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d3e2      	bcc.n	8012dfc <MP3_Feeder+0x5c>
		}

		/* Stop when played the whole file */
		MP3_Stop();
 8012e36:	f7ff ff83 	bl	8012d40 <MP3_Stop>
 8012e3a:	e000      	b.n	8012e3e <MP3_Feeder+0x9e>
	if(!isPlaying || !isFileOpen) return;
 8012e3c:	bf00      	nop
	}
}
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	20005c82 	.word	0x20005c82
 8012e44:	20005c83 	.word	0x20005c83
 8012e48:	20005c78 	.word	0x20005c78
 8012e4c:	20005c7c 	.word	0x20005c7c
 8012e50:	20005c58 	.word	0x20005c58
 8012e54:	20006cbc 	.word	0x20006cbc
 8012e58:	20005c80 	.word	0x20005c80

08012e5c <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012e60:	b672      	cpsid	i
}
 8012e62:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 8012e64:	4801      	ldr	r0, [pc, #4]	; (8012e6c <ErrorHandler+0x10>)
 8012e66:	f7fb fef1 	bl	800ec4c <hal_cli_printf>
  while (1)
 8012e6a:	e7fe      	b.n	8012e6a <ErrorHandler+0xe>
 8012e6c:	08013d74 	.word	0x08013d74

08012e70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8012e70:	480d      	ldr	r0, [pc, #52]	; (8012ea8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8012e72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8012e74:	f7ff f8e2 	bl	801203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8012e78:	480c      	ldr	r0, [pc, #48]	; (8012eac <LoopForever+0x6>)
  ldr r1, =_edata
 8012e7a:	490d      	ldr	r1, [pc, #52]	; (8012eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8012e7c:	4a0d      	ldr	r2, [pc, #52]	; (8012eb4 <LoopForever+0xe>)
  movs r3, #0
 8012e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012e80:	e002      	b.n	8012e88 <LoopCopyDataInit>

08012e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012e86:	3304      	adds	r3, #4

08012e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012e8c:	d3f9      	bcc.n	8012e82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012e8e:	4a0a      	ldr	r2, [pc, #40]	; (8012eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8012e90:	4c0a      	ldr	r4, [pc, #40]	; (8012ebc <LoopForever+0x16>)
  movs r3, #0
 8012e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012e94:	e001      	b.n	8012e9a <LoopFillZerobss>

08012e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012e98:	3204      	adds	r2, #4

08012e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012e9c:	d3fb      	bcc.n	8012e96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8012e9e:	f000 f811 	bl	8012ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8012ea2:	f7fd fee7 	bl	8010c74 <main>

08012ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8012ea6:	e7fe      	b.n	8012ea6 <LoopForever>
  ldr   r0, =_estack
 8012ea8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8012eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012eb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8012eb4:	08014430 	.word	0x08014430
  ldr r2, =_sbss
 8012eb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8012ebc:	20007d00 	.word	0x20007d00

08012ec0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8012ec0:	e7fe      	b.n	8012ec0 <ADC_IRQHandler>
	...

08012ec4 <__libc_init_array>:
 8012ec4:	b570      	push	{r4, r5, r6, lr}
 8012ec6:	4d0d      	ldr	r5, [pc, #52]	; (8012efc <__libc_init_array+0x38>)
 8012ec8:	4c0d      	ldr	r4, [pc, #52]	; (8012f00 <__libc_init_array+0x3c>)
 8012eca:	1b64      	subs	r4, r4, r5
 8012ecc:	10a4      	asrs	r4, r4, #2
 8012ece:	2600      	movs	r6, #0
 8012ed0:	42a6      	cmp	r6, r4
 8012ed2:	d109      	bne.n	8012ee8 <__libc_init_array+0x24>
 8012ed4:	4d0b      	ldr	r5, [pc, #44]	; (8012f04 <__libc_init_array+0x40>)
 8012ed6:	4c0c      	ldr	r4, [pc, #48]	; (8012f08 <__libc_init_array+0x44>)
 8012ed8:	f000 fccc 	bl	8013874 <_init>
 8012edc:	1b64      	subs	r4, r4, r5
 8012ede:	10a4      	asrs	r4, r4, #2
 8012ee0:	2600      	movs	r6, #0
 8012ee2:	42a6      	cmp	r6, r4
 8012ee4:	d105      	bne.n	8012ef2 <__libc_init_array+0x2e>
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
 8012ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eec:	4798      	blx	r3
 8012eee:	3601      	adds	r6, #1
 8012ef0:	e7ee      	b.n	8012ed0 <__libc_init_array+0xc>
 8012ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ef6:	4798      	blx	r3
 8012ef8:	3601      	adds	r6, #1
 8012efa:	e7f2      	b.n	8012ee2 <__libc_init_array+0x1e>
 8012efc:	08014428 	.word	0x08014428
 8012f00:	08014428 	.word	0x08014428
 8012f04:	08014428 	.word	0x08014428
 8012f08:	0801442c 	.word	0x0801442c

08012f0c <memcmp>:
 8012f0c:	b510      	push	{r4, lr}
 8012f0e:	3901      	subs	r1, #1
 8012f10:	4402      	add	r2, r0
 8012f12:	4290      	cmp	r0, r2
 8012f14:	d101      	bne.n	8012f1a <memcmp+0xe>
 8012f16:	2000      	movs	r0, #0
 8012f18:	e005      	b.n	8012f26 <memcmp+0x1a>
 8012f1a:	7803      	ldrb	r3, [r0, #0]
 8012f1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012f20:	42a3      	cmp	r3, r4
 8012f22:	d001      	beq.n	8012f28 <memcmp+0x1c>
 8012f24:	1b18      	subs	r0, r3, r4
 8012f26:	bd10      	pop	{r4, pc}
 8012f28:	3001      	adds	r0, #1
 8012f2a:	e7f2      	b.n	8012f12 <memcmp+0x6>

08012f2c <memcpy>:
 8012f2c:	440a      	add	r2, r1
 8012f2e:	4291      	cmp	r1, r2
 8012f30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012f34:	d100      	bne.n	8012f38 <memcpy+0xc>
 8012f36:	4770      	bx	lr
 8012f38:	b510      	push	{r4, lr}
 8012f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f42:	4291      	cmp	r1, r2
 8012f44:	d1f9      	bne.n	8012f3a <memcpy+0xe>
 8012f46:	bd10      	pop	{r4, pc}

08012f48 <memset>:
 8012f48:	4402      	add	r2, r0
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d100      	bne.n	8012f52 <memset+0xa>
 8012f50:	4770      	bx	lr
 8012f52:	f803 1b01 	strb.w	r1, [r3], #1
 8012f56:	e7f9      	b.n	8012f4c <memset+0x4>

08012f58 <siprintf>:
 8012f58:	b40e      	push	{r1, r2, r3}
 8012f5a:	b500      	push	{lr}
 8012f5c:	b09c      	sub	sp, #112	; 0x70
 8012f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8012f60:	9002      	str	r0, [sp, #8]
 8012f62:	9006      	str	r0, [sp, #24]
 8012f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f68:	4809      	ldr	r0, [pc, #36]	; (8012f90 <siprintf+0x38>)
 8012f6a:	9107      	str	r1, [sp, #28]
 8012f6c:	9104      	str	r1, [sp, #16]
 8012f6e:	4909      	ldr	r1, [pc, #36]	; (8012f94 <siprintf+0x3c>)
 8012f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f74:	9105      	str	r1, [sp, #20]
 8012f76:	6800      	ldr	r0, [r0, #0]
 8012f78:	9301      	str	r3, [sp, #4]
 8012f7a:	a902      	add	r1, sp, #8
 8012f7c:	f000 f91e 	bl	80131bc <_svfiprintf_r>
 8012f80:	9b02      	ldr	r3, [sp, #8]
 8012f82:	2200      	movs	r2, #0
 8012f84:	701a      	strb	r2, [r3, #0]
 8012f86:	b01c      	add	sp, #112	; 0x70
 8012f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f8c:	b003      	add	sp, #12
 8012f8e:	4770      	bx	lr
 8012f90:	20000018 	.word	0x20000018
 8012f94:	ffff0208 	.word	0xffff0208

08012f98 <_vsiprintf_r>:
 8012f98:	b500      	push	{lr}
 8012f9a:	b09b      	sub	sp, #108	; 0x6c
 8012f9c:	9100      	str	r1, [sp, #0]
 8012f9e:	9104      	str	r1, [sp, #16]
 8012fa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012fa4:	9105      	str	r1, [sp, #20]
 8012fa6:	9102      	str	r1, [sp, #8]
 8012fa8:	4905      	ldr	r1, [pc, #20]	; (8012fc0 <_vsiprintf_r+0x28>)
 8012faa:	9103      	str	r1, [sp, #12]
 8012fac:	4669      	mov	r1, sp
 8012fae:	f000 f905 	bl	80131bc <_svfiprintf_r>
 8012fb2:	9b00      	ldr	r3, [sp, #0]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	701a      	strb	r2, [r3, #0]
 8012fb8:	b01b      	add	sp, #108	; 0x6c
 8012fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fbe:	bf00      	nop
 8012fc0:	ffff0208 	.word	0xffff0208

08012fc4 <vsiprintf>:
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	460a      	mov	r2, r1
 8012fc8:	4601      	mov	r1, r0
 8012fca:	4802      	ldr	r0, [pc, #8]	; (8012fd4 <vsiprintf+0x10>)
 8012fcc:	6800      	ldr	r0, [r0, #0]
 8012fce:	f7ff bfe3 	b.w	8012f98 <_vsiprintf_r>
 8012fd2:	bf00      	nop
 8012fd4:	20000018 	.word	0x20000018

08012fd8 <__retarget_lock_acquire_recursive>:
 8012fd8:	4770      	bx	lr

08012fda <__retarget_lock_release_recursive>:
 8012fda:	4770      	bx	lr

08012fdc <sbrk_aligned>:
 8012fdc:	b570      	push	{r4, r5, r6, lr}
 8012fde:	4e0e      	ldr	r6, [pc, #56]	; (8013018 <sbrk_aligned+0x3c>)
 8012fe0:	460c      	mov	r4, r1
 8012fe2:	6831      	ldr	r1, [r6, #0]
 8012fe4:	4605      	mov	r5, r0
 8012fe6:	b911      	cbnz	r1, 8012fee <sbrk_aligned+0x12>
 8012fe8:	f000 fb7c 	bl	80136e4 <_sbrk_r>
 8012fec:	6030      	str	r0, [r6, #0]
 8012fee:	4621      	mov	r1, r4
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	f000 fb77 	bl	80136e4 <_sbrk_r>
 8012ff6:	1c43      	adds	r3, r0, #1
 8012ff8:	d00a      	beq.n	8013010 <sbrk_aligned+0x34>
 8012ffa:	1cc4      	adds	r4, r0, #3
 8012ffc:	f024 0403 	bic.w	r4, r4, #3
 8013000:	42a0      	cmp	r0, r4
 8013002:	d007      	beq.n	8013014 <sbrk_aligned+0x38>
 8013004:	1a21      	subs	r1, r4, r0
 8013006:	4628      	mov	r0, r5
 8013008:	f000 fb6c 	bl	80136e4 <_sbrk_r>
 801300c:	3001      	adds	r0, #1
 801300e:	d101      	bne.n	8013014 <sbrk_aligned+0x38>
 8013010:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013014:	4620      	mov	r0, r4
 8013016:	bd70      	pop	{r4, r5, r6, pc}
 8013018:	20007cf4 	.word	0x20007cf4

0801301c <_malloc_r>:
 801301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013020:	1ccd      	adds	r5, r1, #3
 8013022:	f025 0503 	bic.w	r5, r5, #3
 8013026:	3508      	adds	r5, #8
 8013028:	2d0c      	cmp	r5, #12
 801302a:	bf38      	it	cc
 801302c:	250c      	movcc	r5, #12
 801302e:	2d00      	cmp	r5, #0
 8013030:	4607      	mov	r7, r0
 8013032:	db01      	blt.n	8013038 <_malloc_r+0x1c>
 8013034:	42a9      	cmp	r1, r5
 8013036:	d905      	bls.n	8013044 <_malloc_r+0x28>
 8013038:	230c      	movs	r3, #12
 801303a:	603b      	str	r3, [r7, #0]
 801303c:	2600      	movs	r6, #0
 801303e:	4630      	mov	r0, r6
 8013040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013044:	4e2e      	ldr	r6, [pc, #184]	; (8013100 <_malloc_r+0xe4>)
 8013046:	f000 fb77 	bl	8013738 <__malloc_lock>
 801304a:	6833      	ldr	r3, [r6, #0]
 801304c:	461c      	mov	r4, r3
 801304e:	bb34      	cbnz	r4, 801309e <_malloc_r+0x82>
 8013050:	4629      	mov	r1, r5
 8013052:	4638      	mov	r0, r7
 8013054:	f7ff ffc2 	bl	8012fdc <sbrk_aligned>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	4604      	mov	r4, r0
 801305c:	d14d      	bne.n	80130fa <_malloc_r+0xde>
 801305e:	6834      	ldr	r4, [r6, #0]
 8013060:	4626      	mov	r6, r4
 8013062:	2e00      	cmp	r6, #0
 8013064:	d140      	bne.n	80130e8 <_malloc_r+0xcc>
 8013066:	6823      	ldr	r3, [r4, #0]
 8013068:	4631      	mov	r1, r6
 801306a:	4638      	mov	r0, r7
 801306c:	eb04 0803 	add.w	r8, r4, r3
 8013070:	f000 fb38 	bl	80136e4 <_sbrk_r>
 8013074:	4580      	cmp	r8, r0
 8013076:	d13a      	bne.n	80130ee <_malloc_r+0xd2>
 8013078:	6821      	ldr	r1, [r4, #0]
 801307a:	3503      	adds	r5, #3
 801307c:	1a6d      	subs	r5, r5, r1
 801307e:	f025 0503 	bic.w	r5, r5, #3
 8013082:	3508      	adds	r5, #8
 8013084:	2d0c      	cmp	r5, #12
 8013086:	bf38      	it	cc
 8013088:	250c      	movcc	r5, #12
 801308a:	4629      	mov	r1, r5
 801308c:	4638      	mov	r0, r7
 801308e:	f7ff ffa5 	bl	8012fdc <sbrk_aligned>
 8013092:	3001      	adds	r0, #1
 8013094:	d02b      	beq.n	80130ee <_malloc_r+0xd2>
 8013096:	6823      	ldr	r3, [r4, #0]
 8013098:	442b      	add	r3, r5
 801309a:	6023      	str	r3, [r4, #0]
 801309c:	e00e      	b.n	80130bc <_malloc_r+0xa0>
 801309e:	6822      	ldr	r2, [r4, #0]
 80130a0:	1b52      	subs	r2, r2, r5
 80130a2:	d41e      	bmi.n	80130e2 <_malloc_r+0xc6>
 80130a4:	2a0b      	cmp	r2, #11
 80130a6:	d916      	bls.n	80130d6 <_malloc_r+0xba>
 80130a8:	1961      	adds	r1, r4, r5
 80130aa:	42a3      	cmp	r3, r4
 80130ac:	6025      	str	r5, [r4, #0]
 80130ae:	bf18      	it	ne
 80130b0:	6059      	strne	r1, [r3, #4]
 80130b2:	6863      	ldr	r3, [r4, #4]
 80130b4:	bf08      	it	eq
 80130b6:	6031      	streq	r1, [r6, #0]
 80130b8:	5162      	str	r2, [r4, r5]
 80130ba:	604b      	str	r3, [r1, #4]
 80130bc:	4638      	mov	r0, r7
 80130be:	f104 060b 	add.w	r6, r4, #11
 80130c2:	f000 fb3f 	bl	8013744 <__malloc_unlock>
 80130c6:	f026 0607 	bic.w	r6, r6, #7
 80130ca:	1d23      	adds	r3, r4, #4
 80130cc:	1af2      	subs	r2, r6, r3
 80130ce:	d0b6      	beq.n	801303e <_malloc_r+0x22>
 80130d0:	1b9b      	subs	r3, r3, r6
 80130d2:	50a3      	str	r3, [r4, r2]
 80130d4:	e7b3      	b.n	801303e <_malloc_r+0x22>
 80130d6:	6862      	ldr	r2, [r4, #4]
 80130d8:	42a3      	cmp	r3, r4
 80130da:	bf0c      	ite	eq
 80130dc:	6032      	streq	r2, [r6, #0]
 80130de:	605a      	strne	r2, [r3, #4]
 80130e0:	e7ec      	b.n	80130bc <_malloc_r+0xa0>
 80130e2:	4623      	mov	r3, r4
 80130e4:	6864      	ldr	r4, [r4, #4]
 80130e6:	e7b2      	b.n	801304e <_malloc_r+0x32>
 80130e8:	4634      	mov	r4, r6
 80130ea:	6876      	ldr	r6, [r6, #4]
 80130ec:	e7b9      	b.n	8013062 <_malloc_r+0x46>
 80130ee:	230c      	movs	r3, #12
 80130f0:	603b      	str	r3, [r7, #0]
 80130f2:	4638      	mov	r0, r7
 80130f4:	f000 fb26 	bl	8013744 <__malloc_unlock>
 80130f8:	e7a1      	b.n	801303e <_malloc_r+0x22>
 80130fa:	6025      	str	r5, [r4, #0]
 80130fc:	e7de      	b.n	80130bc <_malloc_r+0xa0>
 80130fe:	bf00      	nop
 8013100:	20007cf0 	.word	0x20007cf0

08013104 <__ssputs_r>:
 8013104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013108:	688e      	ldr	r6, [r1, #8]
 801310a:	429e      	cmp	r6, r3
 801310c:	4682      	mov	sl, r0
 801310e:	460c      	mov	r4, r1
 8013110:	4690      	mov	r8, r2
 8013112:	461f      	mov	r7, r3
 8013114:	d838      	bhi.n	8013188 <__ssputs_r+0x84>
 8013116:	898a      	ldrh	r2, [r1, #12]
 8013118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801311c:	d032      	beq.n	8013184 <__ssputs_r+0x80>
 801311e:	6825      	ldr	r5, [r4, #0]
 8013120:	6909      	ldr	r1, [r1, #16]
 8013122:	eba5 0901 	sub.w	r9, r5, r1
 8013126:	6965      	ldr	r5, [r4, #20]
 8013128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801312c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013130:	3301      	adds	r3, #1
 8013132:	444b      	add	r3, r9
 8013134:	106d      	asrs	r5, r5, #1
 8013136:	429d      	cmp	r5, r3
 8013138:	bf38      	it	cc
 801313a:	461d      	movcc	r5, r3
 801313c:	0553      	lsls	r3, r2, #21
 801313e:	d531      	bpl.n	80131a4 <__ssputs_r+0xa0>
 8013140:	4629      	mov	r1, r5
 8013142:	f7ff ff6b 	bl	801301c <_malloc_r>
 8013146:	4606      	mov	r6, r0
 8013148:	b950      	cbnz	r0, 8013160 <__ssputs_r+0x5c>
 801314a:	230c      	movs	r3, #12
 801314c:	f8ca 3000 	str.w	r3, [sl]
 8013150:	89a3      	ldrh	r3, [r4, #12]
 8013152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013156:	81a3      	strh	r3, [r4, #12]
 8013158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801315c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013160:	6921      	ldr	r1, [r4, #16]
 8013162:	464a      	mov	r2, r9
 8013164:	f7ff fee2 	bl	8012f2c <memcpy>
 8013168:	89a3      	ldrh	r3, [r4, #12]
 801316a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801316e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013172:	81a3      	strh	r3, [r4, #12]
 8013174:	6126      	str	r6, [r4, #16]
 8013176:	6165      	str	r5, [r4, #20]
 8013178:	444e      	add	r6, r9
 801317a:	eba5 0509 	sub.w	r5, r5, r9
 801317e:	6026      	str	r6, [r4, #0]
 8013180:	60a5      	str	r5, [r4, #8]
 8013182:	463e      	mov	r6, r7
 8013184:	42be      	cmp	r6, r7
 8013186:	d900      	bls.n	801318a <__ssputs_r+0x86>
 8013188:	463e      	mov	r6, r7
 801318a:	6820      	ldr	r0, [r4, #0]
 801318c:	4632      	mov	r2, r6
 801318e:	4641      	mov	r1, r8
 8013190:	f000 fab8 	bl	8013704 <memmove>
 8013194:	68a3      	ldr	r3, [r4, #8]
 8013196:	1b9b      	subs	r3, r3, r6
 8013198:	60a3      	str	r3, [r4, #8]
 801319a:	6823      	ldr	r3, [r4, #0]
 801319c:	4433      	add	r3, r6
 801319e:	6023      	str	r3, [r4, #0]
 80131a0:	2000      	movs	r0, #0
 80131a2:	e7db      	b.n	801315c <__ssputs_r+0x58>
 80131a4:	462a      	mov	r2, r5
 80131a6:	f000 fb1f 	bl	80137e8 <_realloc_r>
 80131aa:	4606      	mov	r6, r0
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d1e1      	bne.n	8013174 <__ssputs_r+0x70>
 80131b0:	6921      	ldr	r1, [r4, #16]
 80131b2:	4650      	mov	r0, sl
 80131b4:	f000 facc 	bl	8013750 <_free_r>
 80131b8:	e7c7      	b.n	801314a <__ssputs_r+0x46>
	...

080131bc <_svfiprintf_r>:
 80131bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c0:	4698      	mov	r8, r3
 80131c2:	898b      	ldrh	r3, [r1, #12]
 80131c4:	061b      	lsls	r3, r3, #24
 80131c6:	b09d      	sub	sp, #116	; 0x74
 80131c8:	4607      	mov	r7, r0
 80131ca:	460d      	mov	r5, r1
 80131cc:	4614      	mov	r4, r2
 80131ce:	d50e      	bpl.n	80131ee <_svfiprintf_r+0x32>
 80131d0:	690b      	ldr	r3, [r1, #16]
 80131d2:	b963      	cbnz	r3, 80131ee <_svfiprintf_r+0x32>
 80131d4:	2140      	movs	r1, #64	; 0x40
 80131d6:	f7ff ff21 	bl	801301c <_malloc_r>
 80131da:	6028      	str	r0, [r5, #0]
 80131dc:	6128      	str	r0, [r5, #16]
 80131de:	b920      	cbnz	r0, 80131ea <_svfiprintf_r+0x2e>
 80131e0:	230c      	movs	r3, #12
 80131e2:	603b      	str	r3, [r7, #0]
 80131e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131e8:	e0d1      	b.n	801338e <_svfiprintf_r+0x1d2>
 80131ea:	2340      	movs	r3, #64	; 0x40
 80131ec:	616b      	str	r3, [r5, #20]
 80131ee:	2300      	movs	r3, #0
 80131f0:	9309      	str	r3, [sp, #36]	; 0x24
 80131f2:	2320      	movs	r3, #32
 80131f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80131fc:	2330      	movs	r3, #48	; 0x30
 80131fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80133a8 <_svfiprintf_r+0x1ec>
 8013202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013206:	f04f 0901 	mov.w	r9, #1
 801320a:	4623      	mov	r3, r4
 801320c:	469a      	mov	sl, r3
 801320e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013212:	b10a      	cbz	r2, 8013218 <_svfiprintf_r+0x5c>
 8013214:	2a25      	cmp	r2, #37	; 0x25
 8013216:	d1f9      	bne.n	801320c <_svfiprintf_r+0x50>
 8013218:	ebba 0b04 	subs.w	fp, sl, r4
 801321c:	d00b      	beq.n	8013236 <_svfiprintf_r+0x7a>
 801321e:	465b      	mov	r3, fp
 8013220:	4622      	mov	r2, r4
 8013222:	4629      	mov	r1, r5
 8013224:	4638      	mov	r0, r7
 8013226:	f7ff ff6d 	bl	8013104 <__ssputs_r>
 801322a:	3001      	adds	r0, #1
 801322c:	f000 80aa 	beq.w	8013384 <_svfiprintf_r+0x1c8>
 8013230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013232:	445a      	add	r2, fp
 8013234:	9209      	str	r2, [sp, #36]	; 0x24
 8013236:	f89a 3000 	ldrb.w	r3, [sl]
 801323a:	2b00      	cmp	r3, #0
 801323c:	f000 80a2 	beq.w	8013384 <_svfiprintf_r+0x1c8>
 8013240:	2300      	movs	r3, #0
 8013242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801324a:	f10a 0a01 	add.w	sl, sl, #1
 801324e:	9304      	str	r3, [sp, #16]
 8013250:	9307      	str	r3, [sp, #28]
 8013252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013256:	931a      	str	r3, [sp, #104]	; 0x68
 8013258:	4654      	mov	r4, sl
 801325a:	2205      	movs	r2, #5
 801325c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013260:	4851      	ldr	r0, [pc, #324]	; (80133a8 <_svfiprintf_r+0x1ec>)
 8013262:	f7ed f815 	bl	8000290 <memchr>
 8013266:	9a04      	ldr	r2, [sp, #16]
 8013268:	b9d8      	cbnz	r0, 80132a2 <_svfiprintf_r+0xe6>
 801326a:	06d0      	lsls	r0, r2, #27
 801326c:	bf44      	itt	mi
 801326e:	2320      	movmi	r3, #32
 8013270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013274:	0711      	lsls	r1, r2, #28
 8013276:	bf44      	itt	mi
 8013278:	232b      	movmi	r3, #43	; 0x2b
 801327a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801327e:	f89a 3000 	ldrb.w	r3, [sl]
 8013282:	2b2a      	cmp	r3, #42	; 0x2a
 8013284:	d015      	beq.n	80132b2 <_svfiprintf_r+0xf6>
 8013286:	9a07      	ldr	r2, [sp, #28]
 8013288:	4654      	mov	r4, sl
 801328a:	2000      	movs	r0, #0
 801328c:	f04f 0c0a 	mov.w	ip, #10
 8013290:	4621      	mov	r1, r4
 8013292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013296:	3b30      	subs	r3, #48	; 0x30
 8013298:	2b09      	cmp	r3, #9
 801329a:	d94e      	bls.n	801333a <_svfiprintf_r+0x17e>
 801329c:	b1b0      	cbz	r0, 80132cc <_svfiprintf_r+0x110>
 801329e:	9207      	str	r2, [sp, #28]
 80132a0:	e014      	b.n	80132cc <_svfiprintf_r+0x110>
 80132a2:	eba0 0308 	sub.w	r3, r0, r8
 80132a6:	fa09 f303 	lsl.w	r3, r9, r3
 80132aa:	4313      	orrs	r3, r2
 80132ac:	9304      	str	r3, [sp, #16]
 80132ae:	46a2      	mov	sl, r4
 80132b0:	e7d2      	b.n	8013258 <_svfiprintf_r+0x9c>
 80132b2:	9b03      	ldr	r3, [sp, #12]
 80132b4:	1d19      	adds	r1, r3, #4
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	9103      	str	r1, [sp, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	bfbb      	ittet	lt
 80132be:	425b      	neglt	r3, r3
 80132c0:	f042 0202 	orrlt.w	r2, r2, #2
 80132c4:	9307      	strge	r3, [sp, #28]
 80132c6:	9307      	strlt	r3, [sp, #28]
 80132c8:	bfb8      	it	lt
 80132ca:	9204      	strlt	r2, [sp, #16]
 80132cc:	7823      	ldrb	r3, [r4, #0]
 80132ce:	2b2e      	cmp	r3, #46	; 0x2e
 80132d0:	d10c      	bne.n	80132ec <_svfiprintf_r+0x130>
 80132d2:	7863      	ldrb	r3, [r4, #1]
 80132d4:	2b2a      	cmp	r3, #42	; 0x2a
 80132d6:	d135      	bne.n	8013344 <_svfiprintf_r+0x188>
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	1d1a      	adds	r2, r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	9203      	str	r2, [sp, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	bfb8      	it	lt
 80132e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80132e8:	3402      	adds	r4, #2
 80132ea:	9305      	str	r3, [sp, #20]
 80132ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80133b8 <_svfiprintf_r+0x1fc>
 80132f0:	7821      	ldrb	r1, [r4, #0]
 80132f2:	2203      	movs	r2, #3
 80132f4:	4650      	mov	r0, sl
 80132f6:	f7ec ffcb 	bl	8000290 <memchr>
 80132fa:	b140      	cbz	r0, 801330e <_svfiprintf_r+0x152>
 80132fc:	2340      	movs	r3, #64	; 0x40
 80132fe:	eba0 000a 	sub.w	r0, r0, sl
 8013302:	fa03 f000 	lsl.w	r0, r3, r0
 8013306:	9b04      	ldr	r3, [sp, #16]
 8013308:	4303      	orrs	r3, r0
 801330a:	3401      	adds	r4, #1
 801330c:	9304      	str	r3, [sp, #16]
 801330e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013312:	4826      	ldr	r0, [pc, #152]	; (80133ac <_svfiprintf_r+0x1f0>)
 8013314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013318:	2206      	movs	r2, #6
 801331a:	f7ec ffb9 	bl	8000290 <memchr>
 801331e:	2800      	cmp	r0, #0
 8013320:	d038      	beq.n	8013394 <_svfiprintf_r+0x1d8>
 8013322:	4b23      	ldr	r3, [pc, #140]	; (80133b0 <_svfiprintf_r+0x1f4>)
 8013324:	bb1b      	cbnz	r3, 801336e <_svfiprintf_r+0x1b2>
 8013326:	9b03      	ldr	r3, [sp, #12]
 8013328:	3307      	adds	r3, #7
 801332a:	f023 0307 	bic.w	r3, r3, #7
 801332e:	3308      	adds	r3, #8
 8013330:	9303      	str	r3, [sp, #12]
 8013332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013334:	4433      	add	r3, r6
 8013336:	9309      	str	r3, [sp, #36]	; 0x24
 8013338:	e767      	b.n	801320a <_svfiprintf_r+0x4e>
 801333a:	fb0c 3202 	mla	r2, ip, r2, r3
 801333e:	460c      	mov	r4, r1
 8013340:	2001      	movs	r0, #1
 8013342:	e7a5      	b.n	8013290 <_svfiprintf_r+0xd4>
 8013344:	2300      	movs	r3, #0
 8013346:	3401      	adds	r4, #1
 8013348:	9305      	str	r3, [sp, #20]
 801334a:	4619      	mov	r1, r3
 801334c:	f04f 0c0a 	mov.w	ip, #10
 8013350:	4620      	mov	r0, r4
 8013352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013356:	3a30      	subs	r2, #48	; 0x30
 8013358:	2a09      	cmp	r2, #9
 801335a:	d903      	bls.n	8013364 <_svfiprintf_r+0x1a8>
 801335c:	2b00      	cmp	r3, #0
 801335e:	d0c5      	beq.n	80132ec <_svfiprintf_r+0x130>
 8013360:	9105      	str	r1, [sp, #20]
 8013362:	e7c3      	b.n	80132ec <_svfiprintf_r+0x130>
 8013364:	fb0c 2101 	mla	r1, ip, r1, r2
 8013368:	4604      	mov	r4, r0
 801336a:	2301      	movs	r3, #1
 801336c:	e7f0      	b.n	8013350 <_svfiprintf_r+0x194>
 801336e:	ab03      	add	r3, sp, #12
 8013370:	9300      	str	r3, [sp, #0]
 8013372:	462a      	mov	r2, r5
 8013374:	4b0f      	ldr	r3, [pc, #60]	; (80133b4 <_svfiprintf_r+0x1f8>)
 8013376:	a904      	add	r1, sp, #16
 8013378:	4638      	mov	r0, r7
 801337a:	f3af 8000 	nop.w
 801337e:	1c42      	adds	r2, r0, #1
 8013380:	4606      	mov	r6, r0
 8013382:	d1d6      	bne.n	8013332 <_svfiprintf_r+0x176>
 8013384:	89ab      	ldrh	r3, [r5, #12]
 8013386:	065b      	lsls	r3, r3, #25
 8013388:	f53f af2c 	bmi.w	80131e4 <_svfiprintf_r+0x28>
 801338c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801338e:	b01d      	add	sp, #116	; 0x74
 8013390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013394:	ab03      	add	r3, sp, #12
 8013396:	9300      	str	r3, [sp, #0]
 8013398:	462a      	mov	r2, r5
 801339a:	4b06      	ldr	r3, [pc, #24]	; (80133b4 <_svfiprintf_r+0x1f8>)
 801339c:	a904      	add	r1, sp, #16
 801339e:	4638      	mov	r0, r7
 80133a0:	f000 f87a 	bl	8013498 <_printf_i>
 80133a4:	e7eb      	b.n	801337e <_svfiprintf_r+0x1c2>
 80133a6:	bf00      	nop
 80133a8:	080143ec 	.word	0x080143ec
 80133ac:	080143f6 	.word	0x080143f6
 80133b0:	00000000 	.word	0x00000000
 80133b4:	08013105 	.word	0x08013105
 80133b8:	080143f2 	.word	0x080143f2

080133bc <_printf_common>:
 80133bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133c0:	4616      	mov	r6, r2
 80133c2:	4699      	mov	r9, r3
 80133c4:	688a      	ldr	r2, [r1, #8]
 80133c6:	690b      	ldr	r3, [r1, #16]
 80133c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133cc:	4293      	cmp	r3, r2
 80133ce:	bfb8      	it	lt
 80133d0:	4613      	movlt	r3, r2
 80133d2:	6033      	str	r3, [r6, #0]
 80133d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133d8:	4607      	mov	r7, r0
 80133da:	460c      	mov	r4, r1
 80133dc:	b10a      	cbz	r2, 80133e2 <_printf_common+0x26>
 80133de:	3301      	adds	r3, #1
 80133e0:	6033      	str	r3, [r6, #0]
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	0699      	lsls	r1, r3, #26
 80133e6:	bf42      	ittt	mi
 80133e8:	6833      	ldrmi	r3, [r6, #0]
 80133ea:	3302      	addmi	r3, #2
 80133ec:	6033      	strmi	r3, [r6, #0]
 80133ee:	6825      	ldr	r5, [r4, #0]
 80133f0:	f015 0506 	ands.w	r5, r5, #6
 80133f4:	d106      	bne.n	8013404 <_printf_common+0x48>
 80133f6:	f104 0a19 	add.w	sl, r4, #25
 80133fa:	68e3      	ldr	r3, [r4, #12]
 80133fc:	6832      	ldr	r2, [r6, #0]
 80133fe:	1a9b      	subs	r3, r3, r2
 8013400:	42ab      	cmp	r3, r5
 8013402:	dc26      	bgt.n	8013452 <_printf_common+0x96>
 8013404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013408:	1e13      	subs	r3, r2, #0
 801340a:	6822      	ldr	r2, [r4, #0]
 801340c:	bf18      	it	ne
 801340e:	2301      	movne	r3, #1
 8013410:	0692      	lsls	r2, r2, #26
 8013412:	d42b      	bmi.n	801346c <_printf_common+0xb0>
 8013414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013418:	4649      	mov	r1, r9
 801341a:	4638      	mov	r0, r7
 801341c:	47c0      	blx	r8
 801341e:	3001      	adds	r0, #1
 8013420:	d01e      	beq.n	8013460 <_printf_common+0xa4>
 8013422:	6823      	ldr	r3, [r4, #0]
 8013424:	68e5      	ldr	r5, [r4, #12]
 8013426:	6832      	ldr	r2, [r6, #0]
 8013428:	f003 0306 	and.w	r3, r3, #6
 801342c:	2b04      	cmp	r3, #4
 801342e:	bf08      	it	eq
 8013430:	1aad      	subeq	r5, r5, r2
 8013432:	68a3      	ldr	r3, [r4, #8]
 8013434:	6922      	ldr	r2, [r4, #16]
 8013436:	bf0c      	ite	eq
 8013438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801343c:	2500      	movne	r5, #0
 801343e:	4293      	cmp	r3, r2
 8013440:	bfc4      	itt	gt
 8013442:	1a9b      	subgt	r3, r3, r2
 8013444:	18ed      	addgt	r5, r5, r3
 8013446:	2600      	movs	r6, #0
 8013448:	341a      	adds	r4, #26
 801344a:	42b5      	cmp	r5, r6
 801344c:	d11a      	bne.n	8013484 <_printf_common+0xc8>
 801344e:	2000      	movs	r0, #0
 8013450:	e008      	b.n	8013464 <_printf_common+0xa8>
 8013452:	2301      	movs	r3, #1
 8013454:	4652      	mov	r2, sl
 8013456:	4649      	mov	r1, r9
 8013458:	4638      	mov	r0, r7
 801345a:	47c0      	blx	r8
 801345c:	3001      	adds	r0, #1
 801345e:	d103      	bne.n	8013468 <_printf_common+0xac>
 8013460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013468:	3501      	adds	r5, #1
 801346a:	e7c6      	b.n	80133fa <_printf_common+0x3e>
 801346c:	18e1      	adds	r1, r4, r3
 801346e:	1c5a      	adds	r2, r3, #1
 8013470:	2030      	movs	r0, #48	; 0x30
 8013472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013476:	4422      	add	r2, r4
 8013478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801347c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013480:	3302      	adds	r3, #2
 8013482:	e7c7      	b.n	8013414 <_printf_common+0x58>
 8013484:	2301      	movs	r3, #1
 8013486:	4622      	mov	r2, r4
 8013488:	4649      	mov	r1, r9
 801348a:	4638      	mov	r0, r7
 801348c:	47c0      	blx	r8
 801348e:	3001      	adds	r0, #1
 8013490:	d0e6      	beq.n	8013460 <_printf_common+0xa4>
 8013492:	3601      	adds	r6, #1
 8013494:	e7d9      	b.n	801344a <_printf_common+0x8e>
	...

08013498 <_printf_i>:
 8013498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801349c:	7e0f      	ldrb	r7, [r1, #24]
 801349e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134a0:	2f78      	cmp	r7, #120	; 0x78
 80134a2:	4691      	mov	r9, r2
 80134a4:	4680      	mov	r8, r0
 80134a6:	460c      	mov	r4, r1
 80134a8:	469a      	mov	sl, r3
 80134aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80134ae:	d807      	bhi.n	80134c0 <_printf_i+0x28>
 80134b0:	2f62      	cmp	r7, #98	; 0x62
 80134b2:	d80a      	bhi.n	80134ca <_printf_i+0x32>
 80134b4:	2f00      	cmp	r7, #0
 80134b6:	f000 80d8 	beq.w	801366a <_printf_i+0x1d2>
 80134ba:	2f58      	cmp	r7, #88	; 0x58
 80134bc:	f000 80a3 	beq.w	8013606 <_printf_i+0x16e>
 80134c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80134c8:	e03a      	b.n	8013540 <_printf_i+0xa8>
 80134ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80134ce:	2b15      	cmp	r3, #21
 80134d0:	d8f6      	bhi.n	80134c0 <_printf_i+0x28>
 80134d2:	a101      	add	r1, pc, #4	; (adr r1, 80134d8 <_printf_i+0x40>)
 80134d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134d8:	08013531 	.word	0x08013531
 80134dc:	08013545 	.word	0x08013545
 80134e0:	080134c1 	.word	0x080134c1
 80134e4:	080134c1 	.word	0x080134c1
 80134e8:	080134c1 	.word	0x080134c1
 80134ec:	080134c1 	.word	0x080134c1
 80134f0:	08013545 	.word	0x08013545
 80134f4:	080134c1 	.word	0x080134c1
 80134f8:	080134c1 	.word	0x080134c1
 80134fc:	080134c1 	.word	0x080134c1
 8013500:	080134c1 	.word	0x080134c1
 8013504:	08013651 	.word	0x08013651
 8013508:	08013575 	.word	0x08013575
 801350c:	08013633 	.word	0x08013633
 8013510:	080134c1 	.word	0x080134c1
 8013514:	080134c1 	.word	0x080134c1
 8013518:	08013673 	.word	0x08013673
 801351c:	080134c1 	.word	0x080134c1
 8013520:	08013575 	.word	0x08013575
 8013524:	080134c1 	.word	0x080134c1
 8013528:	080134c1 	.word	0x080134c1
 801352c:	0801363b 	.word	0x0801363b
 8013530:	682b      	ldr	r3, [r5, #0]
 8013532:	1d1a      	adds	r2, r3, #4
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	602a      	str	r2, [r5, #0]
 8013538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801353c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013540:	2301      	movs	r3, #1
 8013542:	e0a3      	b.n	801368c <_printf_i+0x1f4>
 8013544:	6820      	ldr	r0, [r4, #0]
 8013546:	6829      	ldr	r1, [r5, #0]
 8013548:	0606      	lsls	r6, r0, #24
 801354a:	f101 0304 	add.w	r3, r1, #4
 801354e:	d50a      	bpl.n	8013566 <_printf_i+0xce>
 8013550:	680e      	ldr	r6, [r1, #0]
 8013552:	602b      	str	r3, [r5, #0]
 8013554:	2e00      	cmp	r6, #0
 8013556:	da03      	bge.n	8013560 <_printf_i+0xc8>
 8013558:	232d      	movs	r3, #45	; 0x2d
 801355a:	4276      	negs	r6, r6
 801355c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013560:	485e      	ldr	r0, [pc, #376]	; (80136dc <_printf_i+0x244>)
 8013562:	230a      	movs	r3, #10
 8013564:	e019      	b.n	801359a <_printf_i+0x102>
 8013566:	680e      	ldr	r6, [r1, #0]
 8013568:	602b      	str	r3, [r5, #0]
 801356a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801356e:	bf18      	it	ne
 8013570:	b236      	sxthne	r6, r6
 8013572:	e7ef      	b.n	8013554 <_printf_i+0xbc>
 8013574:	682b      	ldr	r3, [r5, #0]
 8013576:	6820      	ldr	r0, [r4, #0]
 8013578:	1d19      	adds	r1, r3, #4
 801357a:	6029      	str	r1, [r5, #0]
 801357c:	0601      	lsls	r1, r0, #24
 801357e:	d501      	bpl.n	8013584 <_printf_i+0xec>
 8013580:	681e      	ldr	r6, [r3, #0]
 8013582:	e002      	b.n	801358a <_printf_i+0xf2>
 8013584:	0646      	lsls	r6, r0, #25
 8013586:	d5fb      	bpl.n	8013580 <_printf_i+0xe8>
 8013588:	881e      	ldrh	r6, [r3, #0]
 801358a:	4854      	ldr	r0, [pc, #336]	; (80136dc <_printf_i+0x244>)
 801358c:	2f6f      	cmp	r7, #111	; 0x6f
 801358e:	bf0c      	ite	eq
 8013590:	2308      	moveq	r3, #8
 8013592:	230a      	movne	r3, #10
 8013594:	2100      	movs	r1, #0
 8013596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801359a:	6865      	ldr	r5, [r4, #4]
 801359c:	60a5      	str	r5, [r4, #8]
 801359e:	2d00      	cmp	r5, #0
 80135a0:	bfa2      	ittt	ge
 80135a2:	6821      	ldrge	r1, [r4, #0]
 80135a4:	f021 0104 	bicge.w	r1, r1, #4
 80135a8:	6021      	strge	r1, [r4, #0]
 80135aa:	b90e      	cbnz	r6, 80135b0 <_printf_i+0x118>
 80135ac:	2d00      	cmp	r5, #0
 80135ae:	d04d      	beq.n	801364c <_printf_i+0x1b4>
 80135b0:	4615      	mov	r5, r2
 80135b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80135b6:	fb03 6711 	mls	r7, r3, r1, r6
 80135ba:	5dc7      	ldrb	r7, [r0, r7]
 80135bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80135c0:	4637      	mov	r7, r6
 80135c2:	42bb      	cmp	r3, r7
 80135c4:	460e      	mov	r6, r1
 80135c6:	d9f4      	bls.n	80135b2 <_printf_i+0x11a>
 80135c8:	2b08      	cmp	r3, #8
 80135ca:	d10b      	bne.n	80135e4 <_printf_i+0x14c>
 80135cc:	6823      	ldr	r3, [r4, #0]
 80135ce:	07de      	lsls	r6, r3, #31
 80135d0:	d508      	bpl.n	80135e4 <_printf_i+0x14c>
 80135d2:	6923      	ldr	r3, [r4, #16]
 80135d4:	6861      	ldr	r1, [r4, #4]
 80135d6:	4299      	cmp	r1, r3
 80135d8:	bfde      	ittt	le
 80135da:	2330      	movle	r3, #48	; 0x30
 80135dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80135e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80135e4:	1b52      	subs	r2, r2, r5
 80135e6:	6122      	str	r2, [r4, #16]
 80135e8:	f8cd a000 	str.w	sl, [sp]
 80135ec:	464b      	mov	r3, r9
 80135ee:	aa03      	add	r2, sp, #12
 80135f0:	4621      	mov	r1, r4
 80135f2:	4640      	mov	r0, r8
 80135f4:	f7ff fee2 	bl	80133bc <_printf_common>
 80135f8:	3001      	adds	r0, #1
 80135fa:	d14c      	bne.n	8013696 <_printf_i+0x1fe>
 80135fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013600:	b004      	add	sp, #16
 8013602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013606:	4835      	ldr	r0, [pc, #212]	; (80136dc <_printf_i+0x244>)
 8013608:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801360c:	6829      	ldr	r1, [r5, #0]
 801360e:	6823      	ldr	r3, [r4, #0]
 8013610:	f851 6b04 	ldr.w	r6, [r1], #4
 8013614:	6029      	str	r1, [r5, #0]
 8013616:	061d      	lsls	r5, r3, #24
 8013618:	d514      	bpl.n	8013644 <_printf_i+0x1ac>
 801361a:	07df      	lsls	r7, r3, #31
 801361c:	bf44      	itt	mi
 801361e:	f043 0320 	orrmi.w	r3, r3, #32
 8013622:	6023      	strmi	r3, [r4, #0]
 8013624:	b91e      	cbnz	r6, 801362e <_printf_i+0x196>
 8013626:	6823      	ldr	r3, [r4, #0]
 8013628:	f023 0320 	bic.w	r3, r3, #32
 801362c:	6023      	str	r3, [r4, #0]
 801362e:	2310      	movs	r3, #16
 8013630:	e7b0      	b.n	8013594 <_printf_i+0xfc>
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	f043 0320 	orr.w	r3, r3, #32
 8013638:	6023      	str	r3, [r4, #0]
 801363a:	2378      	movs	r3, #120	; 0x78
 801363c:	4828      	ldr	r0, [pc, #160]	; (80136e0 <_printf_i+0x248>)
 801363e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013642:	e7e3      	b.n	801360c <_printf_i+0x174>
 8013644:	0659      	lsls	r1, r3, #25
 8013646:	bf48      	it	mi
 8013648:	b2b6      	uxthmi	r6, r6
 801364a:	e7e6      	b.n	801361a <_printf_i+0x182>
 801364c:	4615      	mov	r5, r2
 801364e:	e7bb      	b.n	80135c8 <_printf_i+0x130>
 8013650:	682b      	ldr	r3, [r5, #0]
 8013652:	6826      	ldr	r6, [r4, #0]
 8013654:	6961      	ldr	r1, [r4, #20]
 8013656:	1d18      	adds	r0, r3, #4
 8013658:	6028      	str	r0, [r5, #0]
 801365a:	0635      	lsls	r5, r6, #24
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	d501      	bpl.n	8013664 <_printf_i+0x1cc>
 8013660:	6019      	str	r1, [r3, #0]
 8013662:	e002      	b.n	801366a <_printf_i+0x1d2>
 8013664:	0670      	lsls	r0, r6, #25
 8013666:	d5fb      	bpl.n	8013660 <_printf_i+0x1c8>
 8013668:	8019      	strh	r1, [r3, #0]
 801366a:	2300      	movs	r3, #0
 801366c:	6123      	str	r3, [r4, #16]
 801366e:	4615      	mov	r5, r2
 8013670:	e7ba      	b.n	80135e8 <_printf_i+0x150>
 8013672:	682b      	ldr	r3, [r5, #0]
 8013674:	1d1a      	adds	r2, r3, #4
 8013676:	602a      	str	r2, [r5, #0]
 8013678:	681d      	ldr	r5, [r3, #0]
 801367a:	6862      	ldr	r2, [r4, #4]
 801367c:	2100      	movs	r1, #0
 801367e:	4628      	mov	r0, r5
 8013680:	f7ec fe06 	bl	8000290 <memchr>
 8013684:	b108      	cbz	r0, 801368a <_printf_i+0x1f2>
 8013686:	1b40      	subs	r0, r0, r5
 8013688:	6060      	str	r0, [r4, #4]
 801368a:	6863      	ldr	r3, [r4, #4]
 801368c:	6123      	str	r3, [r4, #16]
 801368e:	2300      	movs	r3, #0
 8013690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013694:	e7a8      	b.n	80135e8 <_printf_i+0x150>
 8013696:	6923      	ldr	r3, [r4, #16]
 8013698:	462a      	mov	r2, r5
 801369a:	4649      	mov	r1, r9
 801369c:	4640      	mov	r0, r8
 801369e:	47d0      	blx	sl
 80136a0:	3001      	adds	r0, #1
 80136a2:	d0ab      	beq.n	80135fc <_printf_i+0x164>
 80136a4:	6823      	ldr	r3, [r4, #0]
 80136a6:	079b      	lsls	r3, r3, #30
 80136a8:	d413      	bmi.n	80136d2 <_printf_i+0x23a>
 80136aa:	68e0      	ldr	r0, [r4, #12]
 80136ac:	9b03      	ldr	r3, [sp, #12]
 80136ae:	4298      	cmp	r0, r3
 80136b0:	bfb8      	it	lt
 80136b2:	4618      	movlt	r0, r3
 80136b4:	e7a4      	b.n	8013600 <_printf_i+0x168>
 80136b6:	2301      	movs	r3, #1
 80136b8:	4632      	mov	r2, r6
 80136ba:	4649      	mov	r1, r9
 80136bc:	4640      	mov	r0, r8
 80136be:	47d0      	blx	sl
 80136c0:	3001      	adds	r0, #1
 80136c2:	d09b      	beq.n	80135fc <_printf_i+0x164>
 80136c4:	3501      	adds	r5, #1
 80136c6:	68e3      	ldr	r3, [r4, #12]
 80136c8:	9903      	ldr	r1, [sp, #12]
 80136ca:	1a5b      	subs	r3, r3, r1
 80136cc:	42ab      	cmp	r3, r5
 80136ce:	dcf2      	bgt.n	80136b6 <_printf_i+0x21e>
 80136d0:	e7eb      	b.n	80136aa <_printf_i+0x212>
 80136d2:	2500      	movs	r5, #0
 80136d4:	f104 0619 	add.w	r6, r4, #25
 80136d8:	e7f5      	b.n	80136c6 <_printf_i+0x22e>
 80136da:	bf00      	nop
 80136dc:	080143fd 	.word	0x080143fd
 80136e0:	0801440e 	.word	0x0801440e

080136e4 <_sbrk_r>:
 80136e4:	b538      	push	{r3, r4, r5, lr}
 80136e6:	4d06      	ldr	r5, [pc, #24]	; (8013700 <_sbrk_r+0x1c>)
 80136e8:	2300      	movs	r3, #0
 80136ea:	4604      	mov	r4, r0
 80136ec:	4608      	mov	r0, r1
 80136ee:	602b      	str	r3, [r5, #0]
 80136f0:	f000 f8b2 	bl	8013858 <_sbrk>
 80136f4:	1c43      	adds	r3, r0, #1
 80136f6:	d102      	bne.n	80136fe <_sbrk_r+0x1a>
 80136f8:	682b      	ldr	r3, [r5, #0]
 80136fa:	b103      	cbz	r3, 80136fe <_sbrk_r+0x1a>
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	bd38      	pop	{r3, r4, r5, pc}
 8013700:	20007cf8 	.word	0x20007cf8

08013704 <memmove>:
 8013704:	4288      	cmp	r0, r1
 8013706:	b510      	push	{r4, lr}
 8013708:	eb01 0402 	add.w	r4, r1, r2
 801370c:	d902      	bls.n	8013714 <memmove+0x10>
 801370e:	4284      	cmp	r4, r0
 8013710:	4623      	mov	r3, r4
 8013712:	d807      	bhi.n	8013724 <memmove+0x20>
 8013714:	1e43      	subs	r3, r0, #1
 8013716:	42a1      	cmp	r1, r4
 8013718:	d008      	beq.n	801372c <memmove+0x28>
 801371a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801371e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013722:	e7f8      	b.n	8013716 <memmove+0x12>
 8013724:	4402      	add	r2, r0
 8013726:	4601      	mov	r1, r0
 8013728:	428a      	cmp	r2, r1
 801372a:	d100      	bne.n	801372e <memmove+0x2a>
 801372c:	bd10      	pop	{r4, pc}
 801372e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013736:	e7f7      	b.n	8013728 <memmove+0x24>

08013738 <__malloc_lock>:
 8013738:	4801      	ldr	r0, [pc, #4]	; (8013740 <__malloc_lock+0x8>)
 801373a:	f7ff bc4d 	b.w	8012fd8 <__retarget_lock_acquire_recursive>
 801373e:	bf00      	nop
 8013740:	20007cec 	.word	0x20007cec

08013744 <__malloc_unlock>:
 8013744:	4801      	ldr	r0, [pc, #4]	; (801374c <__malloc_unlock+0x8>)
 8013746:	f7ff bc48 	b.w	8012fda <__retarget_lock_release_recursive>
 801374a:	bf00      	nop
 801374c:	20007cec 	.word	0x20007cec

08013750 <_free_r>:
 8013750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013752:	2900      	cmp	r1, #0
 8013754:	d044      	beq.n	80137e0 <_free_r+0x90>
 8013756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801375a:	9001      	str	r0, [sp, #4]
 801375c:	2b00      	cmp	r3, #0
 801375e:	f1a1 0404 	sub.w	r4, r1, #4
 8013762:	bfb8      	it	lt
 8013764:	18e4      	addlt	r4, r4, r3
 8013766:	f7ff ffe7 	bl	8013738 <__malloc_lock>
 801376a:	4a1e      	ldr	r2, [pc, #120]	; (80137e4 <_free_r+0x94>)
 801376c:	9801      	ldr	r0, [sp, #4]
 801376e:	6813      	ldr	r3, [r2, #0]
 8013770:	b933      	cbnz	r3, 8013780 <_free_r+0x30>
 8013772:	6063      	str	r3, [r4, #4]
 8013774:	6014      	str	r4, [r2, #0]
 8013776:	b003      	add	sp, #12
 8013778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801377c:	f7ff bfe2 	b.w	8013744 <__malloc_unlock>
 8013780:	42a3      	cmp	r3, r4
 8013782:	d908      	bls.n	8013796 <_free_r+0x46>
 8013784:	6825      	ldr	r5, [r4, #0]
 8013786:	1961      	adds	r1, r4, r5
 8013788:	428b      	cmp	r3, r1
 801378a:	bf01      	itttt	eq
 801378c:	6819      	ldreq	r1, [r3, #0]
 801378e:	685b      	ldreq	r3, [r3, #4]
 8013790:	1949      	addeq	r1, r1, r5
 8013792:	6021      	streq	r1, [r4, #0]
 8013794:	e7ed      	b.n	8013772 <_free_r+0x22>
 8013796:	461a      	mov	r2, r3
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	b10b      	cbz	r3, 80137a0 <_free_r+0x50>
 801379c:	42a3      	cmp	r3, r4
 801379e:	d9fa      	bls.n	8013796 <_free_r+0x46>
 80137a0:	6811      	ldr	r1, [r2, #0]
 80137a2:	1855      	adds	r5, r2, r1
 80137a4:	42a5      	cmp	r5, r4
 80137a6:	d10b      	bne.n	80137c0 <_free_r+0x70>
 80137a8:	6824      	ldr	r4, [r4, #0]
 80137aa:	4421      	add	r1, r4
 80137ac:	1854      	adds	r4, r2, r1
 80137ae:	42a3      	cmp	r3, r4
 80137b0:	6011      	str	r1, [r2, #0]
 80137b2:	d1e0      	bne.n	8013776 <_free_r+0x26>
 80137b4:	681c      	ldr	r4, [r3, #0]
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	6053      	str	r3, [r2, #4]
 80137ba:	4421      	add	r1, r4
 80137bc:	6011      	str	r1, [r2, #0]
 80137be:	e7da      	b.n	8013776 <_free_r+0x26>
 80137c0:	d902      	bls.n	80137c8 <_free_r+0x78>
 80137c2:	230c      	movs	r3, #12
 80137c4:	6003      	str	r3, [r0, #0]
 80137c6:	e7d6      	b.n	8013776 <_free_r+0x26>
 80137c8:	6825      	ldr	r5, [r4, #0]
 80137ca:	1961      	adds	r1, r4, r5
 80137cc:	428b      	cmp	r3, r1
 80137ce:	bf04      	itt	eq
 80137d0:	6819      	ldreq	r1, [r3, #0]
 80137d2:	685b      	ldreq	r3, [r3, #4]
 80137d4:	6063      	str	r3, [r4, #4]
 80137d6:	bf04      	itt	eq
 80137d8:	1949      	addeq	r1, r1, r5
 80137da:	6021      	streq	r1, [r4, #0]
 80137dc:	6054      	str	r4, [r2, #4]
 80137de:	e7ca      	b.n	8013776 <_free_r+0x26>
 80137e0:	b003      	add	sp, #12
 80137e2:	bd30      	pop	{r4, r5, pc}
 80137e4:	20007cf0 	.word	0x20007cf0

080137e8 <_realloc_r>:
 80137e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ec:	4680      	mov	r8, r0
 80137ee:	4614      	mov	r4, r2
 80137f0:	460e      	mov	r6, r1
 80137f2:	b921      	cbnz	r1, 80137fe <_realloc_r+0x16>
 80137f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137f8:	4611      	mov	r1, r2
 80137fa:	f7ff bc0f 	b.w	801301c <_malloc_r>
 80137fe:	b92a      	cbnz	r2, 801380c <_realloc_r+0x24>
 8013800:	f7ff ffa6 	bl	8013750 <_free_r>
 8013804:	4625      	mov	r5, r4
 8013806:	4628      	mov	r0, r5
 8013808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801380c:	f000 f81b 	bl	8013846 <_malloc_usable_size_r>
 8013810:	4284      	cmp	r4, r0
 8013812:	4607      	mov	r7, r0
 8013814:	d802      	bhi.n	801381c <_realloc_r+0x34>
 8013816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801381a:	d812      	bhi.n	8013842 <_realloc_r+0x5a>
 801381c:	4621      	mov	r1, r4
 801381e:	4640      	mov	r0, r8
 8013820:	f7ff fbfc 	bl	801301c <_malloc_r>
 8013824:	4605      	mov	r5, r0
 8013826:	2800      	cmp	r0, #0
 8013828:	d0ed      	beq.n	8013806 <_realloc_r+0x1e>
 801382a:	42bc      	cmp	r4, r7
 801382c:	4622      	mov	r2, r4
 801382e:	4631      	mov	r1, r6
 8013830:	bf28      	it	cs
 8013832:	463a      	movcs	r2, r7
 8013834:	f7ff fb7a 	bl	8012f2c <memcpy>
 8013838:	4631      	mov	r1, r6
 801383a:	4640      	mov	r0, r8
 801383c:	f7ff ff88 	bl	8013750 <_free_r>
 8013840:	e7e1      	b.n	8013806 <_realloc_r+0x1e>
 8013842:	4635      	mov	r5, r6
 8013844:	e7df      	b.n	8013806 <_realloc_r+0x1e>

08013846 <_malloc_usable_size_r>:
 8013846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801384a:	1f18      	subs	r0, r3, #4
 801384c:	2b00      	cmp	r3, #0
 801384e:	bfbc      	itt	lt
 8013850:	580b      	ldrlt	r3, [r1, r0]
 8013852:	18c0      	addlt	r0, r0, r3
 8013854:	4770      	bx	lr
	...

08013858 <_sbrk>:
 8013858:	4a04      	ldr	r2, [pc, #16]	; (801386c <_sbrk+0x14>)
 801385a:	6811      	ldr	r1, [r2, #0]
 801385c:	4603      	mov	r3, r0
 801385e:	b909      	cbnz	r1, 8013864 <_sbrk+0xc>
 8013860:	4903      	ldr	r1, [pc, #12]	; (8013870 <_sbrk+0x18>)
 8013862:	6011      	str	r1, [r2, #0]
 8013864:	6810      	ldr	r0, [r2, #0]
 8013866:	4403      	add	r3, r0
 8013868:	6013      	str	r3, [r2, #0]
 801386a:	4770      	bx	lr
 801386c:	20007cfc 	.word	0x20007cfc
 8013870:	20007d00 	.word	0x20007d00

08013874 <_init>:
 8013874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013876:	bf00      	nop
 8013878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801387a:	bc08      	pop	{r3}
 801387c:	469e      	mov	lr, r3
 801387e:	4770      	bx	lr

08013880 <_fini>:
 8013880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013882:	bf00      	nop
 8013884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013886:	bc08      	pop	{r3}
 8013888:	469e      	mov	lr, r3
 801388a:	4770      	bx	lr
