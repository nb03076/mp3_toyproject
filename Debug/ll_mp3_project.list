
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008160  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008450  08008450  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008458  08008458  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00005318  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000532c  2000532c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fdc1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c43  00000000  00000000  0003fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ee8  00000000  00000000  00044a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c90  00000000  00000000  00046930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b79  00000000  00000000  000485c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023ee2  00000000  00000000  00072139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107a8d  00000000  00000000  0009601b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019daa8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008134  00000000  00000000  0019daf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      000001b9  00000000  00000000  001a5c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080082f8 	.word	0x080082f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080082f8 	.word	0x080082f8

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20002ed0 	.word	0x20002ed0

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000294:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <HAL_Init+0x40>)
 8000592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <HAL_Init+0x40>)
 800059e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_Init+0x40>)
 80005aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f8cc 	bl	800074e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b6:	2005      	movs	r0, #5
 80005b8:	f007 fa36 	bl	8007a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005bc:	f007 fa08 	bl	80079d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023c00 	.word	0x40023c00

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000030 	.word	0x20000030

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff4c 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000776:	f7ff ff61 	bl	800063c <__NVIC_GetPriorityGrouping>
 800077a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	68b9      	ldr	r1, [r7, #8]
 8000780:	6978      	ldr	r0, [r7, #20]
 8000782:	f7ff ffb1 	bl	80006e8 <NVIC_EncodePriority>
 8000786:	4602      	mov	r2, r0
 8000788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff80 	bl	8000694 <__NVIC_SetPriority>
}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff54 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d004      	beq.n	80007d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00c      	b.n	80007f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2205      	movs	r2, #5
 80007da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f022 0201 	bic.w	r2, r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000808:	4b8e      	ldr	r3, [pc, #568]	; (8000a44 <HAL_DMA_IRQHandler+0x248>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a8e      	ldr	r2, [pc, #568]	; (8000a48 <HAL_DMA_IRQHandler+0x24c>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0a9b      	lsrs	r3, r3, #10
 8000814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000826:	2208      	movs	r2, #8
 8000828:	409a      	lsls	r2, r3
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	4013      	ands	r3, r2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d01a      	beq.n	8000868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	2b00      	cmp	r3, #0
 800083e:	d013      	beq.n	8000868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f022 0204 	bic.w	r2, r2, #4
 800084e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000854:	2208      	movs	r2, #8
 8000856:	409a      	lsls	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000860:	f043 0201 	orr.w	r2, r3, #1
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800086c:	2201      	movs	r2, #1
 800086e:	409a      	lsls	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d012      	beq.n	800089e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00b      	beq.n	800089e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800088a:	2201      	movs	r2, #1
 800088c:	409a      	lsls	r2, r3
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000896:	f043 0202 	orr.w	r2, r3, #2
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008a2:	2204      	movs	r2, #4
 80008a4:	409a      	lsls	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4013      	ands	r3, r2
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d012      	beq.n	80008d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00b      	beq.n	80008d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008c0:	2204      	movs	r2, #4
 80008c2:	409a      	lsls	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008cc:	f043 0204 	orr.w	r2, r3, #4
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008d8:	2210      	movs	r2, #16
 80008da:	409a      	lsls	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d043      	beq.n	800096c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d03c      	beq.n	800096c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f6:	2210      	movs	r2, #16
 80008f8:	409a      	lsls	r2, r3
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000908:	2b00      	cmp	r3, #0
 800090a:	d018      	beq.n	800093e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d108      	bne.n	800092c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	2b00      	cmp	r3, #0
 8000920:	d024      	beq.n	800096c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	4798      	blx	r3
 800092a:	e01f      	b.n	800096c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01b      	beq.n	800096c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	4798      	blx	r3
 800093c:	e016      	b.n	800096c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000948:	2b00      	cmp	r3, #0
 800094a:	d107      	bne.n	800095c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f022 0208 	bic.w	r2, r2, #8
 800095a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000970:	2220      	movs	r2, #32
 8000972:	409a      	lsls	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4013      	ands	r3, r2
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 808f 	beq.w	8000a9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 8087 	beq.w	8000a9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000992:	2220      	movs	r2, #32
 8000994:	409a      	lsls	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d136      	bne.n	8000a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0216 	bic.w	r2, r2, #22
 80009b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	695a      	ldr	r2, [r3, #20]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d103      	bne.n	80009d6 <HAL_DMA_IRQHandler+0x1da>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d007      	beq.n	80009e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0208 	bic.w	r2, r2, #8
 80009e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ea:	223f      	movs	r2, #63	; 0x3f
 80009ec:	409a      	lsls	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2201      	movs	r2, #1
 80009f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d07e      	beq.n	8000b08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	4798      	blx	r3
        }
        return;
 8000a12:	e079      	b.n	8000b08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d01d      	beq.n	8000a5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10d      	bne.n	8000a4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d031      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	4798      	blx	r3
 8000a40:	e02c      	b.n	8000a9c <HAL_DMA_IRQHandler+0x2a0>
 8000a42:	bf00      	nop
 8000a44:	20000010 	.word	0x20000010
 8000a48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d023      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	4798      	blx	r3
 8000a5c:	e01e      	b.n	8000a9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10f      	bne.n	8000a8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0210 	bic.w	r2, r2, #16
 8000a7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d032      	beq.n	8000b0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d022      	beq.n	8000af6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f022 0201 	bic.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d307      	bcc.n	8000ae4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f2      	bne.n	8000ac8 <HAL_DMA_IRQHandler+0x2cc>
 8000ae2:	e000      	b.n	8000ae6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000ae4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	4798      	blx	r3
 8000b06:	e000      	b.n	8000b0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8000b08:	bf00      	nop
    }
  }
}
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000010 	.word	0x20000010

08000b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b2c:	f7ff fff0 	bl	8000b10 <HAL_RCC_GetHCLKFreq>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	0a9b      	lsrs	r3, r3, #10
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	4903      	ldr	r1, [pc, #12]	; (8000b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b3e:	5ccb      	ldrb	r3, [r1, r3]
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	08008440 	.word	0x08008440

08000b50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_RCC_GetClockConfig+0x5c>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f003 0203 	and.w	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_RCC_GetClockConfig+0x5c>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_RCC_GetClockConfig+0x5c>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_RCC_GetClockConfig+0x5c>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <HAL_RCC_GetClockConfig+0x60>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 020f 	and.w	r2, r3, #15
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d008      	beq.n	8000be2 <HAL_SD_IRQHandler+0x2e>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 fa30 	bl	8001040 <SD_Read_IT>
 8000be0:	e165      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 808f 	beq.w	8000d10 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8000c0a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8000c0e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d039      	beq.n	8000c9e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <HAL_SD_IRQHandler+0x8a>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0320 	and.w	r3, r3, #32
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d011      	beq.n	8000c62 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fef2 	bl	8001a2c <SDMMC_CmdStopTransfer>
 8000c48:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d008      	beq.n	8000c62 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f92f 	bl	8000ec0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f240 523a 	movw	r2, #1338	; 0x53a
 8000c6a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d104      	bne.n	8000c8e <HAL_SD_IRQHandler+0xda>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f001 fb1a 	bl	80022c8 <HAL_SD_RxCpltCallback>
 8000c94:	e10b      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f001 fb0c 	bl	80022b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8000c9c:	e107      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 8102 	beq.w	8000eae <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f003 0320 	and.w	r3, r3, #32
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d011      	beq.n	8000cd8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 feb7 	bl	8001a2c <SDMMC_CmdStopTransfer>
 8000cbe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d008      	beq.n	8000cd8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f8f4 	bl	8000ec0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 80e5 	bne.w	8000eae <HAL_SD_IRQHandler+0x2fa>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80df 	bne.w	8000eae <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0208 	bic.w	r2, r2, #8
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f001 fad3 	bl	80022b4 <HAL_SD_TxCpltCallback>
}
 8000d0e:	e0ce      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <HAL_SD_IRQHandler+0x17c>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f9da 	bl	80010e2 <SD_Write_IT>
 8000d2e:	e0be      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d36:	f240 233a 	movw	r3, #570	; 0x23a
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80b6 	beq.w	8000eae <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d54:	f043 0202 	orr.w	r2, r3, #2
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6e:	f043 0208 	orr.w	r2, r3, #8
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7c:	f003 0320 	and.w	r3, r3, #32
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d005      	beq.n	8000d90 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d88:	f043 0220 	orr.w	r2, r3, #32
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da2:	f043 0210 	orr.w	r2, r3, #16
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dbc:	f043 0208 	orr.w	r2, r3, #8
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f240 723a 	movw	r2, #1850	; 0x73a
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8000ddc:	f023 0302 	bic.w	r3, r3, #2
 8000de0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fe20 	bl	8001a2c <SDMMC_CmdStopTransfer>
 8000dec:	4602      	mov	r2, r0
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00a      	beq.n	8000e18 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f855 	bl	8000ec0 <HAL_SD_ErrorCallback>
}
 8000e16:	e04a      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d045      	beq.n	8000eae <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d104      	bne.n	8000e36 <HAL_SD_IRQHandler+0x282>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d011      	beq.n	8000e5a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_SD_IRQHandler+0x304>)
 8000e3c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fcb8 	bl	80007b8 <HAL_DMA_Abort_IT>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d02f      	beq.n	8000eae <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f85e 	bl	8000f14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8000e58:	e029      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d104      	bne.n	8000e6e <HAL_SD_IRQHandler+0x2ba>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d011      	beq.n	8000e92 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_SD_IRQHandler+0x308>)
 8000e74:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fc9c 	bl	80007b8 <HAL_DMA_Abort_IT>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d013      	beq.n	8000eae <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f879 	bl	8000f82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8000e90:	e00d      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f001 f9fa 	bl	80022a0 <HAL_SD_AbortCallback>
}
 8000eac:	e7ff      	b.n	8000eae <HAL_SD_IRQHandler+0x2fa>
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08000f15 	.word	0x08000f15
 8000ebc:	08000f83 	.word	0x08000f83

08000ec0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f882 	bl	8000ff0 <SD_SendStatus>
 8000eec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8000f0a:	693b      	ldr	r3, [r7, #16]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f240 523a 	movw	r2, #1338	; 0x53a
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff ffd1 	bl	8000ed4 <HAL_SD_GetCardState>
 8000f32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b06      	cmp	r3, #6
 8000f46:	d002      	beq.n	8000f4e <SD_DMATxAbort+0x3a>
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d10a      	bne.n	8000f64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fd6a 	bl	8001a2c <SDMMC_CmdStopTransfer>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d103      	bne.n	8000f74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f001 f997 	bl	80022a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8000f72:	e002      	b.n	8000f7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff ffa3 	bl	8000ec0 <HAL_SD_ErrorCallback>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f240 523a 	movw	r2, #1338	; 0x53a
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f7ff ff9a 	bl	8000ed4 <HAL_SD_GetCardState>
 8000fa0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d002      	beq.n	8000fbc <SD_DMARxAbort+0x3a>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d10a      	bne.n	8000fd2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fd33 	bl	8001a2c <SDMMC_CmdStopTransfer>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d103      	bne.n	8000fe2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f001 f960 	bl	80022a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8000fe0:	e002      	b.n	8000fe8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ff6c 	bl	8000ec0 <HAL_SD_ErrorCallback>
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8001000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001004:	e018      	b.n	8001038 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f000 fd2c 	bl	8001a70 <SDMMC_CmdSendStatus>
 8001018:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SD_SendStatus+0x34>
  {
    return errorstate;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	e009      	b.n	8001038 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fceb 	bl	8001a06 <SDIO_GetResponse>
 8001030:	4602      	mov	r2, r0
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d03f      	beq.n	80010da <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e033      	b.n	80010c8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fc79 	bl	800195c <SDIO_ReadFIFO>
 800106a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	701a      	strb	r2, [r3, #0]
      tmp++;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	3b01      	subs	r3, #1
 800107e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b2da      	uxtb	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	701a      	strb	r2, [r3, #0]
      tmp++;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	3b01      	subs	r3, #1
 8001094:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	b2da      	uxtb	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	0e1b      	lsrs	r3, r3, #24
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3b01      	subs	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d9c8      	bls.n	8001060 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d043      	beq.n	8001184 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e037      	b.n	8001172 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	60bb      	str	r3, [r7, #8]
      tmp++;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	3b01      	subs	r3, #1
 8001112:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	021a      	lsls	r2, r3, #8
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4313      	orrs	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	3b01      	subs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4313      	orrs	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
      tmp++;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3b01      	subs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	061a      	lsls	r2, r3, #24
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4313      	orrs	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3b01      	subs	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f107 0208 	add.w	r2, r7, #8
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fc05 	bl	8001976 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b07      	cmp	r3, #7
 8001176:	d9c4      	bls.n	8001102 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e041      	b.n	8001222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f839 	bl	800122a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2202      	movs	r2, #2
 80011bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3304      	adds	r3, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f000 f9d8 	bl	8001580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d001      	beq.n	8001258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e04e      	b.n	80012f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a23      	ldr	r2, [pc, #140]	; (8001304 <HAL_TIM_Base_Start_IT+0xc4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d022      	beq.n	80012c0 <HAL_TIM_Base_Start_IT+0x80>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001282:	d01d      	beq.n	80012c0 <HAL_TIM_Base_Start_IT+0x80>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_TIM_Base_Start_IT+0xc8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d018      	beq.n	80012c0 <HAL_TIM_Base_Start_IT+0x80>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_TIM_Base_Start_IT+0xcc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d013      	beq.n	80012c0 <HAL_TIM_Base_Start_IT+0x80>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_TIM_Base_Start_IT+0xd0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00e      	beq.n	80012c0 <HAL_TIM_Base_Start_IT+0x80>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_TIM_Base_Start_IT+0xd4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d009      	beq.n	80012c0 <HAL_TIM_Base_Start_IT+0x80>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_TIM_Base_Start_IT+0xd8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d004      	beq.n	80012c0 <HAL_TIM_Base_Start_IT+0x80>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_TIM_Base_Start_IT+0xdc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d111      	bne.n	80012e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d010      	beq.n	80012f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0201 	orr.w	r2, r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012e2:	e007      	b.n	80012f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40010000 	.word	0x40010000
 8001308:	40000400 	.word	0x40000400
 800130c:	40000800 	.word	0x40000800
 8001310:	40000c00 	.word	0x40000c00
 8001314:	40010400 	.word	0x40010400
 8001318:	40014000 	.word	0x40014000
 800131c:	40001800 	.word	0x40001800

08001320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d122      	bne.n	800137c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b02      	cmp	r3, #2
 8001342:	d11b      	bne.n	800137c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f06f 0202 	mvn.w	r2, #2
 800134c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f8ee 	bl	8001544 <HAL_TIM_IC_CaptureCallback>
 8001368:	e005      	b.n	8001376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f8e0 	bl	8001530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8f1 	bl	8001558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b04      	cmp	r3, #4
 8001388:	d122      	bne.n	80013d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b04      	cmp	r3, #4
 8001396:	d11b      	bne.n	80013d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f06f 0204 	mvn.w	r2, #4
 80013a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2202      	movs	r2, #2
 80013a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f8c4 	bl	8001544 <HAL_TIM_IC_CaptureCallback>
 80013bc:	e005      	b.n	80013ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8b6 	bl	8001530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f8c7 	bl	8001558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d122      	bne.n	8001424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d11b      	bne.n	8001424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f06f 0208 	mvn.w	r2, #8
 80013f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2204      	movs	r2, #4
 80013fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f89a 	bl	8001544 <HAL_TIM_IC_CaptureCallback>
 8001410:	e005      	b.n	800141e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f88c 	bl	8001530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f89d 	bl	8001558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b10      	cmp	r3, #16
 8001430:	d122      	bne.n	8001478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b10      	cmp	r3, #16
 800143e:	d11b      	bne.n	8001478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f06f 0210 	mvn.w	r2, #16
 8001448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2208      	movs	r2, #8
 800144e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f870 	bl	8001544 <HAL_TIM_IC_CaptureCallback>
 8001464:	e005      	b.n	8001472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f862 	bl	8001530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f873 	bl	8001558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10e      	bne.n	80014a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d107      	bne.n	80014a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f06f 0201 	mvn.w	r2, #1
 800149c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f005 ffb6 	bl	8007410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	2b80      	cmp	r3, #128	; 0x80
 80014b0:	d10e      	bne.n	80014d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	2b80      	cmp	r3, #128	; 0x80
 80014be:	d107      	bne.n	80014d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f902 	bl	80016d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	2b40      	cmp	r3, #64	; 0x40
 80014dc:	d10e      	bne.n	80014fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e8:	2b40      	cmp	r3, #64	; 0x40
 80014ea:	d107      	bne.n	80014fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80014f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f838 	bl	800156c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	2b20      	cmp	r3, #32
 8001508:	d10e      	bne.n	8001528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	2b20      	cmp	r3, #32
 8001516:	d107      	bne.n	8001528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f06f 0220 	mvn.w	r2, #32
 8001520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8cc 	bl	80016c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a40      	ldr	r2, [pc, #256]	; (8001694 <TIM_Base_SetConfig+0x114>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d013      	beq.n	80015c0 <TIM_Base_SetConfig+0x40>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159e:	d00f      	beq.n	80015c0 <TIM_Base_SetConfig+0x40>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <TIM_Base_SetConfig+0x118>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00b      	beq.n	80015c0 <TIM_Base_SetConfig+0x40>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3c      	ldr	r2, [pc, #240]	; (800169c <TIM_Base_SetConfig+0x11c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <TIM_Base_SetConfig+0x40>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3b      	ldr	r2, [pc, #236]	; (80016a0 <TIM_Base_SetConfig+0x120>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d003      	beq.n	80015c0 <TIM_Base_SetConfig+0x40>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <TIM_Base_SetConfig+0x124>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d108      	bne.n	80015d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <TIM_Base_SetConfig+0x114>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d02b      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e0:	d027      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a2c      	ldr	r2, [pc, #176]	; (8001698 <TIM_Base_SetConfig+0x118>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d023      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a2b      	ldr	r2, [pc, #172]	; (800169c <TIM_Base_SetConfig+0x11c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <TIM_Base_SetConfig+0x120>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01b      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <TIM_Base_SetConfig+0x124>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d017      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <TIM_Base_SetConfig+0x128>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <TIM_Base_SetConfig+0x12c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00f      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <TIM_Base_SetConfig+0x130>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00b      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <TIM_Base_SetConfig+0x134>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <TIM_Base_SetConfig+0x138>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d003      	beq.n	8001632 <TIM_Base_SetConfig+0xb2>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <TIM_Base_SetConfig+0x13c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d108      	bne.n	8001644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <TIM_Base_SetConfig+0x114>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d003      	beq.n	8001678 <TIM_Base_SetConfig+0xf8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <TIM_Base_SetConfig+0x124>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d103      	bne.n	8001680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	615a      	str	r2, [r3, #20]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40010000 	.word	0x40010000
 8001698:	40000400 	.word	0x40000400
 800169c:	40000800 	.word	0x40000800
 80016a0:	40000c00 	.word	0x40000c00
 80016a4:	40010400 	.word	0x40010400
 80016a8:	40014000 	.word	0x40014000
 80016ac:	40014400 	.word	0x40014400
 80016b0:	40014800 	.word	0x40014800
 80016b4:	40001800 	.word	0x40001800
 80016b8:	40001c00 	.word	0x40001c00
 80016bc:	40002000 	.word	0x40002000

080016c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <LL_RCC_GetSysClkSource+0x18>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <LL_RCC_GetAHBPrescaler+0x18>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <LL_RCC_PLL_GetMainSource+0x18>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <LL_RCC_PLL_GetN+0x18>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	099b      	lsrs	r3, r3, #6
 800177e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40023800 	.word	0x40023800

08001790 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <LL_RCC_PLL_GetP+0x18>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <LL_RCC_PLL_GetDivider+0x18>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80017d0:	f000 f820 	bl	8001814 <RCC_GetSystemClockFreq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f840 	bl	8001864 <RCC_GetHCLKClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f84e 	bl	8001890 <RCC_GetPCLK1ClockFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f85a 	bl	80018b8 <RCC_GetPCLK2ClockFreq>
 8001804:	4602      	mov	r2, r0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60da      	str	r2, [r3, #12]
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800181e:	f7ff ff63 	bl	80016e8 <LL_RCC_GetSysClkSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b08      	cmp	r3, #8
 8001826:	d00c      	beq.n	8001842 <RCC_GetSystemClockFreq+0x2e>
 8001828:	2b08      	cmp	r3, #8
 800182a:	d80f      	bhi.n	800184c <RCC_GetSystemClockFreq+0x38>
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <RCC_GetSystemClockFreq+0x22>
 8001830:	2b04      	cmp	r3, #4
 8001832:	d003      	beq.n	800183c <RCC_GetSystemClockFreq+0x28>
 8001834:	e00a      	b.n	800184c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <RCC_GetSystemClockFreq+0x48>)
 8001838:	607b      	str	r3, [r7, #4]
      break;
 800183a:	e00a      	b.n	8001852 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <RCC_GetSystemClockFreq+0x4c>)
 800183e:	607b      	str	r3, [r7, #4]
      break;
 8001840:	e007      	b.n	8001852 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001842:	2008      	movs	r0, #8
 8001844:	f000 f84c 	bl	80018e0 <RCC_PLL_GetFreqDomain_SYS>
 8001848:	6078      	str	r0, [r7, #4]
      break;
 800184a:	e002      	b.n	8001852 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <RCC_GetSystemClockFreq+0x48>)
 800184e:	607b      	str	r3, [r7, #4]
      break;
 8001850:	bf00      	nop
  }

  return frequency;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	00f42400 	.word	0x00f42400
 8001860:	017d7840 	.word	0x017d7840

08001864 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800186c:	f7ff ff4a 	bl	8001704 <LL_RCC_GetAHBPrescaler>
 8001870:	4603      	mov	r3, r0
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <RCC_GetHCLKClockFreq+0x28>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	461a      	mov	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	40d3      	lsrs	r3, r2
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08008430 	.word	0x08008430

08001890 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001898:	f7ff ff42 	bl	8001720 <LL_RCC_GetAPB1Prescaler>
 800189c:	4603      	mov	r3, r0
 800189e:	0a9b      	lsrs	r3, r3, #10
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	40d3      	lsrs	r3, r2
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08008440 	.word	0x08008440

080018b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80018c0:	f7ff ff3c 	bl	800173c <LL_RCC_GetAPB2Prescaler>
 80018c4:	4603      	mov	r3, r0
 80018c6:	0b5b      	lsrs	r3, r3, #13
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <RCC_GetPCLK2ClockFreq+0x24>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	40d3      	lsrs	r3, r2
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	08008440 	.word	0x08008440

080018e0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80018f4:	f7ff ff30 	bl	8001758 <LL_RCC_PLL_GetMainSource>
 80018f8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001906:	d003      	beq.n	8001910 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001908:	e005      	b.n	8001916 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800190c:	617b      	str	r3, [r7, #20]
      break;
 800190e:	e005      	b.n	800191c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001912:	617b      	str	r3, [r7, #20]
      break;
 8001914:	e002      	b.n	800191c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001918:	617b      	str	r3, [r7, #20]
      break;
 800191a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b08      	cmp	r3, #8
 8001920:	d113      	bne.n	800194a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001922:	f7ff ff43 	bl	80017ac <LL_RCC_PLL_GetDivider>
 8001926:	4602      	mov	r2, r0
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fbb3 f4f2 	udiv	r4, r3, r2
 800192e:	f7ff ff21 	bl	8001774 <LL_RCC_PLL_GetN>
 8001932:	4603      	mov	r3, r0
 8001934:	fb03 f404 	mul.w	r4, r3, r4
 8001938:	f7ff ff2a 	bl	8001790 <LL_RCC_PLL_GetP>
 800193c:	4603      	mov	r3, r0
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	3301      	adds	r3, #1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fbb4 f3f3 	udiv	r3, r4, r3
 8001948:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800194a:	693b      	ldr	r3, [r7, #16]
}
 800194c:	4618      	mov	r0, r3
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	00f42400 	.word	0x00f42400
 8001958:	017d7840 	.word	0x017d7840

0800195c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80019b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80019bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80019c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80019d2:	f023 030f 	bic.w	r3, r3, #15
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3314      	adds	r3, #20
 8001a14:	461a      	mov	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
}  
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001a3c:	2340      	movs	r3, #64	; 0x40
 8001a3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffa1 	bl	8001998 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <SDMMC_CmdStopTransfer+0x40>)
 8001a58:	210c      	movs	r1, #12
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f82a 	bl	8001ab4 <SDMMC_GetCmdResp1>
 8001a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8001a62:	69fb      	ldr	r3, [r7, #28]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	05f5e100 	.word	0x05f5e100

08001a70 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8001a7e:	230d      	movs	r3, #13
 8001a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001a82:	2340      	movs	r3, #64	; 0x40
 8001a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff7e 	bl	8001998 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	210d      	movs	r1, #13
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f806 	bl	8001ab4 <SDMMC_GetCmdResp1>
 8001aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	460b      	mov	r3, r1
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001ac2:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <SDMMC_GetCmdResp1+0x1d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a70      	ldr	r2, [pc, #448]	; (8001c88 <SDMMC_GetCmdResp1+0x1d4>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	0a5a      	lsrs	r2, r3, #9
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	61fa      	str	r2, [r7, #28]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8001ae0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ae4:	e0c9      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0ef      	beq.n	8001ad6 <SDMMC_GetCmdResp1+0x22>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1ea      	bne.n	8001ad6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8001b12:	2304      	movs	r3, #4
 8001b14:	e0b1      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0a6      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	22c5      	movs	r2, #197	; 0xc5
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f7ff ff5a 	bl	80019ec <SDIO_GetCommandResponse>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d001      	beq.n	8001b46 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e099      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8001b46:	2100      	movs	r1, #0
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff ff5c 	bl	8001a06 <SDIO_GetResponse>
 8001b4e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <SDMMC_GetCmdResp1+0x1d8>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e08d      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da02      	bge.n	8001b6a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8001b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b68:	e087      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	e080      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	e079      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8001b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b94:	e071      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8001ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba4:	e069      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8001bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb4:	e061      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8001bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bc4:	e059      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	e051      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8001be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be4:	e049      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8001bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bf4:	e041      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8001c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c04:	e039      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8001c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c14:	e031      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8001c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c24:	e029      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8001c30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c34:	e021      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8001c40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c44:	e019      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8001c50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c54:	e011      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8001c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c64:	e009      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8001c70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c74:	e001      	b.n	8001c7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8001c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000010 	.word	0x20000010
 8001c88:	10624dd3 	.word	0x10624dd3
 8001c8c:	fdffe008 	.word	0xfdffe008

08001c90 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	615a      	str	r2, [r3, #20]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d08:	b0c0      	sub	sp, #256	; 0x100
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d10:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001d14:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001d18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d24:	f040 810c 	bne.w	8001f40 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001d28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	462b      	mov	r3, r5
 8001d3e:	1891      	adds	r1, r2, r2
 8001d40:	6639      	str	r1, [r7, #96]	; 0x60
 8001d42:	415b      	adcs	r3, r3
 8001d44:	667b      	str	r3, [r7, #100]	; 0x64
 8001d46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	eb12 0801 	adds.w	r8, r2, r1
 8001d50:	4629      	mov	r1, r5
 8001d52:	eb43 0901 	adc.w	r9, r3, r1
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6a:	4690      	mov	r8, r2
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	4623      	mov	r3, r4
 8001d70:	eb18 0303 	adds.w	r3, r8, r3
 8001d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d78:	462b      	mov	r3, r5
 8001d7a:	eb49 0303 	adc.w	r3, r9, r3
 8001d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d86:	2200      	movs	r2, #0
 8001d88:	469a      	mov	sl, r3
 8001d8a:	4693      	mov	fp, r2
 8001d8c:	eb1a 030a 	adds.w	r3, sl, sl
 8001d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d92:	eb4b 030b 	adc.w	r3, fp, fp
 8001d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001da0:	f7fe fa70 	bl	8000284 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <LL_USART_SetBaudRate+0x238>)
 8001daa:	fba3 2302 	umull	r2, r3, r3, r2
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001dc0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001dc4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001dc8:	4642      	mov	r2, r8
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1891      	adds	r1, r2, r2
 8001dce:	6539      	str	r1, [r7, #80]	; 0x50
 8001dd0:	415b      	adcs	r3, r3
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8001dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001dd8:	4641      	mov	r1, r8
 8001dda:	1851      	adds	r1, r2, r1
 8001ddc:	64b9      	str	r1, [r7, #72]	; 0x48
 8001dde:	4649      	mov	r1, r9
 8001de0:	414b      	adcs	r3, r1
 8001de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8001df0:	4659      	mov	r1, fp
 8001df2:	00cb      	lsls	r3, r1, #3
 8001df4:	4651      	mov	r1, sl
 8001df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dfa:	4651      	mov	r1, sl
 8001dfc:	00ca      	lsls	r2, r1, #3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	4642      	mov	r2, r8
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e0c:	464b      	mov	r3, r9
 8001e0e:	460a      	mov	r2, r1
 8001e10:	eb42 0303 	adc.w	r3, r2, r3
 8001e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e22:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001e26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	18db      	adds	r3, r3, r3
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e30:	4613      	mov	r3, r2
 8001e32:	eb42 0303 	adc.w	r3, r2, r3
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
 8001e38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e3c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001e40:	f7fe fa20 	bl	8000284 <__aeabi_uldivmod>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <LL_USART_SetBaudRate+0x238>)
 8001e4c:	fba3 2301 	umull	r2, r3, r3, r1
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	2264      	movs	r2, #100	; 0x64
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	1acb      	subs	r3, r1, r3
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <LL_USART_SetBaudRate+0x238>)
 8001e62:	fba3 2302 	umull	r2, r3, r3, r2
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4423      	add	r3, r4
 8001e76:	b29c      	uxth	r4, r3
 8001e78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e82:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e86:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8001e8a:	4642      	mov	r2, r8
 8001e8c:	464b      	mov	r3, r9
 8001e8e:	1891      	adds	r1, r2, r2
 8001e90:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e92:	415b      	adcs	r3, r3
 8001e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e9a:	4641      	mov	r1, r8
 8001e9c:	1851      	adds	r1, r2, r1
 8001e9e:	6339      	str	r1, [r7, #48]	; 0x30
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	414b      	adcs	r3, r1
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001eb2:	4659      	mov	r1, fp
 8001eb4:	00cb      	lsls	r3, r1, #3
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ebc:	4651      	mov	r1, sl
 8001ebe:	00ca      	lsls	r2, r1, #3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4642      	mov	r2, r8
 8001ec8:	189b      	adds	r3, r3, r2
 8001eca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ece:	464b      	mov	r3, r9
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	eb42 0303 	adc.w	r3, r2, r3
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ee4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001ee8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8001eec:	460b      	mov	r3, r1
 8001eee:	18db      	adds	r3, r3, r3
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	eb42 0303 	adc.w	r3, r2, r3
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001efe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001f02:	f7fe f9bf 	bl	8000284 <__aeabi_uldivmod>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <LL_USART_SetBaudRate+0x238>)
 8001f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f10:	095b      	lsrs	r3, r3, #5
 8001f12:	2164      	movs	r1, #100	; 0x64
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	3332      	adds	r3, #50	; 0x32
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <LL_USART_SetBaudRate+0x238>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4423      	add	r3, r4
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001f3a:	e107      	b.n	800214c <LL_USART_SetBaudRate+0x448>
 8001f3c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001f40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f4a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f4e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001f52:	4642      	mov	r2, r8
 8001f54:	464b      	mov	r3, r9
 8001f56:	1891      	adds	r1, r2, r2
 8001f58:	6239      	str	r1, [r7, #32]
 8001f5a:	415b      	adcs	r3, r3
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f62:	4641      	mov	r1, r8
 8001f64:	1854      	adds	r4, r2, r1
 8001f66:	4649      	mov	r1, r9
 8001f68:	eb43 0501 	adc.w	r5, r3, r1
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	00eb      	lsls	r3, r5, #3
 8001f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f7a:	00e2      	lsls	r2, r4, #3
 8001f7c:	4614      	mov	r4, r2
 8001f7e:	461d      	mov	r5, r3
 8001f80:	4643      	mov	r3, r8
 8001f82:	18e3      	adds	r3, r4, r3
 8001f84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f88:	464b      	mov	r3, r9
 8001f8a:	eb45 0303 	adc.w	r3, r5, r3
 8001f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001fac:	4629      	mov	r1, r5
 8001fae:	008b      	lsls	r3, r1, #2
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	008a      	lsls	r2, r1, #2
 8001fba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001fbe:	f7fe f961 	bl	8000284 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b64      	ldr	r3, [pc, #400]	; (8002158 <LL_USART_SetBaudRate+0x454>)
 8001fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	b29c      	uxth	r4, r3
 8001fd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fe2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	464b      	mov	r3, r9
 8001fea:	1891      	adds	r1, r2, r2
 8001fec:	61b9      	str	r1, [r7, #24]
 8001fee:	415b      	adcs	r3, r3
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff6:	4641      	mov	r1, r8
 8001ff8:	1851      	adds	r1, r2, r1
 8001ffa:	6139      	str	r1, [r7, #16]
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	414b      	adcs	r3, r1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800200e:	4659      	mov	r1, fp
 8002010:	00cb      	lsls	r3, r1, #3
 8002012:	4651      	mov	r1, sl
 8002014:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002018:	4651      	mov	r1, sl
 800201a:	00ca      	lsls	r2, r1, #3
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	4603      	mov	r3, r0
 8002022:	4642      	mov	r2, r8
 8002024:	189b      	adds	r3, r3, r2
 8002026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800202a:	464b      	mov	r3, r9
 800202c:	460a      	mov	r2, r1
 800202e:	eb42 0303 	adc.w	r3, r2, r3
 8002032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002036:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800203a:	2200      	movs	r2, #0
 800203c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002040:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002050:	4649      	mov	r1, r9
 8002052:	008b      	lsls	r3, r1, #2
 8002054:	4641      	mov	r1, r8
 8002056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800205a:	4641      	mov	r1, r8
 800205c:	008a      	lsls	r2, r1, #2
 800205e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002062:	f7fe f90f 	bl	8000284 <__aeabi_uldivmod>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <LL_USART_SetBaudRate+0x454>)
 800206c:	fba3 1302 	umull	r1, r3, r3, r2
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	2164      	movs	r1, #100	; 0x64
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	3332      	adds	r3, #50	; 0x32
 800207e:	4a36      	ldr	r2, [pc, #216]	; (8002158 <LL_USART_SetBaudRate+0x454>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	b29b      	uxth	r3, r3
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	b29b      	uxth	r3, r3
 800208e:	4423      	add	r3, r4
 8002090:	b29c      	uxth	r4, r3
 8002092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002096:	2200      	movs	r2, #0
 8002098:	67bb      	str	r3, [r7, #120]	; 0x78
 800209a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800209c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80020a0:	4642      	mov	r2, r8
 80020a2:	464b      	mov	r3, r9
 80020a4:	1891      	adds	r1, r2, r2
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	415b      	adcs	r3, r3
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b0:	4641      	mov	r1, r8
 80020b2:	1851      	adds	r1, r2, r1
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	4649      	mov	r1, r9
 80020b8:	414b      	adcs	r3, r1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020c8:	4659      	mov	r1, fp
 80020ca:	00cb      	lsls	r3, r1, #3
 80020cc:	4651      	mov	r1, sl
 80020ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020d2:	4651      	mov	r1, sl
 80020d4:	00ca      	lsls	r2, r1, #3
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	4642      	mov	r2, r8
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	673b      	str	r3, [r7, #112]	; 0x70
 80020e2:	464b      	mov	r3, r9
 80020e4:	460a      	mov	r2, r1
 80020e6:	eb42 0303 	adc.w	r3, r2, r3
 80020ea:	677b      	str	r3, [r7, #116]	; 0x74
 80020ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80020f0:	2200      	movs	r2, #0
 80020f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80020f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002102:	4649      	mov	r1, r9
 8002104:	008b      	lsls	r3, r1, #2
 8002106:	4641      	mov	r1, r8
 8002108:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800210c:	4641      	mov	r1, r8
 800210e:	008a      	lsls	r2, r1, #2
 8002110:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002114:	f7fe f8b6 	bl	8000284 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <LL_USART_SetBaudRate+0x454>)
 800211e:	fba3 1302 	umull	r1, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2164      	movs	r1, #100	; 0x64
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	3332      	adds	r3, #50	; 0x32
 8002130:	4a09      	ldr	r2, [pc, #36]	; (8002158 <LL_USART_SetBaudRate+0x454>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	b29b      	uxth	r3, r3
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	b29b      	uxth	r3, r3
 8002140:	4423      	add	r3, r4
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800214a:	609a      	str	r2, [r3, #8]
}
 800214c:	bf00      	nop
 800214e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002152:	46bd      	mov	sp, r7
 8002154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002158:	51eb851f 	.word	0x51eb851f

0800215c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fd8e 	bl	8001c90 <LL_USART_IsEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d16c      	bne.n	8002254 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002182:	f023 030c 	bic.w	r3, r3, #12
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6851      	ldr	r1, [r2, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	68d2      	ldr	r2, [r2, #12]
 800218e:	4311      	orrs	r1, r2
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	6912      	ldr	r2, [r2, #16]
 8002194:	4311      	orrs	r1, r2
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	6992      	ldr	r2, [r2, #24]
 800219a:	430a      	orrs	r2, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fd85 	bl	8001cb8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fd92 	bl	8001cde <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fb02 	bl	80017c8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a26      	ldr	r2, [pc, #152]	; (8002260 <LL_USART_Init+0x104>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d102      	bne.n	80021d2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	e02f      	b.n	8002232 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <LL_USART_Init+0x108>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d102      	bne.n	80021e0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e028      	b.n	8002232 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a21      	ldr	r2, [pc, #132]	; (8002268 <LL_USART_Init+0x10c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d102      	bne.n	80021ee <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	e021      	b.n	8002232 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <LL_USART_Init+0x110>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d102      	bne.n	80021fc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	e01a      	b.n	8002232 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <LL_USART_Init+0x114>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d102      	bne.n	800220a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e013      	b.n	8002232 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <LL_USART_Init+0x118>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d102      	bne.n	8002218 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e00c      	b.n	8002232 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <LL_USART_Init+0x11c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d102      	bne.n	8002226 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	e005      	b.n	8002232 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <LL_USART_Init+0x120>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00d      	beq.n	8002254 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8002240:	2300      	movs	r3, #0
 8002242:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fd58 	bl	8001d04 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002254:	7ffb      	ldrb	r3, [r7, #31]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40011000 	.word	0x40011000
 8002264:	40004400 	.word	0x40004400
 8002268:	40004800 	.word	0x40004800
 800226c:	40011400 	.word	0x40011400
 8002270:	40004c00 	.word	0x40004c00
 8002274:	40005000 	.word	0x40005000
 8002278:	40007800 	.word	0x40007800
 800227c:	40007c00 	.word	0x40007c00

08002280 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <LL_SetSystemCoreClock+0x1c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000010 	.word	0x20000010

080022a0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80022a8:	f000 f818 	bl	80022dc <BSP_SD_AbortCallback>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80022bc:	f000 f816 	bl	80022ec <BSP_SD_WriteCpltCallback>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80022d0:	f000 f818 	bl	8002304 <BSP_SD_ReadCpltCallback>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <BSP_SD_WriteCpltCallback+0x14>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20000034 	.word	0x20000034

08002304 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <BSP_SD_ReadCpltCallback+0x14>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000038 	.word	0x20000038

0800231c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002328:	f001 fd3a 	bl	8003da0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <pvPortMalloc+0x1b0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002334:	f000 f938 	bl	80025a8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002338:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <pvPortMalloc+0x1b4>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 80a7 	bne.w	8002494 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02d      	beq.n	80023a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800234c:	2208      	movs	r2, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d227      	bcs.n	80023a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002358:	2208      	movs	r2, #8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	2b00      	cmp	r3, #0
 8002368:	d021      	beq.n	80023ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f023 0307 	bic.w	r3, r3, #7
 8002370:	3308      	adds	r3, #8
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d214      	bcs.n	80023a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f023 0307 	bic.w	r3, r3, #7
 800237e:	3308      	adds	r3, #8
 8002380:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023a6:	e002      	b.n	80023ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	e000      	b.n	80023b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d06e      	beq.n	8002494 <pvPortMalloc+0x178>
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <pvPortMalloc+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d869      	bhi.n	8002494 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <pvPortMalloc+0x1bc>)
 80023c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80023c4:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <pvPortMalloc+0x1bc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023ca:	e004      	b.n	80023d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d903      	bls.n	80023e8 <pvPortMalloc+0xcc>
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f1      	bne.n	80023cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <pvPortMalloc+0x1b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d050      	beq.n	8002494 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2208      	movs	r2, #8
 80023f8:	4413      	add	r3, r2
 80023fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	1ad2      	subs	r2, r2, r3
 800240c:	2308      	movs	r3, #8
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	429a      	cmp	r2, r3
 8002412:	d91f      	bls.n	8002454 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <pvPortMalloc+0x120>
        __asm volatile
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	613b      	str	r3, [r7, #16]
    }
 8002438:	bf00      	nop
 800243a:	e7fe      	b.n	800243a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1ad2      	subs	r2, r2, r3
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800244e:	69b8      	ldr	r0, [r7, #24]
 8002450:	f000 f90c 	bl	800266c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <pvPortMalloc+0x1b8>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <pvPortMalloc+0x1b8>)
 8002460:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <pvPortMalloc+0x1b8>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <pvPortMalloc+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d203      	bcs.n	8002476 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <pvPortMalloc+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <pvPortMalloc+0x1c0>)
 8002474:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <pvPortMalloc+0x1b4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	431a      	orrs	r2, r3
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <pvPortMalloc+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <pvPortMalloc+0x1c4>)
 8002492:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002494:	f001 fc92 	bl	8003dbc <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 800249e:	f004 ffc9 	bl	8007434 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <pvPortMalloc+0x1a6>
        __asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	60fb      	str	r3, [r7, #12]
    }
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <pvPortMalloc+0x1a4>
    return pvReturn;
 80024c2:	69fb      	ldr	r3, [r7, #28]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20002844 	.word	0x20002844
 80024d0:	20002858 	.word	0x20002858
 80024d4:	20002848 	.word	0x20002848
 80024d8:	2000283c 	.word	0x2000283c
 80024dc:	2000284c 	.word	0x2000284c
 80024e0:	20002850 	.word	0x20002850

080024e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04d      	beq.n	8002592 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80024f6:	2308      	movs	r3, #8
 80024f8:	425b      	negs	r3, r3
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <vPortFree+0xb8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <vPortFree+0x44>
        __asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	60fb      	str	r3, [r7, #12]
    }
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <vPortFree+0x62>
        __asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	60bb      	str	r3, [r7, #8]
    }
 8002542:	bf00      	nop
 8002544:	e7fe      	b.n	8002544 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <vPortFree+0xb8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01e      	beq.n	8002592 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11a      	bne.n	8002592 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <vPortFree+0xb8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800256c:	f001 fc18 	bl	8003da0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <vPortFree+0xbc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4413      	add	r3, r2
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <vPortFree+0xbc>)
 800257c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800257e:	6938      	ldr	r0, [r7, #16]
 8002580:	f000 f874 	bl	800266c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <vPortFree+0xc0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <vPortFree+0xc0>)
 800258c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800258e:	f001 fc15 	bl	8003dbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20002858 	.word	0x20002858
 80025a0:	20002848 	.word	0x20002848
 80025a4:	20002854 	.word	0x20002854

080025a8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80025ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <prvHeapInit+0xac>)
 80025b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3307      	adds	r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <prvHeapInit+0xac>)
 80025d8:	4413      	add	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <prvHeapInit+0xb0>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <prvHeapInit+0xb0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80025f4:	2208      	movs	r2, #8
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0307 	bic.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a15      	ldr	r2, [pc, #84]	; (800265c <prvHeapInit+0xb4>)
 8002608:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <prvHeapInit+0xb4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <prvHeapInit+0xb4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <prvHeapInit+0xb4>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <prvHeapInit+0xb8>)
 8002636:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <prvHeapInit+0xbc>)
 800263e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <prvHeapInit+0xc0>)
 8002642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	2000003c 	.word	0x2000003c
 8002658:	2000283c 	.word	0x2000283c
 800265c:	20002844 	.word	0x20002844
 8002660:	2000284c 	.word	0x2000284c
 8002664:	20002848 	.word	0x20002848
 8002668:	20002858 	.word	0x20002858

0800266c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <prvInsertBlockIntoFreeList+0xac>)
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e002      	b.n	8002680 <prvInsertBlockIntoFreeList+0x14>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d8f7      	bhi.n	800267a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	4413      	add	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d108      	bne.n	80026ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	441a      	add	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	441a      	add	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d118      	bne.n	80026f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <prvInsertBlockIntoFreeList+0xb0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d00d      	beq.n	80026ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e008      	b.n	80026fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <prvInsertBlockIntoFreeList+0xb0>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e003      	b.n	80026fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d002      	beq.n	800270a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	2000283c 	.word	0x2000283c
 800271c:	20002844 	.word	0x20002844

08002720 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0208 	add.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002738:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f103 0208 	add.w	r2, r3, #8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f103 0208 	add.w	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	601a      	str	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d103      	bne.n	80027e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e00c      	b.n	80027fc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3308      	adds	r3, #8
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e002      	b.n	80027f0 <vListInsert+0x2e>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d2f6      	bcs.n	80027ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6852      	ldr	r2, [r2, #4]
 8002854:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d103      	bne.n	8002868 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3b04      	subs	r3, #4
 8002898:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3b04      	subs	r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f023 0201 	bic.w	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3b04      	subs	r3, #4
 80028b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80028b8:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <pxPortInitialiseStack+0x64>)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3b14      	subs	r3, #20
 80028c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b04      	subs	r3, #4
 80028ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f06f 0202 	mvn.w	r2, #2
 80028d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3b20      	subs	r3, #32
 80028dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	080028f1 	.word	0x080028f1

080028f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <prvTaskExitError+0x54>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002902:	d00a      	beq.n	800291a <prvTaskExitError+0x2a>
        __asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	60fb      	str	r3, [r7, #12]
    }
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <prvTaskExitError+0x28>
        __asm volatile
 800291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	60bb      	str	r3, [r7, #8]
    }
 800292c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800292e:	bf00      	nop
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0fc      	beq.n	8002930 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	20000008 	.word	0x20000008
	...

08002950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <pxCurrentTCBConst2>)
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	6808      	ldr	r0, [r1, #0]
 8002956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800295a:	f380 8809 	msr	PSP, r0
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f380 8811 	msr	BASEPRI, r0
 800296a:	4770      	bx	lr
 800296c:	f3af 8000 	nop.w

08002970 <pxCurrentTCBConst2>:
 8002970:	200028a4 	.word	0x200028a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop

08002978 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002978:	4808      	ldr	r0, [pc, #32]	; (800299c <prvPortStartFirstTask+0x24>)
 800297a:	6800      	ldr	r0, [r0, #0]
 800297c:	6800      	ldr	r0, [r0, #0]
 800297e:	f380 8808 	msr	MSP, r0
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f380 8814 	msr	CONTROL, r0
 800298a:	b662      	cpsie	i
 800298c:	b661      	cpsie	f
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	df00      	svc	0
 8002998:	bf00      	nop
 800299a:	0000      	.short	0x0000
 800299c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop

080029a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <xPortStartScheduler+0x120>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a46      	ldr	r2, [pc, #280]	; (8002ac8 <xPortStartScheduler+0x124>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10a      	bne.n	80029ca <xPortStartScheduler+0x26>
        __asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	613b      	str	r3, [r7, #16]
    }
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029ca:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <xPortStartScheduler+0x120>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3f      	ldr	r2, [pc, #252]	; (8002acc <xPortStartScheduler+0x128>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10a      	bne.n	80029ea <xPortStartScheduler+0x46>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	60fb      	str	r3, [r7, #12]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <xPortStartScheduler+0x12c>)
 80029ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	22ff      	movs	r2, #255	; 0xff
 80029fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <xPortStartScheduler+0x130>)
 8002a10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a12:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a18:	e009      	b.n	8002a2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d0ef      	beq.n	8002a1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d00a      	beq.n	8002a5c <xPortStartScheduler+0xb8>
        __asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	60bb      	str	r3, [r7, #8]
    }
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <xPortStartScheduler+0x134>)
 8002a70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <xPortStartScheduler+0x138>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <xPortStartScheduler+0x138>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <xPortStartScheduler+0x138>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a14      	ldr	r2, [pc, #80]	; (8002adc <xPortStartScheduler+0x138>)
 8002a8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002a92:	f000 f8e3 	bl	8002c5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <xPortStartScheduler+0x13c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002a9c:	f000 f902 	bl	8002ca4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <xPortStartScheduler+0x140>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <xPortStartScheduler+0x140>)
 8002aa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002aac:	f7ff ff64 	bl	8002978 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ab0:	f001 fb06 	bl	80040c0 <vTaskSwitchContext>
    prvTaskExitError();
 8002ab4:	f7ff ff1c 	bl	80028f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	410fc271 	.word	0x410fc271
 8002acc:	410fc270 	.word	0x410fc270
 8002ad0:	e000e400 	.word	0xe000e400
 8002ad4:	2000285c 	.word	0x2000285c
 8002ad8:	20002860 	.word	0x20002860
 8002adc:	e000ed20 	.word	0xe000ed20
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	e000ef34 	.word	0xe000ef34

08002ae8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
        __asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	607b      	str	r3, [r7, #4]
    }
 8002b00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <vPortEnterCritical+0x58>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <vPortEnterCritical+0x58>)
 8002b0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <vPortEnterCritical+0x58>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10f      	bne.n	8002b34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <vPortEnterCritical+0x5c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <vPortEnterCritical+0x4c>
        __asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	603b      	str	r3, [r7, #0]
    }
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <vPortEnterCritical+0x4a>
    }
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	20000008 	.word	0x20000008
 8002b44:	e000ed04 	.word	0xe000ed04

08002b48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <vPortExitCritical+0x50>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <vPortExitCritical+0x24>
        __asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	607b      	str	r3, [r7, #4]
    }
 8002b68:	bf00      	nop
 8002b6a:	e7fe      	b.n	8002b6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <vPortExitCritical+0x50>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <vPortExitCritical+0x50>)
 8002b74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <vPortExitCritical+0x50>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <vPortExitCritical+0x42>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000008 	.word	0x20000008
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ba0:	f3ef 8009 	mrs	r0, PSP
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <pxCurrentTCBConst>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	f01e 0f10 	tst.w	lr, #16
 8002bb0:	bf08      	it	eq
 8002bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bba:	6010      	str	r0, [r2, #0]
 8002bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bc4:	f380 8811 	msr	BASEPRI, r0
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f001 fa76 	bl	80040c0 <vTaskSwitchContext>
 8002bd4:	f04f 0000 	mov.w	r0, #0
 8002bd8:	f380 8811 	msr	BASEPRI, r0
 8002bdc:	bc09      	pop	{r0, r3}
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	6808      	ldr	r0, [r1, #0]
 8002be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be6:	f01e 0f10 	tst.w	lr, #16
 8002bea:	bf08      	it	eq
 8002bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002bf0:	f380 8809 	msr	PSP, r0
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w

08002c00 <pxCurrentTCBConst>:
 8002c00:	200028a4 	.word	0x200028a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop

08002c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	607b      	str	r3, [r7, #4]
    }
 8002c20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8002c22:	f003 fa19 	bl	8006058 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c26:	f001 f98d 	bl	8003f44 <xTaskIncrementTick>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8002c30:	f003 fa70 	bl	8006114 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <SysTick_Handler+0x50>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e001      	b.n	8002c42 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8002c3e:	f003 fa4d 	bl	80060dc <SEGGER_SYSVIEW_RecordExitISR>
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f383 8811 	msr	BASEPRI, r3
    }
 8002c4c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <vPortSetupTimerInterrupt+0x34>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <vPortSetupTimerInterrupt+0x38>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <vPortSetupTimerInterrupt+0x3c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <vPortSetupTimerInterrupt+0x40>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <vPortSetupTimerInterrupt+0x44>)
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <vPortSetupTimerInterrupt+0x34>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010
 8002c94:	e000e018 	.word	0xe000e018
 8002c98:	20000010 	.word	0x20000010
 8002c9c:	10624dd3 	.word	0x10624dd3
 8002ca0:	e000e014 	.word	0xe000e014

08002ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002cb4 <vPortEnableVFP+0x10>
 8002ca8:	6801      	ldr	r1, [r0, #0]
 8002caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cae:	6001      	str	r1, [r0, #0]
 8002cb0:	4770      	bx	lr
 8002cb2:	0000      	.short	0x0000
 8002cb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop

08002cbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8002cc2:	f000 f83b 	bl	8002d3c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002cc6:	f3ef 8305 	mrs	r3, IPSR
 8002cca:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	d914      	bls.n	8002cfc <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cd2:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <vPortValidateInterruptPriority+0x70>)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <vPortValidateInterruptPriority+0x74>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	7afa      	ldrb	r2, [r7, #11]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20a      	bcs.n	8002cfc <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	607b      	str	r3, [r7, #4]
    }
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <vPortValidateInterruptPriority+0x78>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <vPortValidateInterruptPriority+0x7c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d90a      	bls.n	8002d22 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	603b      	str	r3, [r7, #0]
    }
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <vPortValidateInterruptPriority+0x64>
    }
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000e3f0 	.word	0xe000e3f0
 8002d30:	2000285c 	.word	0x2000285c
 8002d34:	e000ed0c 	.word	0xe000ed0c
 8002d38:	20002860 	.word	0x20002860

08002d3c <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8002d44:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	; 0xff
 8002d4a:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002d56:	2207      	movs	r2, #7
 8002d58:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d5a:	e009      	b.n	8002d70 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002d64:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d0ef      	beq.n	8002d5c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1c3 0307 	rsb	r3, r3, #7
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d00a      	beq.n	8002d9e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	60bb      	str	r3, [r7, #8]
    }
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002da6:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e400 	.word	0xe000e400
 8002dc4:	20002860 	.word	0x20002860

08002dc8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericReset+0x2a>
        __asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	60bb      	str	r3, [r7, #8]
    }
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002df2:	f7ff fe79 	bl	8002ae8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	441a      	add	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	3b01      	subs	r3, #1
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d114      	bne.n	8002e72 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01a      	beq.n	8002e86 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3310      	adds	r3, #16
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fa17 	bl	8004288 <xTaskRemoveFromEventList>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d012      	beq.n	8002e86 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <xQueueGenericReset+0xcc>)
 8002e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	e009      	b.n	8002e86 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3310      	adds	r3, #16
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fc52 	bl	8002720 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3324      	adds	r3, #36	; 0x24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fc4d 	bl	8002720 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002e86:	f7ff fe5f 	bl	8002b48 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08e      	sub	sp, #56	; 0x38
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <xQueueGenericCreateStatic+0x52>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <xQueueGenericCreateStatic+0x56>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueGenericCreateStatic+0x58>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	623b      	str	r3, [r7, #32]
    }
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <xQueueGenericCreateStatic+0x7e>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <xQueueGenericCreateStatic+0x82>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <xQueueGenericCreateStatic+0x84>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	61fb      	str	r3, [r7, #28]
    }
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002f36:	2350      	movs	r3, #80	; 0x50
 8002f38:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b50      	cmp	r3, #80	; 0x50
 8002f3e:	d00a      	beq.n	8002f56 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	61bb      	str	r3, [r7, #24]
    }
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f56:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f805 	bl	8002f88 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002f80:	4618      	mov	r0, r3
 8002f82:	3730      	adds	r7, #48	; 0x30
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e002      	b.n	8002faa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	69b8      	ldr	r0, [r7, #24]
 8002fba:	f7ff ff05 	bl	8002dc8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	2073      	movs	r0, #115	; 0x73
 8002fce:	f002 fc73 	bl	80058b8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b090      	sub	sp, #64	; 0x40
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fea:	2300      	movs	r3, #0
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericSend+0x32>
        __asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <xQueueGenericSend+0x40>
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <xQueueGenericSend+0x44>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <xQueueGenericSend+0x46>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <xQueueGenericSend+0x60>
        __asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d103      	bne.n	800304a <xQueueGenericSend+0x6e>
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <xQueueGenericSend+0x72>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericSend+0x74>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xQueueGenericSend+0x8e>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	623b      	str	r3, [r7, #32]
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800306a:	f001 fb07 	bl	800467c <xTaskGetSchedulerState>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <xQueueGenericSend+0x9e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <xQueueGenericSend+0xa2>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <xQueueGenericSend+0xa4>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericSend+0xbe>
        __asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61fb      	str	r3, [r7, #28]
    }
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800309a:	f7ff fd25 	bl	8002ae8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <xQueueGenericSend+0xd4>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d136      	bne.n	800311e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 f98c 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	460b      	mov	r3, r1
 80030c2:	4601      	mov	r1, r0
 80030c4:	205a      	movs	r0, #90	; 0x5a
 80030c6:	f002 fc6d 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d0:	f000 fa78 	bl	80035c4 <prvCopyDataToQueue>
 80030d4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d010      	beq.n	8003100 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	3324      	adds	r3, #36	; 0x24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f8d0 	bl	8004288 <xTaskRemoveFromEventList>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d013      	beq.n	8003116 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80030ee:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <xQueueGenericSend+0x248>)
 80030f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	e00a      	b.n	8003116 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <xQueueGenericSend+0x248>)
 8003108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003116:	f7ff fd17 	bl	8002b48 <vPortExitCritical>
                return pdPASS;
 800311a:	2301      	movs	r3, #1
 800311c:	e07d      	b.n	800321a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d110      	bne.n	8003146 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003124:	f7ff fd10 	bl	8002b48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	4618      	mov	r0, r3
 800312c:	f003 f950 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	4601      	mov	r1, r0
 800313c:	205a      	movs	r0, #90	; 0x5a
 800313e:	f002 fc31 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003142:	2300      	movs	r3, #0
 8003144:	e069      	b.n	800321a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4618      	mov	r0, r3
 8003152:	f001 f901 	bl	8004358 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003156:	2301      	movs	r3, #1
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800315a:	f7ff fcf5 	bl	8002b48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800315e:	f000 fe1f 	bl	8003da0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003162:	f7ff fcc1 	bl	8002ae8 <vPortEnterCritical>
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800316c:	b25b      	sxtb	r3, r3
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003172:	d103      	bne.n	800317c <xQueueGenericSend+0x1a0>
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003182:	b25b      	sxtb	r3, r3
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003188:	d103      	bne.n	8003192 <xQueueGenericSend+0x1b6>
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003192:	f7ff fcd9 	bl	8002b48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003196:	1d3a      	adds	r2, r7, #4
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 f8f0 	bl	8004384 <xTaskCheckForTimeOut>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d124      	bne.n	80031f4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ac:	f000 fb02 	bl	80037b4 <prvIsQueueFull>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	3310      	adds	r3, #16
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 f810 	bl	80041e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80031c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c6:	f000 fa8d 	bl	80036e4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80031ca:	f000 fdf7 	bl	8003dbc <xTaskResumeAll>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af62 	bne.w	800309a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <xQueueGenericSend+0x248>)
 80031d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	e758      	b.n	800309a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80031e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ea:	f000 fa7b 	bl	80036e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80031ee:	f000 fde5 	bl	8003dbc <xTaskResumeAll>
 80031f2:	e752      	b.n	800309a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80031f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f6:	f000 fa75 	bl	80036e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80031fa:	f000 fddf 	bl	8003dbc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	4618      	mov	r0, r3
 8003202:	f003 f8e5 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	460b      	mov	r3, r1
 8003210:	4601      	mov	r1, r0
 8003212:	205a      	movs	r0, #90	; 0x5a
 8003214:	f002 fbc6 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003218:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800321a:	4618      	mov	r0, r3
 800321c:	3738      	adds	r7, #56	; 0x38
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b090      	sub	sp, #64	; 0x40
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <xQueueGenericSendFromISR+0x3c>
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <xQueueGenericSendFromISR+0x40>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <xQueueGenericSendFromISR+0x42>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d103      	bne.n	8003292 <xQueueGenericSendFromISR+0x6a>
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <xQueueGenericSendFromISR+0x6e>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <xQueueGenericSendFromISR+0x70>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	623b      	str	r3, [r7, #32]
    }
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032b2:	f7ff fd03 	bl	8002cbc <vPortValidateInterruptPriority>
        __asm volatile
 80032b6:	f3ef 8211 	mrs	r2, BASEPRI
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	61fa      	str	r2, [r7, #28]
 80032cc:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80032ce:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <xQueueGenericSendFromISR+0xbc>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d148      	bne.n	8003376 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 f86a 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 80032fc:	4601      	mov	r1, r0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	461a      	mov	r2, r3
 8003302:	2060      	movs	r0, #96	; 0x60
 8003304:	f002 fa7e 	bl	8005804 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800330e:	f000 f959 	bl	80035c4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003312:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331a:	d112      	bne.n	8003342 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d025      	beq.n	8003370 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	3324      	adds	r3, #36	; 0x24
 8003328:	4618      	mov	r0, r3
 800332a:	f000 ffad 	bl	8004288 <xTaskRemoveFromEventList>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01d      	beq.n	8003370 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01a      	beq.n	8003370 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e016      	b.n	8003370 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003346:	2b7f      	cmp	r3, #127	; 0x7f
 8003348:	d10a      	bne.n	8003360 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	617b      	str	r3, [r7, #20]
    }
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003360:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003364:	3301      	adds	r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	b25a      	sxtb	r2, r3
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003370:	2301      	movs	r3, #1
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003374:	e00b      	b.n	800338e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	4618      	mov	r0, r3
 800337a:	f003 f829 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 800337e:	4601      	mov	r1, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	2060      	movs	r0, #96	; 0x60
 8003386:	f002 fa3d 	bl	8005804 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800338a:	2300      	movs	r3, #0
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	613b      	str	r3, [r7, #16]
        __asm volatile
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f383 8811 	msr	BASEPRI, r3
    }
 8003398:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800339c:	4618      	mov	r0, r3
 800339e:	3740      	adds	r7, #64	; 0x40
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b08f      	sub	sp, #60	; 0x3c
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <xQueueReceive+0x30>
        __asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	623b      	str	r3, [r7, #32]
    }
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <xQueueReceive+0x3e>
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <xQueueReceive+0x42>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <xQueueReceive+0x44>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <xQueueReceive+0x5e>
        __asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	61fb      	str	r3, [r7, #28]
    }
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003402:	f001 f93b 	bl	800467c <xTaskGetSchedulerState>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <xQueueReceive+0x6e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <xQueueReceive+0x72>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <xQueueReceive+0x74>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <xQueueReceive+0x8e>
        __asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	61bb      	str	r3, [r7, #24]
    }
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003432:	f7ff fb59 	bl	8002ae8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02f      	beq.n	80034a2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003446:	f000 f927 	bl	8003698 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	4618      	mov	r0, r3
 800344e:	f002 ffbf 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 8003452:	4604      	mov	r4, r0
 8003454:	2000      	movs	r0, #0
 8003456:	f002 ffbb 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 800345a:	4602      	mov	r2, r0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2101      	movs	r1, #1
 8003460:	9100      	str	r1, [sp, #0]
 8003462:	4621      	mov	r1, r4
 8003464:	205c      	movs	r0, #92	; 0x5c
 8003466:	f002 fa9d 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00f      	beq.n	800349a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	3310      	adds	r3, #16
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ff02 	bl	8004288 <xTaskRemoveFromEventList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800348a:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <xQueueReceive+0x21c>)
 800348c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800349a:	f7ff fb55 	bl	8002b48 <vPortExitCritical>
                return pdPASS;
 800349e:	2301      	movs	r3, #1
 80034a0:	e08a      	b.n	80035b8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d113      	bne.n	80034d0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80034a8:	f7ff fb4e 	bl	8002b48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 ff8e 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 80034b4:	4604      	mov	r4, r0
 80034b6:	2000      	movs	r0, #0
 80034b8:	f002 ff8a 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2101      	movs	r1, #1
 80034c2:	9100      	str	r1, [sp, #0]
 80034c4:	4621      	mov	r1, r4
 80034c6:	205c      	movs	r0, #92	; 0x5c
 80034c8:	f002 fa6c 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e073      	b.n	80035b8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034d6:	f107 0310 	add.w	r3, r7, #16
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 ff3c 	bl	8004358 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034e4:	f7ff fb30 	bl	8002b48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034e8:	f000 fc5a 	bl	8003da0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034ec:	f7ff fafc 	bl	8002ae8 <vPortEnterCritical>
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fc:	d103      	bne.n	8003506 <xQueueReceive+0x162>
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800350c:	b25b      	sxtb	r3, r3
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003512:	d103      	bne.n	800351c <xQueueReceive+0x178>
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800351c:	f7ff fb14 	bl	8002b48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003520:	1d3a      	adds	r2, r7, #4
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f000 ff2b 	bl	8004384 <xTaskCheckForTimeOut>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d124      	bne.n	800357e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003536:	f000 f927 	bl	8003788 <prvIsQueueEmpty>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d018      	beq.n	8003572 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fe4b 	bl	80041e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800354e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003550:	f000 f8c8 	bl	80036e4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003554:	f000 fc32 	bl	8003dbc <xTaskResumeAll>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	f47f af69 	bne.w	8003432 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <xQueueReceive+0x21c>)
 8003562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	e75f      	b.n	8003432 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003574:	f000 f8b6 	bl	80036e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003578:	f000 fc20 	bl	8003dbc <xTaskResumeAll>
 800357c:	e759      	b.n	8003432 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800357e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003580:	f000 f8b0 	bl	80036e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003584:	f000 fc1a 	bl	8003dbc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800358a:	f000 f8fd 	bl	8003788 <prvIsQueueEmpty>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	f43f af4e 	beq.w	8003432 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	4618      	mov	r0, r3
 800359a:	f002 ff19 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 800359e:	4604      	mov	r4, r0
 80035a0:	2000      	movs	r0, #0
 80035a2:	f002 ff15 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2101      	movs	r1, #1
 80035ac:	9100      	str	r1, [sp, #0]
 80035ae:	4621      	mov	r1, r4
 80035b0:	205c      	movs	r0, #92	; 0x5c
 80035b2:	f002 f9f7 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80035b6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3734      	adds	r7, #52	; 0x34
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd90      	pop	{r4, r7, pc}
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d14d      	bne.n	8003686 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 f862 	bl	80046b8 <xTaskPriorityDisinherit>
 80035f4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e043      	b.n	8003686 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d119      	bne.n	8003638 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6858      	ldr	r0, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	461a      	mov	r2, r3
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	f004 fe5c 	bl	80082cc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	d32b      	bcc.n	8003686 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	e026      	b.n	8003686 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	68d8      	ldr	r0, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	461a      	mov	r2, r3
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	f004 fe42 	bl	80082cc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	425b      	negs	r3, r3
 8003652:	441a      	add	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d207      	bcs.n	8003674 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	425b      	negs	r3, r3
 800366e:	441a      	add	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d105      	bne.n	8003686 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	3b01      	subs	r3, #1
 8003684:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800368e:	697b      	ldr	r3, [r7, #20]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d018      	beq.n	80036dc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	441a      	add	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d303      	bcc.n	80036cc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68d9      	ldr	r1, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	461a      	mov	r2, r3
 80036d6:	6838      	ldr	r0, [r7, #0]
 80036d8:	f004 fdf8 	bl	80082cc <memcpy>
    }
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80036ec:	f7ff f9fc 	bl	8002ae8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036f8:	e011      	b.n	800371e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d012      	beq.n	8003728 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3324      	adds	r3, #36	; 0x24
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fdbe 	bl	8004288 <xTaskRemoveFromEventList>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003712:	f000 fe9d 	bl	8004450 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	3b01      	subs	r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	dce9      	bgt.n	80036fa <prvUnlockQueue+0x16>
 8003726:	e000      	b.n	800372a <prvUnlockQueue+0x46>
                        break;
 8003728:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003732:	f7ff fa09 	bl	8002b48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003736:	f7ff f9d7 	bl	8002ae8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003740:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003742:	e011      	b.n	8003768 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d012      	beq.n	8003772 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3310      	adds	r3, #16
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fd99 	bl	8004288 <xTaskRemoveFromEventList>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800375c:	f000 fe78 	bl	8004450 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	3b01      	subs	r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800376c:	2b00      	cmp	r3, #0
 800376e:	dce9      	bgt.n	8003744 <prvUnlockQueue+0x60>
 8003770:	e000      	b.n	8003774 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003772:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800377c:	f7ff f9e4 	bl	8002b48 <vPortExitCritical>
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003790:	f7ff f9aa 	bl	8002ae8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e001      	b.n	80037a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80037a6:	f7ff f9cf 	bl	8002b48 <vPortExitCritical>

    return xReturn;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80037bc:	f7ff f994 	bl	8002ae8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d102      	bne.n	80037d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e001      	b.n	80037d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80037d6:	f7ff f9b7 	bl	8002b48 <vPortExitCritical>

    return xReturn;
 80037da:	68fb      	ldr	r3, [r7, #12]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e01e      	b.n	8003832 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <vQueueAddToRegistry+0x60>)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003800:	4910      	ldr	r1, [pc, #64]	; (8003844 <vQueueAddToRegistry+0x60>)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800380a:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <vQueueAddToRegistry+0x60>)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4618      	mov	r0, r3
 800381a:	f002 fdd9 	bl	80063d0 <SEGGER_SYSVIEW_ShrinkId>
 800381e:	4601      	mov	r1, r0
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	2071      	movs	r0, #113	; 0x71
 8003826:	f001 ffed 	bl	8005804 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800382a:	e006      	b.n	800383a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3301      	adds	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b07      	cmp	r3, #7
 8003836:	d9dd      	bls.n	80037f4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20002864 	.word	0x20002864

08003848 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003858:	f7ff f946 	bl	8002ae8 <vPortEnterCritical>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003862:	b25b      	sxtb	r3, r3
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003868:	d103      	bne.n	8003872 <vQueueWaitForMessageRestricted+0x2a>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003878:	b25b      	sxtb	r3, r3
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387e:	d103      	bne.n	8003888 <vQueueWaitForMessageRestricted+0x40>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003888:	f7ff f95e 	bl	8002b48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3324      	adds	r3, #36	; 0x24
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fcc5 	bl	800422c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80038a2:	6978      	ldr	r0, [r7, #20]
 80038a4:	f7ff ff1e 	bl	80036e4 <prvUnlockQueue>
    }
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xTaskCreateStatic+0x2a>
        __asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	623b      	str	r3, [r7, #32]
    }
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <xTaskCreateStatic+0x46>
        __asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	61fb      	str	r3, [r7, #28]
    }
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 80038f6:	235c      	movs	r3, #92	; 0x5c
 80038f8:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b5c      	cmp	r3, #92	; 0x5c
 80038fe:	d00a      	beq.n	8003916 <xTaskCreateStatic+0x66>
        __asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	61bb      	str	r3, [r7, #24]
    }
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003916:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01e      	beq.n	800395c <xTaskCreateStatic+0xac>
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003936:	2300      	movs	r3, #0
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	9302      	str	r3, [sp, #8]
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f850 	bl	80039f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003956:	f000 f8e3 	bl	8003b20 <prvAddNewTaskToReadyList>
 800395a:	e001      	b.n	8003960 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8003960:	697b      	ldr	r3, [r7, #20]
    }
 8003962:	4618      	mov	r0, r3
 8003964:	3728      	adds	r7, #40	; 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800396a:	b580      	push	{r7, lr}
 800396c:	b08c      	sub	sp, #48	; 0x30
 800396e:	af04      	add	r7, sp, #16
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fccc 	bl	800231c <pvPortMalloc>
 8003984:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800398c:	205c      	movs	r0, #92	; 0x5c
 800398e:	f7fe fcc5 	bl	800231c <pvPortMalloc>
 8003992:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
 80039a0:	e005      	b.n	80039ae <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7fe fd9e 	bl	80024e4 <vPortFree>
 80039a8:	e001      	b.n	80039ae <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	2300      	movs	r3, #0
 80039c0:	9303      	str	r3, [sp, #12]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	9302      	str	r3, [sp, #8]
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f80e 	bl	80039f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80039d8:	69f8      	ldr	r0, [r7, #28]
 80039da:	f000 f8a1 	bl	8003b20 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e002      	b.n	80039ea <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039e8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80039ea:	69bb      	ldr	r3, [r7, #24]
    }
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	21a5      	movs	r1, #165	; 0xa5
 8003a0e:	f004 fc6b 	bl	80082e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <prvInitialiseNewTask+0x58>
        __asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	617b      	str	r3, [r7, #20]
    }
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01f      	beq.n	8003a92 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e012      	b.n	8003a7e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	7819      	ldrb	r1, [r3, #0]
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	3334      	adds	r3, #52	; 0x34
 8003a68:	460a      	mov	r2, r1
 8003a6a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d9e9      	bls.n	8003a58 <prvInitialiseNewTask+0x64>
 8003a84:	e000      	b.n	8003a88 <prvInitialiseNewTask+0x94>
            {
                break;
 8003a86:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a90:	e003      	b.n	8003a9a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	2b37      	cmp	r3, #55	; 0x37
 8003a9e:	d901      	bls.n	8003aa4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003aa0:	2337      	movs	r3, #55	; 0x37
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aae:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fe50 	bl	8002760 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	3318      	adds	r3, #24
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fe4b 	bl	8002760 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ace:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	3354      	adds	r3, #84	; 0x54
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 fbfd 	bl	80082e8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	3358      	adds	r3, #88	; 0x58
 8003af2:	2201      	movs	r2, #1
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f004 fbf6 	bl	80082e8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	69b8      	ldr	r0, [r7, #24]
 8003b02:	f7fe fec1 	bl	8002888 <pxPortInitialiseStack>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003b20:	b5b0      	push	{r4, r5, r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003b28:	f7fe ffde 	bl	8002ae8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003b2c:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <prvAddNewTaskToReadyList+0x100>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <prvAddNewTaskToReadyList+0x100>)
 8003b34:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <prvAddNewTaskToReadyList+0x104>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003b3e:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <prvAddNewTaskToReadyList+0x104>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <prvAddNewTaskToReadyList+0x100>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d110      	bne.n	8003b6e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003b4c:	f000 fca4 	bl	8004498 <prvInitialiseTaskLists>
 8003b50:	e00d      	b.n	8003b6e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003b52:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <prvAddNewTaskToReadyList+0x108>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b5a:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <prvAddNewTaskToReadyList+0x104>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d802      	bhi.n	8003b6e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003b68:	4a2e      	ldr	r2, [pc, #184]	; (8003c24 <prvAddNewTaskToReadyList+0x104>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <prvAddNewTaskToReadyList+0x10c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3301      	adds	r3, #1
 8003b74:	4a2d      	ldr	r2, [pc, #180]	; (8003c2c <prvAddNewTaskToReadyList+0x10c>)
 8003b76:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <prvAddNewTaskToReadyList+0x10c>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <prvAddNewTaskToReadyList+0x94>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fafb 	bl	8006184 <SEGGER_SYSVIEW_OnTaskCreate>
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	461d      	mov	r5, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461c      	mov	r4, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	1ae3      	subs	r3, r4, r3
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	462b      	mov	r3, r5
 8003bb0:	f002 fe1c 	bl	80067ec <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f002 fb68 	bl	800628c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <prvAddNewTaskToReadyList+0x110>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d903      	bls.n	8003bd0 <prvAddNewTaskToReadyList+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <prvAddNewTaskToReadyList+0x110>)
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <prvAddNewTaskToReadyList+0x114>)
 8003bde:	441a      	add	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7fe fdc7 	bl	800277a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003bec:	f7fe ffac 	bl	8002b48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <prvAddNewTaskToReadyList+0x108>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvAddNewTaskToReadyList+0x104>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d207      	bcs.n	8003c16 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <prvAddNewTaskToReadyList+0x118>)
 8003c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20002d78 	.word	0x20002d78
 8003c24:	200028a4 	.word	0x200028a4
 8003c28:	20002d84 	.word	0x20002d84
 8003c2c:	20002d94 	.word	0x20002d94
 8003c30:	20002d80 	.word	0x20002d80
 8003c34:	200028a8 	.word	0x200028a8
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01b      	beq.n	8003c86 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <vTaskDelay+0x68>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <vTaskDelay+0x30>
        __asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
    }
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003c6c:	f000 f898 	bl	8003da0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	2023      	movs	r0, #35	; 0x23
 8003c74:	f001 fd8a 	bl	800578c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c78:	2100      	movs	r1, #0
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fd92 	bl	80047a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003c80:	f000 f89c 	bl	8003dbc <xTaskResumeAll>
 8003c84:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <vTaskDelay+0x6c>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20002da0 	.word	0x20002da0
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cba:	463a      	mov	r2, r7
 8003cbc:	1d39      	adds	r1, r7, #4
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 fbd4 	bl	8007470 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	9202      	str	r2, [sp, #8]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	460a      	mov	r2, r1
 8003cda:	4929      	ldr	r1, [pc, #164]	; (8003d80 <vTaskStartScheduler+0xd4>)
 8003cdc:	4829      	ldr	r0, [pc, #164]	; (8003d84 <vTaskStartScheduler+0xd8>)
 8003cde:	f7ff fde7 	bl	80038b0 <xTaskCreateStatic>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4a28      	ldr	r2, [pc, #160]	; (8003d88 <vTaskStartScheduler+0xdc>)
 8003ce6:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <vTaskStartScheduler+0xdc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e001      	b.n	8003cfa <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 8003d00:	f000 fdb0 	bl	8004864 <xTimerCreateTimerTask>
 8003d04:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d124      	bne.n	8003d56 <vTaskStartScheduler+0xaa>
        __asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	613b      	str	r3, [r7, #16]
    }
 8003d1e:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <vTaskStartScheduler+0xe0>)
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d26:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <vTaskStartScheduler+0xe4>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <vTaskStartScheduler+0xe8>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003d34:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <vTaskStartScheduler+0xec>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <vTaskStartScheduler+0xdc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d102      	bne.n	8003d46 <vTaskStartScheduler+0x9a>
 8003d40:	f002 fa04 	bl	800614c <SEGGER_SYSVIEW_OnIdle>
 8003d44:	e004      	b.n	8003d50 <vTaskStartScheduler+0xa4>
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <vTaskStartScheduler+0xec>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 fa5c 	bl	8006208 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003d50:	f7fe fe28 	bl	80029a4 <xPortStartScheduler>
 8003d54:	e00e      	b.n	8003d74 <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d5c:	d10a      	bne.n	8003d74 <vTaskStartScheduler+0xc8>
        __asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
    }
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <vTaskStartScheduler+0xf0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	08008310 	.word	0x08008310
 8003d84:	08004469 	.word	0x08004469
 8003d88:	20002d9c 	.word	0x20002d9c
 8003d8c:	20002d98 	.word	0x20002d98
 8003d90:	20002d84 	.word	0x20002d84
 8003d94:	20002d7c 	.word	0x20002d7c
 8003d98:	200028a4 	.word	0x200028a4
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <vTaskSuspendAll+0x18>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <vTaskSuspendAll+0x18>)
 8003dac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	20002da0 	.word	0x20002da0

08003dbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003dca:	4b44      	ldr	r3, [pc, #272]	; (8003edc <xTaskResumeAll+0x120>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	603b      	str	r3, [r7, #0]
    }
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003de8:	f7fe fe7e 	bl	8002ae8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <xTaskResumeAll+0x120>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	4a3a      	ldr	r2, [pc, #232]	; (8003edc <xTaskResumeAll+0x120>)
 8003df4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <xTaskResumeAll+0x120>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d166      	bne.n	8003ecc <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dfe:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <xTaskResumeAll+0x124>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d062      	beq.n	8003ecc <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e06:	e033      	b.n	8003e70 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <xTaskResumeAll+0x128>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3318      	adds	r3, #24
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fd0d 	bl	8002834 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fd08 	bl	8002834 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fa30 	bl	800628c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <xTaskResumeAll+0x12c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d903      	bls.n	8003e40 <xTaskResumeAll+0x84>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <xTaskResumeAll+0x12c>)
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <xTaskResumeAll+0x130>)
 8003e4e:	441a      	add	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f7fe fc8f 	bl	800277a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <xTaskResumeAll+0x134>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003e6a:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <xTaskResumeAll+0x138>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <xTaskResumeAll+0x128>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1c7      	bne.n	8003e08 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003e7e:	f000 fbe1 	bl	8004644 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <xTaskResumeAll+0x13c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d010      	beq.n	8003eb0 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003e8e:	f000 f859 	bl	8003f44 <xTaskIncrementTick>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003e98:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <xTaskResumeAll+0x138>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f1      	bne.n	8003e8e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <xTaskResumeAll+0x13c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <xTaskResumeAll+0x138>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <xTaskResumeAll+0x140>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003ecc:	f7fe fe3c 	bl	8002b48 <vPortExitCritical>

    return xAlreadyYielded;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20002da0 	.word	0x20002da0
 8003ee0:	20002d78 	.word	0x20002d78
 8003ee4:	20002d38 	.word	0x20002d38
 8003ee8:	20002d80 	.word	0x20002d80
 8003eec:	200028a8 	.word	0x200028a8
 8003ef0:	200028a4 	.word	0x200028a4
 8003ef4:	20002d8c 	.word	0x20002d8c
 8003ef8:	20002d88 	.word	0x20002d88
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <xTaskGetTickCount+0x1c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003f0c:	687b      	ldr	r3, [r7, #4]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20002d7c 	.word	0x20002d7c

08003f20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f26:	f7fe fec9 	bl	8002cbc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <xTaskGetTickCountFromISR+0x20>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003f34:	683b      	ldr	r3, [r7, #0]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20002d7c 	.word	0x20002d7c

08003f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4e:	4b51      	ldr	r3, [pc, #324]	; (8004094 <xTaskIncrementTick+0x150>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 8093 	bne.w	800407e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f58:	4b4f      	ldr	r3, [pc, #316]	; (8004098 <xTaskIncrementTick+0x154>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003f60:	4a4d      	ldr	r2, [pc, #308]	; (8004098 <xTaskIncrementTick+0x154>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d120      	bne.n	8003fae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	; (800409c <xTaskIncrementTick+0x158>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <xTaskIncrementTick+0x48>
        __asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	603b      	str	r3, [r7, #0]
    }
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <xTaskIncrementTick+0x46>
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <xTaskIncrementTick+0x158>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <xTaskIncrementTick+0x15c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a41      	ldr	r2, [pc, #260]	; (800409c <xTaskIncrementTick+0x158>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <xTaskIncrementTick+0x15c>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <xTaskIncrementTick+0x160>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <xTaskIncrementTick+0x160>)
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	f000 fb4b 	bl	8004644 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <xTaskIncrementTick+0x164>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d34d      	bcc.n	8004054 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb8:	4b38      	ldr	r3, [pc, #224]	; (800409c <xTaskIncrementTick+0x158>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc2:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <xTaskIncrementTick+0x164>)
 8003fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fc8:	601a      	str	r2, [r3, #0]
                    break;
 8003fca:	e043      	b.n	8004054 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <xTaskIncrementTick+0x158>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d203      	bcs.n	8003fec <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <xTaskIncrementTick+0x164>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fea:	e033      	b.n	8004054 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fc1f 	bl	8002834 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	3318      	adds	r3, #24
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fc16 	bl	8002834 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f002 f93e 	bl	800628c <SEGGER_SYSVIEW_OnTaskStartReady>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <xTaskIncrementTick+0x168>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d903      	bls.n	8004024 <xTaskIncrementTick+0xe0>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <xTaskIncrementTick+0x168>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <xTaskIncrementTick+0x16c>)
 8004032:	441a      	add	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f7fe fb9d 	bl	800277a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <xTaskIncrementTick+0x170>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	429a      	cmp	r2, r3
 800404c:	d3b4      	bcc.n	8003fb8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800404e:	2301      	movs	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004052:	e7b1      	b.n	8003fb8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004054:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <xTaskIncrementTick+0x170>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4915      	ldr	r1, [pc, #84]	; (80040b0 <xTaskIncrementTick+0x16c>)
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d901      	bls.n	8004070 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <xTaskIncrementTick+0x174>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e004      	b.n	8004088 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <xTaskIncrementTick+0x178>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <xTaskIncrementTick+0x178>)
 8004086:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004088:	697b      	ldr	r3, [r7, #20]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20002da0 	.word	0x20002da0
 8004098:	20002d7c 	.word	0x20002d7c
 800409c:	20002d30 	.word	0x20002d30
 80040a0:	20002d34 	.word	0x20002d34
 80040a4:	20002d90 	.word	0x20002d90
 80040a8:	20002d98 	.word	0x20002d98
 80040ac:	20002d80 	.word	0x20002d80
 80040b0:	200028a8 	.word	0x200028a8
 80040b4:	200028a4 	.word	0x200028a4
 80040b8:	20002d8c 	.word	0x20002d8c
 80040bc:	20002d88 	.word	0x20002d88

080040c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040c6:	4b41      	ldr	r3, [pc, #260]	; (80041cc <vTaskSwitchContext+0x10c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80040ce:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <vTaskSwitchContext+0x110>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80040d4:	e076      	b.n	80041c4 <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 80040d6:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <vTaskSwitchContext+0x110>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <vTaskSwitchContext+0x114>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d111      	bne.n	8004118 <vTaskSwitchContext+0x58>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3304      	adds	r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d10b      	bne.n	8004118 <vTaskSwitchContext+0x58>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	3308      	adds	r3, #8
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d105      	bne.n	8004118 <vTaskSwitchContext+0x58>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	330c      	adds	r3, #12
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	429a      	cmp	r2, r3
 8004116:	d008      	beq.n	800412a <vTaskSwitchContext+0x6a>
 8004118:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <vTaskSwitchContext+0x114>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <vTaskSwitchContext+0x114>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3334      	adds	r3, #52	; 0x34
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f003 f993 	bl	8007450 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800412a:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <vTaskSwitchContext+0x118>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e010      	b.n	8004154 <vTaskSwitchContext+0x94>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <vTaskSwitchContext+0x8e>
        __asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	607b      	str	r3, [r7, #4]
    }
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <vTaskSwitchContext+0x8c>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	3b01      	subs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	4921      	ldr	r1, [pc, #132]	; (80041dc <vTaskSwitchContext+0x11c>)
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0e4      	beq.n	8004132 <vTaskSwitchContext+0x72>
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <vTaskSwitchContext+0x11c>)
 8004174:	4413      	add	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3308      	adds	r3, #8
 800418a:	429a      	cmp	r2, r3
 800418c:	d104      	bne.n	8004198 <vTaskSwitchContext+0xd8>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <vTaskSwitchContext+0x114>)
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <vTaskSwitchContext+0x118>)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <vTaskSwitchContext+0x114>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <vTaskSwitchContext+0x120>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d102      	bne.n	80041ba <vTaskSwitchContext+0xfa>
 80041b4:	f001 ffca 	bl	800614c <SEGGER_SYSVIEW_OnIdle>
}
 80041b8:	e004      	b.n	80041c4 <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <vTaskSwitchContext+0x114>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f002 f822 	bl	8006208 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80041c4:	bf00      	nop
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20002da0 	.word	0x20002da0
 80041d0:	20002d8c 	.word	0x20002d8c
 80041d4:	200028a4 	.word	0x200028a4
 80041d8:	20002d80 	.word	0x20002d80
 80041dc:	200028a8 	.word	0x200028a8
 80041e0:	20002d9c 	.word	0x20002d9c

080041e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
    }
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <vTaskPlaceOnEventList+0x44>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3318      	adds	r3, #24
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fe fad5 	bl	80027c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004218:	2101      	movs	r1, #1
 800421a:	6838      	ldr	r0, [r7, #0]
 800421c:	f000 fac2 	bl	80047a4 <prvAddCurrentTaskToDelayedList>
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200028a4 	.word	0x200028a4

0800422c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
    }
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <vTaskPlaceOnEventListRestricted+0x58>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3318      	adds	r3, #24
 800425a:	4619      	mov	r1, r3
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7fe fa8c 	bl	800277a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800426c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800426e:	2024      	movs	r0, #36	; 0x24
 8004270:	f001 fa6e 	bl	8005750 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f000 fa94 	bl	80047a4 <prvAddCurrentTaskToDelayedList>
    }
 800427c:	bf00      	nop
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	200028a4 	.word	0x200028a4

08004288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
    }
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3318      	adds	r3, #24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fabb 	bl	8002834 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <xTaskRemoveFromEventList+0xb8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d121      	bne.n	800430a <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fab2 	bl	8002834 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 ffda 	bl	800628c <SEGGER_SYSVIEW_OnTaskStartReady>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <xTaskRemoveFromEventList+0xbc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d903      	bls.n	80042ec <xTaskRemoveFromEventList+0x64>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	4a16      	ldr	r2, [pc, #88]	; (8004344 <xTaskRemoveFromEventList+0xbc>)
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4a13      	ldr	r2, [pc, #76]	; (8004348 <xTaskRemoveFromEventList+0xc0>)
 80042fa:	441a      	add	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7fe fa39 	bl	800277a <vListInsertEnd>
 8004308:	e005      	b.n	8004316 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	3318      	adds	r3, #24
 800430e:	4619      	mov	r1, r3
 8004310:	480e      	ldr	r0, [pc, #56]	; (800434c <xTaskRemoveFromEventList+0xc4>)
 8004312:	f7fe fa32 	bl	800277a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <xTaskRemoveFromEventList+0xc8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	429a      	cmp	r2, r3
 8004322:	d905      	bls.n	8004330 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <xTaskRemoveFromEventList+0xcc>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e001      	b.n	8004334 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004334:	697b      	ldr	r3, [r7, #20]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20002da0 	.word	0x20002da0
 8004344:	20002d80 	.word	0x20002d80
 8004348:	200028a8 	.word	0x200028a8
 800434c:	20002d38 	.word	0x20002d38
 8004350:	200028a4 	.word	0x200028a4
 8004354:	20002d8c 	.word	0x20002d8c

08004358 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <vTaskInternalSetTimeOutState+0x24>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <vTaskInternalSetTimeOutState+0x28>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20002d90 	.word	0x20002d90
 8004380:	20002d7c 	.word	0x20002d7c

08004384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	613b      	str	r3, [r7, #16]
    }
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60fb      	str	r3, [r7, #12]
    }
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80043c6:	f7fe fb8f 	bl	8002ae8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80043ca:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <xTaskCheckForTimeOut+0xc4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e2:	d102      	bne.n	80043ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	e026      	b.n	8004438 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <xTaskCheckForTimeOut+0xc8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d00a      	beq.n	800440c <xTaskCheckForTimeOut+0x88>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d305      	bcc.n	800440c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004400:	2301      	movs	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	e015      	b.n	8004438 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	429a      	cmp	r2, r3
 8004414:	d20b      	bcs.n	800442e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad2      	subs	r2, r2, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ff98 	bl	8004358 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e004      	b.n	8004438 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004438:	f7fe fb86 	bl	8002b48 <vPortExitCritical>

    return xReturn;
 800443c:	69fb      	ldr	r3, [r7, #28]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20002d7c 	.word	0x20002d7c
 800444c:	20002d90 	.word	0x20002d90

08004450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <vTaskMissedYield+0x14>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	20002d8c 	.word	0x20002d8c

08004468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004470:	f000 f852 	bl	8004518 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <prvIdleTask+0x28>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d9f9      	bls.n	8004470 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <prvIdleTask+0x2c>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800448c:	e7f0      	b.n	8004470 <prvIdleTask+0x8>
 800448e:	bf00      	nop
 8004490:	200028a8 	.word	0x200028a8
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	e00c      	b.n	80044be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <prvInitialiseTaskLists+0x60>)
 80044b0:	4413      	add	r3, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe f934 	bl	8002720 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3301      	adds	r3, #1
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b37      	cmp	r3, #55	; 0x37
 80044c2:	d9ef      	bls.n	80044a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80044c4:	480d      	ldr	r0, [pc, #52]	; (80044fc <prvInitialiseTaskLists+0x64>)
 80044c6:	f7fe f92b 	bl	8002720 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80044ca:	480d      	ldr	r0, [pc, #52]	; (8004500 <prvInitialiseTaskLists+0x68>)
 80044cc:	f7fe f928 	bl	8002720 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80044d0:	480c      	ldr	r0, [pc, #48]	; (8004504 <prvInitialiseTaskLists+0x6c>)
 80044d2:	f7fe f925 	bl	8002720 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80044d6:	480c      	ldr	r0, [pc, #48]	; (8004508 <prvInitialiseTaskLists+0x70>)
 80044d8:	f7fe f922 	bl	8002720 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80044dc:	480b      	ldr	r0, [pc, #44]	; (800450c <prvInitialiseTaskLists+0x74>)
 80044de:	f7fe f91f 	bl	8002720 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <prvInitialiseTaskLists+0x78>)
 80044e4:	4a05      	ldr	r2, [pc, #20]	; (80044fc <prvInitialiseTaskLists+0x64>)
 80044e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <prvInitialiseTaskLists+0x7c>)
 80044ea:	4a05      	ldr	r2, [pc, #20]	; (8004500 <prvInitialiseTaskLists+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200028a8 	.word	0x200028a8
 80044fc:	20002d08 	.word	0x20002d08
 8004500:	20002d1c 	.word	0x20002d1c
 8004504:	20002d38 	.word	0x20002d38
 8004508:	20002d4c 	.word	0x20002d4c
 800450c:	20002d64 	.word	0x20002d64
 8004510:	20002d30 	.word	0x20002d30
 8004514:	20002d34 	.word	0x20002d34

08004518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800451e:	e019      	b.n	8004554 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004520:	f7fe fae2 	bl	8002ae8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004524:	4b10      	ldr	r3, [pc, #64]	; (8004568 <prvCheckTasksWaitingTermination+0x50>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe f97f 	bl	8002834 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <prvCheckTasksWaitingTermination+0x54>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3b01      	subs	r3, #1
 800453c:	4a0b      	ldr	r2, [pc, #44]	; (800456c <prvCheckTasksWaitingTermination+0x54>)
 800453e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <prvCheckTasksWaitingTermination+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3b01      	subs	r3, #1
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <prvCheckTasksWaitingTermination+0x58>)
 8004548:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800454a:	f7fe fafd 	bl	8002b48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f848 	bl	80045e4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <prvCheckTasksWaitingTermination+0x58>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e1      	bne.n	8004520 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20002d4c 	.word	0x20002d4c
 800456c:	20002d78 	.word	0x20002d78
 8004570:	20002d60 	.word	0x20002d60

08004574 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004580:	e005      	b.n	800458e <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3301      	adds	r3, #1
 8004586:	607b      	str	r3, [r7, #4]
            ulCount++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2ba5      	cmp	r3, #165	; 0xa5
 8004594:	d0f5      	beq.n	8004582 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	089b      	lsrs	r3, r3, #2
 800459a:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	b29b      	uxth	r3, r3
    }
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <uxTaskGetStackHighWaterMark+0x14>
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <uxTaskGetStackHighWaterMark+0x34>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e000      	b.n	80045c2 <uxTaskGetStackHighWaterMark+0x16>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80045ca:	6938      	ldr	r0, [r7, #16]
 80045cc:	f7ff ffd2 	bl	8004574 <prvTaskCheckFreeStackSpace>
 80045d0:	4603      	mov	r3, r0
 80045d2:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80045d4:	68fb      	ldr	r3, [r7, #12]
    }
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200028a4 	.word	0x200028a4

080045e4 <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d108      	bne.n	8004608 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd ff72 	bl	80024e4 <vPortFree>
                    vPortFree( pxTCB );
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7fd ff6f 	bl	80024e4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004606:	e018      	b.n	800463a <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800460e:	2b01      	cmp	r3, #1
 8004610:	d103      	bne.n	800461a <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd ff66 	bl	80024e4 <vPortFree>
    }
 8004618:	e00f      	b.n	800463a <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004620:	2b02      	cmp	r3, #2
 8004622:	d00a      	beq.n	800463a <prvDeleteTCB+0x56>
        __asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
    }
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <prvDeleteTCB+0x54>
    }
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <prvResetNextTaskUnblockTime+0x30>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <prvResetNextTaskUnblockTime+0x34>)
 8004654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004658:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800465a:	e005      	b.n	8004668 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <prvResetNextTaskUnblockTime+0x30>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a04      	ldr	r2, [pc, #16]	; (8004678 <prvResetNextTaskUnblockTime+0x34>)
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20002d30 	.word	0x20002d30
 8004678:	20002d98 	.word	0x20002d98

0800467c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <xTaskGetSchedulerState+0x34>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800468a:	2301      	movs	r3, #1
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	e008      	b.n	80046a2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <xTaskGetSchedulerState+0x38>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004698:	2302      	movs	r3, #2
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e001      	b.n	80046a2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80046a2:	687b      	ldr	r3, [r7, #4]
    }
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	20002d84 	.word	0x20002d84
 80046b4:	20002da0 	.word	0x20002da0

080046b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d05f      	beq.n	800478e <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80046ce:	4b32      	ldr	r3, [pc, #200]	; (8004798 <xTaskPriorityDisinherit+0xe0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d00a      	beq.n	80046ee <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60fb      	str	r3, [r7, #12]
    }
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60bb      	str	r3, [r7, #8]
    }
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	429a      	cmp	r2, r3
 8004720:	d035      	beq.n	800478e <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	2b00      	cmp	r3, #0
 8004728:	d131      	bne.n	800478e <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3304      	adds	r3, #4
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe f880 	bl	8002834 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4619      	mov	r1, r3
 8004738:	204a      	movs	r0, #74	; 0x4a
 800473a:	f001 f827 	bl	800578c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fd99 	bl	800628c <SEGGER_SYSVIEW_OnTaskStartReady>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <xTaskPriorityDisinherit+0xe4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d903      	bls.n	800476e <xTaskPriorityDisinherit+0xb6>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	4a0c      	ldr	r2, [pc, #48]	; (800479c <xTaskPriorityDisinherit+0xe4>)
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <xTaskPriorityDisinherit+0xe8>)
 800477c:	441a      	add	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fd fff8 	bl	800277a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800478e:	697b      	ldr	r3, [r7, #20]
    }
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200028a4 	.word	0x200028a4
 800479c:	20002d80 	.word	0x20002d80
 80047a0:	200028a8 	.word	0x200028a8

080047a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <prvAddCurrentTaskToDelayedList+0xa8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b4:	4b26      	ldr	r3, [pc, #152]	; (8004850 <prvAddCurrentTaskToDelayedList+0xac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f83a 	bl	8002834 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c6:	d10a      	bne.n	80047de <prvAddCurrentTaskToDelayedList+0x3a>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <prvAddCurrentTaskToDelayedList+0xac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	481f      	ldr	r0, [pc, #124]	; (8004854 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047d8:	f7fd ffcf 	bl	800277a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80047dc:	e032      	b.n	8004844 <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <prvAddCurrentTaskToDelayedList+0xac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20f      	bcs.n	8004816 <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <prvAddCurrentTaskToDelayedList+0xac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2104      	movs	r1, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 fd87 	bl	8006310 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <prvAddCurrentTaskToDelayedList+0xac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7fd ffd7 	bl	80027c2 <vListInsert>
}
 8004814:	e016      	b.n	8004844 <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <prvAddCurrentTaskToDelayedList+0xac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2104      	movs	r1, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f001 fd77 	bl	8006310 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <prvAddCurrentTaskToDelayedList+0xac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7fd ffc7 	bl	80027c2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	d202      	bcs.n	8004844 <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 800483e:	4a08      	ldr	r2, [pc, #32]	; (8004860 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6013      	str	r3, [r2, #0]
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20002d7c 	.word	0x20002d7c
 8004850:	200028a4 	.word	0x200028a4
 8004854:	20002d64 	.word	0x20002d64
 8004858:	20002d34 	.word	0x20002d34
 800485c:	20002d30 	.word	0x20002d30
 8004860:	20002d98 	.word	0x20002d98

08004864 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800486e:	f000 fb07 	bl	8004e80 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <xTimerCreateTimerTask+0x80>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d021      	beq.n	80048be <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004882:	1d3a      	adds	r2, r7, #4
 8004884:	f107 0108 	add.w	r1, r7, #8
 8004888:	f107 030c 	add.w	r3, r7, #12
 800488c:	4618      	mov	r0, r3
 800488e:	f002 fe09 	bl	80074a4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	9202      	str	r2, [sp, #8]
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	2302      	movs	r3, #2
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2300      	movs	r3, #0
 80048a2:	460a      	mov	r2, r1
 80048a4:	4910      	ldr	r1, [pc, #64]	; (80048e8 <xTimerCreateTimerTask+0x84>)
 80048a6:	4811      	ldr	r0, [pc, #68]	; (80048ec <xTimerCreateTimerTask+0x88>)
 80048a8:	f7ff f802 	bl	80038b0 <xTaskCreateStatic>
 80048ac:	4603      	mov	r3, r0
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <xTimerCreateTimerTask+0x8c>)
 80048b0:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <xTimerCreateTimerTask+0x8c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 80048ba:	2301      	movs	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xTimerCreateTimerTask+0x76>
        __asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	613b      	str	r3, [r7, #16]
    }
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xTimerCreateTimerTask+0x74>
        return xReturn;
 80048da:	697b      	ldr	r3, [r7, #20]
    }
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20002dd4 	.word	0x20002dd4
 80048e8:	08008318 	.word	0x08008318
 80048ec:	08004a29 	.word	0x08004a29
 80048f0:	20002dd8 	.word	0x20002dd8

080048f4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xTimerGenericCommand+0x2e>
        __asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	623b      	str	r3, [r7, #32]
    }
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004922:	4b1a      	ldr	r3, [pc, #104]	; (800498c <xTimerGenericCommand+0x98>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d02a      	beq.n	8004980 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b05      	cmp	r3, #5
 800493a:	dc18      	bgt.n	800496e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800493c:	f7ff fe9e 	bl	800467c <xTaskGetSchedulerState>
 8004940:	4603      	mov	r3, r0
 8004942:	2b02      	cmp	r3, #2
 8004944:	d109      	bne.n	800495a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <xTimerGenericCommand+0x98>)
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	f107 0110 	add.w	r1, r7, #16
 800494e:	2300      	movs	r3, #0
 8004950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004952:	f7fe fb43 	bl	8002fdc <xQueueGenericSend>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24
 8004958:	e012      	b.n	8004980 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800495a:	4b0c      	ldr	r3, [pc, #48]	; (800498c <xTimerGenericCommand+0x98>)
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	f107 0110 	add.w	r1, r7, #16
 8004962:	2300      	movs	r3, #0
 8004964:	2200      	movs	r2, #0
 8004966:	f7fe fb39 	bl	8002fdc <xQueueGenericSend>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24
 800496c:	e008      	b.n	8004980 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <xTimerGenericCommand+0x98>)
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	f107 0110 	add.w	r1, r7, #16
 8004976:	2300      	movs	r3, #0
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	f7fe fc55 	bl	8003228 <xQueueGenericSendFromISR>
 800497e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004982:	4618      	mov	r0, r3
 8004984:	3728      	adds	r7, #40	; 0x28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20002dd4 	.word	0x20002dd4

08004990 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800499a:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <prvProcessExpiredTimer+0x94>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fd ff43 	bl	8002834 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d022      	beq.n	8004a02 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	18d1      	adds	r1, r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f000 f8d1 	bl	8004b70 <prvInsertTimerInActiveList>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01f      	beq.n	8004a14 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	2100      	movs	r1, #0
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f7ff ff88 	bl	80048f4 <xTimerGenericCommand>
 80049e4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d113      	bne.n	8004a14 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60fb      	str	r3, [r7, #12]
    }
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	4798      	blx	r3
    }
 8004a1c:	bf00      	nop
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20002dcc 	.word	0x20002dcc

08004a28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a30:	f107 0308 	add.w	r3, r7, #8
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f857 	bl	8004ae8 <prvGetNextExpireTime>
 8004a3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f803 	bl	8004a4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004a46:	f000 f8d5 	bl	8004bf4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a4a:	e7f1      	b.n	8004a30 <prvTimerTask+0x8>

08004a4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004a56:	f7ff f9a3 	bl	8003da0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a5a:	f107 0308 	add.w	r3, r7, #8
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f866 	bl	8004b30 <prvSampleTimeNow>
 8004a64:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d130      	bne.n	8004ace <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <prvProcessTimerOrBlockTask+0x3c>
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d806      	bhi.n	8004a88 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004a7a:	f7ff f99f 	bl	8003dbc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff85 	bl	8004990 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004a86:	e024      	b.n	8004ad2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <prvProcessTimerOrBlockTask+0x90>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <prvProcessTimerOrBlockTask+0x50>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <prvProcessTimerOrBlockTask+0x52>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <prvProcessTimerOrBlockTask+0x94>)
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	4619      	mov	r1, r3
 8004aae:	f7fe fecb 	bl	8003848 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004ab2:	f7ff f983 	bl	8003dbc <xTaskResumeAll>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <prvProcessTimerOrBlockTask+0x98>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	f3bf 8f6f 	isb	sy
    }
 8004acc:	e001      	b.n	8004ad2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004ace:	f7ff f975 	bl	8003dbc <xTaskResumeAll>
    }
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20002dd0 	.word	0x20002dd0
 8004ae0:	20002dd4 	.word	0x20002dd4
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <prvGetNextExpireTime+0x44>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <prvGetNextExpireTime+0x16>
 8004afa:	2201      	movs	r2, #1
 8004afc:	e000      	b.n	8004b00 <prvGetNextExpireTime+0x18>
 8004afe:	2200      	movs	r2, #0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d105      	bne.n	8004b18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <prvGetNextExpireTime+0x44>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e001      	b.n	8004b1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
    }
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20002dcc 	.word	0x20002dcc

08004b30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004b38:	f7ff f9e2 	bl	8003f00 <xTaskGetTickCount>
 8004b3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <prvSampleTimeNow+0x3c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d205      	bcs.n	8004b54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004b48:	f000 f936 	bl	8004db8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e002      	b.n	8004b5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <prvSampleTimeNow+0x3c>)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004b60:	68fb      	ldr	r3, [r7, #12]
    }
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20002ddc 	.word	0x20002ddc

08004b70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d812      	bhi.n	8004bbc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e01b      	b.n	8004be2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <prvInsertTimerInActiveList+0x7c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f7fd fe04 	bl	80027c2 <vListInsert>
 8004bba:	e012      	b.n	8004be2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d206      	bcs.n	8004bd2 <prvInsertTimerInActiveList+0x62>
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d302      	bcc.n	8004bd2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e007      	b.n	8004be2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <prvInsertTimerInActiveList+0x80>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f7fd fdf0 	bl	80027c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004be2:	697b      	ldr	r3, [r7, #20]
    }
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20002dd0 	.word	0x20002dd0
 8004bf0:	20002dcc 	.word	0x20002dcc

08004bf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08e      	sub	sp, #56	; 0x38
 8004bf8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bfa:	e0ca      	b.n	8004d92 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da18      	bge.n	8004c34 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c02:	1d3b      	adds	r3, r7, #4
 8004c04:	3304      	adds	r3, #4
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <prvProcessReceivedCommands+0x30>
        __asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	61fb      	str	r3, [r7, #28]
    }
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2a:	6850      	ldr	r0, [r2, #4]
 8004c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2e:	6892      	ldr	r2, [r2, #8]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f2c0 80aa 	blt.w	8004d90 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd fdf1 	bl	8002834 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c52:	463b      	mov	r3, r7
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff6b 	bl	8004b30 <prvSampleTimeNow>
 8004c5a:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b09      	cmp	r3, #9
 8004c60:	f200 8097 	bhi.w	8004d92 <prvProcessReceivedCommands+0x19e>
 8004c64:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <prvProcessReceivedCommands+0x78>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c95 	.word	0x08004c95
 8004c78:	08004d09 	.word	0x08004d09
 8004c7c:	08004d1d 	.word	0x08004d1d
 8004c80:	08004d67 	.word	0x08004d67
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c95 	.word	0x08004c95
 8004c8c:	08004d09 	.word	0x08004d09
 8004c90:	08004d1d 	.word	0x08004d1d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	18d1      	adds	r1, r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb4:	f7ff ff5c 	bl	8004b70 <prvInsertTimerInActiveList>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d069      	beq.n	8004d92 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05e      	beq.n	8004d92 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	441a      	add	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce6:	f7ff fe05 	bl	80048f4 <xTimerGenericCommand>
 8004cea:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d14f      	bne.n	8004d92 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	61bb      	str	r3, [r7, #24]
    }
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004d1a:	e03a      	b.n	8004d92 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	617b      	str	r3, [r7, #20]
    }
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	18d1      	adds	r1, r2, r3
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d60:	f7ff ff06 	bl	8004b70 <prvInsertTimerInActiveList>
                        break;
 8004d64:	e015      	b.n	8004d92 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 8004d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d76:	f7fd fbb5 	bl	80024e4 <vPortFree>
 8004d7a:	e00a      	b.n	8004d92 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004d8e:	e000      	b.n	8004d92 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004d90:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <prvProcessReceivedCommands+0x1c0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	1d39      	adds	r1, r7, #4
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fb02 	bl	80033a4 <xQueueReceive>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f47f af2a 	bne.w	8004bfc <prvProcessReceivedCommands+0x8>
        }
    }
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	3730      	adds	r7, #48	; 0x30
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20002dd4 	.word	0x20002dd4

08004db8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dbe:	e048      	b.n	8004e52 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <prvSwitchTimerLists+0xc0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dca:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <prvSwitchTimerLists+0xc0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fd fd2b 	bl	8002834 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02e      	beq.n	8004e52 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d90e      	bls.n	8004e24 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <prvSwitchTimerLists+0xc0>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f7fd fcd0 	bl	80027c2 <vListInsert>
 8004e22:	e016      	b.n	8004e52 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e24:	2300      	movs	r3, #0
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff fd60 	bl	80048f4 <xTimerGenericCommand>
 8004e34:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	603b      	str	r3, [r7, #0]
    }
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <prvSwitchTimerLists+0xc0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1b1      	bne.n	8004dc0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <prvSwitchTimerLists+0xc0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <prvSwitchTimerLists+0xc4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <prvSwitchTimerLists+0xc0>)
 8004e68:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004e6a:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <prvSwitchTimerLists+0xc4>)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6013      	str	r3, [r2, #0]
    }
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20002dcc 	.word	0x20002dcc
 8004e7c:	20002dd0 	.word	0x20002dd0

08004e80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004e86:	f7fd fe2f 	bl	8002ae8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <prvCheckForValidListAndQueue+0x60>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d120      	bne.n	8004ed4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e92:	4814      	ldr	r0, [pc, #80]	; (8004ee4 <prvCheckForValidListAndQueue+0x64>)
 8004e94:	f7fd fc44 	bl	8002720 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e98:	4813      	ldr	r0, [pc, #76]	; (8004ee8 <prvCheckForValidListAndQueue+0x68>)
 8004e9a:	f7fd fc41 	bl	8002720 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <prvCheckForValidListAndQueue+0x6c>)
 8004ea0:	4a10      	ldr	r2, [pc, #64]	; (8004ee4 <prvCheckForValidListAndQueue+0x64>)
 8004ea2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <prvCheckForValidListAndQueue+0x70>)
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <prvCheckForValidListAndQueue+0x68>)
 8004ea8:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <prvCheckForValidListAndQueue+0x74>)
 8004eb0:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <prvCheckForValidListAndQueue+0x78>)
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	200a      	movs	r0, #10
 8004eb6:	f7fd ffef 	bl	8002e98 <xQueueGenericCreateStatic>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <prvCheckForValidListAndQueue+0x60>)
 8004ebe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <prvCheckForValidListAndQueue+0x60>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <prvCheckForValidListAndQueue+0x60>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	490b      	ldr	r1, [pc, #44]	; (8004efc <prvCheckForValidListAndQueue+0x7c>)
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe fc88 	bl	80037e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ed4:	f7fd fe38 	bl	8002b48 <vPortExitCritical>
    }
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20002dd4 	.word	0x20002dd4
 8004ee4:	20002da4 	.word	0x20002da4
 8004ee8:	20002db8 	.word	0x20002db8
 8004eec:	20002dcc 	.word	0x20002dcc
 8004ef0:	20002dd0 	.word	0x20002dd0
 8004ef4:	20002e80 	.word	0x20002e80
 8004ef8:	20002de0 	.word	0x20002de0
 8004efc:	08008320 	.word	0x08008320

08004f00 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <_DoInit+0x98>)
 8004f08:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2203      	movs	r2, #3
 8004f14:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a20      	ldr	r2, [pc, #128]	; (8004f9c <_DoInit+0x9c>)
 8004f1a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <_DoInit+0xa0>)
 8004f20:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f28:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <_DoInit+0x9c>)
 8004f40:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <_DoInit+0xa4>)
 8004f46:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2210      	movs	r2, #16
 8004f4c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3307      	adds	r3, #7
 8004f64:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <_DoInit+0xa8>)
 8004f66:	6810      	ldr	r0, [r2, #0]
 8004f68:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f6a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <_DoInit+0xac>)
 8004f72:	6810      	ldr	r0, [r2, #0]
 8004f74:	6018      	str	r0, [r3, #0]
 8004f76:	8891      	ldrh	r1, [r2, #4]
 8004f78:	7992      	ldrb	r2, [r2, #6]
 8004f7a:	8099      	strh	r1, [r3, #4]
 8004f7c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f7e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f88:	f3bf 8f5f 	dmb	sy
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	20002ed0 	.word	0x20002ed0
 8004f9c:	08008328 	.word	0x08008328
 8004fa0:	20002f78 	.word	0x20002f78
 8004fa4:	20003f78 	.word	0x20003f78
 8004fa8:	08008334 	.word	0x08008334
 8004fac:	08008338 	.word	0x08008338

08004fb0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08c      	sub	sp, #48	; 0x30
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <SEGGER_RTT_ReadNoLock+0x1e>
 8004fca:	f7ff ff99 	bl	8004f00 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	4413      	add	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	3360      	adds	r3, #96	; 0x60
 8004fda:	4a37      	ldr	r2, [pc, #220]	; (80050b8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d92b      	bls.n	8005054 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4293      	cmp	r3, r2
 800500c:	bf28      	it	cs
 800500e:	4613      	movcs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	4413      	add	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	6939      	ldr	r1, [r7, #16]
 8005020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005022:	f003 f953 	bl	80082cc <memcpy>
    NumBytesRead += NumBytesRem;
 8005026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800503e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504c:	429a      	cmp	r2, r3
 800504e:	d101      	bne.n	8005054 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005050:	2300      	movs	r3, #0
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4293      	cmp	r3, r2
 8005062:	bf28      	it	cs
 8005064:	4613      	movcs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d019      	beq.n	80050a2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	4413      	add	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	6939      	ldr	r1, [r7, #16]
 800507c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800507e:	f003 f925 	bl	80082cc <memcpy>
    NumBytesRead += NumBytesRem;
 8005082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800509a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3730      	adds	r7, #48	; 0x30
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20002ed0 	.word	0x20002ed0

080050bc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050ca:	4b3d      	ldr	r3, [pc, #244]	; (80051c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <SEGGER_RTT_AllocUpBuffer+0x20>
 80050d8:	f7ff ff12 	bl	8004f00 <_DoInit>
  SEGGER_RTT_LOCK();
 80050dc:	f3ef 8311 	mrs	r3, BASEPRI
 80050e0:	f04f 0120 	mov.w	r1, #32
 80050e4:	f381 8811 	msr	BASEPRI, r1
 80050e8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050ea:	4b35      	ldr	r3, [pc, #212]	; (80051c0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050ec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80050f2:	6939      	ldr	r1, [r7, #16]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	4613      	mov	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	440b      	add	r3, r1
 8005102:	3304      	adds	r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	429a      	cmp	r2, r3
 8005118:	dbeb      	blt.n	80050f2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800511a:	e000      	b.n	800511e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800511c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	429a      	cmp	r2, r3
 8005126:	da3f      	bge.n	80051a8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005128:	6939      	ldr	r1, [r7, #16]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	4613      	mov	r3, r2
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	440b      	add	r3, r1
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800513c:	6939      	ldr	r1, [r7, #16]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	440b      	add	r3, r1
 800514c:	3304      	adds	r3, #4
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005152:	6939      	ldr	r1, [r7, #16]
 8005154:	69fa      	ldr	r2, [r7, #28]
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	440b      	add	r3, r1
 8005160:	3320      	adds	r3, #32
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005166:	6939      	ldr	r1, [r7, #16]
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	440b      	add	r3, r1
 8005174:	3328      	adds	r3, #40	; 0x28
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	4613      	mov	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	440b      	add	r3, r1
 8005188:	3324      	adds	r3, #36	; 0x24
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800518e:	6939      	ldr	r1, [r7, #16]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	440b      	add	r3, r1
 800519c:	332c      	adds	r3, #44	; 0x2c
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051a2:	f3bf 8f5f 	dmb	sy
 80051a6:	e002      	b.n	80051ae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051b4:	69fb      	ldr	r3, [r7, #28]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20002ed0 	.word	0x20002ed0

080051c4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80051d2:	4b21      	ldr	r3, [pc, #132]	; (8005258 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80051e0:	f7ff fe8e 	bl	8004f00 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051e4:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051e6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d82c      	bhi.n	8005248 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80051ee:	f3ef 8311 	mrs	r3, BASEPRI
 80051f2:	f04f 0120 	mov.w	r1, #32
 80051f6:	f381 8811 	msr	BASEPRI, r1
 80051fa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	3360      	adds	r3, #96	; 0x60
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00e      	beq.n	8005232 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005238:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005242:	2300      	movs	r3, #0
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
 8005246:	e002      	b.n	800524e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005250:	4618      	mov	r0, r3
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20002ed0 	.word	0x20002ed0

0800525c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00f      	beq.n	8005292 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005272:	e002      	b.n	800527a <_EncodeStr+0x1e>
      Len++;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	3301      	adds	r3, #1
 8005278:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f6      	bne.n	8005274 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d901      	bls.n	8005292 <_EncodeStr+0x36>
      Len = Limit;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2bfe      	cmp	r3, #254	; 0xfe
 8005296:	d806      	bhi.n	80052a6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	60fa      	str	r2, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	e011      	b.n	80052ca <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	60fa      	str	r2, [r7, #12]
 80052ac:	22ff      	movs	r2, #255	; 0xff
 80052ae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	60fa      	str	r2, [r7, #12]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	0a19      	lsrs	r1, r3, #8
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	60fa      	str	r2, [r7, #12]
 80052c6:	b2ca      	uxtb	r2, r1
 80052c8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052ce:	e00a      	b.n	80052e6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	1c53      	adds	r3, r2, #1
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1c59      	adds	r1, r3, #1
 80052da:	60f9      	str	r1, [r7, #12]
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	701a      	strb	r2, [r3, #0]
    n++;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	3301      	adds	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3f0      	bcc.n	80052d0 <_EncodeStr+0x74>
  }
  return pPayload;
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800531a:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <_HandleIncomingPacket+0xe0>)
 800531c:	7e1b      	ldrb	r3, [r3, #24]
 800531e:	4618      	mov	r0, r3
 8005320:	1cfb      	adds	r3, r7, #3
 8005322:	2201      	movs	r2, #1
 8005324:	4619      	mov	r1, r3
 8005326:	f7ff fe43 	bl	8004fb0 <SEGGER_RTT_ReadNoLock>
 800532a:	4603      	mov	r3, r0
 800532c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	dd54      	ble.n	80053de <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d032      	beq.n	80053a0 <_HandleIncomingPacket+0x8c>
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	dc42      	bgt.n	80053c4 <_HandleIncomingPacket+0xb0>
 800533e:	2b07      	cmp	r3, #7
 8005340:	dc16      	bgt.n	8005370 <_HandleIncomingPacket+0x5c>
 8005342:	2b00      	cmp	r3, #0
 8005344:	dd3e      	ble.n	80053c4 <_HandleIncomingPacket+0xb0>
 8005346:	3b01      	subs	r3, #1
 8005348:	2b06      	cmp	r3, #6
 800534a:	d83b      	bhi.n	80053c4 <_HandleIncomingPacket+0xb0>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <_HandleIncomingPacket+0x40>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005377 	.word	0x08005377
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005383 	.word	0x08005383
 8005360:	08005389 	.word	0x08005389
 8005364:	0800538f 	.word	0x0800538f
 8005368:	08005395 	.word	0x08005395
 800536c:	0800539b 	.word	0x0800539b
 8005370:	2b7f      	cmp	r3, #127	; 0x7f
 8005372:	d036      	beq.n	80053e2 <_HandleIncomingPacket+0xce>
 8005374:	e026      	b.n	80053c4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005376:	f000 fba7 	bl	8005ac8 <SEGGER_SYSVIEW_Start>
      break;
 800537a:	e037      	b.n	80053ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800537c:	f000 fc5e 	bl	8005c3c <SEGGER_SYSVIEW_Stop>
      break;
 8005380:	e034      	b.n	80053ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005382:	f000 fe37 	bl	8005ff4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005386:	e031      	b.n	80053ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005388:	f000 fdfc 	bl	8005f84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800538c:	e02e      	b.n	80053ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800538e:	f000 fc7b 	bl	8005c88 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005392:	e02b      	b.n	80053ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005394:	f001 f8ca 	bl	800652c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005398:	e028      	b.n	80053ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800539a:	f001 f8a9 	bl	80064f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800539e:	e025      	b.n	80053ec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053a0:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <_HandleIncomingPacket+0xe0>)
 80053a2:	7e1b      	ldrb	r3, [r3, #24]
 80053a4:	4618      	mov	r0, r3
 80053a6:	1cfb      	adds	r3, r7, #3
 80053a8:	2201      	movs	r2, #1
 80053aa:	4619      	mov	r1, r3
 80053ac:	f7ff fe00 	bl	8004fb0 <SEGGER_RTT_ReadNoLock>
 80053b0:	4603      	mov	r3, r0
 80053b2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	dd15      	ble.n	80053e6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 f817 	bl	80063f0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053c2:	e010      	b.n	80053e6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	b25b      	sxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	da0e      	bge.n	80053ea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <_HandleIncomingPacket+0xe0>)
 80053ce:	7e1b      	ldrb	r3, [r3, #24]
 80053d0:	4618      	mov	r0, r3
 80053d2:	1cfb      	adds	r3, r7, #3
 80053d4:	2201      	movs	r2, #1
 80053d6:	4619      	mov	r1, r3
 80053d8:	f7ff fdea 	bl	8004fb0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053dc:	e005      	b.n	80053ea <_HandleIncomingPacket+0xd6>
    }
  }
 80053de:	bf00      	nop
 80053e0:	e004      	b.n	80053ec <_HandleIncomingPacket+0xd8>
      break;
 80053e2:	bf00      	nop
 80053e4:	e002      	b.n	80053ec <_HandleIncomingPacket+0xd8>
      break;
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <_HandleIncomingPacket+0xd8>
      break;
 80053ea:	bf00      	nop
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20004390 	.word	0x20004390

080053f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08c      	sub	sp, #48	; 0x30
 80053fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053fe:	2301      	movs	r3, #1
 8005400:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	3301      	adds	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
 8005412:	e00b      	b.n	800542c <_TrySendOverflowPacket+0x34>
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	b2da      	uxtb	r2, r3
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800541e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	09db      	lsrs	r3, r3, #7
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	2b7f      	cmp	r3, #127	; 0x7f
 8005430:	d8f0      	bhi.n	8005414 <_TrySendOverflowPacket+0x1c>
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005442:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <_TrySendOverflowPacket+0xe0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005448:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	e00b      	b.n	8005474 <_TrySendOverflowPacket+0x7c>
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	1c59      	adds	r1, r3, #1
 8005464:	6279      	str	r1, [r7, #36]	; 0x24
 8005466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	09db      	lsrs	r3, r3, #7
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b7f      	cmp	r3, #127	; 0x7f
 8005478:	d8f0      	bhi.n	800545c <_TrySendOverflowPacket+0x64>
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	627a      	str	r2, [r7, #36]	; 0x24
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	4618      	mov	r0, r3
 8005490:	1d3b      	adds	r3, r7, #4
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	461a      	mov	r2, r3
 8005498:	1d3b      	adds	r3, r7, #4
 800549a:	4619      	mov	r1, r3
 800549c:	f7fa fea8 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054a0:	4603      	mov	r3, r0
 80054a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	e004      	b.n	80054c8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a03      	ldr	r2, [pc, #12]	; (80054d4 <_TrySendOverflowPacket+0xdc>)
 80054c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054c8:	693b      	ldr	r3, [r7, #16]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3730      	adds	r7, #48	; 0x30
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20004390 	.word	0x20004390
 80054d8:	e0001004 	.word	0xe0001004

080054dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054e8:	4b6c      	ldr	r3, [pc, #432]	; (800569c <_SendPacket+0x1c0>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d010      	beq.n	8005512 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054f0:	4b6a      	ldr	r3, [pc, #424]	; (800569c <_SendPacket+0x1c0>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80a3 	beq.w	8005640 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054fa:	4b68      	ldr	r3, [pc, #416]	; (800569c <_SendPacket+0x1c0>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d109      	bne.n	8005516 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005502:	f7ff ff79 	bl	80053f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005506:	4b65      	ldr	r3, [pc, #404]	; (800569c <_SendPacket+0x1c0>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	f040 809a 	bne.w	8005644 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005510:	e001      	b.n	8005516 <_SendPacket+0x3a>
    goto Send;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <_SendPacket+0x3c>
Send:
 8005516:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b1f      	cmp	r3, #31
 800551c:	d809      	bhi.n	8005532 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800551e:	4b5f      	ldr	r3, [pc, #380]	; (800569c <_SendPacket+0x1c0>)
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	f040 808b 	bne.w	8005648 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b17      	cmp	r3, #23
 8005536:	d807      	bhi.n	8005548 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b01      	subs	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e03d      	b.n	80055c4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b7f      	cmp	r3, #127	; 0x7f
 8005554:	d912      	bls.n	800557c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	09da      	lsrs	r2, r3, #7
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3b01      	subs	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	3a01      	subs	r2, #1
 800556e:	60fa      	str	r2, [r7, #12]
 8005570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e006      	b.n	800558a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3b01      	subs	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b7f      	cmp	r3, #127	; 0x7f
 800558e:	d912      	bls.n	80055b6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	09da      	lsrs	r2, r3, #7
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3b01      	subs	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	3a01      	subs	r2, #1
 80055a8:	60fa      	str	r2, [r7, #12]
 80055aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e006      	b.n	80055c4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055c4:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <_SendPacket+0x1c4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055ca:	4b34      	ldr	r3, [pc, #208]	; (800569c <_SendPacket+0x1c0>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	e00b      	b.n	80055f6 <_SendPacket+0x11a>
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	6279      	str	r1, [r7, #36]	; 0x24
 80055e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	09db      	lsrs	r3, r3, #7
 80055f4:	623b      	str	r3, [r7, #32]
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	2b7f      	cmp	r3, #127	; 0x7f
 80055fa:	d8f0      	bhi.n	80055de <_SendPacket+0x102>
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	627a      	str	r2, [r7, #36]	; 0x24
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800560c:	4b23      	ldr	r3, [pc, #140]	; (800569c <_SendPacket+0x1c0>)
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	4618      	mov	r0, r3
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	461a      	mov	r2, r3
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	f7fa fde8 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005620:	4603      	mov	r3, r0
 8005622:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800562a:	4a1c      	ldr	r2, [pc, #112]	; (800569c <_SendPacket+0x1c0>)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	60d3      	str	r3, [r2, #12]
 8005630:	e00b      	b.n	800564a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005632:	4b1a      	ldr	r3, [pc, #104]	; (800569c <_SendPacket+0x1c0>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <_SendPacket+0x1c0>)
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e004      	b.n	800564a <_SendPacket+0x16e>
    goto SendDone;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <_SendPacket+0x16e>
      goto SendDone;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <_SendPacket+0x16e>
      goto SendDone;
 8005648:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <_SendPacket+0x1c0>)
 800564c:	7e1b      	ldrb	r3, [r3, #24]
 800564e:	4619      	mov	r1, r3
 8005650:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <_SendPacket+0x1c8>)
 8005652:	460b      	mov	r3, r1
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	440b      	add	r3, r1
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	336c      	adds	r3, #108	; 0x6c
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <_SendPacket+0x1c0>)
 8005662:	7e1b      	ldrb	r3, [r3, #24]
 8005664:	4618      	mov	r0, r3
 8005666:	490f      	ldr	r1, [pc, #60]	; (80056a4 <_SendPacket+0x1c8>)
 8005668:	4603      	mov	r3, r0
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4403      	add	r3, r0
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	440b      	add	r3, r1
 8005672:	3370      	adds	r3, #112	; 0x70
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d00b      	beq.n	8005692 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800567a:	4b08      	ldr	r3, [pc, #32]	; (800569c <_SendPacket+0x1c0>)
 800567c:	789b      	ldrb	r3, [r3, #2]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d107      	bne.n	8005692 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <_SendPacket+0x1c0>)
 8005684:	2201      	movs	r2, #1
 8005686:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005688:	f7ff fe44 	bl	8005314 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <_SendPacket+0x1c0>)
 800568e:	2200      	movs	r2, #0
 8005690:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005692:	bf00      	nop
 8005694:	3728      	adds	r7, #40	; 0x28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20004390 	.word	0x20004390
 80056a0:	e0001004 	.word	0xe0001004
 80056a4:	20002ed0 	.word	0x20002ed0

080056a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056b6:	2300      	movs	r3, #0
 80056b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056bc:	4917      	ldr	r1, [pc, #92]	; (800571c <SEGGER_SYSVIEW_Init+0x74>)
 80056be:	4818      	ldr	r0, [pc, #96]	; (8005720 <SEGGER_SYSVIEW_Init+0x78>)
 80056c0:	f7ff fcfc 	bl	80050bc <SEGGER_RTT_AllocUpBuffer>
 80056c4:	4603      	mov	r3, r0
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	4b16      	ldr	r3, [pc, #88]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ce:	785a      	ldrb	r2, [r3, #1]
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d6:	7e1b      	ldrb	r3, [r3, #24]
 80056d8:	4618      	mov	r0, r3
 80056da:	2300      	movs	r3, #0
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2308      	movs	r3, #8
 80056e0:	4a11      	ldr	r2, [pc, #68]	; (8005728 <SEGGER_SYSVIEW_Init+0x80>)
 80056e2:	490f      	ldr	r1, [pc, #60]	; (8005720 <SEGGER_SYSVIEW_Init+0x78>)
 80056e4:	f7ff fd6e 	bl	80051c4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80056e8:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <SEGGER_SYSVIEW_Init+0x84>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80056f6:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005702:	4a08      	ldr	r2, [pc, #32]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005708:	4a06      	ldr	r2, [pc, #24]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <SEGGER_SYSVIEW_Init+0x7c>)
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20003f88 	.word	0x20003f88
 8005720:	08008340 	.word	0x08008340
 8005724:	20004390 	.word	0x20004390
 8005728:	20004388 	.word	0x20004388
 800572c:	e0001004 	.word	0xe0001004

08005730 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005738:	4a04      	ldr	r2, [pc, #16]	; (800574c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6113      	str	r3, [r2, #16]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20004390 	.word	0x20004390

08005750 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005758:	f3ef 8311 	mrs	r3, BASEPRI
 800575c:	f04f 0120 	mov.w	r1, #32
 8005760:	f381 8811 	msr	BASEPRI, r1
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	4808      	ldr	r0, [pc, #32]	; (8005788 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005768:	f7ff fdc8 	bl	80052fc <_PreparePacket>
 800576c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	68b8      	ldr	r0, [r7, #8]
 8005774:	f7ff feb2 	bl	80054dc <_SendPacket>
  RECORD_END();
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f383 8811 	msr	BASEPRI, r3
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200043c0 	.word	0x200043c0

0800578c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005796:	f3ef 8311 	mrs	r3, BASEPRI
 800579a:	f04f 0120 	mov.w	r1, #32
 800579e:	f381 8811 	msr	BASEPRI, r1
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	4816      	ldr	r0, [pc, #88]	; (8005800 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80057a6:	f7ff fda9 	bl	80052fc <_PreparePacket>
 80057aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	e00b      	b.n	80057d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	61f9      	str	r1, [r7, #28]
 80057c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	09db      	lsrs	r3, r3, #7
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b7f      	cmp	r3, #127	; 0x7f
 80057d6:	d8f0      	bhi.n	80057ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	61fa      	str	r2, [r7, #28]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	6938      	ldr	r0, [r7, #16]
 80057ee:	f7ff fe75 	bl	80054dc <_SendPacket>
  RECORD_END();
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f383 8811 	msr	BASEPRI, r3
}
 80057f8:	bf00      	nop
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200043c0 	.word	0x200043c0

08005804 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005810:	f3ef 8311 	mrs	r3, BASEPRI
 8005814:	f04f 0120 	mov.w	r1, #32
 8005818:	f381 8811 	msr	BASEPRI, r1
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	4825      	ldr	r0, [pc, #148]	; (80058b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005820:	f7ff fd6c 	bl	80052fc <_PreparePacket>
 8005824:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	e00b      	b.n	800584c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	b2da      	uxtb	r2, r3
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	1c59      	adds	r1, r3, #1
 800583c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800583e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	09db      	lsrs	r3, r3, #7
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2b7f      	cmp	r3, #127	; 0x7f
 8005850:	d8f0      	bhi.n	8005834 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	e00b      	b.n	8005884 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	b2da      	uxtb	r2, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	6279      	str	r1, [r7, #36]	; 0x24
 8005876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	09db      	lsrs	r3, r3, #7
 8005882:	623b      	str	r3, [r7, #32]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	2b7f      	cmp	r3, #127	; 0x7f
 8005888:	d8f0      	bhi.n	800586c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	627a      	str	r2, [r7, #36]	; 0x24
 8005890:	6a3a      	ldr	r2, [r7, #32]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	6979      	ldr	r1, [r7, #20]
 800589e:	69b8      	ldr	r0, [r7, #24]
 80058a0:	f7ff fe1c 	bl	80054dc <_SendPacket>
  RECORD_END();
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f383 8811 	msr	BASEPRI, r3
}
 80058aa:	bf00      	nop
 80058ac:	3730      	adds	r7, #48	; 0x30
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200043c0 	.word	0x200043c0

080058b8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08e      	sub	sp, #56	; 0x38
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80058c6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ca:	f04f 0120 	mov.w	r1, #32
 80058ce:	f381 8811 	msr	BASEPRI, r1
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	4832      	ldr	r0, [pc, #200]	; (80059a0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80058d6:	f7ff fd11 	bl	80052fc <_PreparePacket>
 80058da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	633b      	str	r3, [r7, #48]	; 0x30
 80058e8:	e00b      	b.n	8005902 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	6379      	str	r1, [r7, #52]	; 0x34
 80058f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	09db      	lsrs	r3, r3, #7
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2b7f      	cmp	r3, #127	; 0x7f
 8005906:	d8f0      	bhi.n	80058ea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	637a      	str	r2, [r7, #52]	; 0x34
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005920:	e00b      	b.n	800593a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	b2da      	uxtb	r2, r3
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	1c59      	adds	r1, r3, #1
 800592a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800592c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	09db      	lsrs	r3, r3, #7
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	2b7f      	cmp	r3, #127	; 0x7f
 800593e:	d8f0      	bhi.n	8005922 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	623b      	str	r3, [r7, #32]
 8005958:	e00b      	b.n	8005972 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	1c59      	adds	r1, r3, #1
 8005962:	6279      	str	r1, [r7, #36]	; 0x24
 8005964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	09db      	lsrs	r3, r3, #7
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2b7f      	cmp	r3, #127	; 0x7f
 8005976:	d8f0      	bhi.n	800595a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	627a      	str	r2, [r7, #36]	; 0x24
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	6979      	ldr	r1, [r7, #20]
 800598c:	69b8      	ldr	r0, [r7, #24]
 800598e:	f7ff fda5 	bl	80054dc <_SendPacket>
  RECORD_END();
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f383 8811 	msr	BASEPRI, r3
}
 8005998:	bf00      	nop
 800599a:	3738      	adds	r7, #56	; 0x38
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	200043c0 	.word	0x200043c0

080059a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b090      	sub	sp, #64	; 0x40
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059b2:	f3ef 8311 	mrs	r3, BASEPRI
 80059b6:	f04f 0120 	mov.w	r1, #32
 80059ba:	f381 8811 	msr	BASEPRI, r1
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	4840      	ldr	r0, [pc, #256]	; (8005ac4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80059c2:	f7ff fc9b 	bl	80052fc <_PreparePacket>
 80059c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d4:	e00b      	b.n	80059ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059dc:	1c59      	adds	r1, r3, #1
 80059de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	09db      	lsrs	r3, r3, #7
 80059ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	2b7f      	cmp	r3, #127	; 0x7f
 80059f2:	d8f0      	bhi.n	80059d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0c:	e00b      	b.n	8005a26 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	6379      	str	r1, [r7, #52]	; 0x34
 8005a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	09db      	lsrs	r3, r3, #7
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2a:	d8f0      	bhi.n	8005a0e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	637a      	str	r2, [r7, #52]	; 0x34
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	e00b      	b.n	8005a5e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	1c59      	adds	r1, r3, #1
 8005a4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	09db      	lsrs	r3, r3, #7
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2b7f      	cmp	r3, #127	; 0x7f
 8005a62:	d8f0      	bhi.n	8005a46 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	e00b      	b.n	8005a96 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	1c59      	adds	r1, r3, #1
 8005a86:	6279      	str	r1, [r7, #36]	; 0x24
 8005a88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	09db      	lsrs	r3, r3, #7
 8005a94:	623b      	str	r3, [r7, #32]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9a:	d8f0      	bhi.n	8005a7e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa2:	6a3a      	ldr	r2, [r7, #32]
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	69b8      	ldr	r0, [r7, #24]
 8005ab2:	f7ff fd13 	bl	80054dc <_SendPacket>
  RECORD_END();
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f383 8811 	msr	BASEPRI, r3
}
 8005abc:	bf00      	nop
 8005abe:	3740      	adds	r7, #64	; 0x40
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	200043c0 	.word	0x200043c0

08005ac8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08c      	sub	sp, #48	; 0x30
 8005acc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005ace:	4b58      	ldr	r3, [pc, #352]	; (8005c30 <SEGGER_SYSVIEW_Start+0x168>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad8:	f04f 0120 	mov.w	r1, #32
 8005adc:	f381 8811 	msr	BASEPRI, r1
 8005ae0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005ae2:	4b53      	ldr	r3, [pc, #332]	; (8005c30 <SEGGER_SYSVIEW_Start+0x168>)
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	220a      	movs	r2, #10
 8005ae8:	4952      	ldr	r1, [pc, #328]	; (8005c34 <SEGGER_SYSVIEW_Start+0x16c>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fb80 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005af6:	200a      	movs	r0, #10
 8005af8:	f7ff fe2a 	bl	8005750 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005afc:	f3ef 8311 	mrs	r3, BASEPRI
 8005b00:	f04f 0120 	mov.w	r1, #32
 8005b04:	f381 8811 	msr	BASEPRI, r1
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	484b      	ldr	r0, [pc, #300]	; (8005c38 <SEGGER_SYSVIEW_Start+0x170>)
 8005b0c:	f7ff fbf6 	bl	80052fc <_PreparePacket>
 8005b10:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1a:	4b45      	ldr	r3, [pc, #276]	; (8005c30 <SEGGER_SYSVIEW_Start+0x168>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b20:	e00b      	b.n	8005b3a <SEGGER_SYSVIEW_Start+0x72>
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3e:	d8f0      	bhi.n	8005b22 <SEGGER_SYSVIEW_Start+0x5a>
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <SEGGER_SYSVIEW_Start+0x168>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	e00b      	b.n	8005b74 <SEGGER_SYSVIEW_Start+0xac>
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	6279      	str	r1, [r7, #36]	; 0x24
 8005b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	09db      	lsrs	r3, r3, #7
 8005b72:	623b      	str	r3, [r7, #32]
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	2b7f      	cmp	r3, #127	; 0x7f
 8005b78:	d8f0      	bhi.n	8005b5c <SEGGER_SYSVIEW_Start+0x94>
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <SEGGER_SYSVIEW_Start+0x168>)
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	e00b      	b.n	8005bae <SEGGER_SYSVIEW_Start+0xe6>
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	1c59      	adds	r1, r3, #1
 8005b9e:	61f9      	str	r1, [r7, #28]
 8005ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	09db      	lsrs	r3, r3, #7
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb2:	d8f0      	bhi.n	8005b96 <SEGGER_SYSVIEW_Start+0xce>
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	61fa      	str	r2, [r7, #28]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	e00b      	b.n	8005be6 <SEGGER_SYSVIEW_Start+0x11e>
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	1c59      	adds	r1, r3, #1
 8005bd6:	6179      	str	r1, [r7, #20]
 8005bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	09db      	lsrs	r3, r3, #7
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bea:	d8f0      	bhi.n	8005bce <SEGGER_SYSVIEW_Start+0x106>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	617a      	str	r2, [r7, #20]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bfc:	2218      	movs	r2, #24
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fc6b 	bl	80054dc <_SendPacket>
      RECORD_END();
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c0c:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <SEGGER_SYSVIEW_Start+0x168>)
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <SEGGER_SYSVIEW_Start+0x168>)
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c1a:	f000 f9eb 	bl	8005ff4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c1e:	f000 f9b1 	bl	8005f84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c22:	f000 fc83 	bl	800652c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c26:	bf00      	nop
 8005c28:	3730      	adds	r7, #48	; 0x30
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20004390 	.word	0x20004390
 8005c34:	080083fc 	.word	0x080083fc
 8005c38:	200043c0 	.word	0x200043c0

08005c3c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c42:	f3ef 8311 	mrs	r3, BASEPRI
 8005c46:	f04f 0120 	mov.w	r1, #32
 8005c4a:	f381 8811 	msr	BASEPRI, r1
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	480b      	ldr	r0, [pc, #44]	; (8005c80 <SEGGER_SYSVIEW_Stop+0x44>)
 8005c52:	f7ff fb53 	bl	80052fc <_PreparePacket>
 8005c56:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c60:	220b      	movs	r2, #11
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6838      	ldr	r0, [r7, #0]
 8005c66:	f7ff fc39 	bl	80054dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f383 8811 	msr	BASEPRI, r3
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	200043c0 	.word	0x200043c0
 8005c84:	20004390 	.word	0x20004390

08005c88 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08c      	sub	sp, #48	; 0x30
 8005c8c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c92:	f04f 0120 	mov.w	r1, #32
 8005c96:	f381 8811 	msr	BASEPRI, r1
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	4845      	ldr	r0, [pc, #276]	; (8005db4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c9e:	f7ff fb2d 	bl	80052fc <_PreparePacket>
 8005ca2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cac:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb2:	e00b      	b.n	8005ccc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	09db      	lsrs	r3, r3, #7
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd0:	d8f0      	bhi.n	8005cb4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	623b      	str	r3, [r7, #32]
 8005cec:	e00b      	b.n	8005d06 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	1c59      	adds	r1, r3, #1
 8005cf6:	6279      	str	r1, [r7, #36]	; 0x24
 8005cf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	09db      	lsrs	r3, r3, #7
 8005d04:	623b      	str	r3, [r7, #32]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0a:	d8f0      	bhi.n	8005cee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	627a      	str	r2, [r7, #36]	; 0x24
 8005d12:	6a3a      	ldr	r2, [r7, #32]
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	e00b      	b.n	8005d40 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	61f9      	str	r1, [r7, #28]
 8005d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	09db      	lsrs	r3, r3, #7
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b7f      	cmp	r3, #127	; 0x7f
 8005d44:	d8f0      	bhi.n	8005d28 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	61fa      	str	r2, [r7, #28]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	e00b      	b.n	8005d78 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	6179      	str	r1, [r7, #20]
 8005d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	09db      	lsrs	r3, r3, #7
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7c:	d8f0      	bhi.n	8005d60 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	617a      	str	r2, [r7, #20]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d8e:	2218      	movs	r2, #24
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	68b8      	ldr	r0, [r7, #8]
 8005d94:	f7ff fba2 	bl	80054dc <_SendPacket>
  RECORD_END();
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005da6:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	4798      	blx	r3
  }
}
 8005dac:	bf00      	nop
 8005dae:	3730      	adds	r7, #48	; 0x30
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200043c0 	.word	0x200043c0
 8005db8:	20004390 	.word	0x20004390

08005dbc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b092      	sub	sp, #72	; 0x48
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc8:	f04f 0120 	mov.w	r1, #32
 8005dcc:	f381 8811 	msr	BASEPRI, r1
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	486a      	ldr	r0, [pc, #424]	; (8005f7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005dd4:	f7ff fa92 	bl	80052fc <_PreparePacket>
 8005dd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	647b      	str	r3, [r7, #68]	; 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b66      	ldr	r3, [pc, #408]	; (8005f80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	643b      	str	r3, [r7, #64]	; 0x40
 8005dee:	e00b      	b.n	8005e08 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	6479      	str	r1, [r7, #68]	; 0x44
 8005dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e04:	09db      	lsrs	r3, r3, #7
 8005e06:	643b      	str	r3, [r7, #64]	; 0x40
 8005e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e0c:	d8f0      	bhi.n	8005df0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	647a      	str	r2, [r7, #68]	; 0x44
 8005e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e28:	e00b      	b.n	8005e42 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	1c59      	adds	r1, r3, #1
 8005e32:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	09db      	lsrs	r3, r3, #7
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	2b7f      	cmp	r3, #127	; 0x7f
 8005e46:	d8f0      	bhi.n	8005e2a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	4619      	mov	r1, r3
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff f9fb 	bl	800525c <_EncodeStr>
 8005e66:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e68:	2209      	movs	r2, #9
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	6938      	ldr	r0, [r7, #16]
 8005e6e:	f7ff fb35 	bl	80054dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b40      	ldr	r3, [pc, #256]	; (8005f80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	633b      	str	r3, [r7, #48]	; 0x30
 8005e86:	e00b      	b.n	8005ea0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	1c59      	adds	r1, r3, #1
 8005e90:	6379      	str	r1, [r7, #52]	; 0x34
 8005e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	09db      	lsrs	r3, r3, #7
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea4:	d8f0      	bhi.n	8005e88 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	637a      	str	r2, [r7, #52]	; 0x34
 8005eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec0:	e00b      	b.n	8005eda <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	1c59      	adds	r1, r3, #1
 8005eca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	09db      	lsrs	r3, r3, #7
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ede:	d8f0      	bhi.n	8005ec2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	e00b      	b.n	8005f14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	6279      	str	r1, [r7, #36]	; 0x24
 8005f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b7f      	cmp	r3, #127	; 0x7f
 8005f18:	d8f0      	bhi.n	8005efc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e00b      	b.n	8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	61f9      	str	r1, [r7, #28]
 8005f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	09db      	lsrs	r3, r3, #7
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f50:	d8f0      	bhi.n	8005f34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	61fa      	str	r2, [r7, #28]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f62:	2215      	movs	r2, #21
 8005f64:	68f9      	ldr	r1, [r7, #12]
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f7ff fab8 	bl	80054dc <_SendPacket>
  RECORD_END();
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f383 8811 	msr	BASEPRI, r3
}
 8005f72:	bf00      	nop
 8005f74:	3748      	adds	r7, #72	; 0x48
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200043c0 	.word	0x200043c0
 8005f80:	20004390 	.word	0x20004390

08005f84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f9a:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4798      	blx	r3
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20004390 	.word	0x20004390

08005fac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb8:	f04f 0120 	mov.w	r1, #32
 8005fbc:	f381 8811 	msr	BASEPRI, r1
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	480b      	ldr	r0, [pc, #44]	; (8005ff0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005fc4:	f7ff f99a 	bl	80052fc <_PreparePacket>
 8005fc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fca:	2280      	movs	r2, #128	; 0x80
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	6938      	ldr	r0, [r7, #16]
 8005fd0:	f7ff f944 	bl	800525c <_EncodeStr>
 8005fd4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005fd6:	220e      	movs	r2, #14
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	6938      	ldr	r0, [r7, #16]
 8005fdc:	f7ff fa7e 	bl	80054dc <_SendPacket>
  RECORD_END();
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f383 8811 	msr	BASEPRI, r3
}
 8005fe6:	bf00      	nop
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	200043c0 	.word	0x200043c0

08005ff4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01a      	beq.n	8006038 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006002:	4b13      	ldr	r3, [pc, #76]	; (8006050 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d015      	beq.n	8006038 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4798      	blx	r3
 8006014:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006018:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800601a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	000a      	movs	r2, r1
 8006028:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800602a:	4613      	mov	r3, r2
 800602c:	461a      	mov	r2, r3
 800602e:	4621      	mov	r1, r4
 8006030:	200d      	movs	r0, #13
 8006032:	f7ff fbe7 	bl	8005804 <SEGGER_SYSVIEW_RecordU32x2>
 8006036:	e006      	b.n	8006046 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4619      	mov	r1, r3
 800603e:	200c      	movs	r0, #12
 8006040:	f7ff fba4 	bl	800578c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	bf00      	nop
 8006050:	20004390 	.word	0x20004390
 8006054:	e0001004 	.word	0xe0001004

08006058 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800605e:	f3ef 8311 	mrs	r3, BASEPRI
 8006062:	f04f 0120 	mov.w	r1, #32
 8006066:	f381 8811 	msr	BASEPRI, r1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	4819      	ldr	r0, [pc, #100]	; (80060d4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800606e:	f7ff f945 	bl	80052fc <_PreparePacket>
 8006072:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006080:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	e00b      	b.n	80060a4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	6179      	str	r1, [r7, #20]
 8006096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	09db      	lsrs	r3, r3, #7
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b7f      	cmp	r3, #127	; 0x7f
 80060a8:	d8f0      	bhi.n	800608c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	617a      	str	r2, [r7, #20]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80060ba:	2202      	movs	r2, #2
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	68b8      	ldr	r0, [r7, #8]
 80060c0:	f7ff fa0c 	bl	80054dc <_SendPacket>
  RECORD_END();
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f383 8811 	msr	BASEPRI, r3
}
 80060ca:	bf00      	nop
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200043c0 	.word	0x200043c0
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060e2:	f3ef 8311 	mrs	r3, BASEPRI
 80060e6:	f04f 0120 	mov.w	r1, #32
 80060ea:	f381 8811 	msr	BASEPRI, r1
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	4807      	ldr	r0, [pc, #28]	; (8006110 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80060f2:	f7ff f903 	bl	80052fc <_PreparePacket>
 80060f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80060f8:	2203      	movs	r2, #3
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6838      	ldr	r0, [r7, #0]
 80060fe:	f7ff f9ed 	bl	80054dc <_SendPacket>
  RECORD_END();
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f383 8811 	msr	BASEPRI, r3
}
 8006108:	bf00      	nop
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	200043c0 	.word	0x200043c0

08006114 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800611a:	f3ef 8311 	mrs	r3, BASEPRI
 800611e:	f04f 0120 	mov.w	r1, #32
 8006122:	f381 8811 	msr	BASEPRI, r1
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	4807      	ldr	r0, [pc, #28]	; (8006148 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800612a:	f7ff f8e7 	bl	80052fc <_PreparePacket>
 800612e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006130:	2212      	movs	r2, #18
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6838      	ldr	r0, [r7, #0]
 8006136:	f7ff f9d1 	bl	80054dc <_SendPacket>
  RECORD_END();
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f383 8811 	msr	BASEPRI, r3
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	200043c0 	.word	0x200043c0

0800614c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006152:	f3ef 8311 	mrs	r3, BASEPRI
 8006156:	f04f 0120 	mov.w	r1, #32
 800615a:	f381 8811 	msr	BASEPRI, r1
 800615e:	607b      	str	r3, [r7, #4]
 8006160:	4807      	ldr	r0, [pc, #28]	; (8006180 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006162:	f7ff f8cb 	bl	80052fc <_PreparePacket>
 8006166:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006168:	2211      	movs	r2, #17
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6838      	ldr	r0, [r7, #0]
 800616e:	f7ff f9b5 	bl	80054dc <_SendPacket>
  RECORD_END();
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f383 8811 	msr	BASEPRI, r3
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	200043c0 	.word	0x200043c0

08006184 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800618c:	f3ef 8311 	mrs	r3, BASEPRI
 8006190:	f04f 0120 	mov.w	r1, #32
 8006194:	f381 8811 	msr	BASEPRI, r1
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	4819      	ldr	r0, [pc, #100]	; (8006200 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800619c:	f7ff f8ae 	bl	80052fc <_PreparePacket>
 80061a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061a6:	4b17      	ldr	r3, [pc, #92]	; (8006204 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e00b      	b.n	80061d2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	61f9      	str	r1, [r7, #28]
 80061c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	09db      	lsrs	r3, r3, #7
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b7f      	cmp	r3, #127	; 0x7f
 80061d6:	d8f0      	bhi.n	80061ba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	61fa      	str	r2, [r7, #28]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061e8:	2208      	movs	r2, #8
 80061ea:	68f9      	ldr	r1, [r7, #12]
 80061ec:	6938      	ldr	r0, [r7, #16]
 80061ee:	f7ff f975 	bl	80054dc <_SendPacket>
  RECORD_END();
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f383 8811 	msr	BASEPRI, r3
}
 80061f8:	bf00      	nop
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200043c0 	.word	0x200043c0
 8006204:	20004390 	.word	0x20004390

08006208 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006210:	f3ef 8311 	mrs	r3, BASEPRI
 8006214:	f04f 0120 	mov.w	r1, #32
 8006218:	f381 8811 	msr	BASEPRI, r1
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	4819      	ldr	r0, [pc, #100]	; (8006284 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006220:	f7ff f86c 	bl	80052fc <_PreparePacket>
 8006224:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800622a:	4b17      	ldr	r3, [pc, #92]	; (8006288 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	e00b      	b.n	8006256 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	61f9      	str	r1, [r7, #28]
 8006248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	09db      	lsrs	r3, r3, #7
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b7f      	cmp	r3, #127	; 0x7f
 800625a:	d8f0      	bhi.n	800623e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	61fa      	str	r2, [r7, #28]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800626c:	2204      	movs	r2, #4
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	6938      	ldr	r0, [r7, #16]
 8006272:	f7ff f933 	bl	80054dc <_SendPacket>
  RECORD_END();
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f383 8811 	msr	BASEPRI, r3
}
 800627c:	bf00      	nop
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200043c0 	.word	0x200043c0
 8006288:	20004390 	.word	0x20004390

0800628c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006294:	f3ef 8311 	mrs	r3, BASEPRI
 8006298:	f04f 0120 	mov.w	r1, #32
 800629c:	f381 8811 	msr	BASEPRI, r1
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	4819      	ldr	r0, [pc, #100]	; (8006308 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80062a4:	f7ff f82a 	bl	80052fc <_PreparePacket>
 80062a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ae:	4b17      	ldr	r3, [pc, #92]	; (800630c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	e00b      	b.n	80062da <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	61f9      	str	r1, [r7, #28]
 80062cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b7f      	cmp	r3, #127	; 0x7f
 80062de:	d8f0      	bhi.n	80062c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	61fa      	str	r2, [r7, #28]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80062f0:	2206      	movs	r2, #6
 80062f2:	68f9      	ldr	r1, [r7, #12]
 80062f4:	6938      	ldr	r0, [r7, #16]
 80062f6:	f7ff f8f1 	bl	80054dc <_SendPacket>
  RECORD_END();
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f383 8811 	msr	BASEPRI, r3
}
 8006300:	bf00      	nop
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	200043c0 	.word	0x200043c0
 800630c:	20004390 	.word	0x20004390

08006310 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800631a:	f3ef 8311 	mrs	r3, BASEPRI
 800631e:	f04f 0120 	mov.w	r1, #32
 8006322:	f381 8811 	msr	BASEPRI, r1
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	4827      	ldr	r0, [pc, #156]	; (80063c8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800632a:	f7fe ffe7 	bl	80052fc <_PreparePacket>
 800632e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006334:	4b25      	ldr	r3, [pc, #148]	; (80063cc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	e00b      	b.n	8006360 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	6279      	str	r1, [r7, #36]	; 0x24
 8006352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	09db      	lsrs	r3, r3, #7
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b7f      	cmp	r3, #127	; 0x7f
 8006364:	d8f0      	bhi.n	8006348 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	627a      	str	r2, [r7, #36]	; 0x24
 800636c:	6a3a      	ldr	r2, [r7, #32]
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	e00b      	b.n	8006398 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	b2da      	uxtb	r2, r3
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1c59      	adds	r1, r3, #1
 8006388:	61f9      	str	r1, [r7, #28]
 800638a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	09db      	lsrs	r3, r3, #7
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b7f      	cmp	r3, #127	; 0x7f
 800639c:	d8f0      	bhi.n	8006380 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	61fa      	str	r2, [r7, #28]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80063ae:	2207      	movs	r2, #7
 80063b0:	68f9      	ldr	r1, [r7, #12]
 80063b2:	6938      	ldr	r0, [r7, #16]
 80063b4:	f7ff f892 	bl	80054dc <_SendPacket>
  RECORD_END();
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f383 8811 	msr	BASEPRI, r3
}
 80063be:	bf00      	nop
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200043c0 	.word	0x200043c0
 80063cc:	20004390 	.word	0x20004390

080063d0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	1ad3      	subs	r3, r2, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20004390 	.word	0x20004390

080063f0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	; 0x30
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80063fa:	4b3b      	ldr	r3, [pc, #236]	; (80064e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d06d      	beq.n	80064de <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006402:	4b39      	ldr	r3, [pc, #228]	; (80064e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006408:	2300      	movs	r3, #0
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
 800640c:	e008      	b.n	8006420 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	3301      	adds	r3, #1
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006424:	429a      	cmp	r2, r3
 8006426:	d3f2      	bcc.n	800640e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006428:	e000      	b.n	800642c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800642a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d055      	beq.n	80064de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006432:	f3ef 8311 	mrs	r3, BASEPRI
 8006436:	f04f 0120 	mov.w	r1, #32
 800643a:	f381 8811 	msr	BASEPRI, r1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	482a      	ldr	r0, [pc, #168]	; (80064ec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006442:	f7fe ff5b 	bl	80052fc <_PreparePacket>
 8006446:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	623b      	str	r3, [r7, #32]
 8006454:	e00b      	b.n	800646e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	1c59      	adds	r1, r3, #1
 800645e:	6279      	str	r1, [r7, #36]	; 0x24
 8006460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	09db      	lsrs	r3, r3, #7
 800646c:	623b      	str	r3, [r7, #32]
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	2b7f      	cmp	r3, #127	; 0x7f
 8006472:	d8f0      	bhi.n	8006456 <SEGGER_SYSVIEW_SendModule+0x66>
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	627a      	str	r2, [r7, #36]	; 0x24
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	e00b      	b.n	80064a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	b2da      	uxtb	r2, r3
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	1c59      	adds	r1, r3, #1
 8006498:	61f9      	str	r1, [r7, #28]
 800649a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	09db      	lsrs	r3, r3, #7
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b7f      	cmp	r3, #127	; 0x7f
 80064ac:	d8f0      	bhi.n	8006490 <SEGGER_SYSVIEW_SendModule+0xa0>
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	61fa      	str	r2, [r7, #28]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2280      	movs	r2, #128	; 0x80
 80064c4:	4619      	mov	r1, r3
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7fe fec8 	bl	800525c <_EncodeStr>
 80064cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80064ce:	2216      	movs	r2, #22
 80064d0:	68f9      	ldr	r1, [r7, #12]
 80064d2:	6938      	ldr	r0, [r7, #16]
 80064d4:	f7ff f802 	bl	80054dc <_SendPacket>
      RECORD_END();
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80064de:	bf00      	nop
 80064e0:	3730      	adds	r7, #48	; 0x30
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200043b8 	.word	0x200043b8
 80064ec:	200043c0 	.word	0x200043c0

080064f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00f      	beq.n	800651e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80064fe:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f2      	bne.n	8006504 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	200043b8 	.word	0x200043b8

0800652c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006532:	f3ef 8311 	mrs	r3, BASEPRI
 8006536:	f04f 0120 	mov.w	r1, #32
 800653a:	f381 8811 	msr	BASEPRI, r1
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	4817      	ldr	r0, [pc, #92]	; (80065a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006542:	f7fe fedb 	bl	80052fc <_PreparePacket>
 8006546:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e00b      	b.n	8006570 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	6179      	str	r1, [r7, #20]
 8006562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b7f      	cmp	r3, #127	; 0x7f
 8006574:	d8f0      	bhi.n	8006558 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	617a      	str	r2, [r7, #20]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006586:	221b      	movs	r2, #27
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	68b8      	ldr	r0, [r7, #8]
 800658c:	f7fe ffa6 	bl	80054dc <_SendPacket>
  RECORD_END();
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f383 8811 	msr	BASEPRI, r3
}
 8006596:	bf00      	nop
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200043c0 	.word	0x200043c0
 80065a4:	200043bc 	.word	0x200043bc

080065a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065b0:	f3ef 8311 	mrs	r3, BASEPRI
 80065b4:	f04f 0120 	mov.w	r1, #32
 80065b8:	f381 8811 	msr	BASEPRI, r1
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	4827      	ldr	r0, [pc, #156]	; (800665c <SEGGER_SYSVIEW_Warn+0xb4>)
 80065c0:	f7fe fe9c 	bl	80052fc <_PreparePacket>
 80065c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	6938      	ldr	r0, [r7, #16]
 80065cc:	f7fe fe46 	bl	800525c <_EncodeStr>
 80065d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
 80065d6:	2301      	movs	r3, #1
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	e00b      	b.n	80065f4 <SEGGER_SYSVIEW_Warn+0x4c>
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	6279      	str	r1, [r7, #36]	; 0x24
 80065e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	09db      	lsrs	r3, r3, #7
 80065f2:	623b      	str	r3, [r7, #32]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2b7f      	cmp	r3, #127	; 0x7f
 80065f8:	d8f0      	bhi.n	80065dc <SEGGER_SYSVIEW_Warn+0x34>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006600:	6a3a      	ldr	r2, [r7, #32]
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e00b      	b.n	800662c <SEGGER_SYSVIEW_Warn+0x84>
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	1c59      	adds	r1, r3, #1
 800661c:	61f9      	str	r1, [r7, #28]
 800661e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	09db      	lsrs	r3, r3, #7
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b7f      	cmp	r3, #127	; 0x7f
 8006630:	d8f0      	bhi.n	8006614 <SEGGER_SYSVIEW_Warn+0x6c>
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	61fa      	str	r2, [r7, #28]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006642:	221a      	movs	r2, #26
 8006644:	68f9      	ldr	r1, [r7, #12]
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f7fe ff48 	bl	80054dc <_SendPacket>
  RECORD_END();
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f383 8811 	msr	BASEPRI, r3
}
 8006652:	bf00      	nop
 8006654:	3728      	adds	r7, #40	; 0x28
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	200043c0 	.word	0x200043c0

08006660 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006664:	4803      	ldr	r0, [pc, #12]	; (8006674 <_cbSendSystemDesc+0x14>)
 8006666:	f7ff fca1 	bl	8005fac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800666a:	4803      	ldr	r0, [pc, #12]	; (8006678 <_cbSendSystemDesc+0x18>)
 800666c:	f7ff fc9e 	bl	8005fac <SEGGER_SYSVIEW_SendSysDesc>
}
 8006670:	bf00      	nop
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08008348 	.word	0x08008348
 8006678:	0800837c 	.word	0x0800837c

0800667c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <SEGGER_SYSVIEW_Conf+0x20>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <SEGGER_SYSVIEW_Conf+0x20>)
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800668a:	4a06      	ldr	r2, [pc, #24]	; (80066a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800668c:	f7ff f80c 	bl	80056a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006690:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006694:	f7ff f84c 	bl	8005730 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000010 	.word	0x20000010
 80066a0:	08006661 	.word	0x08006661
 80066a4:	08008408 	.word	0x08008408

080066a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80066a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80066ae:	2300      	movs	r3, #0
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	e048      	b.n	8006746 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80066b4:	4929      	ldr	r1, [pc, #164]	; (800675c <_cbSendTaskList+0xb4>)
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fd ff71 	bl	80045ac <uxTaskGetStackHighWaterMark>
 80066ca:	4601      	mov	r1, r0
 80066cc:	4823      	ldr	r0, [pc, #140]	; (800675c <_cbSendTaskList+0xb4>)
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4403      	add	r3, r0
 80066da:	3310      	adds	r3, #16
 80066dc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80066de:	491f      	ldr	r1, [pc, #124]	; (800675c <_cbSendTaskList+0xb4>)
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	491b      	ldr	r1, [pc, #108]	; (800675c <_cbSendTaskList+0xb4>)
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	3304      	adds	r3, #4
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	4c16      	ldr	r4, [pc, #88]	; (800675c <_cbSendTaskList+0xb4>)
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4423      	add	r3, r4
 800670e:	3308      	adds	r3, #8
 8006710:	681c      	ldr	r4, [r3, #0]
 8006712:	4d12      	ldr	r5, [pc, #72]	; (800675c <_cbSendTaskList+0xb4>)
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	442b      	add	r3, r5
 8006720:	330c      	adds	r3, #12
 8006722:	681d      	ldr	r5, [r3, #0]
 8006724:	4e0d      	ldr	r6, [pc, #52]	; (800675c <_cbSendTaskList+0xb4>)
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4433      	add	r3, r6
 8006732:	3310      	adds	r3, #16
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462b      	mov	r3, r5
 800673a:	4622      	mov	r2, r4
 800673c:	f000 f8be 	bl	80068bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3301      	adds	r3, #1
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <_cbSendTaskList+0xb8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d3b1      	bcc.n	80066b4 <_cbSendTaskList+0xc>
  }
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675a:	bf00      	nop
 800675c:	200044a4 	.word	0x200044a4
 8006760:	20004544 	.word	0x20004544

08006764 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800676c:	f7fd fbd8 	bl	8003f20 <xTaskGetTickCountFromISR>
 8006770:	4603      	mov	r3, r0
 8006772:	2200      	movs	r2, #0
 8006774:	469a      	mov	sl, r3
 8006776:	4693      	mov	fp, r2
 8006778:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800677c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	f04f 0a00 	mov.w	sl, #0
 8006788:	f04f 0b00 	mov.w	fp, #0
 800678c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006790:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006794:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006798:	4652      	mov	r2, sl
 800679a:	465b      	mov	r3, fp
 800679c:	1a14      	subs	r4, r2, r0
 800679e:	eb63 0501 	sbc.w	r5, r3, r1
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	00ab      	lsls	r3, r5, #2
 80067ac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80067b0:	00a2      	lsls	r2, r4, #2
 80067b2:	4614      	mov	r4, r2
 80067b4:	461d      	mov	r5, r3
 80067b6:	eb14 0800 	adds.w	r8, r4, r0
 80067ba:	eb45 0901 	adc.w	r9, r5, r1
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067d2:	4690      	mov	r8, r2
 80067d4:	4699      	mov	r9, r3
 80067d6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80067da:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080067ec <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80067fa:	2205      	movs	r2, #5
 80067fc:	492b      	ldr	r1, [pc, #172]	; (80068ac <SYSVIEW_AddTask+0xc0>)
 80067fe:	68b8      	ldr	r0, [r7, #8]
 8006800:	f001 fd54 	bl	80082ac <memcmp>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d04b      	beq.n	80068a2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800680a:	4b29      	ldr	r3, [pc, #164]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b07      	cmp	r3, #7
 8006810:	d903      	bls.n	800681a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006812:	4828      	ldr	r0, [pc, #160]	; (80068b4 <SYSVIEW_AddTask+0xc8>)
 8006814:	f7ff fec8 	bl	80065a8 <SEGGER_SYSVIEW_Warn>
    return;
 8006818:	e044      	b.n	80068a4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800681a:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4926      	ldr	r1, [pc, #152]	; (80068b8 <SYSVIEW_AddTask+0xcc>)
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800682e:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4921      	ldr	r1, [pc, #132]	; (80068b8 <SYSVIEW_AddTask+0xcc>)
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	3304      	adds	r3, #4
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006844:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	491b      	ldr	r1, [pc, #108]	; (80068b8 <SYSVIEW_AddTask+0xcc>)
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3308      	adds	r3, #8
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4916      	ldr	r1, [pc, #88]	; (80068b8 <SYSVIEW_AddTask+0xcc>)
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	330c      	adds	r3, #12
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4910      	ldr	r1, [pc, #64]	; (80068b8 <SYSVIEW_AddTask+0xcc>)
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3310      	adds	r3, #16
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006886:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <SYSVIEW_AddTask+0xc4>)
 800688e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f80e 	bl	80068bc <SYSVIEW_SendTaskInfo>
 80068a0:	e000      	b.n	80068a4 <SYSVIEW_AddTask+0xb8>
    return;
 80068a2:	bf00      	nop

}
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	0800838c 	.word	0x0800838c
 80068b0:	20004544 	.word	0x20004544
 80068b4:	08008394 	.word	0x08008394
 80068b8:	200044a4 	.word	0x200044a4

080068bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80068ca:	f107 0314 	add.w	r3, r7, #20
 80068ce:	2214      	movs	r2, #20
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 fd08 	bl	80082e8 <memset>
  TaskInfo.TaskID     = TaskID;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff fa63 	bl	8005dbc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80068f6:	bf00      	nop
 80068f8:	3728      	adds	r7, #40	; 0x28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800690a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690c:	4907      	ldr	r1, [pc, #28]	; (800692c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4313      	orrs	r3, r2
 8006912:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4013      	ands	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40023800 	.word	0x40023800

08006930 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8006938:	4b08      	ldr	r3, [pc, #32]	; (800695c <LL_APB1_GRP1_EnableClock+0x2c>)
 800693a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800693c:	4907      	ldr	r1, [pc, #28]	; (800695c <LL_APB1_GRP1_EnableClock+0x2c>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4313      	orrs	r3, r2
 8006942:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006944:	4b05      	ldr	r3, [pc, #20]	; (800695c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4013      	ands	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800694e:	68fb      	ldr	r3, [r7, #12]
}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40023800 	.word	0x40023800

08006960 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006968:	4b08      	ldr	r3, [pc, #32]	; (800698c <LL_APB2_GRP1_EnableClock+0x2c>)
 800696a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696c:	4907      	ldr	r1, [pc, #28]	; (800698c <LL_APB2_GRP1_EnableClock+0x2c>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4313      	orrs	r3, r2
 8006972:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4013      	ands	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800697e:	68fb      	ldr	r3, [r7, #12]
}
 8006980:	bf00      	nop
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40023800 	.word	0x40023800

08006990 <hal_clock_init_early>:
#include "clock.h"

void hal_clock_init_early(void) {
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006994:	2001      	movs	r0, #1
 8006996:	f7ff ffb3 	bl	8006900 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800699a:	2002      	movs	r0, #2
 800699c:	f7ff ffb0 	bl	8006900 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80069a0:	2004      	movs	r0, #4
 80069a2:	f7ff ffad 	bl	8006900 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80069a6:	2008      	movs	r0, #8
 80069a8:	f7ff ffaa 	bl	8006900 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80069ac:	2010      	movs	r0, #16
 80069ae:	f7ff ffa7 	bl	8006900 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80069b2:	2020      	movs	r0, #32
 80069b4:	f7ff ffa4 	bl	8006900 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80069b8:	2040      	movs	r0, #64	; 0x40
 80069ba:	f7ff ffa1 	bl	8006900 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80069be:	2080      	movs	r0, #128	; 0x80
 80069c0:	f7ff ff9e 	bl	8006900 <LL_AHB1_GRP1_EnableClock>


	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80069c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80069c8:	f7ff ffb2 	bl	8006930 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 80069cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80069d0:	f7ff ffae 	bl	8006930 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80069d4:	2010      	movs	r0, #16
 80069d6:	f7ff ffc3 	bl	8006960 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 80069da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80069de:	f7ff ffbf 	bl	8006960 <LL_APB2_GRP1_EnableClock>
}
 80069e2:	bf00      	nop
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b089      	sub	sp, #36	; 0x24
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	fa93 f3a3 	rbit	r3, r3
 8006a00:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	fab3 f383 	clz	r3, r3
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	2103      	movs	r1, #3
 8006a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	401a      	ands	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	fa93 f3a3 	rbit	r3, r3
 8006a20:	61bb      	str	r3, [r7, #24]
  return result;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	fab3 f383 	clz	r3, r3
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a32:	431a      	orrs	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	601a      	str	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	3724      	adds	r7, #36	; 0x24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	43db      	mvns	r3, r3
 8006a58:	401a      	ands	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	431a      	orrs	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	605a      	str	r2, [r3, #4]
}
 8006a68:	bf00      	nop
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	; 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	fa93 f3a3 	rbit	r3, r3
 8006a8e:	613b      	str	r3, [r7, #16]
  return result;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	2103      	movs	r1, #3
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	401a      	ands	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	fa93 f3a3 	rbit	r3, r3
 8006aae:	61bb      	str	r3, [r7, #24]
  return result;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	fab3 f383 	clz	r3, r3
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006ac6:	bf00      	nop
 8006ac8:	3724      	adds	r7, #36	; 0x24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b089      	sub	sp, #36	; 0x24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	fa93 f3a3 	rbit	r3, r3
 8006aec:	613b      	str	r3, [r7, #16]
  return result;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	fab3 f383 	clz	r3, r3
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	2103      	movs	r1, #3
 8006afa:	fa01 f303 	lsl.w	r3, r1, r3
 8006afe:	43db      	mvns	r3, r3
 8006b00:	401a      	ands	r2, r3
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	fa93 f3a3 	rbit	r3, r3
 8006b0c:	61bb      	str	r3, [r7, #24]
  return result;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	fab3 f383 	clz	r3, r3
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	60da      	str	r2, [r3, #12]
}
 8006b24:	bf00      	nop
 8006b26:	3724      	adds	r7, #36	; 0x24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	fa93 f3a3 	rbit	r3, r3
 8006b4a:	613b      	str	r3, [r7, #16]
  return result;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	fab3 f383 	clz	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	210f      	movs	r1, #15
 8006b58:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	401a      	ands	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	fa93 f3a3 	rbit	r3, r3
 8006b6a:	61bb      	str	r3, [r7, #24]
  return result;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	fab3 f383 	clz	r3, r3
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006b82:	bf00      	nop
 8006b84:	3724      	adds	r7, #36	; 0x24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b089      	sub	sp, #36	; 0x24
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	fa93 f3a3 	rbit	r3, r3
 8006baa:	613b      	str	r3, [r7, #16]
  return result;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	fab3 f383 	clz	r3, r3
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	210f      	movs	r1, #15
 8006bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	fa93 f3a3 	rbit	r3, r3
 8006bcc:	61bb      	str	r3, [r7, #24]
  return result;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	fab3 f383 	clz	r3, r3
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	431a      	orrs	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006be4:	bf00      	nop
 8006be6:	3724      	adds	r7, #36	; 0x24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8006bfa:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <LL_SYSCFG_SetEXTISource+0x58>)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	3302      	adds	r3, #2
 8006c02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	43db      	mvns	r3, r3
 8006c0c:	ea02 0103 	and.w	r1, r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	0c1b      	lsrs	r3, r3, #16
 8006c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	fa93 f3a3 	rbit	r3, r3
 8006c1c:	60bb      	str	r3, [r7, #8]
  return result;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	fab3 f383 	clz	r3, r3
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	fa03 f202 	lsl.w	r2, r3, r2
 8006c2e:	4806      	ldr	r0, [pc, #24]	; (8006c48 <LL_SYSCFG_SetEXTISource+0x58>)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	430a      	orrs	r2, r1
 8006c36:	3302      	adds	r3, #2
 8006c38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40013800 	.word	0x40013800

08006c4c <LL_SYSCFG_GetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_PORTG (*)
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8006c54:	4a0d      	ldr	r2, [pc, #52]	; (8006c8c <LL_SYSCFG_GetEXTISource+0x40>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	3302      	adds	r3, #2
 8006c5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	4013      	ands	r3, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	0c12      	lsrs	r2, r2, #16
 8006c6a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	fa92 f2a2 	rbit	r2, r2
 8006c72:	60ba      	str	r2, [r7, #8]
  return result;
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	fab2 f282 	clz	r2, r2
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	40d3      	lsrs	r3, r2
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40013800 	.word	0x40013800

08006c90 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <LL_EXTI_EnableIT_0_31+0x20>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	4904      	ldr	r1, [pc, #16]	; (8006cb0 <LL_EXTI_EnableIT_0_31+0x20>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	600b      	str	r3, [r1, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	40013c00 	.word	0x40013c00

08006cb4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	4904      	ldr	r1, [pc, #16]	; (8006cd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	600b      	str	r3, [r1, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40013c00 	.word	0x40013c00

08006cdc <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 8006ce4:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <LL_EXTI_IsEnabledIT_0_31+0x28>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4013      	ands	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	bf0c      	ite	eq
 8006cf2:	2301      	moveq	r3, #1
 8006cf4:	2300      	movne	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40013c00 	.word	0x40013c00

08006d08 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	4904      	ldr	r1, [pc, #16]	; (8006d28 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	604b      	str	r3, [r1, #4]

}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40013c00 	.word	0x40013c00

08006d2c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	4904      	ldr	r1, [pc, #16]	; (8006d4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	608b      	str	r3, [r1, #8]

}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	40013c00 	.word	0x40013c00

08006d50 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006d58:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	4904      	ldr	r1, [pc, #16]	; (8006d74 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]

}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40013c00 	.word	0x40013c00

08006d78 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	4904      	ldr	r1, [pc, #16]	; (8006d98 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60cb      	str	r3, [r1, #12]
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	40013c00 	.word	0x40013c00

08006d9c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8006da4:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	43db      	mvns	r3, r3
 8006dac:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	60cb      	str	r3, [r1, #12]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40013c00 	.word	0x40013c00

08006dc4 <hal_gpio_get_pin_number>:
#define GET_SYSCFG_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_SYSCFG_EXTI_LINE)
#define GET_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_EXTI_LINE_)

static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e00c      	b.n	8006dec <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	889b      	ldrh	r3, [r3, #4]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	fa42 f303 	asr.w	r3, r2, r3
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	3301      	adds	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d9ef      	bls.n	8006dd2 <hal_gpio_get_pin_number+0xe>
 8006df2:	e000      	b.n	8006df6 <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 8006df4:	bf00      	nop
	}
	return pin_number;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	461a      	mov	r2, r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	70fb      	strb	r3, [r7, #3]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70bb      	strb	r3, [r7, #2]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 8006e1e:	787b      	ldrb	r3, [r7, #1]
 8006e20:	78ba      	ldrb	r2, [r7, #2]
 8006e22:	78f9      	ldrb	r1, [r7, #3]
 8006e24:	2010      	movs	r0, #16
 8006e26:	9000      	str	r0, [sp, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f805 	bl	8006e38 <hal_gpio_init_alt>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	70fb      	strb	r3, [r7, #3]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70bb      	strb	r3, [r7, #2]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a8d      	ldr	r2, [pc, #564]	; (800708c <hal_gpio_init_alt+0x254>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d02b      	beq.n	8006eb4 <hal_gpio_init_alt+0x7c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a8b      	ldr	r2, [pc, #556]	; (8007090 <hal_gpio_init_alt+0x258>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d024      	beq.n	8006eb0 <hal_gpio_init_alt+0x78>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a8a      	ldr	r2, [pc, #552]	; (8007094 <hal_gpio_init_alt+0x25c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d01d      	beq.n	8006eac <hal_gpio_init_alt+0x74>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a88      	ldr	r2, [pc, #544]	; (8007098 <hal_gpio_init_alt+0x260>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d016      	beq.n	8006ea8 <hal_gpio_init_alt+0x70>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a87      	ldr	r2, [pc, #540]	; (800709c <hal_gpio_init_alt+0x264>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00f      	beq.n	8006ea4 <hal_gpio_init_alt+0x6c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a85      	ldr	r2, [pc, #532]	; (80070a0 <hal_gpio_init_alt+0x268>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d008      	beq.n	8006ea0 <hal_gpio_init_alt+0x68>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a84      	ldr	r2, [pc, #528]	; (80070a4 <hal_gpio_init_alt+0x26c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d101      	bne.n	8006e9c <hal_gpio_init_alt+0x64>
 8006e98:	2306      	movs	r3, #6
 8006e9a:	e00c      	b.n	8006eb6 <hal_gpio_init_alt+0x7e>
 8006e9c:	2307      	movs	r3, #7
 8006e9e:	e00a      	b.n	8006eb6 <hal_gpio_init_alt+0x7e>
 8006ea0:	2305      	movs	r3, #5
 8006ea2:	e008      	b.n	8006eb6 <hal_gpio_init_alt+0x7e>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	e006      	b.n	8006eb6 <hal_gpio_init_alt+0x7e>
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e004      	b.n	8006eb6 <hal_gpio_init_alt+0x7e>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e002      	b.n	8006eb6 <hal_gpio_init_alt+0x7e>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <hal_gpio_init_alt+0x7e>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	889b      	ldrh	r3, [r3, #4]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d05f      	beq.n	8006f80 <hal_gpio_init_alt+0x148>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	889b      	ldrh	r3, [r3, #4]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d058      	beq.n	8006f7a <hal_gpio_init_alt+0x142>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	889b      	ldrh	r3, [r3, #4]
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d051      	beq.n	8006f74 <hal_gpio_init_alt+0x13c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	889b      	ldrh	r3, [r3, #4]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d04a      	beq.n	8006f6e <hal_gpio_init_alt+0x136>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	889b      	ldrh	r3, [r3, #4]
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	d044      	beq.n	8006f6a <hal_gpio_init_alt+0x132>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	889b      	ldrh	r3, [r3, #4]
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d03e      	beq.n	8006f66 <hal_gpio_init_alt+0x12e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	889b      	ldrh	r3, [r3, #4]
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d038      	beq.n	8006f62 <hal_gpio_init_alt+0x12a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	889b      	ldrh	r3, [r3, #4]
 8006ef4:	2b80      	cmp	r3, #128	; 0x80
 8006ef6:	d032      	beq.n	8006f5e <hal_gpio_init_alt+0x126>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	889b      	ldrh	r3, [r3, #4]
 8006efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f00:	d02b      	beq.n	8006f5a <hal_gpio_init_alt+0x122>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	889b      	ldrh	r3, [r3, #4]
 8006f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0a:	d024      	beq.n	8006f56 <hal_gpio_init_alt+0x11e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	889b      	ldrh	r3, [r3, #4]
 8006f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f14:	d01d      	beq.n	8006f52 <hal_gpio_init_alt+0x11a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1e:	d016      	beq.n	8006f4e <hal_gpio_init_alt+0x116>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	889b      	ldrh	r3, [r3, #4]
 8006f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f28:	d00f      	beq.n	8006f4a <hal_gpio_init_alt+0x112>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	889b      	ldrh	r3, [r3, #4]
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f32:	d008      	beq.n	8006f46 <hal_gpio_init_alt+0x10e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	889b      	ldrh	r3, [r3, #4]
 8006f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f3c:	d101      	bne.n	8006f42 <hal_gpio_init_alt+0x10a>
 8006f3e:	4b5a      	ldr	r3, [pc, #360]	; (80070a8 <hal_gpio_init_alt+0x270>)
 8006f40:	e020      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f42:	4b5a      	ldr	r3, [pc, #360]	; (80070ac <hal_gpio_init_alt+0x274>)
 8006f44:	e01e      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f46:	4b5a      	ldr	r3, [pc, #360]	; (80070b0 <hal_gpio_init_alt+0x278>)
 8006f48:	e01c      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f4a:	4b5a      	ldr	r3, [pc, #360]	; (80070b4 <hal_gpio_init_alt+0x27c>)
 8006f4c:	e01a      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f4e:	4b5a      	ldr	r3, [pc, #360]	; (80070b8 <hal_gpio_init_alt+0x280>)
 8006f50:	e018      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f52:	4b5a      	ldr	r3, [pc, #360]	; (80070bc <hal_gpio_init_alt+0x284>)
 8006f54:	e016      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f56:	4b5a      	ldr	r3, [pc, #360]	; (80070c0 <hal_gpio_init_alt+0x288>)
 8006f58:	e014      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f5a:	4b5a      	ldr	r3, [pc, #360]	; (80070c4 <hal_gpio_init_alt+0x28c>)
 8006f5c:	e012      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f5e:	4b5a      	ldr	r3, [pc, #360]	; (80070c8 <hal_gpio_init_alt+0x290>)
 8006f60:	e010      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f62:	4b5a      	ldr	r3, [pc, #360]	; (80070cc <hal_gpio_init_alt+0x294>)
 8006f64:	e00e      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f66:	4b5a      	ldr	r3, [pc, #360]	; (80070d0 <hal_gpio_init_alt+0x298>)
 8006f68:	e00c      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f6a:	4b5a      	ldr	r3, [pc, #360]	; (80070d4 <hal_gpio_init_alt+0x29c>)
 8006f6c:	e00a      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f6e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 8006f72:	e007      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f74:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8006f78:	e004      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f7a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8006f7e:	e001      	b.n	8006f84 <hal_gpio_init_alt+0x14c>
 8006f80:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8006f84:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	889b      	ldrh	r3, [r3, #4]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d064      	beq.n	8007058 <hal_gpio_init_alt+0x220>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	889b      	ldrh	r3, [r3, #4]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d05e      	beq.n	8007054 <hal_gpio_init_alt+0x21c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	889b      	ldrh	r3, [r3, #4]
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d058      	beq.n	8007050 <hal_gpio_init_alt+0x218>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	889b      	ldrh	r3, [r3, #4]
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d052      	beq.n	800704c <hal_gpio_init_alt+0x214>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	889b      	ldrh	r3, [r3, #4]
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d04c      	beq.n	8007048 <hal_gpio_init_alt+0x210>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	889b      	ldrh	r3, [r3, #4]
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d046      	beq.n	8007044 <hal_gpio_init_alt+0x20c>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	889b      	ldrh	r3, [r3, #4]
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d040      	beq.n	8007040 <hal_gpio_init_alt+0x208>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	889b      	ldrh	r3, [r3, #4]
 8006fc2:	2b80      	cmp	r3, #128	; 0x80
 8006fc4:	d03a      	beq.n	800703c <hal_gpio_init_alt+0x204>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	889b      	ldrh	r3, [r3, #4]
 8006fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fce:	d032      	beq.n	8007036 <hal_gpio_init_alt+0x1fe>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	889b      	ldrh	r3, [r3, #4]
 8006fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd8:	d02a      	beq.n	8007030 <hal_gpio_init_alt+0x1f8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	889b      	ldrh	r3, [r3, #4]
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe2:	d022      	beq.n	800702a <hal_gpio_init_alt+0x1f2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	889b      	ldrh	r3, [r3, #4]
 8006fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fec:	d01a      	beq.n	8007024 <hal_gpio_init_alt+0x1ec>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff6:	d012      	beq.n	800701e <hal_gpio_init_alt+0x1e6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	889b      	ldrh	r3, [r3, #4]
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007000:	d00a      	beq.n	8007018 <hal_gpio_init_alt+0x1e0>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	889b      	ldrh	r3, [r3, #4]
 8007006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800700a:	d102      	bne.n	8007012 <hal_gpio_init_alt+0x1da>
 800700c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007010:	e023      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007016:	e020      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800701c:	e01d      	b.n	800705a <hal_gpio_init_alt+0x222>
 800701e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007022:	e01a      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007028:	e017      	b.n	800705a <hal_gpio_init_alt+0x222>
 800702a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800702e:	e014      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007034:	e011      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800703a:	e00e      	b.n	800705a <hal_gpio_init_alt+0x222>
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	e00c      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007040:	2340      	movs	r3, #64	; 0x40
 8007042:	e00a      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007044:	2320      	movs	r3, #32
 8007046:	e008      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007048:	2310      	movs	r3, #16
 800704a:	e006      	b.n	800705a <hal_gpio_init_alt+0x222>
 800704c:	2308      	movs	r3, #8
 800704e:	e004      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007050:	2304      	movs	r3, #4
 8007052:	e002      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007054:	2302      	movs	r3, #2
 8007056:	e000      	b.n	800705a <hal_gpio_init_alt+0x222>
 8007058:	2301      	movs	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 800705c:	787b      	ldrb	r3, [r7, #1]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d855      	bhi.n	800710e <hal_gpio_init_alt+0x2d6>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <hal_gpio_init_alt+0x230>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	08007079 	.word	0x08007079
 800706c:	080070d9 	.word	0x080070d9
 8007070:	080070eb 	.word	0x080070eb
 8007074:	080070fd 	.word	0x080070fd
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	889b      	ldrh	r3, [r3, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	4619      	mov	r1, r3
 8007084:	f7ff fcf6 	bl	8006a74 <LL_GPIO_SetPinSpeed>
		break;
 8007088:	e041      	b.n	800710e <hal_gpio_init_alt+0x2d6>
 800708a:	bf00      	nop
 800708c:	40020000 	.word	0x40020000
 8007090:	40020400 	.word	0x40020400
 8007094:	40020800 	.word	0x40020800
 8007098:	40020c00 	.word	0x40020c00
 800709c:	40021000 	.word	0x40021000
 80070a0:	40021400 	.word	0x40021400
 80070a4:	40021800 	.word	0x40021800
 80070a8:	0f000003 	.word	0x0f000003
 80070ac:	f0000003 	.word	0xf0000003
 80070b0:	00f00003 	.word	0x00f00003
 80070b4:	000f0003 	.word	0x000f0003
 80070b8:	f0000002 	.word	0xf0000002
 80070bc:	0f000002 	.word	0x0f000002
 80070c0:	00f00002 	.word	0x00f00002
 80070c4:	000f0002 	.word	0x000f0002
 80070c8:	f0000001 	.word	0xf0000001
 80070cc:	0f000001 	.word	0x0f000001
 80070d0:	00f00001 	.word	0x00f00001
 80070d4:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	889b      	ldrh	r3, [r3, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	4619      	mov	r1, r3
 80070e4:	f7ff fcc6 	bl	8006a74 <LL_GPIO_SetPinSpeed>
		break;
 80070e8:	e011      	b.n	800710e <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	4619      	mov	r1, r3
 80070f6:	f7ff fcbd 	bl	8006a74 <LL_GPIO_SetPinSpeed>
		break;
 80070fa:	e008      	b.n	800710e <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	889b      	ldrh	r3, [r3, #4]
 8007104:	2203      	movs	r2, #3
 8007106:	4619      	mov	r1, r3
 8007108:	f7ff fcb4 	bl	8006a74 <LL_GPIO_SetPinSpeed>
		break;
 800710c:	bf00      	nop
	}

	switch(pull) {
 800710e:	78bb      	ldrb	r3, [r7, #2]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d018      	beq.n	8007146 <hal_gpio_init_alt+0x30e>
 8007114:	2b02      	cmp	r3, #2
 8007116:	dc1f      	bgt.n	8007158 <hal_gpio_init_alt+0x320>
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <hal_gpio_init_alt+0x2ea>
 800711c:	2b01      	cmp	r3, #1
 800711e:	d009      	beq.n	8007134 <hal_gpio_init_alt+0x2fc>
 8007120:	e01a      	b.n	8007158 <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	889b      	ldrh	r3, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	4619      	mov	r1, r3
 800712e:	f7ff fcd0 	bl	8006ad2 <LL_GPIO_SetPinPull>
		break;
 8007132:	e011      	b.n	8007158 <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	889b      	ldrh	r3, [r3, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	4619      	mov	r1, r3
 8007140:	f7ff fcc7 	bl	8006ad2 <LL_GPIO_SetPinPull>
		break;
 8007144:	e008      	b.n	8007158 <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	889b      	ldrh	r3, [r3, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	4619      	mov	r1, r3
 8007152:	f7ff fcbe 	bl	8006ad2 <LL_GPIO_SetPinPull>
		break;
 8007156:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	2b05      	cmp	r3, #5
 800715c:	d93d      	bls.n	80071da <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	889b      	ldrh	r3, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	4619      	mov	r1, r3
 800716a:	f7ff fc3c 	bl	80069e6 <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 800716e:	6939      	ldr	r1, [r7, #16]
 8007170:	6978      	ldr	r0, [r7, #20]
 8007172:	f7ff fd3d 	bl	8006bf0 <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d002      	beq.n	8007182 <hal_gpio_init_alt+0x34a>
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	2b08      	cmp	r3, #8
 8007180:	d105      	bne.n	800718e <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff fd84 	bl	8006c90 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff fdcf 	bl	8006d2c <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	2b07      	cmp	r3, #7
 8007192:	d002      	beq.n	800719a <hal_gpio_init_alt+0x362>
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	2b08      	cmp	r3, #8
 8007198:	d105      	bne.n	80071a6 <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fd78 	bl	8006c90 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7ff fde9 	bl	8006d78 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 80071a6:	78fb      	ldrb	r3, [r7, #3]
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d002      	beq.n	80071b2 <hal_gpio_init_alt+0x37a>
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	2b0b      	cmp	r3, #11
 80071b0:	d105      	bne.n	80071be <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fda8 	bl	8006d08 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fdb7 	bl	8006d2c <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	2b0a      	cmp	r3, #10
 80071c2:	d003      	beq.n	80071cc <hal_gpio_init_alt+0x394>
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2b0b      	cmp	r3, #11
 80071c8:	f040 80a4 	bne.w	8007314 <hal_gpio_init_alt+0x4dc>
			LL_EXTI_EnableIT_0_31(exti_line);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff fd5f 	bl	8006c90 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fdd0 	bl	8006d78 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 80071d8:	e09c      	b.n	8007314 <hal_gpio_init_alt+0x4dc>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 80071da:	6938      	ldr	r0, [r7, #16]
 80071dc:	f7ff fd36 	bl	8006c4c <LL_SYSCFG_GetEXTISource>
 80071e0:	4602      	mov	r2, r0
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d10e      	bne.n	8007206 <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff fd77 	bl	8006cdc <LL_EXTI_IsEnabledIT_0_31>
 80071ee:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d008      	beq.n	8007206 <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff fd5d 	bl	8006cb4 <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff fdce 	bl	8006d9c <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff fda5 	bl	8006d50 <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d002      	beq.n	8007212 <hal_gpio_init_alt+0x3da>
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	2b04      	cmp	r3, #4
 8007210:	d11a      	bne.n	8007248 <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fdd6 	bl	8006dc4 <hal_gpio_get_pin_number>
 8007218:	4603      	mov	r3, r0
 800721a:	2b07      	cmp	r3, #7
 800721c:	d80a      	bhi.n	8007234 <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	889b      	ldrh	r3, [r3, #4]
 8007226:	4619      	mov	r1, r3
 8007228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800722c:	461a      	mov	r2, r3
 800722e:	f7ff fc7f 	bl	8006b30 <LL_GPIO_SetAFPin_0_7>
 8007232:	e009      	b.n	8007248 <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	889b      	ldrh	r3, [r3, #4]
 800723c:	4619      	mov	r1, r3
 800723e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007242:	461a      	mov	r2, r3
 8007244:	f7ff fca3 	bl	8006b8e <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	2b05      	cmp	r3, #5
 800724c:	d861      	bhi.n	8007312 <hal_gpio_init_alt+0x4da>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <hal_gpio_init_alt+0x41c>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	0800726d 	.word	0x0800726d
 8007258:	0800727f 	.word	0x0800727f
 800725c:	080072a1 	.word	0x080072a1
 8007260:	080072c3 	.word	0x080072c3
 8007264:	080072e3 	.word	0x080072e3
 8007268:	08007303 	.word	0x08007303
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	889b      	ldrh	r3, [r3, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	4619      	mov	r1, r3
 8007278:	f7ff fbb5 	bl	80069e6 <LL_GPIO_SetPinMode>
			break;
 800727c:	e04a      	b.n	8007314 <hal_gpio_init_alt+0x4dc>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	889b      	ldrh	r3, [r3, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	4619      	mov	r1, r3
 800728a:	f7ff fbac 	bl	80069e6 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	889b      	ldrh	r3, [r3, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	4619      	mov	r1, r3
 800729a:	f7ff fbd3 	bl	8006a44 <LL_GPIO_SetPinOutputType>
			break;
 800729e:	e039      	b.n	8007314 <hal_gpio_init_alt+0x4dc>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	889b      	ldrh	r3, [r3, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	4619      	mov	r1, r3
 80072ac:	f7ff fb9b 	bl	80069e6 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	889b      	ldrh	r3, [r3, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	4619      	mov	r1, r3
 80072bc:	f7ff fbc2 	bl	8006a44 <LL_GPIO_SetPinOutputType>
			break;
 80072c0:	e028      	b.n	8007314 <hal_gpio_init_alt+0x4dc>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	889b      	ldrh	r3, [r3, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	4619      	mov	r1, r3
 80072ce:	f7ff fb8a 	bl	80069e6 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	889b      	ldrh	r3, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	4619      	mov	r1, r3
 80072de:	f7ff fbb1 	bl	8006a44 <LL_GPIO_SetPinOutputType>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	889b      	ldrh	r3, [r3, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	4619      	mov	r1, r3
 80072ee:	f7ff fb7a 	bl	80069e6 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	889b      	ldrh	r3, [r3, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	4619      	mov	r1, r3
 80072fe:	f7ff fba1 	bl	8006a44 <LL_GPIO_SetPinOutputType>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	889b      	ldrh	r3, [r3, #4]
 800730a:	2203      	movs	r2, #3
 800730c:	4619      	mov	r1, r3
 800730e:	f7ff fb6a 	bl	80069e6 <LL_GPIO_SetPinMode>
			break;
 8007312:	bf00      	nop
}
 8007314:	bf00      	nop
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <hal_gpio_toggle>:
	} else {
		return false;
	}
}

static inline void hal_gpio_toggle(const GpioPin* gpio) {
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	uint32_t odr = gpio->port->ODR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	60fb      	str	r3, [r7, #12]
	gpio->port->BSRR = ((odr & gpio->pin) << 16u) | (~odr & gpio->pin);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	889b      	ldrh	r3, [r3, #4]
 8007330:	461a      	mov	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4013      	ands	r3, r2
 8007336:	0419      	lsls	r1, r3, #16
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	43db      	mvns	r3, r3
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	8892      	ldrh	r2, [r2, #4]
 8007340:	401a      	ands	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	619a      	str	r2, [r3, #24]
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
	...

08007358 <testThread>:
#include "i2c.h"
#include "spi.h"
#include "gpio.h"
#include "uart.h"

void testThread(void* param) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	while(1) {
		vTaskDelay(1000);
 8007360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007364:	f7fc fc6a 	bl	8003c3c <vTaskDelay>
		hal_gpio_toggle(&gpio_led_red);
 8007368:	4803      	ldr	r0, [pc, #12]	; (8007378 <testThread+0x20>)
 800736a:	f7ff ffd7 	bl	800731c <hal_gpio_toggle>
		hal_gpio_toggle(&gpio_led_green);
 800736e:	4803      	ldr	r0, [pc, #12]	; (800737c <testThread+0x24>)
 8007370:	f7ff ffd4 	bl	800731c <hal_gpio_toggle>
		vTaskDelay(1000);
 8007374:	e7f4      	b.n	8007360 <testThread+0x8>
 8007376:	bf00      	nop
 8007378:	08008418 	.word	0x08008418
 800737c:	08008410 	.word	0x08008410

08007380 <main>:
	}
}

int main(void) {
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b087      	sub	sp, #28
 8007384:	af02      	add	r7, sp, #8
	HAL_Init();
 8007386:	f7f9 f8ff 	bl	8000588 <HAL_Init>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800738a:	4b1c      	ldr	r3, [pc, #112]	; (80073fc <main+0x7c>)
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <main+0x7c>)
 8007390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007394:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007396:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <main+0x80>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a19      	ldr	r2, [pc, #100]	; (8007400 <main+0x80>)
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 80073a2:	4b17      	ldr	r3, [pc, #92]	; (8007400 <main+0x80>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]

	hal_clock_init_early();
 80073a8:	f7ff faf2 	bl	8006990 <hal_clock_init_early>
	hal_clock_config();
 80073ac:	f000 fa34 	bl	8007818 <hal_clock_config>
	ltdc_clock_config();
 80073b0:	f000 fa84 	bl	80078bc <ltdc_clock_config>

	hal_resources_init_early();
 80073b4:	f000 fab8 	bl	8007928 <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 80073b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80073bc:	2000      	movs	r0, #0
 80073be:	f000 fed3 	bl	8008168 <hal_uart_init>

	uint8_t buffer[] = "hello world!\r\n";
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <main+0x84>)
 80073c4:	463c      	mov	r4, r7
 80073c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073c8:	c407      	stmia	r4!, {r0, r1, r2}
 80073ca:	8023      	strh	r3, [r4, #0]
 80073cc:	3402      	adds	r4, #2
 80073ce:	0c1b      	lsrs	r3, r3, #16
 80073d0:	7023      	strb	r3, [r4, #0]
	hal_uart_transfer(UartIdUSART1, buffer, sizeof(buffer));
 80073d2:	463b      	mov	r3, r7
 80073d4:	220f      	movs	r2, #15
 80073d6:	4619      	mov	r1, r3
 80073d8:	2000      	movs	r0, #0
 80073da:	f000 fed5 	bl	8008188 <hal_uart_transfer>

	traceSTART();
 80073de:	f7ff f94d 	bl	800667c <SEGGER_SYSVIEW_Conf>
	xTaskCreate(testThread, "test", 128, NULL, 3, NULL);
 80073e2:	2300      	movs	r3, #0
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	2303      	movs	r3, #3
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2300      	movs	r3, #0
 80073ec:	2280      	movs	r2, #128	; 0x80
 80073ee:	4906      	ldr	r1, [pc, #24]	; (8007408 <main+0x88>)
 80073f0:	4806      	ldr	r0, [pc, #24]	; (800740c <main+0x8c>)
 80073f2:	f7fc faba 	bl	800396a <xTaskCreate>
	vTaskStartScheduler();
 80073f6:	f7fc fc59 	bl	8003cac <vTaskStartScheduler>

	for(;;);
 80073fa:	e7fe      	b.n	80073fa <main+0x7a>
 80073fc:	e000edf0 	.word	0xe000edf0
 8007400:	e0001000 	.word	0xe0001000
 8007404:	080083ec 	.word	0x080083ec
 8007408:	080083e4 	.word	0x080083e4
 800740c:	08007359 	.word	0x08007359

08007410 <HAL_TIM_PeriodElapsedCallback>:
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a04      	ldr	r2, [pc, #16]	; (8007430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d101      	bne.n	8007426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007422:	f7f9 f8d3 	bl	80005cc <HAL_IncTick>
  }
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40001000 	.word	0x40001000

08007434 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
        __asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	607b      	str	r3, [r7, #4]
    }
 800744c:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800744e:	e7fe      	b.n	800744e <vApplicationMallocFailedHook+0x1a>

08007450 <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
        __asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60fb      	str	r3, [r7, #12]
    }
 800746c:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800746e:	e7fe      	b.n	800746e <vApplicationStackOverflowHook+0x1e>

08007470 <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a07      	ldr	r2, [pc, #28]	; (800749c <vApplicationGetIdleTaskMemory+0x2c>)
 8007480:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4a06      	ldr	r2, [pc, #24]	; (80074a0 <vApplicationGetIdleTaskMemory+0x30>)
 8007486:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800748e:	601a      	str	r2, [r3, #0]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20004548 	.word	0x20004548
 80074a0:	200045a4 	.word	0x200045a4

080074a4 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4a07      	ldr	r2, [pc, #28]	; (80074d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80074b4:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4a06      	ldr	r2, [pc, #24]	; (80074d4 <vApplicationGetTimerTaskMemory+0x30>)
 80074ba:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20004da4 	.word	0x20004da4
 80074d4:	20004e00 	.word	0x20004e00

080074d8 <LL_RCC_HSE_Enable>:
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <LL_RCC_HSE_Enable+0x1c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a04      	ldr	r2, [pc, #16]	; (80074f4 <LL_RCC_HSE_Enable+0x1c>)
 80074e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e6:	6013      	str	r3, [r2, #0]
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40023800 	.word	0x40023800

080074f8 <LL_RCC_HSE_IsReady>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80074fc:	4b07      	ldr	r3, [pc, #28]	; (800751c <LL_RCC_HSE_IsReady+0x24>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2db      	uxtb	r3, r3
}
 8007510:	4618      	mov	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40023800 	.word	0x40023800

08007520 <LL_RCC_SetSysClkSource>:
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007528:	4b06      	ldr	r3, [pc, #24]	; (8007544 <LL_RCC_SetSysClkSource+0x24>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f023 0203 	bic.w	r2, r3, #3
 8007530:	4904      	ldr	r1, [pc, #16]	; (8007544 <LL_RCC_SetSysClkSource+0x24>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4313      	orrs	r3, r2
 8007536:	608b      	str	r3, [r1, #8]
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	40023800 	.word	0x40023800

08007548 <LL_RCC_GetSysClkSource>:
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <LL_RCC_GetSysClkSource+0x18>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 030c 	and.w	r3, r3, #12
}
 8007554:	4618      	mov	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40023800 	.word	0x40023800

08007564 <LL_RCC_SetAHBPrescaler>:
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <LL_RCC_SetAHBPrescaler+0x24>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007574:	4904      	ldr	r1, [pc, #16]	; (8007588 <LL_RCC_SetAHBPrescaler+0x24>)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4313      	orrs	r3, r2
 800757a:	608b      	str	r3, [r1, #8]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	40023800 	.word	0x40023800

0800758c <LL_RCC_SetAPB1Prescaler>:
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007594:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800759c:	4904      	ldr	r1, [pc, #16]	; (80075b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	608b      	str	r3, [r1, #8]
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	40023800 	.word	0x40023800

080075b4 <LL_RCC_SetAPB2Prescaler>:
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075c4:	4904      	ldr	r1, [pc, #16]	; (80075d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	608b      	str	r3, [r1, #8]
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40023800 	.word	0x40023800

080075dc <LL_RCC_SetTIMPrescaler>:
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80075e4:	4b07      	ldr	r3, [pc, #28]	; (8007604 <LL_RCC_SetTIMPrescaler+0x28>)
 80075e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075ee:	4905      	ldr	r1, [pc, #20]	; (8007604 <LL_RCC_SetTIMPrescaler+0x28>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40023800 	.word	0x40023800

08007608 <LL_RCC_PLL_Enable>:
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <LL_RCC_PLL_Enable+0x1c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a04      	ldr	r2, [pc, #16]	; (8007624 <LL_RCC_PLL_Enable+0x1c>)
 8007612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007616:	6013      	str	r3, [r2, #0]
}
 8007618:	bf00      	nop
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800

08007628 <LL_RCC_PLL_IsReady>:
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800762c:	4b07      	ldr	r3, [pc, #28]	; (800764c <LL_RCC_PLL_IsReady+0x24>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007638:	bf0c      	ite	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	2300      	movne	r3, #0
 800763e:	b2db      	uxtb	r3, r3
}
 8007640:	4618      	mov	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40023800 	.word	0x40023800

08007650 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800765e:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8007664:	4013      	ands	r3, r2
 8007666:	68f9      	ldr	r1, [r7, #12]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	4311      	orrs	r1, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	0192      	lsls	r2, r2, #6
 8007670:	430a      	orrs	r2, r1
 8007672:	4908      	ldr	r1, [pc, #32]	; (8007694 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007674:	4313      	orrs	r3, r2
 8007676:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8007678:	4b06      	ldr	r3, [pc, #24]	; (8007694 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007680:	4904      	ldr	r1, [pc, #16]	; (8007694 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	4313      	orrs	r3, r2
 8007686:	604b      	str	r3, [r1, #4]
}
 8007688:	bf00      	nop
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	40023800 	.word	0x40023800
 8007698:	ffbf8000 	.word	0xffbf8000

0800769c <LL_RCC_PLL_ConfigDomain_48M>:
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 80076aa:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	4311      	orrs	r1, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	0192      	lsls	r2, r2, #6
 80076bc:	4311      	orrs	r1, r2
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	4904      	ldr	r1, [pc, #16]	; (80076d4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	604b      	str	r3, [r1, #4]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	40023800 	.word	0x40023800
 80076d8:	f0bf8000 	.word	0xf0bf8000

080076dc <LL_RCC_PLLSAI_Enable>:
  * @brief  Enable PLLSAI
  * @rmtoll CR           PLLSAION     LL_RCC_PLLSAI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_Enable(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAION);
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <LL_RCC_PLLSAI_Enable+0x1c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a04      	ldr	r2, [pc, #16]	; (80076f8 <LL_RCC_PLLSAI_Enable+0x1c>)
 80076e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ea:	6013      	str	r3, [r2, #0]
}
 80076ec:	bf00      	nop
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800

080076fc <LL_RCC_PLLSAI_IsReady>:
  * @brief  Check if PLLSAI Ready
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <LL_RCC_PLLSAI_IsReady+0x24>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40023800 	.word	0x40023800

08007724 <LL_RCC_PLLSAI_ConfigDomain_LTDC>:
  *         @arg @ref LL_RCC_PLLSAIDIVR_DIV_8
  *         @arg @ref LL_RCC_PLLSAIDIVR_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_ConfigDomain_LTDC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR, uint32_t PLLDIVR)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8007732:	4b14      	ldr	r3, [pc, #80]	; (8007784 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800773a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	430a      	orrs	r2, r1
 8007744:	490f      	ldr	r1, [pc, #60]	; (8007784 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 8007746:	4313      	orrs	r3, r2
 8007748:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLSAICFGR, RCC_PLLSAICFGR_PLLSAIN | RCC_PLLSAICFGR_PLLSAIR, PLLN << RCC_PLLSAICFGR_PLLSAIN_Pos | PLLR);
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 800774c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007750:	4b0d      	ldr	r3, [pc, #52]	; (8007788 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x64>)
 8007752:	4013      	ands	r3, r2
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	0191      	lsls	r1, r2, #6
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	4909      	ldr	r1, [pc, #36]	; (8007784 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLSAIDIVR, PLLDIVR);
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 8007766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800776a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800776e:	4905      	ldr	r1, [pc, #20]	; (8007784 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	40023800 	.word	0x40023800
 8007788:	8fff803f 	.word	0x8fff803f

0800778c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007794:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <LL_FLASH_SetLatency+0x24>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f023 020f 	bic.w	r2, r3, #15
 800779c:	4904      	ldr	r1, [pc, #16]	; (80077b0 <LL_FLASH_SetLatency+0x24>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	600b      	str	r3, [r1, #0]
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	40023c00 	.word	0x40023c00

080077b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80077b8:	4b04      	ldr	r3, [pc, #16]	; (80077cc <LL_FLASH_GetLatency+0x18>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 030f 	and.w	r3, r3, #15
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40023c00 	.word	0x40023c00

080077d0 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <LL_PWR_EnableOverDriveMode+0x1c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a04      	ldr	r2, [pc, #16]	; (80077ec <LL_PWR_EnableOverDriveMode+0x1c>)
 80077da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077de:	6013      	str	r3, [r2, #0]
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40007000 	.word	0x40007000

080077f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80077f8:	4b06      	ldr	r3, [pc, #24]	; (8007814 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007800:	4904      	ldr	r1, [pc, #16]	; (8007814 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4313      	orrs	r3, r2
 8007806:	600b      	str	r3, [r1, #0]
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40007000 	.word	0x40007000

08007818 <hal_clock_config>:
  HAL_Init();
  SystemClock_Config();
  PeriphCommonClock_Config();
  */
void hal_clock_config(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800781c:	2005      	movs	r0, #5
 800781e:	f7ff ffb5 	bl	800778c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8007822:	bf00      	nop
 8007824:	f7ff ffc6 	bl	80077b4 <LL_FLASH_GetLatency>
 8007828:	4603      	mov	r3, r0
 800782a:	2b05      	cmp	r3, #5
 800782c:	d1fa      	bne.n	8007824 <hal_clock_config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800782e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8007832:	f7ff ffdd 	bl	80077f0 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8007836:	f7ff ffcb 	bl	80077d0 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800783a:	f7ff fe4d 	bl	80074d8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800783e:	bf00      	nop
 8007840:	f7ff fe5a 	bl	80074f8 <LL_RCC_HSE_IsReady>
 8007844:	4603      	mov	r3, r0
 8007846:	2b01      	cmp	r3, #1
 8007848:	d1fa      	bne.n	8007840 <hal_clock_config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800784a:	2300      	movs	r3, #0
 800784c:	22b4      	movs	r2, #180	; 0xb4
 800784e:	2104      	movs	r1, #4
 8007850:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007854:	f7ff fefc 	bl	8007650 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 8007858:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800785c:	22b4      	movs	r2, #180	; 0xb4
 800785e:	2104      	movs	r1, #4
 8007860:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007864:	f7ff ff1a 	bl	800769c <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8007868:	f7ff fece 	bl	8007608 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800786c:	bf00      	nop
 800786e:	f7ff fedb 	bl	8007628 <LL_RCC_PLL_IsReady>
 8007872:	4603      	mov	r3, r0
 8007874:	2b01      	cmp	r3, #1
 8007876:	d1fa      	bne.n	800786e <hal_clock_config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8007878:	2000      	movs	r0, #0
 800787a:	f7ff fe73 	bl	8007564 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800787e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8007882:	f7ff fe83 	bl	800758c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8007886:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800788a:	f7ff fe93 	bl	80075b4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800788e:	2002      	movs	r0, #2
 8007890:	f7ff fe46 	bl	8007520 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007894:	bf00      	nop
 8007896:	f7ff fe57 	bl	8007548 <LL_RCC_GetSysClkSource>
 800789a:	4603      	mov	r3, r0
 800789c:	2b08      	cmp	r3, #8
 800789e:	d1fa      	bne.n	8007896 <hal_clock_config+0x7e>
  {

  }
  LL_SetSystemCoreClock(180000000);
 80078a0:	4805      	ldr	r0, [pc, #20]	; (80078b8 <hal_clock_config+0xa0>)
 80078a2:	f7fa fced 	bl	8002280 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80078a6:	2005      	movs	r0, #5
 80078a8:	f000 f8be 	bl	8007a28 <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7ff fe95 	bl	80075dc <LL_RCC_SetTIMPrescaler>
}
 80078b2:	bf00      	nop
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	0aba9500 	.word	0x0aba9500

080078bc <ltdc_clock_config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void ltdc_clock_config(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af02      	add	r7, sp, #8
  LL_RCC_PLLSAI_ConfigDomain_LTDC(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLSAIM_DIV_4, 50, LL_RCC_PLLSAIR_DIV_4, LL_RCC_PLLSAIDIVR_DIV_4);
 80078c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078cc:	2232      	movs	r2, #50	; 0x32
 80078ce:	2104      	movs	r1, #4
 80078d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80078d4:	f7ff ff26 	bl	8007724 <LL_RCC_PLLSAI_ConfigDomain_LTDC>
  LL_RCC_PLLSAI_Enable();
 80078d8:	f7ff ff00 	bl	80076dc <LL_RCC_PLLSAI_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLLSAI_IsReady() != 1)
 80078dc:	bf00      	nop
 80078de:	f7ff ff0d 	bl	80076fc <LL_RCC_PLLSAI_IsReady>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d1fa      	bne.n	80078de <ltdc_clock_config+0x22>
  {

  }
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <hal_gpio_write>:
static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	889a      	ldrh	r2, [r3, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	619a      	str	r2, [r3, #24]
}
 800790c:	e006      	b.n	800791c <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	889b      	ldrh	r3, [r3, #4]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	0412      	lsls	r2, r2, #16
 800791a:	619a      	str	r2, [r3, #24]
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <hal_resources_init_early>:
const GpioPin gpio_led_red = {.port = LED_RED_GPIO_PORT, .pin = LED_RED_PIN};

const GpioPin gpio_uart1_tx = {.port = UART1_TX_GPIO_PORT, .pin = UART1_TX_PIN};
const GpioPin gpio_uart1_rx = {.port = UART1_RX_GPIO_PORT, .pin = UART1_RX_PIN};

void hal_resources_init_early(void) {
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800792c:	2300      	movs	r3, #0
 800792e:	2201      	movs	r2, #1
 8007930:	2101      	movs	r1, #1
 8007932:	4809      	ldr	r0, [pc, #36]	; (8007958 <hal_resources_init_early+0x30>)
 8007934:	f7ff fa66 	bl	8006e04 <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 8007938:	2101      	movs	r1, #1
 800793a:	4807      	ldr	r0, [pc, #28]	; (8007958 <hal_resources_init_early+0x30>)
 800793c:	f7ff ffd8 	bl	80078f0 <hal_gpio_write>

	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 8007940:	2300      	movs	r3, #0
 8007942:	2201      	movs	r2, #1
 8007944:	2101      	movs	r1, #1
 8007946:	4805      	ldr	r0, [pc, #20]	; (800795c <hal_resources_init_early+0x34>)
 8007948:	f7ff fa5c 	bl	8006e04 <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 800794c:	2101      	movs	r1, #1
 800794e:	4803      	ldr	r0, [pc, #12]	; (800795c <hal_resources_init_early+0x34>)
 8007950:	f7ff ffce 	bl	80078f0 <hal_gpio_write>

}
 8007954:	bf00      	nop
 8007956:	bd80      	pop	{r7, pc}
 8007958:	08008410 	.word	0x08008410
 800795c:	08008418 	.word	0x08008418

08007960 <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 8007964:	4802      	ldr	r0, [pc, #8]	; (8007970 <DMA2_Stream3_IRQHandler+0x10>)
 8007966:	f7f8 ff49 	bl	80007fc <HAL_DMA_IRQHandler>
}
 800796a:	bf00      	nop
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20005284 	.word	0x20005284

08007974 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 8007978:	4802      	ldr	r0, [pc, #8]	; (8007984 <SDIO_IRQHandler+0x10>)
 800797a:	f7f9 f91b 	bl	8000bb4 <HAL_SD_IRQHandler>
}
 800797e:	bf00      	nop
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20005200 	.word	0x20005200

08007988 <SPI4_IRQHandler>:
	LL_SPI_Init(SPI5, &SPI_InitStruct);
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
}

void SPI4_IRQHandler(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0

}
 800798c:	bf00      	nop
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 8007996:	b480      	push	{r7}
 8007998:	af00      	add	r7, sp, #0

}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0

}
 80079a8:	bf00      	nop
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <DMA2_Stream1_IRQHandler>:

/* tx */
void DMA2_Stream1_IRQHandler(void)
{
 80079b2:	b480      	push	{r7}
 80079b4:	af00      	add	r7, sp, #0

}
 80079b6:	bf00      	nop
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0

}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
	...

080079d0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079d6:	2300      	movs	r3, #0
 80079d8:	607b      	str	r3, [r7, #4]
 80079da:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <HAL_MspInit+0x54>)
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	4a11      	ldr	r2, [pc, #68]	; (8007a24 <HAL_MspInit+0x54>)
 80079e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079e4:	6453      	str	r3, [r2, #68]	; 0x44
 80079e6:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <HAL_MspInit+0x54>)
 80079e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ee:	607b      	str	r3, [r7, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079f2:	2300      	movs	r3, #0
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <HAL_MspInit+0x54>)
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <HAL_MspInit+0x54>)
 80079fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a00:	6413      	str	r3, [r2, #64]	; 0x40
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <HAL_MspInit+0x54>)
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007a0e:	2200      	movs	r2, #0
 8007a10:	210f      	movs	r1, #15
 8007a12:	f06f 0001 	mvn.w	r0, #1
 8007a16:	f7f8 fea5 	bl	8000764 <HAL_NVIC_SetPriority>
}
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	40023800 	.word	0x40023800

08007a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	; 0x38
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	4b33      	ldr	r3, [pc, #204]	; (8007b0c <HAL_InitTick+0xe4>)
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	4a32      	ldr	r2, [pc, #200]	; (8007b0c <HAL_InitTick+0xe4>)
 8007a42:	f043 0310 	orr.w	r3, r3, #16
 8007a46:	6413      	str	r3, [r2, #64]	; 0x40
 8007a48:	4b30      	ldr	r3, [pc, #192]	; (8007b0c <HAL_InitTick+0xe4>)
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007a54:	f107 0210 	add.w	r2, r7, #16
 8007a58:	f107 0314 	add.w	r3, r7, #20
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7f9 f876 	bl	8000b50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007a6e:	f7f9 f85b 	bl	8000b28 <HAL_RCC_GetPCLK1Freq>
 8007a72:	6378      	str	r0, [r7, #52]	; 0x34
 8007a74:	e004      	b.n	8007a80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007a76:	f7f9 f857 	bl	8000b28 <HAL_RCC_GetPCLK1Freq>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a82:	4a23      	ldr	r2, [pc, #140]	; (8007b10 <HAL_InitTick+0xe8>)
 8007a84:	fba2 2303 	umull	r2, r3, r2, r3
 8007a88:	0c9b      	lsrs	r3, r3, #18
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007a8e:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <HAL_InitTick+0xec>)
 8007a90:	4a21      	ldr	r2, [pc, #132]	; (8007b18 <HAL_InitTick+0xf0>)
 8007a92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007a94:	4b1f      	ldr	r3, [pc, #124]	; (8007b14 <HAL_InitTick+0xec>)
 8007a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007a9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <HAL_InitTick+0xec>)
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <HAL_InitTick+0xec>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007aa8:	4b1a      	ldr	r3, [pc, #104]	; (8007b14 <HAL_InitTick+0xec>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007aae:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <HAL_InitTick+0xec>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8007ab4:	4817      	ldr	r0, [pc, #92]	; (8007b14 <HAL_InitTick+0xec>)
 8007ab6:	f7f9 fb69 	bl	800118c <HAL_TIM_Base_Init>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8007ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11b      	bne.n	8007b00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8007ac8:	4812      	ldr	r0, [pc, #72]	; (8007b14 <HAL_InitTick+0xec>)
 8007aca:	f7f9 fbb9 	bl	8001240 <HAL_TIM_Base_Start_IT>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8007ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d111      	bne.n	8007b00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007adc:	2036      	movs	r0, #54	; 0x36
 8007ade:	f7f8 fe5d 	bl	800079c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d808      	bhi.n	8007afa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8007ae8:	2200      	movs	r2, #0
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	2036      	movs	r0, #54	; 0x36
 8007aee:	f7f8 fe39 	bl	8000764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007af2:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <HAL_InitTick+0xf4>)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	e002      	b.n	8007b00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8007b00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3738      	adds	r7, #56	; 0x38
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	40023800 	.word	0x40023800
 8007b10:	431bde83 	.word	0x431bde83
 8007b14:	200052e4 	.word	0x200052e4
 8007b18:	40001000 	.word	0x40001000
 8007b1c:	20000000 	.word	0x20000000

08007b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  while (1)
 8007b24:	e7fe      	b.n	8007b24 <NMI_Handler+0x4>

08007b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b26:	b480      	push	{r7}
 8007b28:	af00      	add	r7, sp, #0
  while (1)
 8007b2a:	e7fe      	b.n	8007b2a <HardFault_Handler+0x4>

08007b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  while (1)
 8007b30:	e7fe      	b.n	8007b30 <MemManage_Handler+0x4>

08007b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b32:	b480      	push	{r7}
 8007b34:	af00      	add	r7, sp, #0
  while (1)
 8007b36:	e7fe      	b.n	8007b36 <BusFault_Handler+0x4>

08007b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  while (1)
 8007b3c:	e7fe      	b.n	8007b3c <UsageFault_Handler+0x4>

08007b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b42:	bf00      	nop
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007b50:	4802      	ldr	r0, [pc, #8]	; (8007b5c <TIM6_DAC_IRQHandler+0x10>)
 8007b52:	f7f9 fbe5 	bl	8001320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007b56:	bf00      	nop
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200052e4 	.word	0x200052e4

08007b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <SystemInit+0x20>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6a:	4a05      	ldr	r2, [pc, #20]	; (8007b80 <SystemInit+0x20>)
 8007b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	e000ed00 	.word	0xe000ed00

08007b84 <__NVIC_GetPriorityGrouping>:
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <__NVIC_GetPriorityGrouping+0x18>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	0a1b      	lsrs	r3, r3, #8
 8007b8e:	f003 0307 	and.w	r3, r3, #7
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	e000ed00 	.word	0xe000ed00

08007ba0 <__NVIC_EnableIRQ>:
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	db0b      	blt.n	8007bca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	f003 021f 	and.w	r2, r3, #31
 8007bb8:	4907      	ldr	r1, [pc, #28]	; (8007bd8 <__NVIC_EnableIRQ+0x38>)
 8007bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	e000e100 	.word	0xe000e100

08007bdc <__NVIC_SetPriority>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db0a      	blt.n	8007c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	490c      	ldr	r1, [pc, #48]	; (8007c28 <__NVIC_SetPriority+0x4c>)
 8007bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfa:	0112      	lsls	r2, r2, #4
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	440b      	add	r3, r1
 8007c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c04:	e00a      	b.n	8007c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	4908      	ldr	r1, [pc, #32]	; (8007c2c <__NVIC_SetPriority+0x50>)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	3b04      	subs	r3, #4
 8007c14:	0112      	lsls	r2, r2, #4
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	440b      	add	r3, r1
 8007c1a:	761a      	strb	r2, [r3, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	e000e100 	.word	0xe000e100
 8007c2c:	e000ed00 	.word	0xe000ed00

08007c30 <NVIC_EncodePriority>:
{
 8007c30:	b480      	push	{r7}
 8007c32:	b089      	sub	sp, #36	; 0x24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f1c3 0307 	rsb	r3, r3, #7
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	bf28      	it	cs
 8007c4e:	2304      	movcs	r3, #4
 8007c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	3304      	adds	r3, #4
 8007c56:	2b06      	cmp	r3, #6
 8007c58:	d902      	bls.n	8007c60 <NVIC_EncodePriority+0x30>
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3b03      	subs	r3, #3
 8007c5e:	e000      	b.n	8007c62 <NVIC_EncodePriority+0x32>
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	43da      	mvns	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	401a      	ands	r2, r3
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	43d9      	mvns	r1, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c88:	4313      	orrs	r3, r2
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3724      	adds	r7, #36	; 0x24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <LL_USART_Enable>:
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60da      	str	r2, [r3, #12]
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <LL_USART_IsEnabled>:
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cca:	bf0c      	ite	eq
 8007ccc:	2301      	moveq	r3, #1
 8007cce:	2300      	movne	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	615a      	str	r2, [r3, #20]
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b80      	cmp	r3, #128	; 0x80
 8007d1c:	bf0c      	ite	eq
 8007d1e:	2301      	moveq	r3, #1
 8007d20:	2300      	movne	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b089      	sub	sp, #36	; 0x24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f043 0320 	orr.w	r3, r3, #32
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	330c      	adds	r3, #12
 8007d52:	69fa      	ldr	r2, [r7, #28]
 8007d54:	61ba      	str	r2, [r7, #24]
 8007d56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6979      	ldr	r1, [r7, #20]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	613b      	str	r3, [r7, #16]
   return(result);
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e7      	bne.n	8007d38 <LL_USART_EnableIT_RXNE+0x8>
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	3724      	adds	r7, #36	; 0x24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	605a      	str	r2, [r3, #4]
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8007da0:	4a0d      	ldr	r2, [pc, #52]	; (8007dd8 <LL_DMA_SetDataTransferDirection+0x44>)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	461a      	mov	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4413      	add	r3, r2
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007db4:	4908      	ldr	r1, [pc, #32]	; (8007dd8 <LL_DMA_SetDataTransferDirection+0x44>)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	440b      	add	r3, r1
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	440b      	add	r3, r1
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]
}
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	08008448 	.word	0x08008448

08007ddc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8007de8:	4a0d      	ldr	r2, [pc, #52]	; (8007e20 <LL_DMA_SetMode+0x44>)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	4413      	add	r3, r2
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8007dfc:	4908      	ldr	r1, [pc, #32]	; (8007e20 <LL_DMA_SetMode+0x44>)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	440b      	add	r3, r1
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	440b      	add	r3, r1
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	600b      	str	r3, [r1, #0]
}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	08008448 	.word	0x08008448

08007e24 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8007e30:	4a0d      	ldr	r2, [pc, #52]	; (8007e68 <LL_DMA_SetPeriphIncMode+0x44>)
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	4413      	add	r3, r2
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e44:	4908      	ldr	r1, [pc, #32]	; (8007e68 <LL_DMA_SetPeriphIncMode+0x44>)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	440b      	add	r3, r1
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	440b      	add	r3, r1
 8007e52:	4619      	mov	r1, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	600b      	str	r3, [r1, #0]
}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	08008448 	.word	0x08008448

08007e6c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8007e78:	4a0d      	ldr	r2, [pc, #52]	; (8007eb0 <LL_DMA_SetMemoryIncMode+0x44>)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e8c:	4908      	ldr	r1, [pc, #32]	; (8007eb0 <LL_DMA_SetMemoryIncMode+0x44>)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	440b      	add	r3, r1
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	4619      	mov	r1, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	440b      	add	r3, r1
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	600b      	str	r3, [r1, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	08008448 	.word	0x08008448

08007eb4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <LL_DMA_SetPeriphSize+0x44>)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007ed4:	4908      	ldr	r1, [pc, #32]	; (8007ef8 <LL_DMA_SetPeriphSize+0x44>)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	440b      	add	r3, r1
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	440b      	add	r3, r1
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	600b      	str	r3, [r1, #0]
}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	08008448 	.word	0x08008448

08007efc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8007f08:	4a0d      	ldr	r2, [pc, #52]	; (8007f40 <LL_DMA_SetMemorySize+0x44>)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8007f1c:	4908      	ldr	r1, [pc, #32]	; (8007f40 <LL_DMA_SetMemorySize+0x44>)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	440b      	add	r3, r1
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	4619      	mov	r1, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	440b      	add	r3, r1
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	600b      	str	r3, [r1, #0]
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	08008448 	.word	0x08008448

08007f44 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8007f50:	4a0d      	ldr	r2, [pc, #52]	; (8007f88 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4413      	add	r3, r2
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f64:	4908      	ldr	r1, [pc, #32]	; (8007f88 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	440b      	add	r3, r1
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	440b      	add	r3, r1
 8007f72:	4619      	mov	r1, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	600b      	str	r3, [r1, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	08008448 	.word	0x08008448

08007f8c <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8007f98:	4a0d      	ldr	r2, [pc, #52]	; (8007fd0 <LL_DMA_SetChannelSelection+0x44>)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007fac:	4908      	ldr	r1, [pc, #32]	; (8007fd0 <LL_DMA_SetChannelSelection+0x44>)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	440b      	add	r3, r1
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	440b      	add	r3, r1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	600b      	str	r3, [r1, #0]
}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	08008448 	.word	0x08008448

08007fd4 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8007fde:	4a0c      	ldr	r2, [pc, #48]	; (8008010 <LL_DMA_DisableFifoMode+0x3c>)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4413      	add	r3, r2
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	4908      	ldr	r1, [pc, #32]	; (8008010 <LL_DMA_DisableFifoMode+0x3c>)
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	7812      	ldrb	r2, [r2, #0]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f023 0304 	bic.w	r3, r3, #4
 8008000:	6153      	str	r3, [r2, #20]
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	08008448 	.word	0x08008448

08008014 <hal_uart1_init>:



static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 8008014:	b580      	push	{r7, lr}
 8008016:	b08c      	sub	sp, #48	; 0x30
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 800801c:	2307      	movs	r3, #7
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2303      	movs	r3, #3
 8008022:	2200      	movs	r2, #0
 8008024:	2103      	movs	r1, #3
 8008026:	484c      	ldr	r0, [pc, #304]	; (8008158 <hal_uart1_init+0x144>)
 8008028:	f7fe ff06 	bl	8006e38 <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 800802c:	2307      	movs	r3, #7
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	2303      	movs	r3, #3
 8008032:	2200      	movs	r2, #0
 8008034:	2103      	movs	r1, #3
 8008036:	4849      	ldr	r0, [pc, #292]	; (800815c <hal_uart1_init+0x148>)
 8008038:	f7fe fefe 	bl	8006e38 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 800803c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008040:	2102      	movs	r1, #2
 8008042:	4847      	ldr	r0, [pc, #284]	; (8008160 <hal_uart1_init+0x14c>)
 8008044:	f7ff ffa2 	bl	8007f8c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8008048:	2200      	movs	r2, #0
 800804a:	2102      	movs	r1, #2
 800804c:	4844      	ldr	r0, [pc, #272]	; (8008160 <hal_uart1_init+0x14c>)
 800804e:	f7ff fea1 	bl	8007d94 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 8008052:	2200      	movs	r2, #0
 8008054:	2102      	movs	r1, #2
 8008056:	4842      	ldr	r0, [pc, #264]	; (8008160 <hal_uart1_init+0x14c>)
 8008058:	f7ff ff74 	bl	8007f44 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_NORMAL);
 800805c:	2200      	movs	r2, #0
 800805e:	2102      	movs	r1, #2
 8008060:	483f      	ldr	r0, [pc, #252]	; (8008160 <hal_uart1_init+0x14c>)
 8008062:	f7ff febb 	bl	8007ddc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 8008066:	2200      	movs	r2, #0
 8008068:	2102      	movs	r1, #2
 800806a:	483d      	ldr	r0, [pc, #244]	; (8008160 <hal_uart1_init+0x14c>)
 800806c:	f7ff feda 	bl	8007e24 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 8008070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008074:	2102      	movs	r1, #2
 8008076:	483a      	ldr	r0, [pc, #232]	; (8008160 <hal_uart1_init+0x14c>)
 8008078:	f7ff fef8 	bl	8007e6c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800807c:	2200      	movs	r2, #0
 800807e:	2102      	movs	r1, #2
 8008080:	4837      	ldr	r0, [pc, #220]	; (8008160 <hal_uart1_init+0x14c>)
 8008082:	f7ff ff17 	bl	8007eb4 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8008086:	2200      	movs	r2, #0
 8008088:	2102      	movs	r1, #2
 800808a:	4835      	ldr	r0, [pc, #212]	; (8008160 <hal_uart1_init+0x14c>)
 800808c:	f7ff ff36 	bl	8007efc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 8008090:	2102      	movs	r1, #2
 8008092:	4833      	ldr	r0, [pc, #204]	; (8008160 <hal_uart1_init+0x14c>)
 8008094:	f7ff ff9e 	bl	8007fd4 <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 8008098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800809c:	2107      	movs	r1, #7
 800809e:	4830      	ldr	r0, [pc, #192]	; (8008160 <hal_uart1_init+0x14c>)
 80080a0:	f7ff ff74 	bl	8007f8c <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80080a4:	2240      	movs	r2, #64	; 0x40
 80080a6:	2107      	movs	r1, #7
 80080a8:	482d      	ldr	r0, [pc, #180]	; (8008160 <hal_uart1_init+0x14c>)
 80080aa:	f7ff fe73 	bl	8007d94 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 80080ae:	2200      	movs	r2, #0
 80080b0:	2107      	movs	r1, #7
 80080b2:	482b      	ldr	r0, [pc, #172]	; (8008160 <hal_uart1_init+0x14c>)
 80080b4:	f7ff ff46 	bl	8007f44 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 80080b8:	2200      	movs	r2, #0
 80080ba:	2107      	movs	r1, #7
 80080bc:	4828      	ldr	r0, [pc, #160]	; (8008160 <hal_uart1_init+0x14c>)
 80080be:	f7ff fe8d 	bl	8007ddc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 80080c2:	2200      	movs	r2, #0
 80080c4:	2107      	movs	r1, #7
 80080c6:	4826      	ldr	r0, [pc, #152]	; (8008160 <hal_uart1_init+0x14c>)
 80080c8:	f7ff feac 	bl	8007e24 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 80080cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080d0:	2107      	movs	r1, #7
 80080d2:	4823      	ldr	r0, [pc, #140]	; (8008160 <hal_uart1_init+0x14c>)
 80080d4:	f7ff feca 	bl	8007e6c <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 80080d8:	2200      	movs	r2, #0
 80080da:	2107      	movs	r1, #7
 80080dc:	4820      	ldr	r0, [pc, #128]	; (8008160 <hal_uart1_init+0x14c>)
 80080de:	f7ff fee9 	bl	8007eb4 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 80080e2:	2200      	movs	r2, #0
 80080e4:	2107      	movs	r1, #7
 80080e6:	481e      	ldr	r0, [pc, #120]	; (8008160 <hal_uart1_init+0x14c>)
 80080e8:	f7ff ff08 	bl	8007efc <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 80080ec:	2107      	movs	r1, #7
 80080ee:	481c      	ldr	r0, [pc, #112]	; (8008160 <hal_uart1_init+0x14c>)
 80080f0:	f7ff ff70 	bl	8007fd4 <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	USART_InitStruct.BaudRate = baud;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80080f8:	2300      	movs	r3, #0
 80080fa:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008104:	230c      	movs	r3, #12
 8008106:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008108:	2300      	movs	r3, #0
 800810a:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800810c:	2300      	movs	r3, #0
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
	LL_USART_Init(USART1, &USART_InitStruct);
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4619      	mov	r1, r3
 8008116:	4813      	ldr	r0, [pc, #76]	; (8008164 <hal_uart1_init+0x150>)
 8008118:	f7fa f820 	bl	800215c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 800811c:	4811      	ldr	r0, [pc, #68]	; (8008164 <hal_uart1_init+0x150>)
 800811e:	f7ff fdde 	bl	8007cde <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 8008122:	4810      	ldr	r0, [pc, #64]	; (8008164 <hal_uart1_init+0x150>)
 8008124:	f7ff fdb7 	bl	8007c96 <LL_USART_Enable>

	LL_USART_EnableIT_RXNE(USART1);
 8008128:	480e      	ldr	r0, [pc, #56]	; (8008164 <hal_uart1_init+0x150>)
 800812a:	f7ff fe01 	bl	8007d30 <LL_USART_EnableIT_RXNE>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800812e:	f7ff fd29 	bl	8007b84 <__NVIC_GetPriorityGrouping>
 8008132:	4603      	mov	r3, r0
 8008134:	2200      	movs	r2, #0
 8008136:	2105      	movs	r1, #5
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fd79 	bl	8007c30 <NVIC_EncodePriority>
 800813e:	4603      	mov	r3, r0
 8008140:	4619      	mov	r1, r3
 8008142:	2025      	movs	r0, #37	; 0x25
 8008144:	f7ff fd4a 	bl	8007bdc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8008148:	2025      	movs	r0, #37	; 0x25
 800814a:	f7ff fd29 	bl	8007ba0 <__NVIC_EnableIRQ>
}
 800814e:	bf00      	nop
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	08008420 	.word	0x08008420
 800815c:	08008428 	.word	0x08008428
 8008160:	40026400 	.word	0x40026400
 8008164:	40011000 	.word	0x40011000

08008168 <hal_uart_init>:
}



void hal_uart_init(UartId ch, uint32_t baud)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 800817a:	6838      	ldr	r0, [r7, #0]
 800817c:	f7ff ff4a 	bl	8008014 <hal_uart1_init>
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <hal_uart_transfer>:
		LL_USART_Disable(USART1);
	}
}


void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d11e      	bne.n	80081da <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 800819c:	4810      	ldr	r0, [pc, #64]	; (80081e0 <hal_uart_transfer+0x58>)
 800819e:	f7ff fd8a 	bl	8007cb6 <LL_USART_IsEnabled>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d017      	beq.n	80081d8 <hal_uart_transfer+0x50>

        while(size > 0) {
 80081a8:	e012      	b.n	80081d0 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 80081aa:	bf00      	nop
 80081ac:	480c      	ldr	r0, [pc, #48]	; (80081e0 <hal_uart_transfer+0x58>)
 80081ae:	f7ff fdac 	bl	8007d0a <LL_USART_IsActiveFlag_TXE>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f9      	beq.n	80081ac <hal_uart_transfer+0x24>

            LL_USART_TransmitData8(USART1, *buf);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	4808      	ldr	r0, [pc, #32]	; (80081e0 <hal_uart_transfer+0x58>)
 80081c0:	f7ff fdd9 	bl	8007d76 <LL_USART_TransmitData8>
            buf++;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60bb      	str	r3, [r7, #8]
            size--;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e9      	bne.n	80081aa <hal_uart_transfer+0x22>
 80081d6:	e000      	b.n	80081da <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 80081d8:	bf00      	nop
        }
    }
}
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40011000 	.word	0x40011000

080081e4 <USART1_IRQHandler>:



void USART1_IRQHandler(void) {
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0

}
 80081e8:	bf00      	nop
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80081f2:	b480      	push	{r7}
 80081f4:	af00      	add	r7, sp, #0

}
 80081f6:	bf00      	nop
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0

}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008210:	480d      	ldr	r0, [pc, #52]	; (8008248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008214:	f7ff fca4 	bl	8007b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008218:	480c      	ldr	r0, [pc, #48]	; (800824c <LoopForever+0x6>)
  ldr r1, =_edata
 800821a:	490d      	ldr	r1, [pc, #52]	; (8008250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800821c:	4a0d      	ldr	r2, [pc, #52]	; (8008254 <LoopForever+0xe>)
  movs r3, #0
 800821e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008220:	e002      	b.n	8008228 <LoopCopyDataInit>

08008222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008226:	3304      	adds	r3, #4

08008228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800822a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800822c:	d3f9      	bcc.n	8008222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800822e:	4a0a      	ldr	r2, [pc, #40]	; (8008258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008230:	4c0a      	ldr	r4, [pc, #40]	; (800825c <LoopForever+0x16>)
  movs r3, #0
 8008232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008234:	e001      	b.n	800823a <LoopFillZerobss>

08008236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008238:	3204      	adds	r2, #4

0800823a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800823a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800823c:	d3fb      	bcc.n	8008236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800823e:	f000 f811 	bl	8008264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008242:	f7ff f89d 	bl	8007380 <main>

08008246 <LoopForever>:

LoopForever:
    b LoopForever
 8008246:	e7fe      	b.n	8008246 <LoopForever>
  ldr   r0, =_estack
 8008248:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800824c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008250:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8008254:	08008460 	.word	0x08008460
  ldr r2, =_sbss
 8008258:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800825c:	2000532c 	.word	0x2000532c

08008260 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008260:	e7fe      	b.n	8008260 <ADC_IRQHandler>
	...

08008264 <__libc_init_array>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4d0d      	ldr	r5, [pc, #52]	; (800829c <__libc_init_array+0x38>)
 8008268:	4c0d      	ldr	r4, [pc, #52]	; (80082a0 <__libc_init_array+0x3c>)
 800826a:	1b64      	subs	r4, r4, r5
 800826c:	10a4      	asrs	r4, r4, #2
 800826e:	2600      	movs	r6, #0
 8008270:	42a6      	cmp	r6, r4
 8008272:	d109      	bne.n	8008288 <__libc_init_array+0x24>
 8008274:	4d0b      	ldr	r5, [pc, #44]	; (80082a4 <__libc_init_array+0x40>)
 8008276:	4c0c      	ldr	r4, [pc, #48]	; (80082a8 <__libc_init_array+0x44>)
 8008278:	f000 f83e 	bl	80082f8 <_init>
 800827c:	1b64      	subs	r4, r4, r5
 800827e:	10a4      	asrs	r4, r4, #2
 8008280:	2600      	movs	r6, #0
 8008282:	42a6      	cmp	r6, r4
 8008284:	d105      	bne.n	8008292 <__libc_init_array+0x2e>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	f855 3b04 	ldr.w	r3, [r5], #4
 800828c:	4798      	blx	r3
 800828e:	3601      	adds	r6, #1
 8008290:	e7ee      	b.n	8008270 <__libc_init_array+0xc>
 8008292:	f855 3b04 	ldr.w	r3, [r5], #4
 8008296:	4798      	blx	r3
 8008298:	3601      	adds	r6, #1
 800829a:	e7f2      	b.n	8008282 <__libc_init_array+0x1e>
 800829c:	08008458 	.word	0x08008458
 80082a0:	08008458 	.word	0x08008458
 80082a4:	08008458 	.word	0x08008458
 80082a8:	0800845c 	.word	0x0800845c

080082ac <memcmp>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	3901      	subs	r1, #1
 80082b0:	4402      	add	r2, r0
 80082b2:	4290      	cmp	r0, r2
 80082b4:	d101      	bne.n	80082ba <memcmp+0xe>
 80082b6:	2000      	movs	r0, #0
 80082b8:	e005      	b.n	80082c6 <memcmp+0x1a>
 80082ba:	7803      	ldrb	r3, [r0, #0]
 80082bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	d001      	beq.n	80082c8 <memcmp+0x1c>
 80082c4:	1b18      	subs	r0, r3, r4
 80082c6:	bd10      	pop	{r4, pc}
 80082c8:	3001      	adds	r0, #1
 80082ca:	e7f2      	b.n	80082b2 <memcmp+0x6>

080082cc <memcpy>:
 80082cc:	440a      	add	r2, r1
 80082ce:	4291      	cmp	r1, r2
 80082d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082d4:	d100      	bne.n	80082d8 <memcpy+0xc>
 80082d6:	4770      	bx	lr
 80082d8:	b510      	push	{r4, lr}
 80082da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e2:	4291      	cmp	r1, r2
 80082e4:	d1f9      	bne.n	80082da <memcpy+0xe>
 80082e6:	bd10      	pop	{r4, pc}

080082e8 <memset>:
 80082e8:	4402      	add	r2, r0
 80082ea:	4603      	mov	r3, r0
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d100      	bne.n	80082f2 <memset+0xa>
 80082f0:	4770      	bx	lr
 80082f2:	f803 1b01 	strb.w	r1, [r3], #1
 80082f6:	e7f9      	b.n	80082ec <memset+0x4>

080082f8 <_init>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr

08008304 <_fini>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr
