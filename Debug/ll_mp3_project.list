
ll_mp3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d368  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800d518  0800d518  0001d518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c4  0800d9c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9c4  0800d9c4  0001d9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9cc  0800d9cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9cc  0800d9cc  0001d9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9d0  0800d9d0  0001d9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000055a8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005620  20005620  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002593a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006317  00000000  00000000  000459e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024e0  00000000  00000000  0004bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021c8  00000000  00000000  0004e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000af55  00000000  00000000  000503a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a5b4  00000000  00000000  0005b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ccce  00000000  00000000  000858b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019257f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e9c  00000000  00000000  001925d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000014d  00000000  00000000  0019c46c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d500 	.word	0x0800d500

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800d500 	.word	0x0800d500

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20002f48 	.word	0x20002f48
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_Init+0x40>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <HAL_Init+0x40>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_Init+0x40>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <HAL_Init+0x40>)
 800064a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_Init+0x40>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_Init+0x40>)
 8000656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f8fc 	bl	800085a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	2005      	movs	r0, #5
 8000664:	f00b fdea 	bl	800c23c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000668:	f00b fdbc 	bl	800c1e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023c00 	.word	0x40023c00

08000678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000004 	.word	0x20000004
 800069c:	20000094 	.word	0x20000094

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000094 	.word	0x20000094

080006b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_Delay+0x44>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffde 	bl	80006a0 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000004 	.word	0x20000004

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db0b      	blt.n	800078e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 021f 	and.w	r2, r3, #31
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <__NVIC_EnableIRQ+0x38>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	095b      	lsrs	r3, r3, #5
 8000784:	2001      	movs	r0, #1
 8000786:	fa00 f202 	lsl.w	r2, r0, r2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100

080007a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db0a      	blt.n	80007ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <__NVIC_SetPriority+0x4c>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	0112      	lsls	r2, r2, #4
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c8:	e00a      	b.n	80007e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <__NVIC_SetPriority+0x50>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	3b04      	subs	r3, #4
 80007d8:	0112      	lsls	r2, r2, #4
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	440b      	add	r3, r1
 80007de:	761a      	strb	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f1c3 0307 	rsb	r3, r3, #7
 800080e:	2b04      	cmp	r3, #4
 8000810:	bf28      	it	cs
 8000812:	2304      	movcs	r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3304      	adds	r3, #4
 800081a:	2b06      	cmp	r3, #6
 800081c:	d902      	bls.n	8000824 <NVIC_EncodePriority+0x30>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3b03      	subs	r3, #3
 8000822:	e000      	b.n	8000826 <NVIC_EncodePriority+0x32>
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43da      	mvns	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	401a      	ands	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43d9      	mvns	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	4313      	orrs	r3, r2
         );
}
 800084e:	4618      	mov	r0, r3
 8000850:	3724      	adds	r7, #36	; 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff4c 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000882:	f7ff ff61 	bl	8000748 <__NVIC_GetPriorityGrouping>
 8000886:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	6978      	ldr	r0, [r7, #20]
 800088e:	f7ff ffb1 	bl	80007f4 <NVIC_EncodePriority>
 8000892:	4602      	mov	r2, r0
 8000894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff80 	bl	80007a0 <__NVIC_SetPriority>
}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff54 	bl	8000764 <__NVIC_EnableIRQ>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fee6 	bl	80006a0 <HAL_GetTick>
 80008d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	e099      	b.n	8000a14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0201 	bic.w	r2, r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000900:	e00f      	b.n	8000922 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000902:	f7ff fecd 	bl	80006a0 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	2b05      	cmp	r3, #5
 800090e:	d908      	bls.n	8000922 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2220      	movs	r2, #32
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2203      	movs	r2, #3
 800091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800091e:	2303      	movs	r3, #3
 8000920:	e078      	b.n	8000a14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1e8      	bne.n	8000902 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <HAL_DMA_Init+0x158>)
 800093c:	4013      	ands	r3, r2
 800093e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800094e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800095a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a1b      	ldr	r3, [r3, #32]
 800096c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	4313      	orrs	r3, r2
 8000972:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000978:	2b04      	cmp	r3, #4
 800097a:	d107      	bne.n	800098c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4313      	orrs	r3, r2
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	4313      	orrs	r3, r2
 800098a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	f023 0307 	bic.w	r3, r3, #7
 80009a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d117      	bne.n	80009e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	4313      	orrs	r3, r2
 80009be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00e      	beq.n	80009e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 fa9d 	bl	8000f08 <DMA_CheckFifoParam>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2240      	movs	r2, #64	; 0x40
 80009d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009e2:	2301      	movs	r3, #1
 80009e4:	e016      	b.n	8000a14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f000 fa54 	bl	8000e9c <DMA_CalcBaseAndBitshift>
 80009f4:	4603      	mov	r3, r0
 80009f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009fc:	223f      	movs	r2, #63	; 0x3f
 80009fe:	409a      	lsls	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	f010803f 	.word	0xf010803f

08000a20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d101      	bne.n	8000a46 <HAL_DMA_Start_IT+0x26>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e040      	b.n	8000ac8 <HAL_DMA_Start_IT+0xa8>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d12f      	bne.n	8000aba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2200      	movs	r2, #0
 8000a66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f9e6 	bl	8000e40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a78:	223f      	movs	r2, #63	; 0x3f
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0216 	orr.w	r2, r2, #22
 8000a8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d007      	beq.n	8000aa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0208 	orr.w	r2, r2, #8
 8000aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f042 0201 	orr.w	r2, r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	e005      	b.n	8000ac6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d004      	beq.n	8000aee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00c      	b.n	8000b08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2205      	movs	r2, #5
 8000af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b20:	4b8e      	ldr	r3, [pc, #568]	; (8000d5c <HAL_DMA_IRQHandler+0x248>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a8e      	ldr	r2, [pc, #568]	; (8000d60 <HAL_DMA_IRQHandler+0x24c>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	0a9b      	lsrs	r3, r3, #10
 8000b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3e:	2208      	movs	r2, #8
 8000b40:	409a      	lsls	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4013      	ands	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d01a      	beq.n	8000b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d013      	beq.n	8000b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 0204 	bic.w	r2, r2, #4
 8000b66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b78:	f043 0201 	orr.w	r2, r3, #1
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b84:	2201      	movs	r2, #1
 8000b86:	409a      	lsls	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d012      	beq.n	8000bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bae:	f043 0202 	orr.w	r2, r3, #2
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	2204      	movs	r2, #4
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d012      	beq.n	8000bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00b      	beq.n	8000bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd8:	2204      	movs	r2, #4
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be4:	f043 0204 	orr.w	r2, r3, #4
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d043      	beq.n	8000c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d03c      	beq.n	8000c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c0e:	2210      	movs	r2, #16
 8000c10:	409a      	lsls	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d018      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d108      	bne.n	8000c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d024      	beq.n	8000c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	4798      	blx	r3
 8000c42:	e01f      	b.n	8000c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d01b      	beq.n	8000c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	4798      	blx	r3
 8000c54:	e016      	b.n	8000c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d107      	bne.n	8000c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0208 	bic.w	r2, r2, #8
 8000c72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c88:	2220      	movs	r2, #32
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 808f 	beq.w	8000db4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 8087 	beq.w	8000db4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000caa:	2220      	movs	r2, #32
 8000cac:	409a      	lsls	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	d136      	bne.n	8000d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0216 	bic.w	r2, r2, #22
 8000ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d103      	bne.n	8000cee <HAL_DMA_IRQHandler+0x1da>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0208 	bic.w	r2, r2, #8
 8000cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d02:	223f      	movs	r2, #63	; 0x3f
 8000d04:	409a      	lsls	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d07e      	beq.n	8000e20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	4798      	blx	r3
        }
        return;
 8000d2a:	e079      	b.n	8000e20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d01d      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10d      	bne.n	8000d64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d031      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	4798      	blx	r3
 8000d58:	e02c      	b.n	8000db4 <HAL_DMA_IRQHandler+0x2a0>
 8000d5a:	bf00      	nop
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d023      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	4798      	blx	r3
 8000d74:	e01e      	b.n	8000db4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10f      	bne.n	8000da4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0210 	bic.w	r2, r2, #16
 8000d92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d032      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d022      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2205      	movs	r2, #5
 8000dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d307      	bcc.n	8000dfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f2      	bne.n	8000de0 <HAL_DMA_IRQHandler+0x2cc>
 8000dfa:	e000      	b.n	8000dfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000dfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	4798      	blx	r3
 8000e1e:	e000      	b.n	8000e22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8000e20:	bf00      	nop
    }
  }
}
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b40      	cmp	r3, #64	; 0x40
 8000e6c:	d108      	bne.n	8000e80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e7e:	e007      	b.n	8000e90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	60da      	str	r2, [r3, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3b10      	subs	r3, #16
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <DMA_CalcBaseAndBitshift+0x64>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <DMA_CalcBaseAndBitshift+0x68>)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d909      	bls.n	8000ede <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ed2:	f023 0303 	bic.w	r3, r3, #3
 8000ed6:	1d1a      	adds	r2, r3, #4
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	659a      	str	r2, [r3, #88]	; 0x58
 8000edc:	e007      	b.n	8000eee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	aaaaaaab 	.word	0xaaaaaaab
 8000f04:	0800d820 	.word	0x0800d820

08000f08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d11f      	bne.n	8000f62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d856      	bhi.n	8000fd6 <DMA_CheckFifoParam+0xce>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <DMA_CheckFifoParam+0x28>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f53 	.word	0x08000f53
 8000f38:	08000f41 	.word	0x08000f41
 8000f3c:	08000fd7 	.word	0x08000fd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d046      	beq.n	8000fda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f50:	e043      	b.n	8000fda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f5a:	d140      	bne.n	8000fde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f60:	e03d      	b.n	8000fde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f6a:	d121      	bne.n	8000fb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d837      	bhi.n	8000fe2 <DMA_CheckFifoParam+0xda>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <DMA_CheckFifoParam+0x70>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000f8f 	.word	0x08000f8f
 8000f80:	08000f89 	.word	0x08000f89
 8000f84:	08000fa1 	.word	0x08000fa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f8c:	e030      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d025      	beq.n	8000fe6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f9e:	e022      	b.n	8000fe6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fa8:	d11f      	bne.n	8000fea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000fae:	e01c      	b.n	8000fea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d903      	bls.n	8000fbe <DMA_CheckFifoParam+0xb6>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d003      	beq.n	8000fc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000fbc:	e018      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8000fc2:	e015      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00e      	beq.n	8000fee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8000fd4:	e00b      	b.n	8000fee <DMA_CheckFifoParam+0xe6>
      break;
 8000fd6:	bf00      	nop
 8000fd8:	e00a      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fda:	bf00      	nop
 8000fdc:	e008      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fde:	bf00      	nop
 8000fe0:	e006      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fe2:	bf00      	nop
 8000fe4:	e004      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fe6:	bf00      	nop
 8000fe8:	e002      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      break;   
 8000fea:	bf00      	nop
 8000fec:	e000      	b.n	8000ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fee:	bf00      	nop
    }
  } 
  
  return status; 
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e177      	b.n	800130c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8166 	bne.w	8001306 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d005      	beq.n	8001052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	2b02      	cmp	r3, #2
 8001050:	d130      	bne.n	80010b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	f003 0201 	and.w	r2, r3, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d017      	beq.n	80010f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d123      	bne.n	8001144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0203 	and.w	r2, r3, #3
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80c0 	beq.w	8001306 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b66      	ldr	r3, [pc, #408]	; (8001324 <HAL_GPIO_Init+0x324>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a65      	ldr	r2, [pc, #404]	; (8001324 <HAL_GPIO_Init+0x324>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b63      	ldr	r3, [pc, #396]	; (8001324 <HAL_GPIO_Init+0x324>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a2:	4a61      	ldr	r2, [pc, #388]	; (8001328 <HAL_GPIO_Init+0x328>)
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a58      	ldr	r2, [pc, #352]	; (800132c <HAL_GPIO_Init+0x32c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d037      	beq.n	800123e <HAL_GPIO_Init+0x23e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a57      	ldr	r2, [pc, #348]	; (8001330 <HAL_GPIO_Init+0x330>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d031      	beq.n	800123a <HAL_GPIO_Init+0x23a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a56      	ldr	r2, [pc, #344]	; (8001334 <HAL_GPIO_Init+0x334>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d02b      	beq.n	8001236 <HAL_GPIO_Init+0x236>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a55      	ldr	r2, [pc, #340]	; (8001338 <HAL_GPIO_Init+0x338>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d025      	beq.n	8001232 <HAL_GPIO_Init+0x232>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a54      	ldr	r2, [pc, #336]	; (800133c <HAL_GPIO_Init+0x33c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01f      	beq.n	800122e <HAL_GPIO_Init+0x22e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a53      	ldr	r2, [pc, #332]	; (8001340 <HAL_GPIO_Init+0x340>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x22a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_GPIO_Init+0x344>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x226>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x348>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x222>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_GPIO_Init+0x34c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x21e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x350>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x21a>
 8001216:	2309      	movs	r3, #9
 8001218:	e012      	b.n	8001240 <HAL_GPIO_Init+0x240>
 800121a:	230a      	movs	r3, #10
 800121c:	e010      	b.n	8001240 <HAL_GPIO_Init+0x240>
 800121e:	2308      	movs	r3, #8
 8001220:	e00e      	b.n	8001240 <HAL_GPIO_Init+0x240>
 8001222:	2307      	movs	r3, #7
 8001224:	e00c      	b.n	8001240 <HAL_GPIO_Init+0x240>
 8001226:	2306      	movs	r3, #6
 8001228:	e00a      	b.n	8001240 <HAL_GPIO_Init+0x240>
 800122a:	2305      	movs	r3, #5
 800122c:	e008      	b.n	8001240 <HAL_GPIO_Init+0x240>
 800122e:	2304      	movs	r3, #4
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x240>
 8001232:	2303      	movs	r3, #3
 8001234:	e004      	b.n	8001240 <HAL_GPIO_Init+0x240>
 8001236:	2302      	movs	r3, #2
 8001238:	e002      	b.n	8001240 <HAL_GPIO_Init+0x240>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x240>
 800123e:	2300      	movs	r3, #0
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	f002 0203 	and.w	r2, r2, #3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4093      	lsls	r3, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001250:	4935      	ldr	r1, [pc, #212]	; (8001328 <HAL_GPIO_Init+0x328>)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <HAL_GPIO_Init+0x354>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001282:	4a34      	ldr	r2, [pc, #208]	; (8001354 <HAL_GPIO_Init+0x354>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <HAL_GPIO_Init+0x354>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ac:	4a29      	ldr	r2, [pc, #164]	; (8001354 <HAL_GPIO_Init+0x354>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_GPIO_Init+0x354>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_GPIO_Init+0x354>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_GPIO_Init+0x354>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_GPIO_Init+0x354>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	f67f ae84 	bls.w	800101c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40013800 	.word	0x40013800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40021400 	.word	0x40021400
 8001344:	40021800 	.word	0x40021800
 8001348:	40021c00 	.word	0x40021c00
 800134c:	40022000 	.word	0x40022000
 8001350:	40022400 	.word	0x40022400
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_RCC_GetHCLKFreq+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000010 	.word	0x20000010

08001370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001374:	f7ff fff0 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0a9b      	lsrs	r3, r3, #10
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4903      	ldr	r1, [pc, #12]	; (8001394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	0800d920 	.word	0x0800d920

08001398 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	220f      	movs	r2, #15
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_RCC_GetClockConfig+0x5c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_RCC_GetClockConfig+0x60>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 020f 	and.w	r2, r3, #15
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	601a      	str	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e022      	b.n	8001454 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d105      	bne.n	8001426 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f00a f8e1 	bl	800b5e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f814 	bl	800145c <HAL_SD_InitCard>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00a      	b.n	8001454 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08e      	sub	sp, #56	; 0x38
 8001460:	af04      	add	r7, sp, #16
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001478:	2376      	movs	r3, #118	; 0x76
 800147a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681d      	ldr	r5, [r3, #0]
 8001480:	466c      	mov	r4, sp
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800148a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001494:	4628      	mov	r0, r5
 8001496:	f002 f863 	bl	8003560 <SDIO_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80014a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e04f      	b.n	800154c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_SD_InitCard+0xf8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 f89b 	bl	80035f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <HAL_SD_InitCard+0xf8>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f7ff f8f8 	bl	80006b8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 ff6b 	bl	80023a4 <SD_PowerON>
 80014ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e02e      	b.n	800154c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fe8a 	bl	8002208 <SD_InitCard>
 80014f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e01b      	b.n	800154c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	4618      	mov	r0, r3
 800151e:	f002 f8fa 	bl	8003716 <SDMMC_CmdBlockLength>
 8001522:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00f      	beq.n	800154a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_SD_InitCard+0xfc>)
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bdb0      	pop	{r4, r5, r7, pc}
 8001554:	422580a0 	.word	0x422580a0
 8001558:	004005ff 	.word	0x004005ff

0800155c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d107      	bne.n	8001584 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0c0      	b.n	8001706 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b01      	cmp	r3, #1
 800158e:	f040 80b9 	bne.w	8001704 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	441a      	add	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d907      	bls.n	80015b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0a7      	b.n	8001706 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2203      	movs	r2, #3
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a4c      	ldr	r2, [pc, #304]	; (8001710 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a4b      	ldr	r2, [pc, #300]	; (8001714 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80015e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2200      	movs	r2, #0
 80015f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3380      	adds	r3, #128	; 0x80
 8001620:	4619      	mov	r1, r3
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	f7ff f9f9 	bl	8000a20 <HAL_DMA_Start_IT>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d017      	beq.n	8001664 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a33      	ldr	r2, [pc, #204]	; (8001718 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001650:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e050      	b.n	8001706 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	2b01      	cmp	r3, #1
 8001670:	d002      	beq.n	8001678 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	025b      	lsls	r3, r3, #9
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	025b      	lsls	r3, r3, #9
 8001682:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001684:	2390      	movs	r3, #144	; 0x90
 8001686:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f107 0210 	add.w	r2, r7, #16
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 f80d 	bl	80036be <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d90a      	bls.n	80016c0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2282      	movs	r2, #130	; 0x82
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 f871 	bl	800379e <SDMMC_CmdReadMultiBlock>
 80016bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80016be:	e009      	b.n	80016d4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2281      	movs	r2, #129	; 0x81
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 f844 	bl	800375a <SDMMC_CmdReadSingleBlock>
 80016d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	431a      	orrs	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e002      	b.n	8001706 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	e000      	b.n	8001706 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8001704:	2302      	movs	r3, #2
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3730      	adds	r7, #48	; 0x30
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08002017 	.word	0x08002017
 8001714:	08002089 	.word	0x08002089
 8001718:	004005ff 	.word	0x004005ff
 800171c:	4225858c 	.word	0x4225858c

08001720 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d107      	bne.n	8001748 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0c5      	b.n	80018d4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	f040 80be 	bne.w	80018d2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800175c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	441a      	add	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	429a      	cmp	r2, r3
 8001768:	d907      	bls.n	800177a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0ac      	b.n	80018d4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2203      	movs	r2, #3
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80017a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	4a4d      	ldr	r2, [pc, #308]	; (80018e0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80017ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	2200      	movs	r2, #0
 80017b4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d002      	beq.n	80017c4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80017be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d90a      	bls.n	80017e0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	22a0      	movs	r2, #160	; 0xa0
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 f825 	bl	8003826 <SDMMC_CmdWriteMultiBlock>
 80017dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80017de:	e009      	b.n	80017f4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2290      	movs	r2, #144	; 0x90
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fff8 	bl	80037e2 <SDMMC_CmdWriteSingleBlock>
 80017f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a39      	ldr	r2, [pc, #228]	; (80018e4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e059      	b.n	80018d4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182a:	2240      	movs	r2, #64	; 0x40
 800182c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3380      	adds	r3, #128	; 0x80
 8001856:	461a      	mov	r2, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	f7ff f8df 	bl	8000a20 <HAL_DMA_Start_IT>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01c      	beq.n	80018a2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e018      	b.n	80018d4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	025b      	lsls	r3, r3, #9
 80018ac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80018ae:	2390      	movs	r3, #144	; 0x90
 80018b0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80018ba:	2301      	movs	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f107 0210 	add.w	r2, r7, #16
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fef8 	bl	80036be <SDIO_ConfigData>

      return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
  }
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3730      	adds	r7, #48	; 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08001fed 	.word	0x08001fed
 80018e0:	08002089 	.word	0x08002089
 80018e4:	004005ff 	.word	0x004005ff
 80018e8:	4225858c 	.word	0x4225858c

080018ec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_SD_IRQHandler+0x2e>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fdfc 	bl	8002510 <SD_Read_IT>
 8001918:	e165      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 808f 	beq.w	8001a48 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001932:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001942:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001946:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d039      	beq.n	80019d6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d104      	bne.n	8001976 <HAL_SD_IRQHandler+0x8a>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d011      	beq.n	800199a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f001 ff76 	bl	800386c <SDMMC_CmdStopTransfer>
 8001980:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f92f 	bl	8001bf8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f240 523a 	movw	r2, #1338	; 0x53a
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <HAL_SD_IRQHandler+0xda>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f002 fef8 	bl	80047bc <HAL_SD_RxCpltCallback>
 80019cc:	e10b      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f002 feea 	bl	80047a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80019d4:	e107      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8102 	beq.w	8001be6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d011      	beq.n	8001a10 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 ff3b 	bl	800386c <SDMMC_CmdStopTransfer>
 80019f6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8f4 	bl	8001bf8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 80e5 	bne.w	8001be6 <HAL_SD_IRQHandler+0x2fa>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 80df 	bne.w	8001be6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0208 	bic.w	r2, r2, #8
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f002 feb1 	bl	80047a8 <HAL_SD_TxCpltCallback>
}
 8001a46:	e0ce      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <HAL_SD_IRQHandler+0x17c>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fda6 	bl	80025b2 <SD_Write_IT>
 8001a66:	e0be      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6e:	f240 233a 	movw	r3, #570	; 0x23a
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80b6 	beq.w	8001be6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	f043 0202 	orr.w	r2, r3, #2
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	f043 0208 	orr.w	r2, r3, #8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	f043 0220 	orr.w	r2, r3, #32
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	f043 0210 	orr.w	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	f043 0208 	orr.w	r2, r3, #8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f240 723a 	movw	r2, #1850	; 0x73a
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8001b14:	f023 0302 	bic.w	r3, r3, #2
 8001b18:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 fea4 	bl	800386c <SDMMC_CmdStopTransfer>
 8001b24:	4602      	mov	r2, r0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f855 	bl	8001bf8 <HAL_SD_ErrorCallback>
}
 8001b4e:	e04a      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d045      	beq.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <HAL_SD_IRQHandler+0x282>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d011      	beq.n	8001b92 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <HAL_SD_IRQHandler+0x304>)
 8001b74:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe ffa8 	bl	8000ad0 <HAL_DMA_Abort_IT>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d02f      	beq.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 face 	bl	800212c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001b90:	e029      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d104      	bne.n	8001ba6 <HAL_SD_IRQHandler+0x2ba>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d011      	beq.n	8001bca <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <HAL_SD_IRQHandler+0x308>)
 8001bac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ff8c 	bl	8000ad0 <HAL_DMA_Abort_IT>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d013      	beq.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fae9 	bl	800219a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001bc8:	e00d      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f002 fdd8 	bl	8004794 <HAL_SD_AbortCallback>
}
 8001be4:	e7ff      	b.n	8001be6 <HAL_SD_IRQHandler+0x2fa>
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	0800212d 	.word	0x0800212d
 8001bf4:	0800219b 	.word	0x0800219b

08001bf8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c1a:	0f9b      	lsrs	r3, r3, #30
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c38:	0e1b      	lsrs	r3, r3, #24
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c6c:	0d1b      	lsrs	r3, r3, #20
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c8a:	0bdb      	lsrs	r3, r3, #15
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c9c:	0b9b      	lsrs	r3, r3, #14
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cae:	0b5b      	lsrs	r3, r3, #13
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cc0:	0b1b      	lsrs	r3, r3, #12
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d163      	bne.n	8001da4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ce0:	009a      	lsls	r2, r3, #2
 8001ce2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001cec:	0f92      	lsrs	r2, r2, #30
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf8:	0edb      	lsrs	r3, r3, #27
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d0a:	0e1b      	lsrs	r3, r3, #24
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d1c:	0d5b      	lsrs	r3, r3, #21
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d40:	0bdb      	lsrs	r3, r3, #15
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	7e1b      	ldrb	r3, [r3, #24]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	3302      	adds	r3, #2
 8001d64:	2201      	movs	r2, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d6e:	fb03 f202 	mul.w	r2, r3, r2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	7a1b      	ldrb	r3, [r3, #8]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	2201      	movs	r2, #1
 8001d82:	409a      	lsls	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d90:	0a52      	lsrs	r2, r2, #9
 8001d92:	fb03 f202 	mul.w	r2, r3, r2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da0:	661a      	str	r2, [r3, #96]	; 0x60
 8001da2:	e031      	b.n	8001e08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d11d      	bne.n	8001de8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	029a      	lsls	r2, r3, #10
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ddc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	661a      	str	r2, [r3, #96]	; 0x60
 8001de6:	e00f      	b.n	8001e08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_SD_GetCardCSD+0x344>)
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e09d      	b.n	8001f44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e0c:	0b9b      	lsrs	r3, r3, #14
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1e:	09db      	lsrs	r3, r3, #7
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	0fdb      	lsrs	r3, r3, #31
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	0f5b      	lsrs	r3, r3, #29
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	0d9b      	lsrs	r3, r3, #22
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	0d5b      	lsrs	r3, r3, #21
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	0bdb      	lsrs	r3, r3, #15
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	0b9b      	lsrs	r3, r3, #14
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	0b5b      	lsrs	r3, r3, #13
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	0b1b      	lsrs	r3, r3, #12
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	0a9b      	lsrs	r3, r3, #10
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	004005ff 	.word	0x004005ff

08001f54 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fa7e 	bl	80024c0 <SD_SendStatus>
 8001fc4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	0a5b      	lsrs	r3, r3, #9
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8001fe2:	693b      	ldr	r3, [r7, #16]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	2b82      	cmp	r3, #130	; 0x82
 800202a:	d111      	bne.n	8002050 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f001 fc1b 	bl	800386c <SDMMC_CmdStopTransfer>
 8002036:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	431a      	orrs	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff fdd4 	bl	8001bf8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0208 	bic.w	r2, r2, #8
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f240 523a 	movw	r2, #1338	; 0x53a
 8002068:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f002 fb9f 	bl	80047bc <HAL_SD_RxCpltCallback>
#endif
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fec6 	bl	8000e28 <HAL_DMA_GetError>
 800209c:	4603      	mov	r3, r0
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d03e      	beq.n	8002120 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d002      	beq.n	80020be <SD_DMAError+0x36>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d12d      	bne.n	800211a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a19      	ldr	r2, [pc, #100]	; (8002128 <SD_DMAError+0xa0>)
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff62 	bl	8001fac <HAL_SD_GetCardState>
 80020e8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d002      	beq.n	80020f6 <SD_DMAError+0x6e>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d10a      	bne.n	800210c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 fbb6 	bl	800386c <SDMMC_CmdStopTransfer>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	431a      	orrs	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2200      	movs	r2, #0
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff fd6c 	bl	8001bf8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	004005ff 	.word	0x004005ff

0800212c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002142:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff ff31 	bl	8001fac <HAL_SD_GetCardState>
 800214a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b06      	cmp	r3, #6
 800215e:	d002      	beq.n	8002166 <SD_DMATxAbort+0x3a>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d10a      	bne.n	800217c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f001 fb7e 	bl	800386c <SDMMC_CmdStopTransfer>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f002 fb05 	bl	8004794 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800218a:	e002      	b.n	8002192 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff fd33 	bl	8001bf8 <HAL_SD_ErrorCallback>
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7ff fefa 	bl	8001fac <HAL_SD_GetCardState>
 80021b8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d002      	beq.n	80021d4 <SD_DMARxAbort+0x3a>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d10a      	bne.n	80021ea <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 fb47 	bl	800386c <SDMMC_CmdStopTransfer>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	431a      	orrs	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f002 face 	bl	8004794 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80021f8:	e002      	b.n	8002200 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fcfc 	bl	8001bf8 <HAL_SD_ErrorCallback>
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b094      	sub	sp, #80	; 0x50
 800220c:	af04      	add	r7, sp, #16
 800220e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002210:	2301      	movs	r3, #1
 8002212:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f001 f9f8 	bl	800360e <SDIO_GetPowerState>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002224:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002228:	e0b8      	b.n	800239c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	2b03      	cmp	r3, #3
 8002230:	d02f      	beq.n	8002292 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f001 fbdf 	bl	80039fa <SDMMC_CmdSendCID>
 800223c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800223e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SD_InitCard+0x40>
    {
      return errorstate;
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002246:	e0a9      	b.n	800239c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fa22 	bl	8003698 <SDIO_GetResponse>
 8002254:	4602      	mov	r2, r0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2104      	movs	r1, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f001 fa19 	bl	8003698 <SDIO_GetResponse>
 8002266:	4602      	mov	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2108      	movs	r1, #8
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fa10 	bl	8003698 <SDIO_GetResponse>
 8002278:	4602      	mov	r2, r0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	210c      	movs	r1, #12
 8002284:	4618      	mov	r0, r3
 8002286:	f001 fa07 	bl	8003698 <SDIO_GetResponse>
 800228a:	4602      	mov	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	2b03      	cmp	r3, #3
 8002298:	d00d      	beq.n	80022b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f107 020e 	add.w	r2, r7, #14
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 fbe5 	bl	8003a74 <SDMMC_CmdSetRelAdd>
 80022aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80022ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	e072      	b.n	800239c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d036      	beq.n	800232c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80022be:	89fb      	ldrh	r3, [r7, #14]
 80022c0:	461a      	mov	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f001 fbaf 	bl	8003a36 <SDMMC_CmdSendCSD>
 80022d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	e05b      	b.n	800239c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 f9d4 	bl	8003698 <SDIO_GetResponse>
 80022f0:	4602      	mov	r2, r0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2104      	movs	r1, #4
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 f9cb 	bl	8003698 <SDIO_GetResponse>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2108      	movs	r1, #8
 800230e:	4618      	mov	r0, r3
 8002310:	f001 f9c2 	bl	8003698 <SDIO_GetResponse>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	210c      	movs	r1, #12
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f9b9 	bl	8003698 <SDIO_GetResponse>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2104      	movs	r1, #4
 8002332:	4618      	mov	r0, r3
 8002334:	f001 f9b0 	bl	8003698 <SDIO_GetResponse>
 8002338:	4603      	mov	r3, r0
 800233a:	0d1a      	lsrs	r2, r3, #20
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fc60 	bl	8001c0c <HAL_SD_GetCardCSD>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002352:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002356:	e021      	b.n	800239c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	2200      	movs	r2, #0
 8002364:	461c      	mov	r4, r3
 8002366:	4615      	mov	r5, r2
 8002368:	4622      	mov	r2, r4
 800236a:	462b      	mov	r3, r5
 800236c:	4608      	mov	r0, r1
 800236e:	f001 fa9f 	bl	80038b0 <SDMMC_CmdSelDesel>
 8002372:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <SD_InitCard+0x176>
  {
    return errorstate;
 800237a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237c:	e00e      	b.n	800239c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681d      	ldr	r5, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	466c      	mov	r4, sp
 8002386:	f103 0210 	add.w	r2, r3, #16
 800238a:	ca07      	ldmia	r2, {r0, r1, r2}
 800238c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002390:	3304      	adds	r3, #4
 8002392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002394:	4628      	mov	r0, r5
 8002396:	f001 f8e3 	bl	8003560 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3740      	adds	r7, #64	; 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bdb0      	pop	{r4, r5, r7, pc}

080023a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 fa9a 	bl	80038f6 <SDMMC_CmdGoIdleState>
 80023c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	e072      	b.n	80024b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 faad 	bl	8003932 <SDMMC_CmdOperCond>
 80023d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 fa83 	bl	80038f6 <SDMMC_CmdGoIdleState>
 80023f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <SD_PowerON+0x5e>
    {
      return errorstate;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	e05b      	b.n	80024b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002406:	2b01      	cmp	r3, #1
 8002408:	d137      	bne.n	800247a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f001 faad 	bl	8003970 <SDMMC_CmdAppCommand>
 8002416:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d02d      	beq.n	800247a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800241e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002422:	e047      	b.n	80024b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f001 faa0 	bl	8003970 <SDMMC_CmdAppCommand>
 8002430:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <SD_PowerON+0x98>
    {
      return errorstate;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	e03b      	b.n	80024b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	491e      	ldr	r1, [pc, #120]	; (80024bc <SD_PowerON+0x118>)
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fab6 	bl	80039b4 <SDMMC_CmdAppOperCommand>
 8002448:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002450:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002454:	e02e      	b.n	80024b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f001 f91b 	bl	8003698 <SDIO_GetResponse>
 8002462:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	0fdb      	lsrs	r3, r3, #31
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <SD_PowerON+0xcc>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <SD_PowerON+0xce>
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]

    count++;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002480:	4293      	cmp	r3, r2
 8002482:	d802      	bhi.n	800248a <SD_PowerON+0xe6>
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0cc      	beq.n	8002424 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002490:	4293      	cmp	r3, r2
 8002492:	d902      	bls.n	800249a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002498:	e00c      	b.n	80024b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
 80024aa:	e002      	b.n	80024b2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	c1100000 	.word	0xc1100000

080024c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80024d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80024d4:	e018      	b.n	8002508 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f001 fae7 	bl	8003ab6 <SDMMC_CmdSendStatus>
 80024e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	e009      	b.n	8002508 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 f8cc 	bl	8003698 <SDIO_GetResponse>
 8002500:	4602      	mov	r2, r0
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03f      	beq.n	80025aa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e033      	b.n	8002598 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f83e 	bl	80035b6 <SDIO_ReadFIFO>
 800253a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3301      	adds	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	3b01      	subs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	701a      	strb	r2, [r3, #0]
      tmp++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	3b01      	subs	r3, #1
 8002564:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3b01      	subs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	0e1b      	lsrs	r3, r3, #24
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	701a      	strb	r2, [r3, #0]
      tmp++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3b01      	subs	r3, #1
 8002590:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b07      	cmp	r3, #7
 800259c:	d9c8      	bls.n	8002530 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d043      	beq.n	8002654 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e037      	b.n	8002642 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	041a      	lsls	r2, r3, #16
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4313      	orrs	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3b01      	subs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	061a      	lsls	r2, r3, #24
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3301      	adds	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3b01      	subs	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f107 0208 	add.w	r2, r7, #8
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f000 ffca 	bl	80035d0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b07      	cmp	r3, #7
 8002646:	d9c4      	bls.n	80025d2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e041      	b.n	80026f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f839 	bl	80026fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 f9d8 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d001      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e04e      	b.n	80027c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d022      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x80>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d01d      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x80>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d018      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x80>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <HAL_TIM_Base_Start_IT+0xcc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x80>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x80>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x80>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x80>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a18      	ldr	r2, [pc, #96]	; (80027ec <HAL_TIM_Base_Start_IT+0xdc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d111      	bne.n	80027b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d010      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b2:	e007      	b.n	80027c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40010400 	.word	0x40010400
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40001800 	.word	0x40001800

080027f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0202 	mvn.w	r2, #2
 800281c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8ee 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8e0 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8f1 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0204 	mvn.w	r2, #4
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8c4 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8b6 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8c7 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0208 	mvn.w	r2, #8
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2204      	movs	r2, #4
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f89a 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f88c 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f89d 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d122      	bne.n	8002948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	d11b      	bne.n	8002948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0210 	mvn.w	r2, #16
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2208      	movs	r2, #8
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f870 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f862 	bl	8002a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f873 	bl	8002a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0201 	mvn.w	r2, #1
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f009 fd00 	bl	800c374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d10e      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b80      	cmp	r3, #128	; 0x80
 800298e:	d107      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f902 	bl	8002ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d107      	bne.n	80029cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f838 	bl	8002a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d107      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0220 	mvn.w	r2, #32
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8cc 	bl	8002b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d00f      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3d      	ldr	r2, [pc, #244]	; (8002b68 <TIM_Base_SetConfig+0x118>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <TIM_Base_SetConfig+0x11c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <TIM_Base_SetConfig+0x120>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d108      	bne.n	8002aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d02b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d027      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <TIM_Base_SetConfig+0x118>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d023      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2b      	ldr	r2, [pc, #172]	; (8002b6c <TIM_Base_SetConfig+0x11c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01f      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <TIM_Base_SetConfig+0x120>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d017      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <TIM_Base_SetConfig+0x128>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <TIM_Base_SetConfig+0x12c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00f      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <TIM_Base_SetConfig+0x130>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <TIM_Base_SetConfig+0x134>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <TIM_Base_SetConfig+0x138>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d003      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <TIM_Base_SetConfig+0x13c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_Base_SetConfig+0xf8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	615a      	str	r2, [r3, #20]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40014400 	.word	0x40014400
 8002b80:	40014800 	.word	0x40014800
 8002b84:	40001800 	.word	0x40001800
 8002b88:	40001c00 	.word	0x40001c00
 8002b8c:	40002000 	.word	0x40002000

08002b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002c12:	481c      	ldr	r0, [pc, #112]	; (8002c84 <LL_ADC_CommonInit+0x80>)
 8002c14:	f7ff ffe3 	bl	8002bde <LL_ADC_IsEnabled>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	481b      	ldr	r0, [pc, #108]	; (8002c88 <LL_ADC_CommonInit+0x84>)
 8002c1c:	f7ff ffdf 	bl	8002bde <LL_ADC_IsEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	431c      	orrs	r4, r3
 8002c24:	4819      	ldr	r0, [pc, #100]	; (8002c8c <LL_ADC_CommonInit+0x88>)
 8002c26:	f7ff ffda 	bl	8002bde <LL_ADC_IsEnabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4323      	orrs	r3, r4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d120      	bne.n	8002c74 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <LL_ADC_CommonInit+0x8c>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	6811      	ldr	r1, [r2, #0]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6852      	ldr	r2, [r2, #4]
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	4311      	orrs	r1, r2
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	e00b      	b.n	8002c78 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <LL_ADC_CommonInit+0x8c>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	e001      	b.n	8002c78 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40012000 	.word	0x40012000
 8002c88:	40012100 	.word	0x40012100
 8002c8c:	40012200 	.word	0x40012200
 8002c90:	fffc10e0 	.word	0xfffc10e0

08002c94 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff9b 	bl	8002bde <LL_ADC_IsEnabled>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d117      	bne.n	8002cde <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	6811      	ldr	r1, [r2, #0]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	e001      	b.n	8002ce2 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ff6f 	bl	8002bde <LL_ADC_IsEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d12b      	bne.n	8002d5e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	e005      	b.n	8002d2e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <LL_ADC_REG_Init+0x80>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	4311      	orrs	r1, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	6912      	ldr	r2, [r2, #16]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff2e 	bl	8002bb8 <LL_ADC_REG_SetSequencerLength>
 8002d5c:	e001      	b.n	8002d62 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	c0fffcfd 	.word	0xc0fffcfd

08002d70 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2103      	movs	r1, #3
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	61bb      	str	r3, [r7, #24]
  return result;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	431a      	orrs	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b089      	sub	sp, #36	; 0x24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	613b      	str	r3, [r7, #16]
  return result;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2103      	movs	r1, #3
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	61bb      	str	r3, [r7, #24]
  return result;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002e50:	bf00      	nop
 8002e52:	3724      	adds	r7, #36	; 0x24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	613b      	str	r3, [r7, #16]
  return result;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2103      	movs	r1, #3
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	61bb      	str	r3, [r7, #24]
  return result;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	60da      	str	r2, [r3, #12]
}
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b089      	sub	sp, #36	; 0x24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	613b      	str	r3, [r7, #16]
  return result;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	210f      	movs	r1, #15
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	401a      	ands	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002f0c:	bf00      	nop
 8002f0e:	3724      	adds	r7, #36	; 0x24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	613b      	str	r3, [r7, #16]
  return result;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	210f      	movs	r1, #15
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	401a      	ands	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	61bb      	str	r3, [r7, #24]
  return result;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	613b      	str	r3, [r7, #16]
  return result;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002fa4:	e050      	b.n	8003048 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d042      	beq.n	8003042 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d003      	beq.n	8002fcc <LL_GPIO_Init+0x52>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d10d      	bne.n	8002fe8 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	69b9      	ldr	r1, [r7, #24]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff12 	bl	8002dfe <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fef3 	bl	8002dce <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	461a      	mov	r2, r3
 8002fee:	69b9      	ldr	r1, [r7, #24]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff33 	bl	8002e5c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d11a      	bne.n	8003034 <LL_GPIO_Init+0xba>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	60bb      	str	r3, [r7, #8]
  return result;
 800300a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b07      	cmp	r3, #7
 8003014:	d807      	bhi.n	8003026 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	461a      	mov	r2, r3
 800301c:	69b9      	ldr	r1, [r7, #24]
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ff4b 	bl	8002eba <LL_GPIO_SetAFPin_0_7>
 8003024:	e006      	b.n	8003034 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	461a      	mov	r2, r3
 800302c:	69b9      	ldr	r1, [r7, #24]
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff72 	bl	8002f18 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	461a      	mov	r2, r3
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fe97 	bl	8002d70 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1a7      	bne.n	8002fa6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 0201 	bic.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_I2C_ConfigFilters>:
  * @param  DigitalFilter This parameter must be a value between Min_Data=0x00 (Digital filter disabled) and Max_Data=0x0F (Digital filter enabled and filtering capability up to 15*TPCLK1)
  *               This parameter is used to configure the digital noise filter on SDA and SCL input. The digital filter will suppress the spikes with a length of up to DNF[3:0]*TPCLK1.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f023 021f 	bic.w	r2, r3, #31
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4a42      	ldr	r2, [pc, #264]	; (8003220 <LL_I2C_ConfigSpeed+0x124>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0c9b      	lsrs	r3, r3, #18
 800311c:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	493a      	ldr	r1, [pc, #232]	; (8003224 <LL_I2C_ConfigSpeed+0x128>)
 800313a:	428b      	cmp	r3, r1
 800313c:	d802      	bhi.n	8003144 <LL_I2C_ConfigSpeed+0x48>
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	3301      	adds	r3, #1
 8003142:	e009      	b.n	8003158 <LL_I2C_ConfigSpeed+0x5c>
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4936      	ldr	r1, [pc, #216]	; (8003228 <LL_I2C_ConfigSpeed+0x12c>)
 8003150:	fba1 1303 	umull	r1, r3, r1, r3
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	3301      	adds	r3, #1
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a30      	ldr	r2, [pc, #192]	; (8003224 <LL_I2C_ConfigSpeed+0x128>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d939      	bls.n	80031da <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d117      	bne.n	800319c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003194:	e01d      	b.n	80031d2 <LL_I2C_ConfigSpeed+0xd6>
 8003196:	f248 0301 	movw	r3, #32769	; 0x8001
 800319a:	e01a      	b.n	80031d2 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009a      	lsls	r2, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80031c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031cc:	e001      	b.n	80031d2 <LL_I2C_ConfigSpeed+0xd6>
 80031ce:	f248 0301 	movw	r3, #32769	; 0x8001
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e011      	b.n	80031fe <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e8:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	e000      	b.n	80031fc <LL_I2C_ConfigSpeed+0x100>
 80031fa:	2304      	movs	r3, #4
 80031fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	61da      	str	r2, [r3, #28]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	431bde83 	.word	0x431bde83
 8003224:	000186a0 	.word	0x000186a0
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 021a 	bic.w	r2, r3, #26
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	601a      	str	r2, [r3, #0]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fefc 	bl	8003080 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003288:	f107 0308 	add.w	r3, r7, #8
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f89d 	bl	80033cc <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	461a      	mov	r2, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff feff 	bl	80030a0 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80032a2:	6939      	ldr	r1, [r7, #16]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff25 	bl	80030fc <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	461a      	mov	r2, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff05 	bl	80030cc <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ffaf 	bl	800322c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fec6 	bl	8003060 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ffb9 	bl	8003252 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <LL_RCC_GetSysClkSource+0x18>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800

08003308 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <LL_RCC_GetAHBPrescaler+0x18>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <LL_RCC_GetAPB1Prescaler+0x18>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800

08003340 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <LL_RCC_PLL_GetMainSource+0x18>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800

08003378 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <LL_RCC_PLL_GetN+0x18>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40023800 	.word	0x40023800

08003394 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <LL_RCC_PLL_GetP+0x18>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800

080033b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <LL_RCC_PLL_GetDivider+0x18>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800

080033cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80033d4:	f000 f820 	bl	8003418 <RCC_GetSystemClockFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f840 	bl	8003468 <RCC_GetHCLKClockFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f84e 	bl	8003494 <RCC_GetPCLK1ClockFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f85a 	bl	80034bc <RCC_GetPCLK2ClockFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60da      	str	r2, [r3, #12]
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003422:	f7ff ff63 	bl	80032ec <LL_RCC_GetSysClkSource>
 8003426:	4603      	mov	r3, r0
 8003428:	2b08      	cmp	r3, #8
 800342a:	d00c      	beq.n	8003446 <RCC_GetSystemClockFreq+0x2e>
 800342c:	2b08      	cmp	r3, #8
 800342e:	d80f      	bhi.n	8003450 <RCC_GetSystemClockFreq+0x38>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <RCC_GetSystemClockFreq+0x22>
 8003434:	2b04      	cmp	r3, #4
 8003436:	d003      	beq.n	8003440 <RCC_GetSystemClockFreq+0x28>
 8003438:	e00a      	b.n	8003450 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <RCC_GetSystemClockFreq+0x48>)
 800343c:	607b      	str	r3, [r7, #4]
      break;
 800343e:	e00a      	b.n	8003456 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <RCC_GetSystemClockFreq+0x4c>)
 8003442:	607b      	str	r3, [r7, #4]
      break;
 8003444:	e007      	b.n	8003456 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003446:	2008      	movs	r0, #8
 8003448:	f000 f84c 	bl	80034e4 <RCC_PLL_GetFreqDomain_SYS>
 800344c:	6078      	str	r0, [r7, #4]
      break;
 800344e:	e002      	b.n	8003456 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <RCC_GetSystemClockFreq+0x48>)
 8003452:	607b      	str	r3, [r7, #4]
      break;
 8003454:	bf00      	nop
  }

  return frequency;
 8003456:	687b      	ldr	r3, [r7, #4]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	00f42400 	.word	0x00f42400
 8003464:	007a1200 	.word	0x007a1200

08003468 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003470:	f7ff ff4a 	bl	8003308 <LL_RCC_GetAHBPrescaler>
 8003474:	4603      	mov	r3, r0
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <RCC_GetHCLKClockFreq+0x28>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	461a      	mov	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	40d3      	lsrs	r3, r2
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	0800d910 	.word	0x0800d910

08003494 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800349c:	f7ff ff42 	bl	8003324 <LL_RCC_GetAPB1Prescaler>
 80034a0:	4603      	mov	r3, r0
 80034a2:	0a9b      	lsrs	r3, r3, #10
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	461a      	mov	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	40d3      	lsrs	r3, r2
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	0800d920 	.word	0x0800d920

080034bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80034c4:	f7ff ff3c 	bl	8003340 <LL_RCC_GetAPB2Prescaler>
 80034c8:	4603      	mov	r3, r0
 80034ca:	0b5b      	lsrs	r3, r3, #13
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	40d3      	lsrs	r3, r2
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	0800d920 	.word	0x0800d920

080034e4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80034f8:	f7ff ff30 	bl	800335c <LL_RCC_PLL_GetMainSource>
 80034fc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350a:	d003      	beq.n	8003514 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800350c:	e005      	b.n	800351a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003510:	617b      	str	r3, [r7, #20]
      break;
 8003512:	e005      	b.n	8003520 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003516:	617b      	str	r3, [r7, #20]
      break;
 8003518:	e002      	b.n	8003520 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800351c:	617b      	str	r3, [r7, #20]
      break;
 800351e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d113      	bne.n	800354e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003526:	f7ff ff43 	bl	80033b0 <LL_RCC_PLL_GetDivider>
 800352a:	4602      	mov	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003532:	f7ff ff21 	bl	8003378 <LL_RCC_PLL_GetN>
 8003536:	4603      	mov	r3, r0
 8003538:	fb03 f404 	mul.w	r4, r3, r4
 800353c:	f7ff ff2a 	bl	8003394 <LL_RCC_PLL_GetP>
 8003540:	4603      	mov	r3, r0
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	3301      	adds	r3, #1
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fbb4 f3f3 	udiv	r3, r4, r3
 800354c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800354e:	693b      	ldr	r3, [r7, #16]
}
 8003550:	4618      	mov	r0, r3
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	00f42400 	.word	0x00f42400
 800355c:	007a1200 	.word	0x007a1200

08003560 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003560:	b084      	sub	sp, #16
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	f107 001c 	add.w	r0, r7, #28
 800356e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003576:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003578:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800357a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800357e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003582:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003586:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800358a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800359a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	b004      	add	sp, #16
 80035b4:	4770      	bx	lr

080035b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2203      	movs	r2, #3
 80035fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0303 	and.w	r3, r3, #3
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003648:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800364e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003654:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	b2db      	uxtb	r3, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3314      	adds	r3, #20
 80036a6:	461a      	mov	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
}  
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80036e4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80036ea:	431a      	orrs	r2, r3
                       Data->DPSM);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80036f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003708:	2300      	movs	r3, #0

}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b088      	sub	sp, #32
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003724:	2310      	movs	r3, #16
 8003726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003728:	2340      	movs	r3, #64	; 0x40
 800372a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003734:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff74 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	2110      	movs	r1, #16
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f9d7 	bl	8003afc <SDMMC_GetCmdResp1>
 800374e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003750:	69fb      	ldr	r3, [r7, #28]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b088      	sub	sp, #32
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003768:	2311      	movs	r3, #17
 800376a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003778:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800377a:	f107 0308 	add.w	r3, r7, #8
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff52 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	2111      	movs	r1, #17
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f9b5 	bl	8003afc <SDMMC_GetCmdResp1>
 8003792:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003794:	69fb      	ldr	r3, [r7, #28]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b088      	sub	sp, #32
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80037ac:	2312      	movs	r3, #18
 80037ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037b0:	2340      	movs	r3, #64	; 0x40
 80037b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff30 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	2112      	movs	r1, #18
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f993 	bl	8003afc <SDMMC_GetCmdResp1>
 80037d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037d8:	69fb      	ldr	r3, [r7, #28]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80037f0:	2318      	movs	r3, #24
 80037f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037f4:	2340      	movs	r3, #64	; 0x40
 80037f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003800:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003802:	f107 0308 	add.w	r3, r7, #8
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff0e 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	2118      	movs	r1, #24
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f971 	bl	8003afc <SDMMC_GetCmdResp1>
 800381a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800381c:	69fb      	ldr	r3, [r7, #28]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b088      	sub	sp, #32
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003834:	2319      	movs	r3, #25
 8003836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003838:	2340      	movs	r3, #64	; 0x40
 800383a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003844:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff feec 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	2119      	movs	r1, #25
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f94f 	bl	8003afc <SDMMC_GetCmdResp1>
 800385e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003860:	69fb      	ldr	r3, [r7, #28]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003878:	230c      	movs	r3, #12
 800387a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800387c:	2340      	movs	r3, #64	; 0x40
 800387e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003888:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff feca 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003896:	4a05      	ldr	r2, [pc, #20]	; (80038ac <SDMMC_CmdStopTransfer+0x40>)
 8003898:	210c      	movs	r1, #12
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f92e 	bl	8003afc <SDMMC_GetCmdResp1>
 80038a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038a2:	69fb      	ldr	r3, [r7, #28]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	05f5e100 	.word	0x05f5e100

080038b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80038c0:	2307      	movs	r3, #7
 80038c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038c4:	2340      	movs	r3, #64	; 0x40
 80038c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038d2:	f107 0310 	add.w	r3, r7, #16
 80038d6:	4619      	mov	r1, r3
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fea6 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	2107      	movs	r1, #7
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f909 	bl	8003afc <SDMMC_GetCmdResp1>
 80038ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b088      	sub	sp, #32
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800390e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003912:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003914:	f107 0308 	add.w	r3, r7, #8
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fe85 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fb23 	bl	8003f6c <SDMMC_GetCmdError>
 8003926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003928:	69fb      	ldr	r3, [r7, #28]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b088      	sub	sp, #32
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800393a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800393e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003940:	2308      	movs	r3, #8
 8003942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003944:	2340      	movs	r3, #64	; 0x40
 8003946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800394c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003950:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	4619      	mov	r1, r3
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff fe66 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fab6 	bl	8003ed0 <SDMMC_GetCmdResp7>
 8003964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003966:	69fb      	ldr	r3, [r7, #28]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800397e:	2337      	movs	r3, #55	; 0x37
 8003980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003982:	2340      	movs	r3, #64	; 0x40
 8003984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800398a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003990:	f107 0308 	add.w	r3, r7, #8
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe47 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	2137      	movs	r1, #55	; 0x37
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8aa 	bl	8003afc <SDMMC_GetCmdResp1>
 80039a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039aa:	69fb      	ldr	r3, [r7, #28]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80039ca:	2329      	movs	r3, #41	; 0x29
 80039cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039ce:	2340      	movs	r3, #64	; 0x40
 80039d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fe21 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f9bd 	bl	8003d68 <SDMMC_GetCmdResp3>
 80039ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039f0:	69fb      	ldr	r3, [r7, #28]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003a06:	2302      	movs	r3, #2
 8003a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a0a:	23c0      	movs	r3, #192	; 0xc0
 8003a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fe03 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f957 	bl	8003cd8 <SDMMC_GetCmdResp2>
 8003a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b088      	sub	sp, #32
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003a44:	2309      	movs	r3, #9
 8003a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a48:	23c0      	movs	r3, #192	; 0xc0
 8003a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fde4 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f938 	bl	8003cd8 <SDMMC_GetCmdResp2>
 8003a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003a82:	2303      	movs	r3, #3
 8003a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fdc5 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f99d 	bl	8003de4 <SDMMC_GetCmdResp6>
 8003aaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aac:	69fb      	ldr	r3, [r7, #28]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b088      	sub	sp, #32
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003ac4:	230d      	movs	r3, #13
 8003ac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ac8:	2340      	movs	r3, #64	; 0x40
 8003aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ad6:	f107 0308 	add.w	r3, r7, #8
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fda4 	bl	800362a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	210d      	movs	r1, #13
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f807 	bl	8003afc <SDMMC_GetCmdResp1>
 8003aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003af0:	69fb      	ldr	r3, [r7, #28]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	460b      	mov	r3, r1
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b0a:	4b70      	ldr	r3, [pc, #448]	; (8003ccc <SDMMC_GetCmdResp1+0x1d0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a70      	ldr	r2, [pc, #448]	; (8003cd0 <SDMMC_GetCmdResp1+0x1d4>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	0a5a      	lsrs	r2, r3, #9
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	1e5a      	subs	r2, r3, #1
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b2c:	e0c9      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ef      	beq.n	8003b1e <SDMMC_GetCmdResp1+0x22>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ea      	bne.n	8003b1e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2204      	movs	r2, #4
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e0b1      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0a6      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	22c5      	movs	r2, #197	; 0xc5
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f7ff fd7f 	bl	800367e <SDIO_GetCommandResponse>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	7afb      	ldrb	r3, [r7, #11]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d001      	beq.n	8003b8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e099      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fd81 	bl	8003698 <SDIO_GetResponse>
 8003b96:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4b4e      	ldr	r3, [pc, #312]	; (8003cd4 <SDMMC_GetCmdResp1+0x1d8>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e08d      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da02      	bge.n	8003bb2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb0:	e087      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	e080      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	e079      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bdc:	e071      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bec:	e069      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bfc:	e061      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c0c:	e059      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1c:	e051      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c2c:	e049      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c3c:	e041      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4c:	e039      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c5c:	e031      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003c68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c6c:	e029      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003c78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c7c:	e021      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c8c:	e019      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003c98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c9c:	e011      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003ca8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cac:	e009      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003cb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003cbc:	e001      	b.n	8003cc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000010 	.word	0x20000010
 8003cd0:	10624dd3 	.word	0x10624dd3
 8003cd4:	fdffe008 	.word	0xfdffe008

08003cd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <SDMMC_GetCmdResp2+0x88>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <SDMMC_GetCmdResp2+0x8c>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0a5b      	lsrs	r3, r3, #9
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	60fa      	str	r2, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d04:	e026      	b.n	8003d54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ef      	beq.n	8003cf6 <SDMMC_GetCmdResp2+0x1e>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ea      	bne.n	8003cf6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d32:	2304      	movs	r3, #4
 8003d34:	e00e      	b.n	8003d54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e003      	b.n	8003d54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	22c5      	movs	r2, #197	; 0xc5
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	20000010 	.word	0x20000010
 8003d64:	10624dd3 	.word	0x10624dd3

08003d68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <SDMMC_GetCmdResp3+0x74>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <SDMMC_GetCmdResp3+0x78>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0a5b      	lsrs	r3, r3, #9
 8003d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	60fa      	str	r2, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d94:	e01b      	b.n	8003dce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ef      	beq.n	8003d86 <SDMMC_GetCmdResp3+0x1e>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ea      	bne.n	8003d86 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	e003      	b.n	8003dce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	22c5      	movs	r2, #197	; 0xc5
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000010 	.word	0x20000010
 8003de0:	10624dd3 	.word	0x10624dd3

08003de4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	460b      	mov	r3, r1
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003df2:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <SDMMC_GetCmdResp6+0xe4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <SDMMC_GetCmdResp6+0xe8>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	0a5b      	lsrs	r3, r3, #9
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	61fa      	str	r2, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e16:	e052      	b.n	8003ebe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ef      	beq.n	8003e08 <SDMMC_GetCmdResp6+0x24>
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1ea      	bne.n	8003e08 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2204      	movs	r2, #4
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e44:	2304      	movs	r3, #4
 8003e46:	e03a      	b.n	8003ebe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e02f      	b.n	8003ebe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fc0d 	bl	800367e <SDIO_GetCommandResponse>
 8003e64:	4603      	mov	r3, r0
 8003e66:	461a      	mov	r2, r3
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d001      	beq.n	8003e72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e025      	b.n	8003ebe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	22c5      	movs	r2, #197	; 0xc5
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003e78:	2100      	movs	r1, #0
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff fc0c 	bl	8003698 <SDIO_GetResponse>
 8003e80:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	0c1b      	lsrs	r3, r3, #16
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e011      	b.n	8003ebe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ea8:	e009      	b.n	8003ebe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb8:	e001      	b.n	8003ebe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000010 	.word	0x20000010
 8003ecc:	10624dd3 	.word	0x10624dd3

08003ed0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <SDMMC_GetCmdResp7+0x94>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <SDMMC_GetCmdResp7+0x98>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0a5b      	lsrs	r3, r3, #9
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	60fa      	str	r2, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003efc:	e02c      	b.n	8003f58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ef      	beq.n	8003eee <SDMMC_GetCmdResp7+0x1e>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ea      	bne.n	8003eee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2204      	movs	r2, #4
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	e014      	b.n	8003f58 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e009      	b.n	8003f58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2240      	movs	r2, #64	; 0x40
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003f56:	2300      	movs	r3, #0
  
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	20000010 	.word	0x20000010
 8003f68:	10624dd3 	.word	0x10624dd3

08003f6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <SDMMC_GetCmdError+0x50>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <SDMMC_GetCmdError+0x54>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	0a5b      	lsrs	r3, r3, #9
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	60fa      	str	r2, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f98:	e009      	b.n	8003fae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f1      	beq.n	8003f8a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	22c5      	movs	r2, #197	; 0xc5
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000010 	.word	0x20000010
 8003fc0:	10624dd3 	.word	0x10624dd3

08003fc4 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d101      	bne.n	8003fdc <LL_SPI_IsEnabled+0x18>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <LL_SPI_IsEnabled+0x1a>
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	611a      	str	r2, [r3, #16]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ffd3 	bl	8003fc4 <LL_SPI_IsEnabled>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d139      	bne.n	8004098 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	6811      	ldr	r1, [r2, #0]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	6852      	ldr	r2, [r2, #4]
 8004038:	4311      	orrs	r1, r2
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	6892      	ldr	r2, [r2, #8]
 800403e:	4311      	orrs	r1, r2
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	68d2      	ldr	r2, [r2, #12]
 8004044:	4311      	orrs	r1, r2
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	6912      	ldr	r2, [r2, #16]
 800404a:	4311      	orrs	r1, r2
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	6952      	ldr	r2, [r2, #20]
 8004050:	4311      	orrs	r1, r2
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	6992      	ldr	r2, [r2, #24]
 8004056:	4311      	orrs	r1, r2
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	69d2      	ldr	r2, [r2, #28]
 800405c:	4311      	orrs	r1, r2
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	6a12      	ldr	r2, [r2, #32]
 8004062:	430a      	orrs	r2, r1
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f023 0204 	bic.w	r2, r3, #4
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004086:	d105      	bne.n	8004094 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffab 	bl	8003fea <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	61da      	str	r2, [r3, #28]
  return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	611a      	str	r2, [r3, #16]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	615a      	str	r2, [r3, #20]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b0c0      	sub	sp, #256	; 0x100
 800412a:	af00      	add	r7, sp, #0
 800412c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004130:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004134:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004138:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004144:	f040 810c 	bne.w	8004360 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004148:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004152:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004156:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	1891      	adds	r1, r2, r2
 8004160:	6639      	str	r1, [r7, #96]	; 0x60
 8004162:	415b      	adcs	r3, r3
 8004164:	667b      	str	r3, [r7, #100]	; 0x64
 8004166:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800416a:	4621      	mov	r1, r4
 800416c:	eb12 0801 	adds.w	r8, r2, r1
 8004170:	4629      	mov	r1, r5
 8004172:	eb43 0901 	adc.w	r9, r3, r1
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800418a:	4690      	mov	r8, r2
 800418c:	4699      	mov	r9, r3
 800418e:	4623      	mov	r3, r4
 8004190:	eb18 0303 	adds.w	r3, r8, r3
 8004194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004198:	462b      	mov	r3, r5
 800419a:	eb49 0303 	adc.w	r3, r9, r3
 800419e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041a6:	2200      	movs	r2, #0
 80041a8:	469a      	mov	sl, r3
 80041aa:	4693      	mov	fp, r2
 80041ac:	eb1a 030a 	adds.w	r3, sl, sl
 80041b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041b2:	eb4b 030b 	adc.w	r3, fp, fp
 80041b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041c0:	f7fc f8b6 	bl	8000330 <__aeabi_uldivmod>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4b64      	ldr	r3, [pc, #400]	; (800435c <LL_USART_SetBaudRate+0x238>)
 80041ca:	fba3 2302 	umull	r2, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	b29c      	uxth	r4, r3
 80041d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041e0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041e4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	6539      	str	r1, [r7, #80]	; 0x50
 80041f0:	415b      	adcs	r3, r3
 80041f2:	657b      	str	r3, [r7, #84]	; 0x54
 80041f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041f8:	4641      	mov	r1, r8
 80041fa:	1851      	adds	r1, r2, r1
 80041fc:	64b9      	str	r1, [r7, #72]	; 0x48
 80041fe:	4649      	mov	r1, r9
 8004200:	414b      	adcs	r3, r1
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004210:	4659      	mov	r1, fp
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4651      	mov	r1, sl
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4642      	mov	r2, r8
 8004226:	189b      	adds	r3, r3, r2
 8004228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800422c:	464b      	mov	r3, r9
 800422e:	460a      	mov	r2, r1
 8004230:	eb42 0303 	adc.w	r3, r2, r3
 8004234:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800423c:	2200      	movs	r2, #0
 800423e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004242:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004246:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800424a:	460b      	mov	r3, r1
 800424c:	18db      	adds	r3, r3, r3
 800424e:	643b      	str	r3, [r7, #64]	; 0x40
 8004250:	4613      	mov	r3, r2
 8004252:	eb42 0303 	adc.w	r3, r2, r3
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800425c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004260:	f7fc f866 	bl	8000330 <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4611      	mov	r1, r2
 800426a:	4b3c      	ldr	r3, [pc, #240]	; (800435c <LL_USART_SetBaudRate+0x238>)
 800426c:	fba3 2301 	umull	r2, r3, r3, r1
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	2264      	movs	r2, #100	; 0x64
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	1acb      	subs	r3, r1, r3
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <LL_USART_SetBaudRate+0x238>)
 8004282:	fba3 2302 	umull	r2, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	b29b      	uxth	r3, r3
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004292:	b29b      	uxth	r3, r3
 8004294:	4423      	add	r3, r4
 8004296:	b29c      	uxth	r4, r3
 8004298:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800429c:	2200      	movs	r2, #0
 800429e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042a2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042a6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80042aa:	4642      	mov	r2, r8
 80042ac:	464b      	mov	r3, r9
 80042ae:	1891      	adds	r1, r2, r2
 80042b0:	63b9      	str	r1, [r7, #56]	; 0x38
 80042b2:	415b      	adcs	r3, r3
 80042b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042ba:	4641      	mov	r1, r8
 80042bc:	1851      	adds	r1, r2, r1
 80042be:	6339      	str	r1, [r7, #48]	; 0x30
 80042c0:	4649      	mov	r1, r9
 80042c2:	414b      	adcs	r3, r1
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042d2:	4659      	mov	r1, fp
 80042d4:	00cb      	lsls	r3, r1, #3
 80042d6:	4651      	mov	r1, sl
 80042d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042dc:	4651      	mov	r1, sl
 80042de:	00ca      	lsls	r2, r1, #3
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	4603      	mov	r3, r0
 80042e6:	4642      	mov	r2, r8
 80042e8:	189b      	adds	r3, r3, r2
 80042ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ee:	464b      	mov	r3, r9
 80042f0:	460a      	mov	r2, r1
 80042f2:	eb42 0303 	adc.w	r3, r2, r3
 80042f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80042fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004304:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004308:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800430c:	460b      	mov	r3, r1
 800430e:	18db      	adds	r3, r3, r3
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
 8004312:	4613      	mov	r3, r2
 8004314:	eb42 0303 	adc.w	r3, r2, r3
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800431e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004322:	f7fc f805 	bl	8000330 <__aeabi_uldivmod>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <LL_USART_SetBaudRate+0x238>)
 800432c:	fba3 1302 	umull	r1, r3, r3, r2
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	2164      	movs	r1, #100	; 0x64
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	3332      	adds	r3, #50	; 0x32
 800433e:	4a07      	ldr	r2, [pc, #28]	; (800435c <LL_USART_SetBaudRate+0x238>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	b29b      	uxth	r3, r3
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	b29b      	uxth	r3, r3
 800434e:	4423      	add	r3, r4
 8004350:	b29b      	uxth	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004358:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 800435a:	e107      	b.n	800456c <LL_USART_SetBaudRate+0x448>
 800435c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004360:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004364:	2200      	movs	r2, #0
 8004366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800436a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800436e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004372:	4642      	mov	r2, r8
 8004374:	464b      	mov	r3, r9
 8004376:	1891      	adds	r1, r2, r2
 8004378:	6239      	str	r1, [r7, #32]
 800437a:	415b      	adcs	r3, r3
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004382:	4641      	mov	r1, r8
 8004384:	1854      	adds	r4, r2, r1
 8004386:	4649      	mov	r1, r9
 8004388:	eb43 0501 	adc.w	r5, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	00eb      	lsls	r3, r5, #3
 8004396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800439a:	00e2      	lsls	r2, r4, #3
 800439c:	4614      	mov	r4, r2
 800439e:	461d      	mov	r5, r3
 80043a0:	4643      	mov	r3, r8
 80043a2:	18e3      	adds	r3, r4, r3
 80043a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043a8:	464b      	mov	r3, r9
 80043aa:	eb45 0303 	adc.w	r3, r5, r3
 80043ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80043b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80043cc:	4629      	mov	r1, r5
 80043ce:	008b      	lsls	r3, r1, #2
 80043d0:	4621      	mov	r1, r4
 80043d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d6:	4621      	mov	r1, r4
 80043d8:	008a      	lsls	r2, r1, #2
 80043da:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80043de:	f7fb ffa7 	bl	8000330 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4b64      	ldr	r3, [pc, #400]	; (8004578 <LL_USART_SetBaudRate+0x454>)
 80043e8:	fba3 2302 	umull	r2, r3, r3, r2
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	b29c      	uxth	r4, r3
 80043f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004402:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004406:	4642      	mov	r2, r8
 8004408:	464b      	mov	r3, r9
 800440a:	1891      	adds	r1, r2, r2
 800440c:	61b9      	str	r1, [r7, #24]
 800440e:	415b      	adcs	r3, r3
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004416:	4641      	mov	r1, r8
 8004418:	1851      	adds	r1, r2, r1
 800441a:	6139      	str	r1, [r7, #16]
 800441c:	4649      	mov	r1, r9
 800441e:	414b      	adcs	r3, r1
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800442e:	4659      	mov	r1, fp
 8004430:	00cb      	lsls	r3, r1, #3
 8004432:	4651      	mov	r1, sl
 8004434:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004438:	4651      	mov	r1, sl
 800443a:	00ca      	lsls	r2, r1, #3
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	4603      	mov	r3, r0
 8004442:	4642      	mov	r2, r8
 8004444:	189b      	adds	r3, r3, r2
 8004446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800444a:	464b      	mov	r3, r9
 800444c:	460a      	mov	r2, r1
 800444e:	eb42 0303 	adc.w	r3, r2, r3
 8004452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800445a:	2200      	movs	r2, #0
 800445c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004460:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004470:	4649      	mov	r1, r9
 8004472:	008b      	lsls	r3, r1, #2
 8004474:	4641      	mov	r1, r8
 8004476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447a:	4641      	mov	r1, r8
 800447c:	008a      	lsls	r2, r1, #2
 800447e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004482:	f7fb ff55 	bl	8000330 <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <LL_USART_SetBaudRate+0x454>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a36      	ldr	r2, [pc, #216]	; (8004578 <LL_USART_SetBaudRate+0x454>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	4423      	add	r3, r4
 80044b0:	b29c      	uxth	r4, r3
 80044b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044b6:	2200      	movs	r2, #0
 80044b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	673b      	str	r3, [r7, #112]	; 0x70
 8004502:	464b      	mov	r3, r9
 8004504:	460a      	mov	r2, r1
 8004506:	eb42 0303 	adc.w	r3, r2, r3
 800450a:	677b      	str	r3, [r7, #116]	; 0x74
 800450c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004510:	2200      	movs	r2, #0
 8004512:	66bb      	str	r3, [r7, #104]	; 0x68
 8004514:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004522:	4649      	mov	r1, r9
 8004524:	008b      	lsls	r3, r1, #2
 8004526:	4641      	mov	r1, r8
 8004528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452c:	4641      	mov	r1, r8
 800452e:	008a      	lsls	r2, r1, #2
 8004530:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004534:	f7fb fefc 	bl	8000330 <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <LL_USART_SetBaudRate+0x454>)
 800453e:	fba3 1302 	umull	r1, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2164      	movs	r1, #100	; 0x64
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	3332      	adds	r3, #50	; 0x32
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <LL_USART_SetBaudRate+0x454>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	b29b      	uxth	r3, r3
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	b29b      	uxth	r3, r3
 8004560:	4423      	add	r3, r4
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456a:	609a      	str	r2, [r3, #8]
}
 800456c:	bf00      	nop
 800456e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004572:	46bd      	mov	sp, r7
 8004574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004578:	51eb851f 	.word	0x51eb851f

0800457c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fd8d 	bl	80040ae <LL_USART_IsEnabled>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d16c      	bne.n	8004674 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80045a2:	f023 030c 	bic.w	r3, r3, #12
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	6851      	ldr	r1, [r2, #4]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	4311      	orrs	r1, r2
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	6912      	ldr	r2, [r2, #16]
 80045b4:	4311      	orrs	r1, r2
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	6992      	ldr	r2, [r2, #24]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fd84 	bl	80040d6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fd91 	bl	80040fc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fef4 	bl	80033cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <LL_USART_Init+0x104>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d102      	bne.n	80045f2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e02f      	b.n	8004652 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a23      	ldr	r2, [pc, #140]	; (8004684 <LL_USART_Init+0x108>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d102      	bne.n	8004600 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e028      	b.n	8004652 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a21      	ldr	r2, [pc, #132]	; (8004688 <LL_USART_Init+0x10c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d102      	bne.n	800460e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	e021      	b.n	8004652 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1e      	ldr	r2, [pc, #120]	; (800468c <LL_USART_Init+0x110>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d102      	bne.n	800461c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e01a      	b.n	8004652 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <LL_USART_Init+0x114>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d102      	bne.n	800462a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	e013      	b.n	8004652 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <LL_USART_Init+0x118>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d102      	bne.n	8004638 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e00c      	b.n	8004652 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <LL_USART_Init+0x11c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d102      	bne.n	8004646 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	e005      	b.n	8004652 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <LL_USART_Init+0x120>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d101      	bne.n	8004652 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8004660:	2300      	movs	r3, #0
 8004662:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fd58 	bl	8004124 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004674:	7ffb      	ldrb	r3, [r7, #31]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40011000 	.word	0x40011000
 8004684:	40004400 	.word	0x40004400
 8004688:	40004800 	.word	0x40004800
 800468c:	40011400 	.word	0x40011400
 8004690:	40004c00 	.word	0x40004c00
 8004694:	40005000 	.word	0x40005000
 8004698:	40007800 	.word	0x40007800
 800469c:	40007c00 	.word	0x40007c00

080046a0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <LL_SetSystemCoreClock+0x1c>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6013      	str	r3, [r2, #0]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000010 	.word	0x20000010

080046c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80046ca:	f000 f888 	bl	80047de <BSP_SD_IsDetected>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e005      	b.n	80046e4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80046d8:	4804      	ldr	r0, [pc, #16]	; (80046ec <BSP_SD_Init+0x2c>)
 80046da:	f7fc fe8f 	bl	80013fc <HAL_SD_Init>
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80046e2:	79fb      	ldrb	r3, [r7, #7]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	200054a4 	.word	0x200054a4

080046f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	4806      	ldr	r0, [pc, #24]	; (8004720 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004708:	f7fc ff28 	bl	800155c <HAL_SD_ReadBlocks_DMA>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200054a4 	.word	0x200054a4

08004724 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	4806      	ldr	r0, [pc, #24]	; (8004754 <BSP_SD_WriteBlocks_DMA+0x30>)
 800473c:	f7fc fff0 	bl	8001720 <HAL_SD_WriteBlocks_DMA>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800474a:	7dfb      	ldrb	r3, [r7, #23]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	200054a4 	.word	0x200054a4

08004758 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800475c:	4805      	ldr	r0, [pc, #20]	; (8004774 <BSP_SD_GetCardState+0x1c>)
 800475e:	f7fd fc25 	bl	8001fac <HAL_SD_GetCardState>
 8004762:	4603      	mov	r3, r0
 8004764:	2b04      	cmp	r3, #4
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
}
 800476e:	4618      	mov	r0, r3
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200054a4 	.word	0x200054a4

08004778 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4803      	ldr	r0, [pc, #12]	; (8004790 <BSP_SD_GetCardInfo+0x18>)
 8004784:	f7fd fbe6 	bl	8001f54 <HAL_SD_GetCardInfo>
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	200054a4 	.word	0x200054a4

08004794 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800479c:	f000 f818 	bl	80047d0 <BSP_SD_AbortCallback>
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80047b0:	f000 f9f8 	bl	8004ba4 <BSP_SD_WriteCpltCallback>
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80047c4:	f000 f9fa 	bl	8004bbc <BSP_SD_ReadCpltCallback>
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0

}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80047e4:	2301      	movs	r3, #1
 80047e6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	b2db      	uxtb	r3, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80047fc:	4904      	ldr	r1, [pc, #16]	; (8004810 <MX_FATFS_Init+0x18>)
 80047fe:	4805      	ldr	r0, [pc, #20]	; (8004814 <MX_FATFS_Init+0x1c>)
 8004800:	f000 f858 	bl	80048b4 <FATFS_LinkDriver>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <MX_FATFS_Init+0x20>)
 800480a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}
 8004810:	2000009c 	.word	0x2000009c
 8004814:	0800d828 	.word	0x0800d828
 8004818:	20000098 	.word	0x20000098

0800481c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004832:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 8004834:	7a5b      	ldrb	r3, [r3, #9]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d131      	bne.n	80048a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800483c:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 800483e:	7a5b      	ldrb	r3, [r3, #9]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 800484c:	7a5b      	ldrb	r3, [r3, #9]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 800485c:	7a5b      	ldrb	r3, [r3, #9]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 8004864:	4413      	add	r3, r2
 8004866:	79fa      	ldrb	r2, [r7, #7]
 8004868:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 800486c:	7a5b      	ldrb	r3, [r3, #9]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	b2d1      	uxtb	r1, r2
 8004874:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <FATFS_LinkDriverEx+0x94>)
 8004876:	7251      	strb	r1, [r2, #9]
 8004878:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800487a:	7dbb      	ldrb	r3, [r7, #22]
 800487c:	3330      	adds	r3, #48	; 0x30
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	3301      	adds	r3, #1
 8004888:	223a      	movs	r2, #58	; 0x3a
 800488a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	3302      	adds	r3, #2
 8004890:	222f      	movs	r2, #47	; 0x2f
 8004892:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3303      	adds	r3, #3
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	200000a0 	.word	0x200000a0

080048b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ffaa 	bl	800481c <FATFS_LinkDriverEx>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80048da:	f7fb fee1 	bl	80006a0 <HAL_GetTick>
 80048de:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80048e0:	e006      	b.n	80048f0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80048e2:	f7ff ff39 	bl	8004758 <BSP_SD_GetCardState>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e009      	b.n	8004904 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80048f0:	f7fb fed6 	bl	80006a0 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d8f0      	bhi.n	80048e2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <SD_CheckStatus+0x38>)
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800491c:	f7ff ff1c 	bl	8004758 <BSP_SD_GetCardState>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <SD_CheckStatus+0x38>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <SD_CheckStatus+0x38>)
 8004934:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004936:	4b03      	ldr	r3, [pc, #12]	; (8004944 <SD_CheckStatus+0x38>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b2db      	uxtb	r3, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000005 	.word	0x20000005

08004948 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004952:	f7ff feb5 	bl	80046c0 <BSP_SD_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ffd4 	bl	800490c <SD_CheckStatus>
 8004964:	4603      	mov	r3, r0
 8004966:	461a      	mov	r2, r3
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <SD_initialize+0x34>)
 800496a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <SD_initialize+0x34>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000005 	.word	0x20000005

08004980 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ffbd 	bl	800490c <SD_CheckStatus>
 8004992:	4603      	mov	r3, r0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80049b0:	f247 5030 	movw	r0, #30000	; 0x7530
 80049b4:	f7ff ff8d 	bl	80048d2 <SD_CheckStatusWithTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da01      	bge.n	80049c2 <SD_read+0x26>
  {
    return res;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	e03b      	b.n	8004a3a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	68b8      	ldr	r0, [r7, #8]
 80049c8:	f7ff fe92 	bl	80046f0 <BSP_SD_ReadBlocks_DMA>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d132      	bne.n	8004a38 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <SD_read+0xa8>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80049d8:	f7fb fe62 	bl	80006a0 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80049de:	bf00      	nop
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <SD_read+0xa8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d108      	bne.n	80049fa <SD_read+0x5e>
 80049e8:	f7fb fe5a 	bl	80006a0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d9f2      	bls.n	80049e0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <SD_read+0xa8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
 8004a06:	e017      	b.n	8004a38 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <SD_read+0xa8>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004a0e:	f7fb fe47 	bl	80006a0 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a14:	e007      	b.n	8004a26 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004a16:	f7ff fe9f 	bl	8004758 <BSP_SD_GetCardState>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <SD_read+0x8a>
          {
            res = RES_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004a24:	e008      	b.n	8004a38 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a26:	f7fb fe3b 	bl	80006a0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d9ee      	bls.n	8004a16 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200000b0 	.word	0x200000b0

08004a48 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <SD_write+0xa8>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004a62:	f247 5030 	movw	r0, #30000	; 0x7530
 8004a66:	f7ff ff34 	bl	80048d2 <SD_CheckStatusWithTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	da01      	bge.n	8004a74 <SD_write+0x2c>
  {
    return res;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	e038      	b.n	8004ae6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	68b8      	ldr	r0, [r7, #8]
 8004a7a:	f7ff fe53 	bl	8004724 <BSP_SD_WriteBlocks_DMA>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d12f      	bne.n	8004ae4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004a84:	f7fb fe0c 	bl	80006a0 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004a8a:	bf00      	nop
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <SD_write+0xa8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <SD_write+0x5e>
 8004a94:	f7fb fe04 	bl	80006a0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d9f2      	bls.n	8004a8c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <SD_write+0xa8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
 8004ab2:	e017      	b.n	8004ae4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <SD_write+0xa8>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004aba:	f7fb fdf1 	bl	80006a0 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ac0:	e007      	b.n	8004ad2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004ac2:	f7ff fe49 	bl	8004758 <BSP_SD_GetCardState>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <SD_write+0x8a>
          {
            res = RES_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	75fb      	strb	r3, [r7, #23]
            break;
 8004ad0:	e008      	b.n	8004ae4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ad2:	f7fb fde5 	bl	80006a0 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f247 522f 	movw	r2, #29999	; 0x752f
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d9ee      	bls.n	8004ac2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200000ac 	.word	0x200000ac

08004af4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	; 0x30
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	603a      	str	r2, [r7, #0]
 8004afe:	71fb      	strb	r3, [r7, #7]
 8004b00:	460b      	mov	r3, r1
 8004b02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b0a:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <SD_ioctl+0xac>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <SD_ioctl+0x28>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e03c      	b.n	8004b96 <SD_ioctl+0xa2>

  switch (cmd)
 8004b1c:	79bb      	ldrb	r3, [r7, #6]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d834      	bhi.n	8004b8c <SD_ioctl+0x98>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <SD_ioctl+0x34>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b41 	.word	0x08004b41
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b73 	.word	0x08004b73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b3e:	e028      	b.n	8004b92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fe17 	bl	8004778 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b56:	e01c      	b.n	8004b92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004b58:	f107 030c 	add.w	r3, r7, #12
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fe0b 	bl	8004778 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b70:	e00f      	b.n	8004b92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004b72:	f107 030c 	add.w	r3, r7, #12
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fdfe 	bl	8004778 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	0a5a      	lsrs	r2, r3, #9
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004b8a:	e002      	b.n	8004b92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3730      	adds	r7, #48	; 0x30
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000005 	.word	0x20000005

08004ba4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <BSP_SD_WriteCpltCallback+0x14>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	200000ac 	.word	0x200000ac

08004bbc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <BSP_SD_ReadCpltCallback+0x14>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	200000b0 	.word	0x200000b0

08004bd4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004be0:	f001 ff1e 	bl	8006a20 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004be4:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <pvPortMalloc+0x1b0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004bec:	f000 f938 	bl	8004e60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bf0:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <pvPortMalloc+0x1b4>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 80a7 	bne.w	8004d4c <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02d      	beq.n	8004c60 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004c04:	2208      	movs	r2, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d227      	bcs.n	8004c60 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004c10:	2208      	movs	r2, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d021      	beq.n	8004c66 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f023 0307 	bic.w	r3, r3, #7
 8004c28:	3308      	adds	r3, #8
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d214      	bcs.n	8004c5a <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f023 0307 	bic.w	r3, r3, #7
 8004c36:	3308      	adds	r3, #8
 8004c38:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d010      	beq.n	8004c66 <pvPortMalloc+0x92>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c5e:	e002      	b.n	8004c66 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	e000      	b.n	8004c68 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c66:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d06e      	beq.n	8004d4c <pvPortMalloc+0x178>
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <pvPortMalloc+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d869      	bhi.n	8004d4c <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004c78:	4b45      	ldr	r3, [pc, #276]	; (8004d90 <pvPortMalloc+0x1bc>)
 8004c7a:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004c7c:	4b44      	ldr	r3, [pc, #272]	; (8004d90 <pvPortMalloc+0x1bc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c82:	e004      	b.n	8004c8e <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d903      	bls.n	8004ca0 <pvPortMalloc+0xcc>
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f1      	bne.n	8004c84 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ca0:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <pvPortMalloc+0x1b0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d050      	beq.n	8004d4c <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2208      	movs	r2, #8
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d91f      	bls.n	8004d0c <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <pvPortMalloc+0x120>
        __asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	613b      	str	r3, [r7, #16]
    }
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d06:	69b8      	ldr	r0, [r7, #24]
 8004d08:	f000 f90c 	bl	8004f24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <pvPortMalloc+0x1b8>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <pvPortMalloc+0x1b8>)
 8004d18:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <pvPortMalloc+0x1b8>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <pvPortMalloc+0x1c0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d203      	bcs.n	8004d2e <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d26:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <pvPortMalloc+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <pvPortMalloc+0x1c0>)
 8004d2c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <pvPortMalloc+0x1b4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <pvPortMalloc+0x1c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3301      	adds	r3, #1
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <pvPortMalloc+0x1c4>)
 8004d4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004d4c:	f001 fe76 	bl	8006a3c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <pvPortMalloc+0x186>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8004d56:	f005 ff3d 	bl	800abd4 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <pvPortMalloc+0x1a6>
        __asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	60fb      	str	r3, [r7, #12]
    }
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <pvPortMalloc+0x1a4>
    return pvReturn;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3728      	adds	r7, #40	; 0x28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200028bc 	.word	0x200028bc
 8004d88:	200028d0 	.word	0x200028d0
 8004d8c:	200028c0 	.word	0x200028c0
 8004d90:	200028b4 	.word	0x200028b4
 8004d94:	200028c4 	.word	0x200028c4
 8004d98:	200028c8 	.word	0x200028c8

08004d9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d04d      	beq.n	8004e4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004dae:	2308      	movs	r3, #8
 8004db0:	425b      	negs	r3, r3
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <vPortFree+0xb8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <vPortFree+0x44>
        __asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	60fb      	str	r3, [r7, #12]
    }
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <vPortFree+0x62>
        __asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60bb      	str	r3, [r7, #8]
    }
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <vPortFree+0xb8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01e      	beq.n	8004e4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11a      	bne.n	8004e4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <vPortFree+0xb8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	401a      	ands	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004e24:	f001 fdfc 	bl	8006a20 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <vPortFree+0xbc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <vPortFree+0xbc>)
 8004e34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e36:	6938      	ldr	r0, [r7, #16]
 8004e38:	f000 f874 	bl	8004f24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004e3c:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <vPortFree+0xc0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <vPortFree+0xc0>)
 8004e44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004e46:	f001 fdf9 	bl	8006a3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200028d0 	.word	0x200028d0
 8004e58:	200028c0 	.word	0x200028c0
 8004e5c:	200028cc 	.word	0x200028cc

08004e60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <prvHeapInit+0xac>)
 8004e6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3307      	adds	r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <prvHeapInit+0xac>)
 8004e90:	4413      	add	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <prvHeapInit+0xb0>)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <prvHeapInit+0xb0>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004eac:	2208      	movs	r2, #8
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <prvHeapInit+0xb4>)
 8004ec0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <prvHeapInit+0xb4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <prvHeapInit+0xb4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <prvHeapInit+0xb4>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <prvHeapInit+0xb8>)
 8004eee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <prvHeapInit+0xbc>)
 8004ef6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <prvHeapInit+0xc0>)
 8004efa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004efe:	601a      	str	r2, [r3, #0]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	200000b4 	.word	0x200000b4
 8004f10:	200028b4 	.word	0x200028b4
 8004f14:	200028bc 	.word	0x200028bc
 8004f18:	200028c4 	.word	0x200028c4
 8004f1c:	200028c0 	.word	0x200028c0
 8004f20:	200028d0 	.word	0x200028d0

08004f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f2c:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <prvInsertBlockIntoFreeList+0xac>)
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e002      	b.n	8004f38 <prvInsertBlockIntoFreeList+0x14>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d8f7      	bhi.n	8004f32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d108      	bne.n	8004f66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	441a      	add	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d118      	bne.n	8004fac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d00d      	beq.n	8004fa2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	441a      	add	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e008      	b.n	8004fb4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e003      	b.n	8004fb4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d002      	beq.n	8004fc2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	200028b4 	.word	0x200028b4
 8004fd4:	200028bc 	.word	0x200028bc

08004fd8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f103 0208 	add.w	r2, r3, #8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ff0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f103 0208 	add.w	r2, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f103 0208 	add.w	r2, r3, #8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005090:	d103      	bne.n	800509a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e00c      	b.n	80050b4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3308      	adds	r3, #8
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e002      	b.n	80050a8 <vListInsert+0x2e>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d2f6      	bcs.n	80050a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6892      	ldr	r2, [r2, #8]
 8005102:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6852      	ldr	r2, [r2, #4]
 800510c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d103      	bne.n	8005120 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b04      	subs	r3, #4
 8005150:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005158:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b04      	subs	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3b04      	subs	r3, #4
 800516e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005170:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <pxPortInitialiseStack+0x64>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3b14      	subs	r3, #20
 800517a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b04      	subs	r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f06f 0202 	mvn.w	r2, #2
 800518e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3b20      	subs	r3, #32
 8005194:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	080051a9 	.word	0x080051a9

080051a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <prvTaskExitError+0x54>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ba:	d00a      	beq.n	80051d2 <prvTaskExitError+0x2a>
        __asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60fb      	str	r3, [r7, #12]
    }
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <prvTaskExitError+0x28>
        __asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	60bb      	str	r3, [r7, #8]
    }
 80051e4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80051e6:	bf00      	nop
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0fc      	beq.n	80051e8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000008 	.word	0x20000008

08005200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <pxCurrentTCBConst2>)
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	6808      	ldr	r0, [r1, #0]
 8005206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	f380 8809 	msr	PSP, r0
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	4770      	bx	lr
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst2>:
 8005220:	2000291c 	.word	0x2000291c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005228:	4808      	ldr	r0, [pc, #32]	; (800524c <prvPortStartFirstTask+0x24>)
 800522a:	6800      	ldr	r0, [r0, #0]
 800522c:	6800      	ldr	r0, [r0, #0]
 800522e:	f380 8808 	msr	MSP, r0
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8814 	msr	CONTROL, r0
 800523a:	b662      	cpsie	i
 800523c:	b661      	cpsie	f
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	df00      	svc	0
 8005248:	bf00      	nop
 800524a:	0000      	.short	0x0000
 800524c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop

08005254 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800525a:	4b46      	ldr	r3, [pc, #280]	; (8005374 <xPortStartScheduler+0x120>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a46      	ldr	r2, [pc, #280]	; (8005378 <xPortStartScheduler+0x124>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10a      	bne.n	800527a <xPortStartScheduler+0x26>
        __asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	613b      	str	r3, [r7, #16]
    }
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800527a:	4b3e      	ldr	r3, [pc, #248]	; (8005374 <xPortStartScheduler+0x120>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3f      	ldr	r2, [pc, #252]	; (800537c <xPortStartScheduler+0x128>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d10a      	bne.n	800529a <xPortStartScheduler+0x46>
        __asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60fb      	str	r3, [r7, #12]
    }
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <xPortStartScheduler+0x12c>)
 800529c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	22ff      	movs	r2, #255	; 0xff
 80052aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	4b31      	ldr	r3, [pc, #196]	; (8005384 <xPortStartScheduler+0x130>)
 80052c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052c2:	4b31      	ldr	r3, [pc, #196]	; (8005388 <xPortStartScheduler+0x134>)
 80052c4:	2207      	movs	r2, #7
 80052c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052c8:	e009      	b.n	80052de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80052ca:	4b2f      	ldr	r3, [pc, #188]	; (8005388 <xPortStartScheduler+0x134>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	4a2d      	ldr	r2, [pc, #180]	; (8005388 <xPortStartScheduler+0x134>)
 80052d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e6:	2b80      	cmp	r3, #128	; 0x80
 80052e8:	d0ef      	beq.n	80052ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ea:	4b27      	ldr	r3, [pc, #156]	; (8005388 <xPortStartScheduler+0x134>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f1c3 0307 	rsb	r3, r3, #7
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d00a      	beq.n	800530c <xPortStartScheduler+0xb8>
        __asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60bb      	str	r3, [r7, #8]
    }
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <xPortStartScheduler+0x134>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <xPortStartScheduler+0x134>)
 8005314:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005316:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <xPortStartScheduler+0x134>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <xPortStartScheduler+0x134>)
 8005320:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800532a:	4b18      	ldr	r3, [pc, #96]	; (800538c <xPortStartScheduler+0x138>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a17      	ldr	r2, [pc, #92]	; (800538c <xPortStartScheduler+0x138>)
 8005330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005334:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005336:	4b15      	ldr	r3, [pc, #84]	; (800538c <xPortStartScheduler+0x138>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a14      	ldr	r2, [pc, #80]	; (800538c <xPortStartScheduler+0x138>)
 800533c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005340:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005342:	f000 f8e3 	bl	800550c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005346:	4b12      	ldr	r3, [pc, #72]	; (8005390 <xPortStartScheduler+0x13c>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800534c:	f000 f902 	bl	8005554 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005350:	4b10      	ldr	r3, [pc, #64]	; (8005394 <xPortStartScheduler+0x140>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0f      	ldr	r2, [pc, #60]	; (8005394 <xPortStartScheduler+0x140>)
 8005356:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800535a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800535c:	f7ff ff64 	bl	8005228 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005360:	f001 fcee 	bl	8006d40 <vTaskSwitchContext>
    prvTaskExitError();
 8005364:	f7ff ff20 	bl	80051a8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	e000ed00 	.word	0xe000ed00
 8005378:	410fc271 	.word	0x410fc271
 800537c:	410fc270 	.word	0x410fc270
 8005380:	e000e400 	.word	0xe000e400
 8005384:	200028d4 	.word	0x200028d4
 8005388:	200028d8 	.word	0x200028d8
 800538c:	e000ed20 	.word	0xe000ed20
 8005390:	20000008 	.word	0x20000008
 8005394:	e000ef34 	.word	0xe000ef34

08005398 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
        __asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
    }
 80053b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <vPortEnterCritical+0x58>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	4a0d      	ldr	r2, [pc, #52]	; (80053f0 <vPortEnterCritical+0x58>)
 80053ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <vPortEnterCritical+0x58>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d10f      	bne.n	80053e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <vPortEnterCritical+0x5c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	603b      	str	r3, [r7, #0]
    }
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vPortEnterCritical+0x4a>
    }
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	20000008 	.word	0x20000008
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <vPortExitCritical+0x50>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <vPortExitCritical+0x24>
        __asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	607b      	str	r3, [r7, #4]
    }
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <vPortExitCritical+0x50>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <vPortExitCritical+0x50>)
 8005424:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <vPortExitCritical+0x50>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <vPortExitCritical+0x42>
 800542e:	2300      	movs	r3, #0
 8005430:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005438:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000008 	.word	0x20000008
 800544c:	00000000 	.word	0x00000000

08005450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005450:	f3ef 8009 	mrs	r0, PSP
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <pxCurrentTCBConst>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	f01e 0f10 	tst.w	lr, #16
 8005460:	bf08      	it	eq
 8005462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	6010      	str	r0, [r2, #0]
 800546c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005474:	f380 8811 	msr	BASEPRI, r0
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f001 fc5e 	bl	8006d40 <vTaskSwitchContext>
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f380 8811 	msr	BASEPRI, r0
 800548c:	bc09      	pop	{r0, r3}
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	6808      	ldr	r0, [r1, #0]
 8005492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005496:	f01e 0f10 	tst.w	lr, #16
 800549a:	bf08      	it	eq
 800549c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054a0:	f380 8809 	msr	PSP, r0
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	f3af 8000 	nop.w

080054b0 <pxCurrentTCBConst>:
 80054b0:	2000291c 	.word	0x2000291c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop

080054b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
        __asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	607b      	str	r3, [r7, #4]
    }
 80054d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80054d2:	f003 fd11 	bl	8008ef8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80054d6:	f001 fb75 	bl	8006bc4 <xTaskIncrementTick>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d006      	beq.n	80054ee <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80054e0:	f003 fd68 	bl	8008fb4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <SysTick_Handler+0x50>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e001      	b.n	80054f2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80054ee:	f003 fd45 	bl	8008f7c <SEGGER_SYSVIEW_RecordExitISR>
 80054f2:	2300      	movs	r3, #0
 80054f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f383 8811 	msr	BASEPRI, r3
    }
 80054fc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <vPortSetupTimerInterrupt+0x38>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <vPortSetupTimerInterrupt+0x3c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <vPortSetupTimerInterrupt+0x40>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <vPortSetupTimerInterrupt+0x44>)
 800552a:	3b01      	subs	r3, #1
 800552c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000e010 	.word	0xe000e010
 8005544:	e000e018 	.word	0xe000e018
 8005548:	20000010 	.word	0x20000010
 800554c:	10624dd3 	.word	0x10624dd3
 8005550:	e000e014 	.word	0xe000e014

08005554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005564 <vPortEnableVFP+0x10>
 8005558:	6801      	ldr	r1, [r0, #0]
 800555a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800555e:	6001      	str	r1, [r0, #0]
 8005560:	4770      	bx	lr
 8005562:	0000      	.short	0x0000
 8005564:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop

0800556c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0

    	/* use for segger system view */
    	 vSetVarulMaxPRIGROUPValue();  // added function call to set ulMaxPRIGROUPValue otherwise it will end up in an endless loop
 8005572:	f000 f83b 	bl	80055ec <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;
        /* end  */

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005576:	f3ef 8305 	mrs	r3, IPSR
 800557a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d914      	bls.n	80055ac <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005582:	4a16      	ldr	r2, [pc, #88]	; (80055dc <vPortValidateInterruptPriority+0x70>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800558c:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <vPortValidateInterruptPriority+0x74>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	7afa      	ldrb	r2, [r7, #11]
 8005592:	429a      	cmp	r2, r3
 8005594:	d20a      	bcs.n	80055ac <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	607b      	str	r3, [r7, #4]
    }
 80055a8:	bf00      	nop
 80055aa:	e7fe      	b.n	80055aa <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <vPortValidateInterruptPriority+0x78>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <vPortValidateInterruptPriority+0x7c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d90a      	bls.n	80055d2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	603b      	str	r3, [r7, #0]
    }
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <vPortValidateInterruptPriority+0x64>
    }
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	e000e3f0 	.word	0xe000e3f0
 80055e0:	200028d4 	.word	0x200028d4
 80055e4:	e000ed0c 	.word	0xe000ed0c
 80055e8:	200028d8 	.word	0x200028d8

080055ec <vSetVarulMaxPRIGROUPValue>:


/* use for segger systemview */
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055f2:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <vSetVarulMaxPRIGROUPValue+0x84>)
 80055f4:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	22ff      	movs	r2, #255	; 0xff
 80055fa:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005606:	2207      	movs	r2, #7
 8005608:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800560a:	e009      	b.n	8005620 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3b01      	subs	r3, #1
 8005612:	4a18      	ldr	r2, [pc, #96]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005614:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d0ef      	beq.n	800560c <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1c3 0307 	rsb	r3, r3, #7
 8005634:	2b04      	cmp	r3, #4
 8005636:	d00a      	beq.n	800564e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	60bb      	str	r3, [r7, #8]
    }
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <vSetVarulMaxPRIGROUPValue+0x60>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	4a07      	ldr	r2, [pc, #28]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005656:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005660:	4a04      	ldr	r2, [pc, #16]	; (8005674 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005662:	6013      	str	r3, [r2, #0]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	e000e400 	.word	0xe000e400
 8005674:	200028d8 	.word	0x200028d8

08005678 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueGenericReset+0x2a>
        __asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60bb      	str	r3, [r7, #8]
    }
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80056a2:	f7ff fe79 	bl	8005398 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	441a      	add	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	3b01      	subs	r3, #1
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	441a      	add	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	22ff      	movs	r2, #255	; 0xff
 80056ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d114      	bne.n	8005722 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01a      	beq.n	8005736 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3310      	adds	r3, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fbff 	bl	8006f08 <xTaskRemoveFromEventList>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <xQueueGenericReset+0xcc>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	e009      	b.n	8005736 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3310      	adds	r3, #16
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fc56 	bl	8004fd8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fc51 	bl	8004fd8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005736:	f7ff fe5f 	bl	80053f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800573a:	2301      	movs	r3, #1
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8005748:	b580      	push	{r7, lr}
 800574a:	b08e      	sub	sp, #56	; 0x38
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xQueueGenericCreateStatic+0x2a>
        __asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericCreateStatic+0x28>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <xQueueGenericCreateStatic+0x46>
        __asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xQueueGenericCreateStatic+0x44>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <xQueueGenericCreateStatic+0x52>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <xQueueGenericCreateStatic+0x56>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueGenericCreateStatic+0x58>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueGenericCreateStatic+0x72>
        __asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	623b      	str	r3, [r7, #32]
    }
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueGenericCreateStatic+0x70>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <xQueueGenericCreateStatic+0x7e>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <xQueueGenericCreateStatic+0x82>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <xQueueGenericCreateStatic+0x84>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <xQueueGenericCreateStatic+0x9e>
        __asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	61fb      	str	r3, [r7, #28]
    }
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xQueueGenericCreateStatic+0x9c>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80057e6:	2350      	movs	r3, #80	; 0x50
 80057e8:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( Queue_t ) );
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b50      	cmp	r3, #80	; 0x50
 80057ee:	d00a      	beq.n	8005806 <xQueueGenericCreateStatic+0xbe>
        __asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	61bb      	str	r3, [r7, #24]
    }
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericCreateStatic+0xbc>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005806:	697b      	ldr	r3, [r7, #20]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxNewQueue != NULL )
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00d      	beq.n	800582e <xQueueGenericCreateStatic+0xe6>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800581a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f868 	bl	80058fe <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005830:	4618      	mov	r0, r3
 8005832:	3730      	adds	r7, #48	; 0x30
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueGenericCreate+0x2a>
        __asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	61bb      	str	r3, [r7, #24]
    }
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d006      	beq.n	8005880 <xQueueGenericCreate+0x48>
 8005872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	429a      	cmp	r2, r3
 800587e:	d101      	bne.n	8005884 <xQueueGenericCreate+0x4c>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <xQueueGenericCreate+0x4e>
 8005884:	2300      	movs	r3, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <xQueueGenericCreate+0x68>
        __asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	617b      	str	r3, [r7, #20]
    }
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80058a6:	d90a      	bls.n	80058be <xQueueGenericCreate+0x86>
        __asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	613b      	str	r3, [r7, #16]
    }
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	3350      	adds	r3, #80	; 0x50
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff f986 	bl	8004bd4 <pvPortMalloc>
 80058c8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d011      	beq.n	80058f4 <xQueueGenericCreate+0xbc>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	3350      	adds	r3, #80	; 0x50
 80058d8:	61fb      	str	r3, [r7, #28]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058e2:	79fa      	ldrb	r2, [r7, #7]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f805 	bl	80058fe <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80058f4:	6a3b      	ldr	r3, [r7, #32]
    }
 80058f6:	4618      	mov	r0, r3
 80058f8:	3728      	adds	r7, #40	; 0x28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e002      	b.n	8005920 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800592c:	2101      	movs	r1, #1
 800592e:	69b8      	ldr	r0, [r7, #24]
 8005930:	f7ff fea2 	bl	8005678 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	2073      	movs	r0, #115	; 0x73
 8005944:	f002 ff08 	bl	8008758 <SEGGER_SYSVIEW_RecordU32x3>
}
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005970:	2300      	movs	r3, #0
 8005972:	2200      	movs	r2, #0
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f81c 	bl	80059b4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	461a      	mov	r2, r3
 800599a:	6939      	ldr	r1, [r7, #16]
 800599c:	6978      	ldr	r0, [r7, #20]
 800599e:	f7ff ff4b 	bl	8005838 <xQueueGenericCreate>
 80059a2:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f7ff ffd3 	bl	8005950 <prvInitialiseMutex>

        return xNewQueue;
 80059aa:	68fb      	ldr	r3, [r7, #12]
    }
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b090      	sub	sp, #64	; 0x40
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059c2:	2300      	movs	r3, #0
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <xQueueGenericSend+0x32>
        __asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <xQueueGenericSend+0x40>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <xQueueGenericSend+0x44>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <xQueueGenericSend+0x46>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <xQueueGenericSend+0x60>
        __asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d103      	bne.n	8005a22 <xQueueGenericSend+0x6e>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <xQueueGenericSend+0x72>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueGenericSend+0x74>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueGenericSend+0x8e>
        __asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	623b      	str	r3, [r7, #32]
    }
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a42:	f001 fc5b 	bl	80072fc <xTaskGetSchedulerState>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <xQueueGenericSend+0x9e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <xQueueGenericSend+0xa2>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xQueueGenericSend+0xa4>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xQueueGenericSend+0xbe>
        __asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61fb      	str	r3, [r7, #28]
    }
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005a72:	f7ff fc91 	bl	8005398 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <xQueueGenericSend+0xd4>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d136      	bne.n	8005af6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f003 fbf0 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	205a      	movs	r0, #90	; 0x5a
 8005a9e:	f002 fed1 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa8:	f000 fbcc 	bl	8006244 <prvCopyDataToQueue>
 8005aac:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d010      	beq.n	8005ad8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	3324      	adds	r3, #36	; 0x24
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 fa24 	bl	8006f08 <xTaskRemoveFromEventList>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d013      	beq.n	8005aee <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005ac6:	4b4d      	ldr	r3, [pc, #308]	; (8005bfc <xQueueGenericSend+0x248>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e00a      	b.n	8005aee <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005ade:	4b47      	ldr	r3, [pc, #284]	; (8005bfc <xQueueGenericSend+0x248>)
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005aee:	f7ff fc83 	bl	80053f8 <vPortExitCritical>
                return pdPASS;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07d      	b.n	8005bf2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d110      	bne.n	8005b1e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005afc:	f7ff fc7c 	bl	80053f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	4618      	mov	r0, r3
 8005b04:	f003 fbb4 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	460b      	mov	r3, r1
 8005b12:	4601      	mov	r1, r0
 8005b14:	205a      	movs	r0, #90	; 0x5a
 8005b16:	f002 fe95 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e069      	b.n	8005bf2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005b24:	f107 0314 	add.w	r3, r7, #20
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fa55 	bl	8006fd8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005b32:	f7ff fc61 	bl	80053f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005b36:	f000 ff73 	bl	8006a20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005b3a:	f7ff fc2d 	bl	8005398 <vPortEnterCritical>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b44:	b25b      	sxtb	r3, r3
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b4a:	d103      	bne.n	8005b54 <xQueueGenericSend+0x1a0>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b5a:	b25b      	sxtb	r3, r3
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b60:	d103      	bne.n	8005b6a <xQueueGenericSend+0x1b6>
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b6a:	f7ff fc45 	bl	80053f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b6e:	1d3a      	adds	r2, r7, #4
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	4611      	mov	r1, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fa44 	bl	8007004 <xTaskCheckForTimeOut>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d124      	bne.n	8005bcc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b84:	f000 fc56 	bl	8006434 <prvIsQueueFull>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d018      	beq.n	8005bc0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	3310      	adds	r3, #16
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 f964 	bl	8006e64 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9e:	f000 fbe1 	bl	8006364 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005ba2:	f000 ff4b 	bl	8006a3c <xTaskResumeAll>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f47f af62 	bne.w	8005a72 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <xQueueGenericSend+0x248>)
 8005bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	e758      	b.n	8005a72 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bc2:	f000 fbcf 	bl	8006364 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005bc6:	f000 ff39 	bl	8006a3c <xTaskResumeAll>
 8005bca:	e752      	b.n	8005a72 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bce:	f000 fbc9 	bl	8006364 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005bd2:	f000 ff33 	bl	8006a3c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f003 fb49 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	460b      	mov	r3, r1
 8005be8:	4601      	mov	r1, r0
 8005bea:	205a      	movs	r0, #90	; 0x5a
 8005bec:	f002 fe2a 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005bf0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3738      	adds	r7, #56	; 0x38
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b090      	sub	sp, #64	; 0x40
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <xQueueGenericSendFromISR+0x3c>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <xQueueGenericSendFromISR+0x40>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <xQueueGenericSendFromISR+0x42>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d103      	bne.n	8005c6a <xQueueGenericSendFromISR+0x6a>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <xQueueGenericSendFromISR+0x6e>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <xQueueGenericSendFromISR+0x70>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	623b      	str	r3, [r7, #32]
    }
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c8a:	f7ff fc6f 	bl	800556c <vPortValidateInterruptPriority>
        __asm volatile
 8005c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61fa      	str	r2, [r7, #28]
 8005ca4:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <xQueueGenericSendFromISR+0xbc>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d148      	bne.n	8005d4e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f003 face 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2060      	movs	r0, #96	; 0x60
 8005cdc:	f002 fce2 	bl	80086a4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ce6:	f000 faad 	bl	8006244 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005cea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf2:	d112      	bne.n	8005d1a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d025      	beq.n	8005d48 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	3324      	adds	r3, #36	; 0x24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 f901 	bl	8006f08 <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01d      	beq.n	8005d48 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01a      	beq.n	8005d48 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e016      	b.n	8005d48 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005d1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d20:	d10a      	bne.n	8005d38 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	617b      	str	r3, [r7, #20]
    }
 8005d34:	bf00      	nop
 8005d36:	e7fe      	b.n	8005d36 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	b25a      	sxtb	r2, r3
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005d4c:	e00b      	b.n	8005d66 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	4618      	mov	r0, r3
 8005d52:	f003 fa8d 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005d56:	4601      	mov	r1, r0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2060      	movs	r0, #96	; 0x60
 8005d5e:	f002 fca1 	bl	80086a4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f383 8811 	msr	BASEPRI, r3
    }
 8005d70:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3740      	adds	r7, #64	; 0x40
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b08f      	sub	sp, #60	; 0x3c
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <xQueueReceive+0x30>
        __asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	623b      	str	r3, [r7, #32]
    }
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <xQueueReceive+0x3e>
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <xQueueReceive+0x42>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xQueueReceive+0x44>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueReceive+0x5e>
        __asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	61fb      	str	r3, [r7, #28]
    }
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dda:	f001 fa8f 	bl	80072fc <xTaskGetSchedulerState>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <xQueueReceive+0x6e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <xQueueReceive+0x72>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <xQueueReceive+0x74>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueReceive+0x8e>
        __asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	61bb      	str	r3, [r7, #24]
    }
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005e0a:	f7ff fac5 	bl	8005398 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d02f      	beq.n	8005e7a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1e:	f000 fa7b 	bl	8006318 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	4618      	mov	r0, r3
 8005e26:	f003 fa23 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f003 fa1f 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005e32:	4602      	mov	r2, r0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2101      	movs	r1, #1
 8005e38:	9100      	str	r1, [sp, #0]
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	205c      	movs	r0, #92	; 0x5c
 8005e3e:	f002 fd01 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	1e5a      	subs	r2, r3, #1
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00f      	beq.n	8005e72 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	3310      	adds	r3, #16
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f856 	bl	8006f08 <xTaskRemoveFromEventList>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005e62:	4b4d      	ldr	r3, [pc, #308]	; (8005f98 <xQueueReceive+0x21c>)
 8005e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005e72:	f7ff fac1 	bl	80053f8 <vPortExitCritical>
                return pdPASS;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e08a      	b.n	8005f90 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d113      	bne.n	8005ea8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005e80:	f7ff faba 	bl	80053f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	4618      	mov	r0, r3
 8005e88:	f003 f9f2 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f003 f9ee 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005e94:	4602      	mov	r2, r0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2101      	movs	r1, #1
 8005e9a:	9100      	str	r1, [sp, #0]
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	205c      	movs	r0, #92	; 0x5c
 8005ea0:	f002 fcd0 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e073      	b.n	8005f90 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005eae:	f107 0310 	add.w	r3, r7, #16
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 f890 	bl	8006fd8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005ebc:	f7ff fa9c 	bl	80053f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005ec0:	f000 fdae 	bl	8006a20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005ec4:	f7ff fa68 	bl	8005398 <vPortEnterCritical>
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed4:	d103      	bne.n	8005ede <xQueueReceive+0x162>
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee4:	b25b      	sxtb	r3, r3
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eea:	d103      	bne.n	8005ef4 <xQueueReceive+0x178>
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef4:	f7ff fa80 	bl	80053f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ef8:	1d3a      	adds	r2, r7, #4
 8005efa:	f107 0310 	add.w	r3, r7, #16
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 f87f 	bl	8007004 <xTaskCheckForTimeOut>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d124      	bne.n	8005f56 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f0e:	f000 fa7b 	bl	8006408 <prvIsQueueEmpty>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d018      	beq.n	8005f4a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	3324      	adds	r3, #36	; 0x24
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 ff9f 	bl	8006e64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f28:	f000 fa1c 	bl	8006364 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005f2c:	f000 fd86 	bl	8006a3c <xTaskResumeAll>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f47f af69 	bne.w	8005e0a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <xQueueReceive+0x21c>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	e75f      	b.n	8005e0a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f4c:	f000 fa0a 	bl	8006364 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005f50:	f000 fd74 	bl	8006a3c <xTaskResumeAll>
 8005f54:	e759      	b.n	8005e0a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f58:	f000 fa04 	bl	8006364 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005f5c:	f000 fd6e 	bl	8006a3c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f62:	f000 fa51 	bl	8006408 <prvIsQueueEmpty>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f43f af4e 	beq.w	8005e0a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	4618      	mov	r0, r3
 8005f72:	f003 f97d 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005f76:	4604      	mov	r4, r0
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f003 f979 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2101      	movs	r1, #1
 8005f84:	9100      	str	r1, [sp, #0]
 8005f86:	4621      	mov	r1, r4
 8005f88:	205c      	movs	r0, #92	; 0x5c
 8005f8a:	f002 fc5b 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005f8e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3734      	adds	r7, #52	; 0x34
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd90      	pop	{r4, r7, pc}
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b091      	sub	sp, #68	; 0x44
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xQueueSemaphoreTake+0x32>
        __asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	623b      	str	r3, [r7, #32]
    }
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <xQueueSemaphoreTake+0x50>
        __asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	61fb      	str	r3, [r7, #28]
    }
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fec:	f001 f986 	bl	80072fc <xTaskGetSchedulerState>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <xQueueSemaphoreTake+0x60>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <xQueueSemaphoreTake+0x64>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <xQueueSemaphoreTake+0x66>
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	61bb      	str	r3, [r7, #24]
    }
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800601c:	f7ff f9bc 	bl	8005398 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b00      	cmp	r3, #0
 800602a:	d034      	beq.n	8006096 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	4618      	mov	r0, r3
 8006030:	f003 f91e 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 8006034:	4604      	mov	r4, r0
 8006036:	2000      	movs	r0, #0
 8006038:	f003 f91a 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 800603c:	4602      	mov	r2, r0
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2101      	movs	r1, #1
 8006042:	9100      	str	r1, [sp, #0]
 8006044:	4621      	mov	r1, r4
 8006046:	205c      	movs	r0, #92	; 0x5c
 8006048:	f002 fbfc 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800605c:	f001 fade 	bl	800761c <pvTaskIncrementMutexHeldCount>
 8006060:	4602      	mov	r2, r0
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00f      	beq.n	800608e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	3310      	adds	r3, #16
 8006072:	4618      	mov	r0, r3
 8006074:	f000 ff48 	bl	8006f08 <xTaskRemoveFromEventList>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800607e:	4b64      	ldr	r3, [pc, #400]	; (8006210 <xQueueSemaphoreTake+0x274>)
 8006080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800608e:	f7ff f9b3 	bl	80053f8 <vPortExitCritical>
                return pdPASS;
 8006092:	2301      	movs	r3, #1
 8006094:	e0b7      	b.n	8006206 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d121      	bne.n	80060e0 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	617b      	str	r3, [r7, #20]
    }
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80060b8:	f7ff f99e 	bl	80053f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	4618      	mov	r0, r3
 80060c0:	f003 f8d6 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 80060c4:	4604      	mov	r4, r0
 80060c6:	2000      	movs	r0, #0
 80060c8:	f003 f8d2 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 80060cc:	4602      	mov	r2, r0
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2101      	movs	r1, #1
 80060d2:	9100      	str	r1, [sp, #0]
 80060d4:	4621      	mov	r1, r4
 80060d6:	205c      	movs	r0, #92	; 0x5c
 80060d8:	f002 fbb4 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80060dc:	2300      	movs	r3, #0
 80060de:	e092      	b.n	8006206 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ff74 	bl	8006fd8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80060f4:	f7ff f980 	bl	80053f8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80060f8:	f000 fc92 	bl	8006a20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80060fc:	f7ff f94c 	bl	8005398 <vPortEnterCritical>
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006106:	b25b      	sxtb	r3, r3
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800610c:	d103      	bne.n	8006116 <xQueueSemaphoreTake+0x17a>
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800611c:	b25b      	sxtb	r3, r3
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006122:	d103      	bne.n	800612c <xQueueSemaphoreTake+0x190>
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800612c:	f7ff f964 	bl	80053f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006130:	463a      	mov	r2, r7
 8006132:	f107 030c 	add.w	r3, r7, #12
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f000 ff63 	bl	8007004 <xTaskCheckForTimeOut>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d132      	bne.n	80061aa <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006146:	f000 f95f 	bl	8006408 <prvIsQueueEmpty>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d026      	beq.n	800619e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8006158:	f7ff f91e 	bl	8005398 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f001 f8e9 	bl	8007338 <xTaskPriorityInherit>
 8006166:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8006168:	f7ff f946 	bl	80053f8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fe75 	bl	8006e64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800617a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800617c:	f000 f8f2 	bl	8006364 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006180:	f000 fc5c 	bl	8006a3c <xTaskResumeAll>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	f47f af48 	bne.w	800601c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800618c:	4b20      	ldr	r3, [pc, #128]	; (8006210 <xQueueSemaphoreTake+0x274>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	e73e      	b.n	800601c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800619e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061a0:	f000 f8e0 	bl	8006364 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80061a4:	f000 fc4a 	bl	8006a3c <xTaskResumeAll>
 80061a8:	e738      	b.n	800601c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80061aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ac:	f000 f8da 	bl	8006364 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80061b0:	f000 fc44 	bl	8006a3c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061b6:	f000 f927 	bl	8006408 <prvIsQueueEmpty>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f43f af2d 	beq.w	800601c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 80061c8:	f7ff f8e6 	bl	8005398 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80061cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ce:	f000 f821 	bl	8006214 <prvGetDisinheritPriorityAfterTimeout>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f994 	bl	8007508 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80061e0:	f7ff f90a 	bl	80053f8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	4618      	mov	r0, r3
 80061e8:	f003 f842 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 80061ec:	4604      	mov	r4, r0
 80061ee:	2000      	movs	r0, #0
 80061f0:	f003 f83e 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 80061f4:	4602      	mov	r2, r0
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2101      	movs	r1, #1
 80061fa:	9100      	str	r1, [sp, #0]
 80061fc:	4621      	mov	r1, r4
 80061fe:	205c      	movs	r0, #92	; 0x5c
 8006200:	f002 fb20 	bl	8008844 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006204:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006206:	4618      	mov	r0, r3
 8006208:	373c      	adds	r7, #60	; 0x3c
 800620a:	46bd      	mov	sp, r7
 800620c:	bd90      	pop	{r4, r7, pc}
 800620e:	bf00      	nop
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e001      	b.n	8006236 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006236:	68fb      	ldr	r3, [r7, #12]
    }
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d14d      	bne.n	8006306 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f001 f8d4 	bl	800741c <xTaskPriorityDisinherit>
 8006274:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	e043      	b.n	8006306 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d119      	bne.n	80062b8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6858      	ldr	r0, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	461a      	mov	r2, r3
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	f006 fc92 	bl	800cbb8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	441a      	add	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d32b      	bcc.n	8006306 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	e026      	b.n	8006306 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68d8      	ldr	r0, [r3, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	461a      	mov	r2, r3
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	f006 fc78 	bl	800cbb8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	425b      	negs	r3, r3
 80062d2:	441a      	add	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d207      	bcs.n	80062f4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	425b      	negs	r3, r3
 80062ee:	441a      	add	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d105      	bne.n	8006306 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3b01      	subs	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800630e:	697b      	ldr	r3, [r7, #20]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d018      	beq.n	800635c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	441a      	add	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	d303      	bcc.n	800634c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68d9      	ldr	r1, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	461a      	mov	r2, r3
 8006356:	6838      	ldr	r0, [r7, #0]
 8006358:	f006 fc2e 	bl	800cbb8 <memcpy>
    }
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800636c:	f7ff f814 	bl	8005398 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006376:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006378:	e011      	b.n	800639e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d012      	beq.n	80063a8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3324      	adds	r3, #36	; 0x24
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fdbe 	bl	8006f08 <xTaskRemoveFromEventList>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006392:	f000 fe9d 	bl	80070d0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	3b01      	subs	r3, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800639e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dce9      	bgt.n	800637a <prvUnlockQueue+0x16>
 80063a6:	e000      	b.n	80063aa <prvUnlockQueue+0x46>
                        break;
 80063a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	22ff      	movs	r2, #255	; 0xff
 80063ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80063b2:	f7ff f821 	bl	80053f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80063b6:	f7fe ffef 	bl	8005398 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c2:	e011      	b.n	80063e8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d012      	beq.n	80063f2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3310      	adds	r3, #16
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fd99 	bl	8006f08 <xTaskRemoveFromEventList>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80063dc:	f000 fe78 	bl	80070d0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80063e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dce9      	bgt.n	80063c4 <prvUnlockQueue+0x60>
 80063f0:	e000      	b.n	80063f4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80063f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	22ff      	movs	r2, #255	; 0xff
 80063f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80063fc:	f7fe fffc 	bl	80053f8 <vPortExitCritical>
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006410:	f7fe ffc2 	bl	8005398 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	e001      	b.n	8006426 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006426:	f7fe ffe7 	bl	80053f8 <vPortExitCritical>

    return xReturn;
 800642a:	68fb      	ldr	r3, [r7, #12]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800643c:	f7fe ffac 	bl	8005398 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	429a      	cmp	r2, r3
 800644a:	d102      	bne.n	8006452 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e001      	b.n	8006456 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006456:	f7fe ffcf 	bl	80053f8 <vPortExitCritical>

    return xReturn;
 800645a:	68fb      	ldr	r3, [r7, #12]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e01e      	b.n	80064b2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <vQueueAddToRegistry+0x60>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d115      	bne.n	80064ac <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006480:	4910      	ldr	r1, [pc, #64]	; (80064c4 <vQueueAddToRegistry+0x60>)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <vQueueAddToRegistry+0x60>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4618      	mov	r0, r3
 800649a:	f002 fee9 	bl	8009270 <SEGGER_SYSVIEW_ShrinkId>
 800649e:	4601      	mov	r1, r0
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	2071      	movs	r0, #113	; 0x71
 80064a6:	f002 f8fd 	bl	80086a4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80064aa:	e006      	b.n	80064ba <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b07      	cmp	r3, #7
 80064b6:	d9dd      	bls.n	8006474 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200028dc 	.word	0x200028dc

080064c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80064d8:	f7fe ff5e 	bl	8005398 <vPortEnterCritical>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e8:	d103      	bne.n	80064f2 <vQueueWaitForMessageRestricted+0x2a>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064f8:	b25b      	sxtb	r3, r3
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064fe:	d103      	bne.n	8006508 <vQueueWaitForMessageRestricted+0x40>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006508:	f7fe ff76 	bl	80053f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	3324      	adds	r3, #36	; 0x24
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fcc5 	bl	8006eac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006522:	6978      	ldr	r0, [r7, #20]
 8006524:	f7ff ff1e 	bl	8006364 <prvUnlockQueue>
    }
 8006528:	bf00      	nop
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	; 0x38
 8006534:	af04      	add	r7, sp, #16
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <xTaskCreateStatic+0x2a>
        __asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	623b      	str	r3, [r7, #32]
    }
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xTaskCreateStatic+0x46>
        __asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	61fb      	str	r3, [r7, #28]
    }
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8006576:	235c      	movs	r3, #92	; 0x5c
 8006578:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( TCB_t ) );
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b5c      	cmp	r3, #92	; 0x5c
 800657e:	d00a      	beq.n	8006596 <xTaskCreateStatic+0x66>
        __asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	61bb      	str	r3, [r7, #24]
    }
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xTaskCreateStatic+0x64>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006596:	693b      	ldr	r3, [r7, #16]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01e      	beq.n	80065dc <xTaskCreateStatic+0xac>
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01b      	beq.n	80065dc <xTaskCreateStatic+0xac>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065b6:	2300      	movs	r3, #0
 80065b8:	9303      	str	r3, [sp, #12]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	9302      	str	r3, [sp, #8]
 80065be:	f107 0314 	add.w	r3, r7, #20
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f850 	bl	8006674 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80065d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d6:	f000 f8e3 	bl	80067a0 <prvAddNewTaskToReadyList>
 80065da:	e001      	b.n	80065e0 <xTaskCreateStatic+0xb0>
        }
        else
        {
            xReturn = NULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 80065e0:	697b      	ldr	r3, [r7, #20]
    }
 80065e2:	4618      	mov	r0, r3
 80065e4:	3728      	adds	r7, #40	; 0x28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08c      	sub	sp, #48	; 0x30
 80065ee:	af04      	add	r7, sp, #16
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	603b      	str	r3, [r7, #0]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fae8 	bl	8004bd4 <pvPortMalloc>
 8006604:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800660c:	205c      	movs	r0, #92	; 0x5c
 800660e:	f7fe fae1 	bl	8004bd4 <pvPortMalloc>
 8006612:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
 8006620:	e005      	b.n	800662e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006622:	6978      	ldr	r0, [r7, #20]
 8006624:	f7fe fbba 	bl	8004d9c <vPortFree>
 8006628:	e001      	b.n	800662e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d017      	beq.n	8006664 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	2300      	movs	r3, #0
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	9302      	str	r3, [sp, #8]
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f80e 	bl	8006674 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006658:	69f8      	ldr	r0, [r7, #28]
 800665a:	f000 f8a1 	bl	80067a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e002      	b.n	800666a <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006668:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800666a:	69bb      	ldr	r3, [r7, #24]
    }
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	461a      	mov	r2, r3
 800668c:	21a5      	movs	r1, #165	; 0xa5
 800668e:	f006 faa1 	bl	800cbd4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800669c:	3b01      	subs	r3, #1
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <prvInitialiseNewTask+0x58>
        __asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	617b      	str	r3, [r7, #20]
    }
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01f      	beq.n	8006712 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066d2:	2300      	movs	r3, #0
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	e012      	b.n	80066fe <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	7819      	ldrb	r1, [r3, #0]
 80066e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	3334      	adds	r3, #52	; 0x34
 80066e8:	460a      	mov	r2, r1
 80066ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d006      	beq.n	8006706 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3301      	adds	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d9e9      	bls.n	80066d8 <prvInitialiseNewTask+0x64>
 8006704:	e000      	b.n	8006708 <prvInitialiseNewTask+0x94>
            {
                break;
 8006706:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006710:	e003      	b.n	800671a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	2b37      	cmp	r3, #55	; 0x37
 800671e:	d901      	bls.n	8006724 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006720:	2337      	movs	r3, #55	; 0x37
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006728:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672e:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	2200      	movs	r2, #0
 8006734:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	3304      	adds	r3, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe fc6c 	bl	8005018 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	3318      	adds	r3, #24
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fc67 	bl	8005018 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	3354      	adds	r3, #84	; 0x54
 8006764:	2204      	movs	r2, #4
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f006 fa33 	bl	800cbd4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	3358      	adds	r3, #88	; 0x58
 8006772:	2201      	movs	r2, #1
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f006 fa2c 	bl	800cbd4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	69b8      	ldr	r0, [r7, #24]
 8006782:	f7fe fcdd 	bl	8005140 <pxPortInitialiseStack>
 8006786:	4602      	mov	r2, r0
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006796:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006798:	bf00      	nop
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80067a0:	b5b0      	push	{r4, r5, r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80067a8:	f7fe fdf6 	bl	8005398 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80067ac:	4b3c      	ldr	r3, [pc, #240]	; (80068a0 <prvAddNewTaskToReadyList+0x100>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	4a3b      	ldr	r2, [pc, #236]	; (80068a0 <prvAddNewTaskToReadyList+0x100>)
 80067b4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80067b6:	4b3b      	ldr	r3, [pc, #236]	; (80068a4 <prvAddNewTaskToReadyList+0x104>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80067be:	4a39      	ldr	r2, [pc, #228]	; (80068a4 <prvAddNewTaskToReadyList+0x104>)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067c4:	4b36      	ldr	r3, [pc, #216]	; (80068a0 <prvAddNewTaskToReadyList+0x100>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d110      	bne.n	80067ee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80067cc:	f000 fca4 	bl	8007118 <prvInitialiseTaskLists>
 80067d0:	e00d      	b.n	80067ee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80067d2:	4b35      	ldr	r3, [pc, #212]	; (80068a8 <prvAddNewTaskToReadyList+0x108>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067da:	4b32      	ldr	r3, [pc, #200]	; (80068a4 <prvAddNewTaskToReadyList+0x104>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d802      	bhi.n	80067ee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80067e8:	4a2e      	ldr	r2, [pc, #184]	; (80068a4 <prvAddNewTaskToReadyList+0x104>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80067ee:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <prvAddNewTaskToReadyList+0x10c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a2d      	ldr	r2, [pc, #180]	; (80068ac <prvAddNewTaskToReadyList+0x10c>)
 80067f6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067f8:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <prvAddNewTaskToReadyList+0x10c>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d016      	beq.n	8006834 <prvAddNewTaskToReadyList+0x94>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4618      	mov	r0, r3
 800680a:	f002 fc0b 	bl	8009024 <SEGGER_SYSVIEW_OnTaskCreate>
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	461d      	mov	r5, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461c      	mov	r4, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	1ae3      	subs	r3, r4, r3
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	462b      	mov	r3, r5
 8006830:	f002 ff2c 	bl	800968c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	f002 fc78 	bl	800912c <SEGGER_SYSVIEW_OnTaskStartReady>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <prvAddNewTaskToReadyList+0x110>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d903      	bls.n	8006850 <prvAddNewTaskToReadyList+0xb0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <prvAddNewTaskToReadyList+0x110>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4a15      	ldr	r2, [pc, #84]	; (80068b4 <prvAddNewTaskToReadyList+0x114>)
 800685e:	441a      	add	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7fe fbe3 	bl	8005032 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800686c:	f7fe fdc4 	bl	80053f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <prvAddNewTaskToReadyList+0x108>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00e      	beq.n	8006896 <prvAddNewTaskToReadyList+0xf6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <prvAddNewTaskToReadyList+0x104>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	429a      	cmp	r2, r3
 8006884:	d207      	bcs.n	8006896 <prvAddNewTaskToReadyList+0xf6>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <prvAddNewTaskToReadyList+0x118>)
 8006888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bdb0      	pop	{r4, r5, r7, pc}
 800689e:	bf00      	nop
 80068a0:	20002df0 	.word	0x20002df0
 80068a4:	2000291c 	.word	0x2000291c
 80068a8:	20002dfc 	.word	0x20002dfc
 80068ac:	20002e0c 	.word	0x20002e0c
 80068b0:	20002df8 	.word	0x20002df8
 80068b4:	20002920 	.word	0x20002920
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01b      	beq.n	8006906 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <vTaskDelay+0x68>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <vTaskDelay+0x30>
        __asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60bb      	str	r3, [r7, #8]
    }
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80068ec:	f000 f898 	bl	8006a20 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	2023      	movs	r0, #35	; 0x23
 80068f4:	f001 fe9a 	bl	800862c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068f8:	2100      	movs	r1, #0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fea2 	bl	8007644 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006900:	f000 f89c 	bl	8006a3c <xTaskResumeAll>
 8006904:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <vTaskDelay+0x6c>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20002e18 	.word	0x20002e18
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8006936:	2300      	movs	r3, #0
 8006938:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800693a:	463a      	mov	r2, r7
 800693c:	1d39      	adds	r1, r7, #4
 800693e:	f107 0308 	add.w	r3, r7, #8
 8006942:	4618      	mov	r0, r3
 8006944:	f004 f964 	bl	800ac10 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	9202      	str	r2, [sp, #8]
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	2300      	movs	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	2300      	movs	r3, #0
 8006958:	460a      	mov	r2, r1
 800695a:	4929      	ldr	r1, [pc, #164]	; (8006a00 <vTaskStartScheduler+0xd4>)
 800695c:	4829      	ldr	r0, [pc, #164]	; (8006a04 <vTaskStartScheduler+0xd8>)
 800695e:	f7ff fde7 	bl	8006530 <xTaskCreateStatic>
 8006962:	4603      	mov	r3, r0
 8006964:	4a28      	ldr	r2, [pc, #160]	; (8006a08 <vTaskStartScheduler+0xdc>)
 8006966:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <vTaskStartScheduler+0xdc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 8006970:	2301      	movs	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e001      	b.n	800697a <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d102      	bne.n	8006986 <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 8006980:	f000 fec0 	bl	8007704 <xTimerCreateTimerTask>
 8006984:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d124      	bne.n	80069d6 <vTaskStartScheduler+0xaa>
        __asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	613b      	str	r3, [r7, #16]
    }
 800699e:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <vTaskStartScheduler+0xe0>)
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069a6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80069a8:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <vTaskStartScheduler+0xe4>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069ae:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <vTaskStartScheduler+0xe8>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80069b4:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <vTaskStartScheduler+0xec>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <vTaskStartScheduler+0xdc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d102      	bne.n	80069c6 <vTaskStartScheduler+0x9a>
 80069c0:	f002 fb14 	bl	8008fec <SEGGER_SYSVIEW_OnIdle>
 80069c4:	e004      	b.n	80069d0 <vTaskStartScheduler+0xa4>
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <vTaskStartScheduler+0xec>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f002 fb6c 	bl	80090a8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80069d0:	f7fe fc40 	bl	8005254 <xPortStartScheduler>
 80069d4:	e00e      	b.n	80069f4 <vTaskStartScheduler+0xc8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069dc:	d10a      	bne.n	80069f4 <vTaskStartScheduler+0xc8>
        __asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
    }
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <vTaskStartScheduler+0xc6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80069f4:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <vTaskStartScheduler+0xf0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	0800d518 	.word	0x0800d518
 8006a04:	080070e9 	.word	0x080070e9
 8006a08:	20002e14 	.word	0x20002e14
 8006a0c:	20002e10 	.word	0x20002e10
 8006a10:	20002dfc 	.word	0x20002dfc
 8006a14:	20002df4 	.word	0x20002df4
 8006a18:	2000291c 	.word	0x2000291c
 8006a1c:	2000000c 	.word	0x2000000c

08006a20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <vTaskSuspendAll+0x18>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	4a03      	ldr	r2, [pc, #12]	; (8006a38 <vTaskSuspendAll+0x18>)
 8006a2c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006a2e:	bf00      	nop
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	20002e18 	.word	0x20002e18

08006a3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006a4a:	4b44      	ldr	r3, [pc, #272]	; (8006b5c <xTaskResumeAll+0x120>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <xTaskResumeAll+0x2c>
        __asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	603b      	str	r3, [r7, #0]
    }
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006a68:	f7fe fc96 	bl	8005398 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006a6c:	4b3b      	ldr	r3, [pc, #236]	; (8006b5c <xTaskResumeAll+0x120>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	4a3a      	ldr	r2, [pc, #232]	; (8006b5c <xTaskResumeAll+0x120>)
 8006a74:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a76:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <xTaskResumeAll+0x120>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d166      	bne.n	8006b4c <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a7e:	4b38      	ldr	r3, [pc, #224]	; (8006b60 <xTaskResumeAll+0x124>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d062      	beq.n	8006b4c <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a86:	e033      	b.n	8006af0 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a88:	4b36      	ldr	r3, [pc, #216]	; (8006b64 <xTaskResumeAll+0x128>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3318      	adds	r3, #24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fb29 	bl	80050ec <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fb24 	bl	80050ec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 fb40 	bl	800912c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <xTaskResumeAll+0x12c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <xTaskResumeAll+0x84>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <xTaskResumeAll+0x12c>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a27      	ldr	r2, [pc, #156]	; (8006b6c <xTaskResumeAll+0x130>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe faab 	bl	8005032 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b23      	ldr	r3, [pc, #140]	; (8006b70 <xTaskResumeAll+0x134>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8006aea:	4b22      	ldr	r3, [pc, #136]	; (8006b74 <xTaskResumeAll+0x138>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006af0:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <xTaskResumeAll+0x128>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1c7      	bne.n	8006a88 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006afe:	f000 fbe1 	bl	80072c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b02:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <xTaskResumeAll+0x13c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d010      	beq.n	8006b30 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006b0e:	f000 f859 	bl	8006bc4 <xTaskIncrementTick>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8006b18:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <xTaskResumeAll+0x138>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f1      	bne.n	8006b0e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <xTaskResumeAll+0x13c>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006b30:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <xTaskResumeAll+0x138>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <xTaskResumeAll+0x140>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006b4c:	f7fe fc54 	bl	80053f8 <vPortExitCritical>

    return xAlreadyYielded;
 8006b50:	68bb      	ldr	r3, [r7, #8]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20002e18 	.word	0x20002e18
 8006b60:	20002df0 	.word	0x20002df0
 8006b64:	20002db0 	.word	0x20002db0
 8006b68:	20002df8 	.word	0x20002df8
 8006b6c:	20002920 	.word	0x20002920
 8006b70:	2000291c 	.word	0x2000291c
 8006b74:	20002e04 	.word	0x20002e04
 8006b78:	20002e00 	.word	0x20002e00
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <xTaskGetTickCount+0x1c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006b8c:	687b      	ldr	r3, [r7, #4]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20002df4 	.word	0x20002df4

08006ba0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ba6:	f7fe fce1 	bl	800556c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006baa:	2300      	movs	r3, #0
 8006bac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <xTaskGetTickCountFromISR+0x20>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006bb4:	683b      	ldr	r3, [r7, #0]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20002df4 	.word	0x20002df4

08006bc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bce:	4b51      	ldr	r3, [pc, #324]	; (8006d14 <xTaskIncrementTick+0x150>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 8093 	bne.w	8006cfe <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bd8:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <xTaskIncrementTick+0x154>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006be0:	4a4d      	ldr	r2, [pc, #308]	; (8006d18 <xTaskIncrementTick+0x154>)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d120      	bne.n	8006c2e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <xTaskIncrementTick+0x48>
        __asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	603b      	str	r3, [r7, #0]
    }
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <xTaskIncrementTick+0x46>
 8006c0c:	4b43      	ldr	r3, [pc, #268]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	4b43      	ldr	r3, [pc, #268]	; (8006d20 <xTaskIncrementTick+0x15c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a41      	ldr	r2, [pc, #260]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4a41      	ldr	r2, [pc, #260]	; (8006d20 <xTaskIncrementTick+0x15c>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	4b40      	ldr	r3, [pc, #256]	; (8006d24 <xTaskIncrementTick+0x160>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	4a3f      	ldr	r2, [pc, #252]	; (8006d24 <xTaskIncrementTick+0x160>)
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	f000 fb4b 	bl	80072c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006c2e:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <xTaskIncrementTick+0x164>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d34d      	bcc.n	8006cd4 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c38:	4b38      	ldr	r3, [pc, #224]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c42:	4b39      	ldr	r3, [pc, #228]	; (8006d28 <xTaskIncrementTick+0x164>)
 8006c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c48:	601a      	str	r2, [r3, #0]
                    break;
 8006c4a:	e043      	b.n	8006cd4 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4c:	4b33      	ldr	r3, [pc, #204]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d203      	bcs.n	8006c6c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006c64:	4a30      	ldr	r2, [pc, #192]	; (8006d28 <xTaskIncrementTick+0x164>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c6a:	e033      	b.n	8006cd4 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fa3b 	bl	80050ec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	3318      	adds	r3, #24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fa32 	bl	80050ec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f002 fa4e 	bl	800912c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4b25      	ldr	r3, [pc, #148]	; (8006d2c <xTaskIncrementTick+0x168>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d903      	bls.n	8006ca4 <xTaskIncrementTick+0xe0>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <xTaskIncrementTick+0x168>)
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <xTaskIncrementTick+0x16c>)
 8006cb2:	441a      	add	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f7fe f9b9 	bl	8005032 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc4:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <xTaskIncrementTick+0x170>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d3b4      	bcc.n	8006c38 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd2:	e7b1      	b.n	8006c38 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cd4:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <xTaskIncrementTick+0x170>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	4915      	ldr	r1, [pc, #84]	; (8006d30 <xTaskIncrementTick+0x16c>)
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d901      	bls.n	8006cf0 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006cf0:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <xTaskIncrementTick+0x174>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e004      	b.n	8006d08 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006cfe:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <xTaskIncrementTick+0x178>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	4a0d      	ldr	r2, [pc, #52]	; (8006d3c <xTaskIncrementTick+0x178>)
 8006d06:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006d08:	697b      	ldr	r3, [r7, #20]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20002e18 	.word	0x20002e18
 8006d18:	20002df4 	.word	0x20002df4
 8006d1c:	20002da8 	.word	0x20002da8
 8006d20:	20002dac 	.word	0x20002dac
 8006d24:	20002e08 	.word	0x20002e08
 8006d28:	20002e10 	.word	0x20002e10
 8006d2c:	20002df8 	.word	0x20002df8
 8006d30:	20002920 	.word	0x20002920
 8006d34:	2000291c 	.word	0x2000291c
 8006d38:	20002e04 	.word	0x20002e04
 8006d3c:	20002e00 	.word	0x20002e00

08006d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d46:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <vTaskSwitchContext+0x10c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006d4e:	4b40      	ldr	r3, [pc, #256]	; (8006e50 <vTaskSwitchContext+0x110>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006d54:	e076      	b.n	8006e44 <vTaskSwitchContext+0x104>
        xYieldPending = pdFALSE;
 8006d56:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <vTaskSwitchContext+0x110>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8006d5c:	4b3d      	ldr	r3, [pc, #244]	; (8006e54 <vTaskSwitchContext+0x114>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	613b      	str	r3, [r7, #16]
 8006d64:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d111      	bne.n	8006d98 <vTaskSwitchContext+0x58>
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3304      	adds	r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d10b      	bne.n	8006d98 <vTaskSwitchContext+0x58>
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3308      	adds	r3, #8
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d105      	bne.n	8006d98 <vTaskSwitchContext+0x58>
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d008      	beq.n	8006daa <vTaskSwitchContext+0x6a>
 8006d98:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <vTaskSwitchContext+0x114>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <vTaskSwitchContext+0x114>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3334      	adds	r3, #52	; 0x34
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f003 ff23 	bl	800abf0 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006daa:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <vTaskSwitchContext+0x118>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	e010      	b.n	8006dd4 <vTaskSwitchContext+0x94>
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <vTaskSwitchContext+0x8e>
        __asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	607b      	str	r3, [r7, #4]
    }
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <vTaskSwitchContext+0x8c>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	4921      	ldr	r1, [pc, #132]	; (8006e5c <vTaskSwitchContext+0x11c>)
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0e4      	beq.n	8006db2 <vTaskSwitchContext+0x72>
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4a1a      	ldr	r2, [pc, #104]	; (8006e5c <vTaskSwitchContext+0x11c>)
 8006df4:	4413      	add	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d104      	bne.n	8006e18 <vTaskSwitchContext+0xd8>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	4a0d      	ldr	r2, [pc, #52]	; (8006e54 <vTaskSwitchContext+0x114>)
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	4a0d      	ldr	r2, [pc, #52]	; (8006e58 <vTaskSwitchContext+0x118>)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <vTaskSwitchContext+0x114>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <vTaskSwitchContext+0x120>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d102      	bne.n	8006e3a <vTaskSwitchContext+0xfa>
 8006e34:	f002 f8da 	bl	8008fec <SEGGER_SYSVIEW_OnIdle>
}
 8006e38:	e004      	b.n	8006e44 <vTaskSwitchContext+0x104>
        traceTASK_SWITCHED_IN();
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <vTaskSwitchContext+0x114>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 f932 	bl	80090a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006e44:	bf00      	nop
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20002e18 	.word	0x20002e18
 8006e50:	20002e04 	.word	0x20002e04
 8006e54:	2000291c 	.word	0x2000291c
 8006e58:	20002df8 	.word	0x20002df8
 8006e5c:	20002920 	.word	0x20002920
 8006e60:	20002e14 	.word	0x20002e14

08006e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
    }
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e8a:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <vTaskPlaceOnEventList+0x44>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3318      	adds	r3, #24
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fe f8f1 	bl	800507a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e98:	2101      	movs	r1, #1
 8006e9a:	6838      	ldr	r0, [r7, #0]
 8006e9c:	f000 fbd2 	bl	8007644 <prvAddCurrentTaskToDelayedList>
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	2000291c 	.word	0x2000291c

08006eac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	617b      	str	r3, [r7, #20]
    }
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <vTaskPlaceOnEventListRestricted+0x58>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3318      	adds	r3, #24
 8006eda:	4619      	mov	r1, r3
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7fe f8a8 	bl	8005032 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006eee:	2024      	movs	r0, #36	; 0x24
 8006ef0:	f001 fb7e 	bl	80085f0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	68b8      	ldr	r0, [r7, #8]
 8006ef8:	f000 fba4 	bl	8007644 <prvAddCurrentTaskToDelayedList>
    }
 8006efc:	bf00      	nop
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	2000291c 	.word	0x2000291c

08006f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60fb      	str	r3, [r7, #12]
    }
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3318      	adds	r3, #24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe f8d7 	bl	80050ec <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f3e:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <xTaskRemoveFromEventList+0xb8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d121      	bne.n	8006f8a <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f8ce 	bl	80050ec <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 f8ea 	bl	800912c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4b19      	ldr	r3, [pc, #100]	; (8006fc4 <xTaskRemoveFromEventList+0xbc>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d903      	bls.n	8006f6c <xTaskRemoveFromEventList+0x64>
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <xTaskRemoveFromEventList+0xbc>)
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4a13      	ldr	r2, [pc, #76]	; (8006fc8 <xTaskRemoveFromEventList+0xc0>)
 8006f7a:	441a      	add	r2, r3
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f7fe f855 	bl	8005032 <vListInsertEnd>
 8006f88:	e005      	b.n	8006f96 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3318      	adds	r3, #24
 8006f8e:	4619      	mov	r1, r3
 8006f90:	480e      	ldr	r0, [pc, #56]	; (8006fcc <xTaskRemoveFromEventList+0xc4>)
 8006f92:	f7fe f84e 	bl	8005032 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <xTaskRemoveFromEventList+0xc8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d905      	bls.n	8006fb0 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <xTaskRemoveFromEventList+0xcc>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e001      	b.n	8006fb4 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006fb4:	697b      	ldr	r3, [r7, #20]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20002e18 	.word	0x20002e18
 8006fc4:	20002df8 	.word	0x20002df8
 8006fc8:	20002920 	.word	0x20002920
 8006fcc:	20002db0 	.word	0x20002db0
 8006fd0:	2000291c 	.word	0x2000291c
 8006fd4:	20002e04 	.word	0x20002e04

08006fd8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <vTaskInternalSetTimeOutState+0x24>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <vTaskInternalSetTimeOutState+0x28>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	605a      	str	r2, [r3, #4]
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	20002e08 	.word	0x20002e08
 8007000:	20002df4 	.word	0x20002df4

08007004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10a      	bne.n	800702a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	613b      	str	r3, [r7, #16]
    }
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
    }
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007046:	f7fe f9a7 	bl	8005398 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800704a:	4b1f      	ldr	r3, [pc, #124]	; (80070c8 <xTaskCheckForTimeOut+0xc4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007062:	d102      	bne.n	800706a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	e026      	b.n	80070b8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b17      	ldr	r3, [pc, #92]	; (80070cc <xTaskCheckForTimeOut+0xc8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d00a      	beq.n	800708c <xTaskCheckForTimeOut+0x88>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	429a      	cmp	r2, r3
 800707e:	d305      	bcc.n	800708c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007080:	2301      	movs	r3, #1
 8007082:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e015      	b.n	80070b8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	429a      	cmp	r2, r3
 8007094:	d20b      	bcs.n	80070ae <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	1ad2      	subs	r2, r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff ff98 	bl	8006fd8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	e004      	b.n	80070b8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80070b8:	f7fe f99e 	bl	80053f8 <vPortExitCritical>

    return xReturn;
 80070bc:	69fb      	ldr	r3, [r7, #28]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20002df4 	.word	0x20002df4
 80070cc:	20002e08 	.word	0x20002e08

080070d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <vTaskMissedYield+0x14>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
}
 80070da:	bf00      	nop
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	20002e04 	.word	0x20002e04

080070e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80070f0:	f000 f852 	bl	8007198 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070f4:	4b06      	ldr	r3, [pc, #24]	; (8007110 <prvIdleTask+0x28>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d9f9      	bls.n	80070f0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <prvIdleTask+0x2c>)
 80070fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800710c:	e7f0      	b.n	80070f0 <prvIdleTask+0x8>
 800710e:	bf00      	nop
 8007110:	20002920 	.word	0x20002920
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800711e:	2300      	movs	r3, #0
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	e00c      	b.n	800713e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4a12      	ldr	r2, [pc, #72]	; (8007178 <prvInitialiseTaskLists+0x60>)
 8007130:	4413      	add	r3, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd ff50 	bl	8004fd8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3301      	adds	r3, #1
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b37      	cmp	r3, #55	; 0x37
 8007142:	d9ef      	bls.n	8007124 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007144:	480d      	ldr	r0, [pc, #52]	; (800717c <prvInitialiseTaskLists+0x64>)
 8007146:	f7fd ff47 	bl	8004fd8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800714a:	480d      	ldr	r0, [pc, #52]	; (8007180 <prvInitialiseTaskLists+0x68>)
 800714c:	f7fd ff44 	bl	8004fd8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007150:	480c      	ldr	r0, [pc, #48]	; (8007184 <prvInitialiseTaskLists+0x6c>)
 8007152:	f7fd ff41 	bl	8004fd8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007156:	480c      	ldr	r0, [pc, #48]	; (8007188 <prvInitialiseTaskLists+0x70>)
 8007158:	f7fd ff3e 	bl	8004fd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800715c:	480b      	ldr	r0, [pc, #44]	; (800718c <prvInitialiseTaskLists+0x74>)
 800715e:	f7fd ff3b 	bl	8004fd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007162:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <prvInitialiseTaskLists+0x78>)
 8007164:	4a05      	ldr	r2, [pc, #20]	; (800717c <prvInitialiseTaskLists+0x64>)
 8007166:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <prvInitialiseTaskLists+0x7c>)
 800716a:	4a05      	ldr	r2, [pc, #20]	; (8007180 <prvInitialiseTaskLists+0x68>)
 800716c:	601a      	str	r2, [r3, #0]
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20002920 	.word	0x20002920
 800717c:	20002d80 	.word	0x20002d80
 8007180:	20002d94 	.word	0x20002d94
 8007184:	20002db0 	.word	0x20002db0
 8007188:	20002dc4 	.word	0x20002dc4
 800718c:	20002ddc 	.word	0x20002ddc
 8007190:	20002da8 	.word	0x20002da8
 8007194:	20002dac 	.word	0x20002dac

08007198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800719e:	e019      	b.n	80071d4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80071a0:	f7fe f8fa 	bl	8005398 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <prvCheckTasksWaitingTermination+0x50>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fd ff9b 	bl	80050ec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80071b6:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <prvCheckTasksWaitingTermination+0x54>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <prvCheckTasksWaitingTermination+0x54>)
 80071be:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80071c0:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071c8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80071ca:	f7fe f915 	bl	80053f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f848 	bl	8007264 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d4:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e1      	bne.n	80071a0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20002dc4 	.word	0x20002dc4
 80071ec:	20002df0 	.word	0x20002df0
 80071f0:	20002dd8 	.word	0x20002dd8

080071f4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007200:	e005      	b.n	800720e <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3301      	adds	r3, #1
 8007206:	607b      	str	r3, [r7, #4]
            ulCount++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2ba5      	cmp	r3, #165	; 0xa5
 8007214:	d0f5      	beq.n	8007202 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	089b      	lsrs	r3, r3, #2
 800721a:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	b29b      	uxth	r3, r3
    }
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <uxTaskGetStackHighWaterMark+0x14>
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <uxTaskGetStackHighWaterMark+0x34>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	e000      	b.n	8007242 <uxTaskGetStackHighWaterMark+0x16>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	613b      	str	r3, [r7, #16]
            {
                pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
            }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800724a:	6938      	ldr	r0, [r7, #16]
 800724c:	f7ff ffd2 	bl	80071f4 <prvTaskCheckFreeStackSpace>
 8007250:	4603      	mov	r3, r0
 8007252:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8007254:	68fb      	ldr	r3, [r7, #12]
    }
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	2000291c 	.word	0x2000291c

08007264 <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007272:	2b00      	cmp	r3, #0
 8007274:	d108      	bne.n	8007288 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	4618      	mov	r0, r3
 800727c:	f7fd fd8e 	bl	8004d9c <vPortFree>
                    vPortFree( pxTCB );
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fd fd8b 	bl	8004d9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007286:	e018      	b.n	80072ba <prvDeleteTCB+0x56>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800728e:	2b01      	cmp	r3, #1
 8007290:	d103      	bne.n	800729a <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fd fd82 	bl	8004d9c <vPortFree>
    }
 8007298:	e00f      	b.n	80072ba <prvDeleteTCB+0x56>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d00a      	beq.n	80072ba <prvDeleteTCB+0x56>
        __asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60fb      	str	r3, [r7, #12]
    }
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <prvDeleteTCB+0x54>
    }
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <prvResetNextTaskUnblockTime+0x30>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <prvResetNextTaskUnblockTime+0x34>)
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80072da:	e005      	b.n	80072e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <prvResetNextTaskUnblockTime+0x30>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <prvResetNextTaskUnblockTime+0x34>)
 80072e6:	6013      	str	r3, [r2, #0]
}
 80072e8:	bf00      	nop
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20002da8 	.word	0x20002da8
 80072f8:	20002e10 	.word	0x20002e10

080072fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <xTaskGetSchedulerState+0x34>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800730a:	2301      	movs	r3, #1
 800730c:	607b      	str	r3, [r7, #4]
 800730e:	e008      	b.n	8007322 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007310:	4b08      	ldr	r3, [pc, #32]	; (8007334 <xTaskGetSchedulerState+0x38>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007318:	2302      	movs	r3, #2
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	e001      	b.n	8007322 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800731e:	2300      	movs	r3, #0
 8007320:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007322:	687b      	ldr	r3, [r7, #4]
    }
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	20002dfc 	.word	0x20002dfc
 8007334:	20002e18 	.word	0x20002e18

08007338 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d05a      	beq.n	8007404 <xTaskPriorityInherit+0xcc>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007352:	4b2f      	ldr	r3, [pc, #188]	; (8007410 <xTaskPriorityInherit+0xd8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	429a      	cmp	r2, r3
 800735a:	d24a      	bcs.n	80073f2 <xTaskPriorityInherit+0xba>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	db06      	blt.n	8007372 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007364:	4b2a      	ldr	r3, [pc, #168]	; (8007410 <xTaskPriorityInherit+0xd8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6959      	ldr	r1, [r3, #20]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4a24      	ldr	r2, [pc, #144]	; (8007414 <xTaskPriorityInherit+0xdc>)
 8007384:	4413      	add	r3, r2
 8007386:	4299      	cmp	r1, r3
 8007388:	d126      	bne.n	80073d8 <xTaskPriorityInherit+0xa0>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	3304      	adds	r3, #4
 800738e:	4618      	mov	r0, r3
 8007390:	f7fd feac 	bl	80050ec <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007394:	4b1e      	ldr	r3, [pc, #120]	; (8007410 <xTaskPriorityInherit+0xd8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 fec3 	bl	800912c <SEGGER_SYSVIEW_OnTaskStartReady>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <xTaskPriorityInherit+0xe0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d903      	bls.n	80073ba <xTaskPriorityInherit+0x82>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	4a18      	ldr	r2, [pc, #96]	; (8007418 <xTaskPriorityInherit+0xe0>)
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4a13      	ldr	r2, [pc, #76]	; (8007414 <xTaskPriorityInherit+0xdc>)
 80073c8:	441a      	add	r2, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7fd fe2e 	bl	8005032 <vListInsertEnd>
 80073d6:	e004      	b.n	80073e2 <xTaskPriorityInherit+0xaa>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <xTaskPriorityInherit+0xd8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4619      	mov	r1, r3
 80073e6:	2049      	movs	r0, #73	; 0x49
 80073e8:	f001 f920 	bl	800862c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e008      	b.n	8007404 <xTaskPriorityInherit+0xcc>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f6:	4b06      	ldr	r3, [pc, #24]	; (8007410 <xTaskPriorityInherit+0xd8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d201      	bcs.n	8007404 <xTaskPriorityInherit+0xcc>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007404:	68fb      	ldr	r3, [r7, #12]
    }
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	2000291c 	.word	0x2000291c
 8007414:	20002920 	.word	0x20002920
 8007418:	20002df8 	.word	0x20002df8

0800741c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d05f      	beq.n	80074f2 <xTaskPriorityDisinherit+0xd6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007432:	4b32      	ldr	r3, [pc, #200]	; (80074fc <xTaskPriorityDisinherit+0xe0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	429a      	cmp	r2, r3
 800743a:	d00a      	beq.n	8007452 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	60fb      	str	r3, [r7, #12]
    }
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60bb      	str	r3, [r7, #8]
    }
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007474:	1e5a      	subs	r2, r3, #1
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	429a      	cmp	r2, r3
 8007484:	d035      	beq.n	80074f2 <xTaskPriorityDisinherit+0xd6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748a:	2b00      	cmp	r3, #0
 800748c:	d131      	bne.n	80074f2 <xTaskPriorityDisinherit+0xd6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3304      	adds	r3, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f7fd fe2a 	bl	80050ec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4619      	mov	r1, r3
 800749c:	204a      	movs	r0, #74	; 0x4a
 800749e:	f001 f8c5 	bl	800862c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fe37 	bl	800912c <SEGGER_SYSVIEW_OnTaskStartReady>
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <xTaskPriorityDisinherit+0xe4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d903      	bls.n	80074d2 <xTaskPriorityDisinherit+0xb6>
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	4a0c      	ldr	r2, [pc, #48]	; (8007500 <xTaskPriorityDisinherit+0xe4>)
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <xTaskPriorityDisinherit+0xe8>)
 80074e0:	441a      	add	r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f7fd fda2 	bl	8005032 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80074f2:	697b      	ldr	r3, [r7, #20]
    }
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	2000291c 	.word	0x2000291c
 8007500:	20002df8 	.word	0x20002df8
 8007504:	20002920 	.word	0x20002920

08007508 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007516:	2301      	movs	r3, #1
 8007518:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d073      	beq.n	8007608 <vTaskPriorityDisinheritAfterTimeout+0x100>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	60fb      	str	r3, [r7, #12]
    }
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d902      	bls.n	800754e <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	e002      	b.n	8007554 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007552:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	429a      	cmp	r2, r3
 800755c:	d054      	beq.n	8007608 <vTaskPriorityDisinheritAfterTimeout+0x100>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	429a      	cmp	r2, r3
 8007566:	d14f      	bne.n	8007608 <vTaskPriorityDisinheritAfterTimeout+0x100>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007568:	4b29      	ldr	r3, [pc, #164]	; (8007610 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	429a      	cmp	r2, r3
 8007570:	d10a      	bne.n	8007588 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60bb      	str	r3, [r7, #8]
    }
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4619      	mov	r1, r3
 800758c:	204a      	movs	r0, #74	; 0x4a
 800758e:	f001 f84d 	bl	800862c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	db04      	blt.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	6959      	ldr	r1, [r3, #20]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a15      	ldr	r2, [pc, #84]	; (8007614 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80075c0:	4413      	add	r3, r2
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d120      	bne.n	8007608 <vTaskPriorityDisinheritAfterTimeout+0x100>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fd fd8e 	bl	80050ec <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 fdaa 	bl	800912c <SEGGER_SYSVIEW_OnTaskStartReady>
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <vTaskPriorityDisinheritAfterTimeout+0xe4>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	4a0b      	ldr	r2, [pc, #44]	; (8007618 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4a06      	ldr	r2, [pc, #24]	; (8007614 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80075fa:	441a      	add	r2, r3
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7fd fd15 	bl	8005032 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007608:	bf00      	nop
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	2000291c 	.word	0x2000291c
 8007614:	20002920 	.word	0x20002920
 8007618:	20002df8 	.word	0x20002df8

0800761c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <pvTaskIncrementMutexHeldCount+0x24>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <pvTaskIncrementMutexHeldCount+0x24>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800762e:	3201      	adds	r2, #1
 8007630:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8007632:	4b03      	ldr	r3, [pc, #12]	; (8007640 <pvTaskIncrementMutexHeldCount+0x24>)
 8007634:	681b      	ldr	r3, [r3, #0]
    }
 8007636:	4618      	mov	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	2000291c 	.word	0x2000291c

08007644 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800764e:	4b27      	ldr	r3, [pc, #156]	; (80076ec <prvAddCurrentTaskToDelayedList+0xa8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007654:	4b26      	ldr	r3, [pc, #152]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xac>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3304      	adds	r3, #4
 800765a:	4618      	mov	r0, r3
 800765c:	f7fd fd46 	bl	80050ec <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007666:	d10a      	bne.n	800767e <prvAddCurrentTaskToDelayedList+0x3a>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766e:	4b20      	ldr	r3, [pc, #128]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xac>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	481f      	ldr	r0, [pc, #124]	; (80076f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007678:	f7fd fcdb 	bl	8005032 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800767c:	e032      	b.n	80076e4 <prvAddCurrentTaskToDelayedList+0xa0>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007686:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xac>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	429a      	cmp	r2, r3
 8007694:	d20f      	bcs.n	80076b6 <prvAddCurrentTaskToDelayedList+0x72>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8007696:	4b16      	ldr	r3, [pc, #88]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xac>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2104      	movs	r1, #4
 800769c:	4618      	mov	r0, r3
 800769e:	f001 fd87 	bl	80091b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a2:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xac>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7fd fce3 	bl	800507a <vListInsert>
}
 80076b4:	e016      	b.n	80076e4 <prvAddCurrentTaskToDelayedList+0xa0>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 80076b6:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xac>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2104      	movs	r1, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 fd77 	bl	80091b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c2:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb8>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xac>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7fd fcd3 	bl	800507a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <prvAddCurrentTaskToDelayedList+0xbc>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d202      	bcs.n	80076e4 <prvAddCurrentTaskToDelayedList+0xa0>
                        xNextTaskUnblockTime = xTimeToWake;
 80076de:	4a08      	ldr	r2, [pc, #32]	; (8007700 <prvAddCurrentTaskToDelayedList+0xbc>)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20002df4 	.word	0x20002df4
 80076f0:	2000291c 	.word	0x2000291c
 80076f4:	20002ddc 	.word	0x20002ddc
 80076f8:	20002dac 	.word	0x20002dac
 80076fc:	20002da8 	.word	0x20002da8
 8007700:	20002e10 	.word	0x20002e10

08007704 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	; 0x28
 8007708:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800770e:	f000 fb07 	bl	8007d20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <xTimerCreateTimerTask+0x80>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d021      	beq.n	800775e <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	60bb      	str	r3, [r7, #8]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007722:	1d3a      	adds	r2, r7, #4
 8007724:	f107 0108 	add.w	r1, r7, #8
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4618      	mov	r0, r3
 800772e:	f003 fa89 	bl	800ac44 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	9202      	str	r2, [sp, #8]
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	2302      	movs	r3, #2
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	2300      	movs	r3, #0
 8007742:	460a      	mov	r2, r1
 8007744:	4910      	ldr	r1, [pc, #64]	; (8007788 <xTimerCreateTimerTask+0x84>)
 8007746:	4811      	ldr	r0, [pc, #68]	; (800778c <xTimerCreateTimerTask+0x88>)
 8007748:	f7fe fef2 	bl	8006530 <xTaskCreateStatic>
 800774c:	4603      	mov	r3, r0
 800774e:	4a10      	ldr	r2, [pc, #64]	; (8007790 <xTimerCreateTimerTask+0x8c>)
 8007750:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <xTimerCreateTimerTask+0x8c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800775a:	2301      	movs	r3, #1
 800775c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xTimerCreateTimerTask+0x76>
        __asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	613b      	str	r3, [r7, #16]
    }
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xTimerCreateTimerTask+0x74>
        return xReturn;
 800777a:	697b      	ldr	r3, [r7, #20]
    }
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20002e4c 	.word	0x20002e4c
 8007788:	0800d520 	.word	0x0800d520
 800778c:	080078c9 	.word	0x080078c9
 8007790:	20002e50 	.word	0x20002e50

08007794 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	; 0x28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	623b      	str	r3, [r7, #32]
    }
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80077c2:	4b1a      	ldr	r3, [pc, #104]	; (800782c <xTimerGenericCommand+0x98>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d02a      	beq.n	8007820 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b05      	cmp	r3, #5
 80077da:	dc18      	bgt.n	800780e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077dc:	f7ff fd8e 	bl	80072fc <xTaskGetSchedulerState>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d109      	bne.n	80077fa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077e6:	4b11      	ldr	r3, [pc, #68]	; (800782c <xTimerGenericCommand+0x98>)
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	f107 0110 	add.w	r1, r7, #16
 80077ee:	2300      	movs	r3, #0
 80077f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f2:	f7fe f8df 	bl	80059b4 <xQueueGenericSend>
 80077f6:	6278      	str	r0, [r7, #36]	; 0x24
 80077f8:	e012      	b.n	8007820 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077fa:	4b0c      	ldr	r3, [pc, #48]	; (800782c <xTimerGenericCommand+0x98>)
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	f107 0110 	add.w	r1, r7, #16
 8007802:	2300      	movs	r3, #0
 8007804:	2200      	movs	r2, #0
 8007806:	f7fe f8d5 	bl	80059b4 <xQueueGenericSend>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24
 800780c:	e008      	b.n	8007820 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800780e:	4b07      	ldr	r3, [pc, #28]	; (800782c <xTimerGenericCommand+0x98>)
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	f107 0110 	add.w	r1, r7, #16
 8007816:	2300      	movs	r3, #0
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	f7fe f9f1 	bl	8005c00 <xQueueGenericSendFromISR>
 800781e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007822:	4618      	mov	r0, r3
 8007824:	3728      	adds	r7, #40	; 0x28
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20002e4c 	.word	0x20002e4c

08007830 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af02      	add	r7, sp, #8
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783a:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <prvProcessExpiredTimer+0x94>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f7fd fc4f 	bl	80050ec <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d022      	beq.n	80078a2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	18d1      	adds	r1, r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	6978      	ldr	r0, [r7, #20]
 800786a:	f000 f8d1 	bl	8007a10 <prvInsertTimerInActiveList>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01f      	beq.n	80078b4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007874:	2300      	movs	r3, #0
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	2100      	movs	r1, #0
 800787e:	6978      	ldr	r0, [r7, #20]
 8007880:	f7ff ff88 	bl	8007794 <xTimerGenericCommand>
 8007884:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d113      	bne.n	80078b4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	60fb      	str	r3, [r7, #12]
    }
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	4798      	blx	r3
    }
 80078bc:	bf00      	nop
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20002e44 	.word	0x20002e44

080078c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078d0:	f107 0308 	add.w	r3, r7, #8
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 f857 	bl	8007988 <prvGetNextExpireTime>
 80078da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4619      	mov	r1, r3
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f803 	bl	80078ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80078e6:	f000 f8d5 	bl	8007a94 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ea:	e7f1      	b.n	80078d0 <prvTimerTask+0x8>

080078ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80078f6:	f7ff f893 	bl	8006a20 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 f866 	bl	80079d0 <prvSampleTimeNow>
 8007904:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d130      	bne.n	800796e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <prvProcessTimerOrBlockTask+0x3c>
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	429a      	cmp	r2, r3
 8007918:	d806      	bhi.n	8007928 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800791a:	f7ff f88f 	bl	8006a3c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800791e:	68f9      	ldr	r1, [r7, #12]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ff85 	bl	8007830 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007926:	e024      	b.n	8007972 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <prvProcessTimerOrBlockTask+0x90>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <prvProcessTimerOrBlockTask+0x50>
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <prvProcessTimerOrBlockTask+0x52>
 800793c:	2300      	movs	r3, #0
 800793e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007940:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <prvProcessTimerOrBlockTask+0x94>)
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	4619      	mov	r1, r3
 800794e:	f7fe fdbb 	bl	80064c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007952:	f7ff f873 	bl	8006a3c <xTaskResumeAll>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <prvProcessTimerOrBlockTask+0x98>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	f3bf 8f6f 	isb	sy
    }
 800796c:	e001      	b.n	8007972 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800796e:	f7ff f865 	bl	8006a3c <xTaskResumeAll>
    }
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20002e48 	.word	0x20002e48
 8007980:	20002e4c 	.word	0x20002e4c
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007990:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <prvGetNextExpireTime+0x44>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <prvGetNextExpireTime+0x16>
 800799a:	2201      	movs	r2, #1
 800799c:	e000      	b.n	80079a0 <prvGetNextExpireTime+0x18>
 800799e:	2200      	movs	r2, #0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d105      	bne.n	80079b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <prvGetNextExpireTime+0x44>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	e001      	b.n	80079bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80079bc:	68fb      	ldr	r3, [r7, #12]
    }
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20002e44 	.word	0x20002e44

080079d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80079d8:	f7ff f8d2 	bl	8006b80 <xTaskGetTickCount>
 80079dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80079de:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <prvSampleTimeNow+0x3c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d205      	bcs.n	80079f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80079e8:	f000 f936 	bl	8007c58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e002      	b.n	80079fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80079fa:	4a04      	ldr	r2, [pc, #16]	; (8007a0c <prvSampleTimeNow+0x3c>)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007a00:	68fb      	ldr	r3, [r7, #12]
    }
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20002e54 	.word	0x20002e54

08007a10 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d812      	bhi.n	8007a5c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	1ad2      	subs	r2, r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d302      	bcc.n	8007a4a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e01b      	b.n	8007a82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a4a:	4b10      	ldr	r3, [pc, #64]	; (8007a8c <prvInsertTimerInActiveList+0x7c>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	4610      	mov	r0, r2
 8007a56:	f7fd fb10 	bl	800507a <vListInsert>
 8007a5a:	e012      	b.n	8007a82 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d206      	bcs.n	8007a72 <prvInsertTimerInActiveList+0x62>
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d302      	bcc.n	8007a72 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e007      	b.n	8007a82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a72:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <prvInsertTimerInActiveList+0x80>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7fd fafc 	bl	800507a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007a82:	697b      	ldr	r3, [r7, #20]
    }
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20002e48 	.word	0x20002e48
 8007a90:	20002e44 	.word	0x20002e44

08007a94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08e      	sub	sp, #56	; 0x38
 8007a98:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a9a:	e0ca      	b.n	8007c32 <prvProcessReceivedCommands+0x19e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da18      	bge.n	8007ad4 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007aa2:	1d3b      	adds	r3, r7, #4
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <prvProcessReceivedCommands+0x30>
        __asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	61fb      	str	r3, [r7, #28]
    }
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aca:	6850      	ldr	r0, [r2, #4]
 8007acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ace:	6892      	ldr	r2, [r2, #8]
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f2c0 80aa 	blt.w	8007c30 <prvProcessReceivedCommands+0x19c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	62bb      	str	r3, [r7, #40]	; 0x28

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	3304      	adds	r3, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fd fafd 	bl	80050ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007af2:	463b      	mov	r3, r7
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff ff6b 	bl	80079d0 <prvSampleTimeNow>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24

                switch( xMessage.xMessageID )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b09      	cmp	r3, #9
 8007b00:	f200 8097 	bhi.w	8007c32 <prvProcessReceivedCommands+0x19e>
 8007b04:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <prvProcessReceivedCommands+0x78>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b35 	.word	0x08007b35
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b35 	.word	0x08007b35
 8007b18:	08007ba9 	.word	0x08007ba9
 8007b1c:	08007bbd 	.word	0x08007bbd
 8007b20:	08007c07 	.word	0x08007c07
 8007b24:	08007b35 	.word	0x08007b35
 8007b28:	08007b35 	.word	0x08007b35
 8007b2c:	08007ba9 	.word	0x08007ba9
 8007b30:	08007bbd 	.word	0x08007bbd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b3a:	f043 0301 	orr.w	r3, r3, #1
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	18d1      	adds	r1, r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b54:	f7ff ff5c 	bl	8007a10 <prvInsertTimerInActiveList>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d069      	beq.n	8007c32 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b64:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d05e      	beq.n	8007c32 <prvProcessReceivedCommands+0x19e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	441a      	add	r2, r3
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	2300      	movs	r3, #0
 8007b82:	2100      	movs	r1, #0
 8007b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b86:	f7ff fe05 	bl	8007794 <xTimerGenericCommand>
 8007b8a:	6238      	str	r0, [r7, #32]
                                configASSERT( xResult );
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d14f      	bne.n	8007c32 <prvProcessReceivedCommands+0x19e>
        __asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	61bb      	str	r3, [r7, #24]
    }
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <prvProcessReceivedCommands+0x112>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bae:	f023 0301 	bic.w	r3, r3, #1
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007bba:	e03a      	b.n	8007c32 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <prvProcessReceivedCommands+0x15e>
        __asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	617b      	str	r3, [r7, #20]
    }
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	18d1      	adds	r1, r2, r3
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c00:	f7ff ff06 	bl	8007a10 <prvInsertTimerInActiveList>
                        break;
 8007c04:	e015      	b.n	8007c32 <prvProcessReceivedCommands+0x19e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d103      	bne.n	8007c1c <prvProcessReceivedCommands+0x188>
                                {
                                    vPortFree( pxTimer );
 8007c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c16:	f7fd f8c1 	bl	8004d9c <vPortFree>
 8007c1a:	e00a      	b.n	8007c32 <prvProcessReceivedCommands+0x19e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c22:	f023 0301 	bic.w	r3, r3, #1
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007c2e:	e000      	b.n	8007c32 <prvProcessReceivedCommands+0x19e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007c30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <prvProcessReceivedCommands+0x1c0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	1d39      	adds	r1, r7, #4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe f89e 	bl	8005d7c <xQueueReceive>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f47f af2a 	bne.w	8007a9c <prvProcessReceivedCommands+0x8>
        }
    }
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	3730      	adds	r7, #48	; 0x30
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20002e4c 	.word	0x20002e4c

08007c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c5e:	e048      	b.n	8007cf2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c60:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <prvSwitchTimerLists+0xc0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6a:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <prvSwitchTimerLists+0xc0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fd fa37 	bl	80050ec <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d02e      	beq.n	8007cf2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d90e      	bls.n	8007cc4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cb2:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <prvSwitchTimerLists+0xc0>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f7fd f9dc 	bl	800507a <vListInsert>
 8007cc2:	e016      	b.n	8007cf2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	2100      	movs	r1, #0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff fd60 	bl	8007794 <xTimerGenericCommand>
 8007cd4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	603b      	str	r3, [r7, #0]
    }
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cf2:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <prvSwitchTimerLists+0xc0>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1b1      	bne.n	8007c60 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007cfc:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <prvSwitchTimerLists+0xc0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <prvSwitchTimerLists+0xc4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a04      	ldr	r2, [pc, #16]	; (8007d18 <prvSwitchTimerLists+0xc0>)
 8007d08:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007d0a:	4a04      	ldr	r2, [pc, #16]	; (8007d1c <prvSwitchTimerLists+0xc4>)
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	6013      	str	r3, [r2, #0]
    }
 8007d10:	bf00      	nop
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20002e44 	.word	0x20002e44
 8007d1c:	20002e48 	.word	0x20002e48

08007d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007d26:	f7fd fb37 	bl	8005398 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007d2a:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <prvCheckForValidListAndQueue+0x60>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d120      	bne.n	8007d74 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8007d32:	4814      	ldr	r0, [pc, #80]	; (8007d84 <prvCheckForValidListAndQueue+0x64>)
 8007d34:	f7fd f950 	bl	8004fd8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007d38:	4813      	ldr	r0, [pc, #76]	; (8007d88 <prvCheckForValidListAndQueue+0x68>)
 8007d3a:	f7fd f94d 	bl	8004fd8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <prvCheckForValidListAndQueue+0x6c>)
 8007d40:	4a10      	ldr	r2, [pc, #64]	; (8007d84 <prvCheckForValidListAndQueue+0x64>)
 8007d42:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007d44:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <prvCheckForValidListAndQueue+0x70>)
 8007d46:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <prvCheckForValidListAndQueue+0x68>)
 8007d48:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <prvCheckForValidListAndQueue+0x74>)
 8007d50:	4a11      	ldr	r2, [pc, #68]	; (8007d98 <prvCheckForValidListAndQueue+0x78>)
 8007d52:	2110      	movs	r1, #16
 8007d54:	200a      	movs	r0, #10
 8007d56:	f7fd fcf7 	bl	8005748 <xQueueGenericCreateStatic>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4a08      	ldr	r2, [pc, #32]	; (8007d80 <prvCheckForValidListAndQueue+0x60>)
 8007d5e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007d60:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <prvCheckForValidListAndQueue+0x60>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <prvCheckForValidListAndQueue+0x60>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	490b      	ldr	r1, [pc, #44]	; (8007d9c <prvCheckForValidListAndQueue+0x7c>)
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fb78 	bl	8006464 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007d74:	f7fd fb40 	bl	80053f8 <vPortExitCritical>
    }
 8007d78:	bf00      	nop
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20002e4c 	.word	0x20002e4c
 8007d84:	20002e1c 	.word	0x20002e1c
 8007d88:	20002e30 	.word	0x20002e30
 8007d8c:	20002e44 	.word	0x20002e44
 8007d90:	20002e48 	.word	0x20002e48
 8007d94:	20002ef8 	.word	0x20002ef8
 8007d98:	20002e58 	.word	0x20002e58
 8007d9c:	0800d528 	.word	0x0800d528

08007da0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <_DoInit+0x98>)
 8007da8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2203      	movs	r2, #3
 8007dae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2203      	movs	r2, #3
 8007db4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a20      	ldr	r2, [pc, #128]	; (8007e3c <_DoInit+0x9c>)
 8007dba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <_DoInit+0xa0>)
 8007dc0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dc8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <_DoInit+0x9c>)
 8007de0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a17      	ldr	r2, [pc, #92]	; (8007e44 <_DoInit+0xa4>)
 8007de6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2210      	movs	r2, #16
 8007dec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3307      	adds	r3, #7
 8007e04:	4a10      	ldr	r2, [pc, #64]	; (8007e48 <_DoInit+0xa8>)
 8007e06:	6810      	ldr	r0, [r2, #0]
 8007e08:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007e0a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a0e      	ldr	r2, [pc, #56]	; (8007e4c <_DoInit+0xac>)
 8007e12:	6810      	ldr	r0, [r2, #0]
 8007e14:	6018      	str	r0, [r3, #0]
 8007e16:	8891      	ldrh	r1, [r2, #4]
 8007e18:	7992      	ldrb	r2, [r2, #6]
 8007e1a:	8099      	strh	r1, [r3, #4]
 8007e1c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007e1e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007e28:	f3bf 8f5f 	dmb	sy
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	20002f48 	.word	0x20002f48
 8007e3c:	0800d530 	.word	0x0800d530
 8007e40:	20002ff0 	.word	0x20002ff0
 8007e44:	20003ff0 	.word	0x20003ff0
 8007e48:	0800d53c 	.word	0x0800d53c
 8007e4c:	0800d540 	.word	0x0800d540

08007e50 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	; 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007e5c:	4b3e      	ldr	r3, [pc, #248]	; (8007f58 <SEGGER_RTT_ReadNoLock+0x108>)
 8007e5e:	623b      	str	r3, [r7, #32]
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <SEGGER_RTT_ReadNoLock+0x1e>
 8007e6a:	f7ff ff99 	bl	8007da0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4613      	mov	r3, r2
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	4413      	add	r3, r2
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	3360      	adds	r3, #96	; 0x60
 8007e7a:	4a37      	ldr	r2, [pc, #220]	; (8007f58 <SEGGER_RTT_ReadNoLock+0x108>)
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007e90:	2300      	movs	r3, #0
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d92b      	bls.n	8007ef4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	bf28      	it	cs
 8007eae:	4613      	movcs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	4413      	add	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	6939      	ldr	r1, [r7, #16]
 8007ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ec2:	f004 fe79 	bl	800cbb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8007ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d101      	bne.n	8007ef4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	bf28      	it	cs
 8007f04:	4613      	movcs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d019      	beq.n	8007f42 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	4413      	add	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	6939      	ldr	r1, [r7, #16]
 8007f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f1e:	f004 fe4b 	bl	800cbb8 <memcpy>
    NumBytesRead += NumBytesRem;
 8007f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	4413      	add	r3, r2
 8007f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	4413      	add	r3, r2
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	4413      	add	r3, r2
 8007f40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f4c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3730      	adds	r7, #48	; 0x30
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20002f48 	.word	0x20002f48

08007f5c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007f6a:	4b3d      	ldr	r3, [pc, #244]	; (8008060 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <SEGGER_RTT_AllocUpBuffer+0x20>
 8007f78:	f7ff ff12 	bl	8007da0 <_DoInit>
  SEGGER_RTT_LOCK();
 8007f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f80:	f04f 0120 	mov.w	r1, #32
 8007f84:	f381 8811 	msr	BASEPRI, r1
 8007f88:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007f8a:	4b35      	ldr	r3, [pc, #212]	; (8008060 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007f8c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8007f92:	6939      	ldr	r1, [r7, #16]
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	4613      	mov	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4413      	add	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	440b      	add	r3, r1
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d008      	beq.n	8007fbc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3301      	adds	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	dbeb      	blt.n	8007f92 <SEGGER_RTT_AllocUpBuffer+0x36>
 8007fba:	e000      	b.n	8007fbe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007fbc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	da3f      	bge.n	8008048 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007fc8:	6939      	ldr	r1, [r7, #16]
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	4613      	mov	r3, r2
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	4413      	add	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	440b      	add	r3, r1
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007fdc:	6939      	ldr	r1, [r7, #16]
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	440b      	add	r3, r1
 8007fec:	3304      	adds	r3, #4
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007ff2:	6939      	ldr	r1, [r7, #16]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	4413      	add	r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	440b      	add	r3, r1
 8008000:	3320      	adds	r3, #32
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008006:	6939      	ldr	r1, [r7, #16]
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	4613      	mov	r3, r2
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	4413      	add	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	440b      	add	r3, r1
 8008014:	3328      	adds	r3, #40	; 0x28
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800801a:	6939      	ldr	r1, [r7, #16]
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	4613      	mov	r3, r2
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4413      	add	r3, r2
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	440b      	add	r3, r1
 8008028:	3324      	adds	r3, #36	; 0x24
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800802e:	6939      	ldr	r1, [r7, #16]
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	4613      	mov	r3, r2
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	4413      	add	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	440b      	add	r3, r1
 800803c:	332c      	adds	r3, #44	; 0x2c
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008042:	f3bf 8f5f 	dmb	sy
 8008046:	e002      	b.n	800804e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800804c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008054:	69fb      	ldr	r3, [r7, #28]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20002f48 	.word	0x20002f48

08008064 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	; 0x28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008072:	4b21      	ldr	r3, [pc, #132]	; (80080f8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008074:	623b      	str	r3, [r7, #32]
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008080:	f7ff fe8e 	bl	8007da0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008084:	4b1c      	ldr	r3, [pc, #112]	; (80080f8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008086:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d82c      	bhi.n	80080e8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800808e:	f3ef 8311 	mrs	r3, BASEPRI
 8008092:	f04f 0120 	mov.w	r1, #32
 8008096:	f381 8811 	msr	BASEPRI, r1
 800809a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4613      	mov	r3, r2
 80080a0:	005b      	lsls	r3, r3, #1
 80080a2:	4413      	add	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	3360      	adds	r3, #96	; 0x60
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	4413      	add	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2200      	movs	r2, #0
 80080ca:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2200      	movs	r2, #0
 80080d0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80080d8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
 80080e6:	e002      	b.n	80080ee <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80080e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3728      	adds	r7, #40	; 0x28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20002f48 	.word	0x20002f48

080080fc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8008112:	e002      	b.n	800811a <_EncodeStr+0x1e>
      Len++;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	3301      	adds	r3, #1
 8008118:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4413      	add	r3, r2
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1f6      	bne.n	8008114 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d901      	bls.n	8008132 <_EncodeStr+0x36>
      Len = Limit;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2bfe      	cmp	r3, #254	; 0xfe
 8008136:	d806      	bhi.n	8008146 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	60fa      	str	r2, [r7, #12]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e011      	b.n	800816a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	60fa      	str	r2, [r7, #12]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	60fa      	str	r2, [r7, #12]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	b2d2      	uxtb	r2, r2
 800815a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	0a19      	lsrs	r1, r3, #8
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	60fa      	str	r2, [r7, #12]
 8008166:	b2ca      	uxtb	r2, r1
 8008168:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800816e:	e00a      	b.n	8008186 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	1c53      	adds	r3, r2, #1
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	1c59      	adds	r1, r3, #1
 800817a:	60f9      	str	r1, [r7, #12]
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	701a      	strb	r2, [r3, #0]
    n++;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	3301      	adds	r3, #1
 8008184:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	429a      	cmp	r2, r3
 800818c:	d3f0      	bcc.n	8008170 <_EncodeStr+0x74>
  }
  return pPayload;
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	4618      	mov	r0, r3
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3304      	adds	r3, #4
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80081ba:	4b36      	ldr	r3, [pc, #216]	; (8008294 <_HandleIncomingPacket+0xe0>)
 80081bc:	7e1b      	ldrb	r3, [r3, #24]
 80081be:	4618      	mov	r0, r3
 80081c0:	1cfb      	adds	r3, r7, #3
 80081c2:	2201      	movs	r2, #1
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7ff fe43 	bl	8007e50 <SEGGER_RTT_ReadNoLock>
 80081ca:	4603      	mov	r3, r0
 80081cc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dd54      	ble.n	800827e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d032      	beq.n	8008240 <_HandleIncomingPacket+0x8c>
 80081da:	2b80      	cmp	r3, #128	; 0x80
 80081dc:	dc42      	bgt.n	8008264 <_HandleIncomingPacket+0xb0>
 80081de:	2b07      	cmp	r3, #7
 80081e0:	dc16      	bgt.n	8008210 <_HandleIncomingPacket+0x5c>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd3e      	ble.n	8008264 <_HandleIncomingPacket+0xb0>
 80081e6:	3b01      	subs	r3, #1
 80081e8:	2b06      	cmp	r3, #6
 80081ea:	d83b      	bhi.n	8008264 <_HandleIncomingPacket+0xb0>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <_HandleIncomingPacket+0x40>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008217 	.word	0x08008217
 80081f8:	0800821d 	.word	0x0800821d
 80081fc:	08008223 	.word	0x08008223
 8008200:	08008229 	.word	0x08008229
 8008204:	0800822f 	.word	0x0800822f
 8008208:	08008235 	.word	0x08008235
 800820c:	0800823b 	.word	0x0800823b
 8008210:	2b7f      	cmp	r3, #127	; 0x7f
 8008212:	d036      	beq.n	8008282 <_HandleIncomingPacket+0xce>
 8008214:	e026      	b.n	8008264 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008216:	f000 fba7 	bl	8008968 <SEGGER_SYSVIEW_Start>
      break;
 800821a:	e037      	b.n	800828c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800821c:	f000 fc5e 	bl	8008adc <SEGGER_SYSVIEW_Stop>
      break;
 8008220:	e034      	b.n	800828c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008222:	f000 fe37 	bl	8008e94 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008226:	e031      	b.n	800828c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008228:	f000 fdfc 	bl	8008e24 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800822c:	e02e      	b.n	800828c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800822e:	f000 fc7b 	bl	8008b28 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008232:	e02b      	b.n	800828c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008234:	f001 f8ca 	bl	80093cc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008238:	e028      	b.n	800828c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800823a:	f001 f8a9 	bl	8009390 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800823e:	e025      	b.n	800828c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008240:	4b14      	ldr	r3, [pc, #80]	; (8008294 <_HandleIncomingPacket+0xe0>)
 8008242:	7e1b      	ldrb	r3, [r3, #24]
 8008244:	4618      	mov	r0, r3
 8008246:	1cfb      	adds	r3, r7, #3
 8008248:	2201      	movs	r2, #1
 800824a:	4619      	mov	r1, r3
 800824c:	f7ff fe00 	bl	8007e50 <SEGGER_RTT_ReadNoLock>
 8008250:	4603      	mov	r3, r0
 8008252:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dd15      	ble.n	8008286 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	4618      	mov	r0, r3
 800825e:	f001 f817 	bl	8009290 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008262:	e010      	b.n	8008286 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	b25b      	sxtb	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	da0e      	bge.n	800828a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <_HandleIncomingPacket+0xe0>)
 800826e:	7e1b      	ldrb	r3, [r3, #24]
 8008270:	4618      	mov	r0, r3
 8008272:	1cfb      	adds	r3, r7, #3
 8008274:	2201      	movs	r2, #1
 8008276:	4619      	mov	r1, r3
 8008278:	f7ff fdea 	bl	8007e50 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800827c:	e005      	b.n	800828a <_HandleIncomingPacket+0xd6>
    }
  }
 800827e:	bf00      	nop
 8008280:	e004      	b.n	800828c <_HandleIncomingPacket+0xd8>
      break;
 8008282:	bf00      	nop
 8008284:	e002      	b.n	800828c <_HandleIncomingPacket+0xd8>
      break;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <_HandleIncomingPacket+0xd8>
      break;
 800828a:	bf00      	nop
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20004408 	.word	0x20004408

08008298 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	; 0x30
 800829c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800829e:	2301      	movs	r3, #1
 80082a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80082a2:	1d3b      	adds	r3, r7, #4
 80082a4:	3301      	adds	r3, #1
 80082a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ac:	4b31      	ldr	r3, [pc, #196]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082b2:	e00b      	b.n	80082cc <_TrySendOverflowPacket+0x34>
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	1c59      	adds	r1, r3, #1
 80082bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	09db      	lsrs	r3, r3, #7
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	2b7f      	cmp	r3, #127	; 0x7f
 80082d0:	d8f0      	bhi.n	80082b4 <_TrySendOverflowPacket+0x1c>
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80082e2:	4b25      	ldr	r3, [pc, #148]	; (8008378 <_TrySendOverflowPacket+0xe0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80082e8:	4b22      	ldr	r3, [pc, #136]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	623b      	str	r3, [r7, #32]
 80082fa:	e00b      	b.n	8008314 <_TrySendOverflowPacket+0x7c>
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	1c59      	adds	r1, r3, #1
 8008304:	6279      	str	r1, [r7, #36]	; 0x24
 8008306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	09db      	lsrs	r3, r3, #7
 8008312:	623b      	str	r3, [r7, #32]
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	2b7f      	cmp	r3, #127	; 0x7f
 8008318:	d8f0      	bhi.n	80082fc <_TrySendOverflowPacket+0x64>
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	627a      	str	r2, [r7, #36]	; 0x24
 8008320:	6a3a      	ldr	r2, [r7, #32]
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800832a:	4b12      	ldr	r3, [pc, #72]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	4618      	mov	r0, r3
 8008330:	1d3b      	adds	r3, r7, #4
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	461a      	mov	r2, r3
 8008338:	1d3b      	adds	r3, r7, #4
 800833a:	4619      	mov	r1, r3
 800833c:	f7f7 ff58 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008340:	4603      	mov	r3, r0
 8008342:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d009      	beq.n	800835e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800834a:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008350:	4b08      	ldr	r3, [pc, #32]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	3b01      	subs	r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	e004      	b.n	8008368 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	3301      	adds	r3, #1
 8008364:	4a03      	ldr	r2, [pc, #12]	; (8008374 <_TrySendOverflowPacket+0xdc>)
 8008366:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008368:	693b      	ldr	r3, [r7, #16]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3730      	adds	r7, #48	; 0x30
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20004408 	.word	0x20004408
 8008378:	e0001004 	.word	0xe0001004

0800837c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	; 0x28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008388:	4b6c      	ldr	r3, [pc, #432]	; (800853c <_SendPacket+0x1c0>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d010      	beq.n	80083b2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008390:	4b6a      	ldr	r3, [pc, #424]	; (800853c <_SendPacket+0x1c0>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 80a3 	beq.w	80084e0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800839a:	4b68      	ldr	r3, [pc, #416]	; (800853c <_SendPacket+0x1c0>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d109      	bne.n	80083b6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80083a2:	f7ff ff79 	bl	8008298 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80083a6:	4b65      	ldr	r3, [pc, #404]	; (800853c <_SendPacket+0x1c0>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	f040 809a 	bne.w	80084e4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80083b0:	e001      	b.n	80083b6 <_SendPacket+0x3a>
    goto Send;
 80083b2:	bf00      	nop
 80083b4:	e000      	b.n	80083b8 <_SendPacket+0x3c>
Send:
 80083b6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b1f      	cmp	r3, #31
 80083bc:	d809      	bhi.n	80083d2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80083be:	4b5f      	ldr	r3, [pc, #380]	; (800853c <_SendPacket+0x1c0>)
 80083c0:	69da      	ldr	r2, [r3, #28]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f040 808b 	bne.w	80084e8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b17      	cmp	r3, #23
 80083d6:	d807      	bhi.n	80083e8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3b01      	subs	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e03d      	b.n	8008464 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2b7f      	cmp	r3, #127	; 0x7f
 80083f4:	d912      	bls.n	800841c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	09da      	lsrs	r2, r3, #7
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	3a01      	subs	r2, #1
 800840e:	60fa      	str	r2, [r7, #12]
 8008410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008414:	b2da      	uxtb	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	701a      	strb	r2, [r3, #0]
 800841a:	e006      	b.n	800842a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3b01      	subs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	b2da      	uxtb	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b7f      	cmp	r3, #127	; 0x7f
 800842e:	d912      	bls.n	8008456 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	09da      	lsrs	r2, r3, #7
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3b01      	subs	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	3a01      	subs	r2, #1
 8008448:	60fa      	str	r2, [r7, #12]
 800844a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800844e:	b2da      	uxtb	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	e006      	b.n	8008464 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3b01      	subs	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008464:	4b36      	ldr	r3, [pc, #216]	; (8008540 <_SendPacket+0x1c4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800846a:	4b34      	ldr	r3, [pc, #208]	; (800853c <_SendPacket+0x1c0>)
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	623b      	str	r3, [r7, #32]
 800847c:	e00b      	b.n	8008496 <_SendPacket+0x11a>
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	b2da      	uxtb	r2, r3
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	1c59      	adds	r1, r3, #1
 8008486:	6279      	str	r1, [r7, #36]	; 0x24
 8008488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800848c:	b2d2      	uxtb	r2, r2
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	09db      	lsrs	r3, r3, #7
 8008494:	623b      	str	r3, [r7, #32]
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	2b7f      	cmp	r3, #127	; 0x7f
 800849a:	d8f0      	bhi.n	800847e <_SendPacket+0x102>
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	627a      	str	r2, [r7, #36]	; 0x24
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80084ac:	4b23      	ldr	r3, [pc, #140]	; (800853c <_SendPacket+0x1c0>)
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	4618      	mov	r0, r3
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	68f9      	ldr	r1, [r7, #12]
 80084bc:	f7f7 fe98 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80084c0:	4603      	mov	r3, r0
 80084c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80084ca:	4a1c      	ldr	r2, [pc, #112]	; (800853c <_SendPacket+0x1c0>)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	60d3      	str	r3, [r2, #12]
 80084d0:	e00b      	b.n	80084ea <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80084d2:	4b1a      	ldr	r3, [pc, #104]	; (800853c <_SendPacket+0x1c0>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	3301      	adds	r3, #1
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	4b18      	ldr	r3, [pc, #96]	; (800853c <_SendPacket+0x1c0>)
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	e004      	b.n	80084ea <_SendPacket+0x16e>
    goto SendDone;
 80084e0:	bf00      	nop
 80084e2:	e002      	b.n	80084ea <_SendPacket+0x16e>
      goto SendDone;
 80084e4:	bf00      	nop
 80084e6:	e000      	b.n	80084ea <_SendPacket+0x16e>
      goto SendDone;
 80084e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80084ea:	4b14      	ldr	r3, [pc, #80]	; (800853c <_SendPacket+0x1c0>)
 80084ec:	7e1b      	ldrb	r3, [r3, #24]
 80084ee:	4619      	mov	r1, r3
 80084f0:	4a14      	ldr	r2, [pc, #80]	; (8008544 <_SendPacket+0x1c8>)
 80084f2:	460b      	mov	r3, r1
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	440b      	add	r3, r1
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	4413      	add	r3, r2
 80084fc:	336c      	adds	r3, #108	; 0x6c
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	4b0e      	ldr	r3, [pc, #56]	; (800853c <_SendPacket+0x1c0>)
 8008502:	7e1b      	ldrb	r3, [r3, #24]
 8008504:	4618      	mov	r0, r3
 8008506:	490f      	ldr	r1, [pc, #60]	; (8008544 <_SendPacket+0x1c8>)
 8008508:	4603      	mov	r3, r0
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	4403      	add	r3, r0
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	440b      	add	r3, r1
 8008512:	3370      	adds	r3, #112	; 0x70
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d00b      	beq.n	8008532 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <_SendPacket+0x1c0>)
 800851c:	789b      	ldrb	r3, [r3, #2]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d107      	bne.n	8008532 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <_SendPacket+0x1c0>)
 8008524:	2201      	movs	r2, #1
 8008526:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008528:	f7ff fe44 	bl	80081b4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800852c:	4b03      	ldr	r3, [pc, #12]	; (800853c <_SendPacket+0x1c0>)
 800852e:	2200      	movs	r2, #0
 8008530:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008532:	bf00      	nop
 8008534:	3728      	adds	r7, #40	; 0x28
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20004408 	.word	0x20004408
 8008540:	e0001004 	.word	0xe0001004
 8008544:	20002f48 	.word	0x20002f48

08008548 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af02      	add	r7, sp, #8
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008556:	2300      	movs	r3, #0
 8008558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800855c:	4917      	ldr	r1, [pc, #92]	; (80085bc <SEGGER_SYSVIEW_Init+0x74>)
 800855e:	4818      	ldr	r0, [pc, #96]	; (80085c0 <SEGGER_SYSVIEW_Init+0x78>)
 8008560:	f7ff fcfc 	bl	8007f5c <SEGGER_RTT_AllocUpBuffer>
 8008564:	4603      	mov	r3, r0
 8008566:	b2da      	uxtb	r2, r3
 8008568:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800856a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800856c:	4b15      	ldr	r3, [pc, #84]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800856e:	785a      	ldrb	r2, [r3, #1]
 8008570:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8008572:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008574:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8008576:	7e1b      	ldrb	r3, [r3, #24]
 8008578:	4618      	mov	r0, r3
 800857a:	2300      	movs	r3, #0
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	2308      	movs	r3, #8
 8008580:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <SEGGER_SYSVIEW_Init+0x80>)
 8008582:	490f      	ldr	r1, [pc, #60]	; (80085c0 <SEGGER_SYSVIEW_Init+0x78>)
 8008584:	f7ff fd6e 	bl	8008064 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008588:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800858a:	2200      	movs	r2, #0
 800858c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800858e:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <SEGGER_SYSVIEW_Init+0x84>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a0c      	ldr	r2, [pc, #48]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8008594:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8008596:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800859c:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80085a2:	4a08      	ldr	r2, [pc, #32]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80085a8:	4a06      	ldr	r2, [pc, #24]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <SEGGER_SYSVIEW_Init+0x7c>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	20004000 	.word	0x20004000
 80085c0:	0800d548 	.word	0x0800d548
 80085c4:	20004408 	.word	0x20004408
 80085c8:	20004400 	.word	0x20004400
 80085cc:	e0001004 	.word	0xe0001004

080085d0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80085d8:	4a04      	ldr	r2, [pc, #16]	; (80085ec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6113      	str	r3, [r2, #16]
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20004408 	.word	0x20004408

080085f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80085f8:	f3ef 8311 	mrs	r3, BASEPRI
 80085fc:	f04f 0120 	mov.w	r1, #32
 8008600:	f381 8811 	msr	BASEPRI, r1
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	4808      	ldr	r0, [pc, #32]	; (8008628 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008608:	f7ff fdc8 	bl	800819c <_PreparePacket>
 800860c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	68b8      	ldr	r0, [r7, #8]
 8008614:	f7ff feb2 	bl	800837c <_SendPacket>
  RECORD_END();
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f383 8811 	msr	BASEPRI, r3
}
 800861e:	bf00      	nop
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20004438 	.word	0x20004438

0800862c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008636:	f3ef 8311 	mrs	r3, BASEPRI
 800863a:	f04f 0120 	mov.w	r1, #32
 800863e:	f381 8811 	msr	BASEPRI, r1
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	4816      	ldr	r0, [pc, #88]	; (80086a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008646:	f7ff fda9 	bl	800819c <_PreparePacket>
 800864a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	e00b      	b.n	8008672 <SEGGER_SYSVIEW_RecordU32+0x46>
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	b2da      	uxtb	r2, r3
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	1c59      	adds	r1, r3, #1
 8008662:	61f9      	str	r1, [r7, #28]
 8008664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008668:	b2d2      	uxtb	r2, r2
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	09db      	lsrs	r3, r3, #7
 8008670:	61bb      	str	r3, [r7, #24]
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b7f      	cmp	r3, #127	; 0x7f
 8008676:	d8f0      	bhi.n	800865a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	61fa      	str	r2, [r7, #28]
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	6938      	ldr	r0, [r7, #16]
 800868e:	f7ff fe75 	bl	800837c <_SendPacket>
  RECORD_END();
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f383 8811 	msr	BASEPRI, r3
}
 8008698:	bf00      	nop
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20004438 	.word	0x20004438

080086a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08c      	sub	sp, #48	; 0x30
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80086b0:	f3ef 8311 	mrs	r3, BASEPRI
 80086b4:	f04f 0120 	mov.w	r1, #32
 80086b8:	f381 8811 	msr	BASEPRI, r1
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	4825      	ldr	r0, [pc, #148]	; (8008754 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80086c0:	f7ff fd6c 	bl	800819c <_PreparePacket>
 80086c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086d2:	e00b      	b.n	80086ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	1c59      	adds	r1, r3, #1
 80086dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80086de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	09db      	lsrs	r3, r3, #7
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b7f      	cmp	r3, #127	; 0x7f
 80086f0:	d8f0      	bhi.n	80086d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	623b      	str	r3, [r7, #32]
 800870a:	e00b      	b.n	8008724 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	b2da      	uxtb	r2, r3
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	1c59      	adds	r1, r3, #1
 8008714:	6279      	str	r1, [r7, #36]	; 0x24
 8008716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	701a      	strb	r2, [r3, #0]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	09db      	lsrs	r3, r3, #7
 8008722:	623b      	str	r3, [r7, #32]
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b7f      	cmp	r3, #127	; 0x7f
 8008728:	d8f0      	bhi.n	800870c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	627a      	str	r2, [r7, #36]	; 0x24
 8008730:	6a3a      	ldr	r2, [r7, #32]
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	6979      	ldr	r1, [r7, #20]
 800873e:	69b8      	ldr	r0, [r7, #24]
 8008740:	f7ff fe1c 	bl	800837c <_SendPacket>
  RECORD_END();
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f383 8811 	msr	BASEPRI, r3
}
 800874a:	bf00      	nop
 800874c:	3730      	adds	r7, #48	; 0x30
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20004438 	.word	0x20004438

08008758 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008758:	b580      	push	{r7, lr}
 800875a:	b08e      	sub	sp, #56	; 0x38
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8008766:	f3ef 8311 	mrs	r3, BASEPRI
 800876a:	f04f 0120 	mov.w	r1, #32
 800876e:	f381 8811 	msr	BASEPRI, r1
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	4832      	ldr	r0, [pc, #200]	; (8008840 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8008776:	f7ff fd11 	bl	800819c <_PreparePacket>
 800877a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	637b      	str	r3, [r7, #52]	; 0x34
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	633b      	str	r3, [r7, #48]	; 0x30
 8008788:	e00b      	b.n	80087a2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	b2da      	uxtb	r2, r3
 800878e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008790:	1c59      	adds	r1, r3, #1
 8008792:	6379      	str	r1, [r7, #52]	; 0x34
 8008794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	701a      	strb	r2, [r3, #0]
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	09db      	lsrs	r3, r3, #7
 80087a0:	633b      	str	r3, [r7, #48]	; 0x30
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	2b7f      	cmp	r3, #127	; 0x7f
 80087a6:	d8f0      	bhi.n	800878a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	637a      	str	r2, [r7, #52]	; 0x34
 80087ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b0:	b2d2      	uxtb	r2, r2
 80087b2:	701a      	strb	r2, [r3, #0]
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c0:	e00b      	b.n	80087da <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	1c59      	adds	r1, r3, #1
 80087ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80087cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	09db      	lsrs	r3, r3, #7
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	2b7f      	cmp	r3, #127	; 0x7f
 80087de:	d8f0      	bhi.n	80087c2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087e8:	b2d2      	uxtb	r2, r2
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	623b      	str	r3, [r7, #32]
 80087f8:	e00b      	b.n	8008812 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1c59      	adds	r1, r3, #1
 8008802:	6279      	str	r1, [r7, #36]	; 0x24
 8008804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008808:	b2d2      	uxtb	r2, r2
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	09db      	lsrs	r3, r3, #7
 8008810:	623b      	str	r3, [r7, #32]
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	2b7f      	cmp	r3, #127	; 0x7f
 8008816:	d8f0      	bhi.n	80087fa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	627a      	str	r2, [r7, #36]	; 0x24
 800881e:	6a3a      	ldr	r2, [r7, #32]
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	6979      	ldr	r1, [r7, #20]
 800882c:	69b8      	ldr	r0, [r7, #24]
 800882e:	f7ff fda5 	bl	800837c <_SendPacket>
  RECORD_END();
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	f383 8811 	msr	BASEPRI, r3
}
 8008838:	bf00      	nop
 800883a:	3738      	adds	r7, #56	; 0x38
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20004438 	.word	0x20004438

08008844 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b090      	sub	sp, #64	; 0x40
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008852:	f3ef 8311 	mrs	r3, BASEPRI
 8008856:	f04f 0120 	mov.w	r1, #32
 800885a:	f381 8811 	msr	BASEPRI, r1
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	4840      	ldr	r0, [pc, #256]	; (8008964 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008862:	f7ff fc9b 	bl	800819c <_PreparePacket>
 8008866:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	63bb      	str	r3, [r7, #56]	; 0x38
 8008874:	e00b      	b.n	800888e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	b2da      	uxtb	r2, r3
 800887a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887c:	1c59      	adds	r1, r3, #1
 800887e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008880:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008884:	b2d2      	uxtb	r2, r2
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	09db      	lsrs	r3, r3, #7
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	2b7f      	cmp	r3, #127	; 0x7f
 8008892:	d8f0      	bhi.n	8008876 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800889a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	701a      	strb	r2, [r3, #0]
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	633b      	str	r3, [r7, #48]	; 0x30
 80088ac:	e00b      	b.n	80088c6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b4:	1c59      	adds	r1, r3, #1
 80088b6:	6379      	str	r1, [r7, #52]	; 0x34
 80088b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088bc:	b2d2      	uxtb	r2, r2
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	09db      	lsrs	r3, r3, #7
 80088c4:	633b      	str	r3, [r7, #48]	; 0x30
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	2b7f      	cmp	r3, #127	; 0x7f
 80088ca:	d8f0      	bhi.n	80088ae <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	637a      	str	r2, [r7, #52]	; 0x34
 80088d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088e4:	e00b      	b.n	80088fe <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	1c59      	adds	r1, r3, #1
 80088ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80088f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	701a      	strb	r2, [r3, #0]
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	09db      	lsrs	r3, r3, #7
 80088fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	2b7f      	cmp	r3, #127	; 0x7f
 8008902:	d8f0      	bhi.n	80088e6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800890a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800891a:	623b      	str	r3, [r7, #32]
 800891c:	e00b      	b.n	8008936 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	1c59      	adds	r1, r3, #1
 8008926:	6279      	str	r1, [r7, #36]	; 0x24
 8008928:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800892c:	b2d2      	uxtb	r2, r2
 800892e:	701a      	strb	r2, [r3, #0]
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	09db      	lsrs	r3, r3, #7
 8008934:	623b      	str	r3, [r7, #32]
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	2b7f      	cmp	r3, #127	; 0x7f
 800893a:	d8f0      	bhi.n	800891e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	627a      	str	r2, [r7, #36]	; 0x24
 8008942:	6a3a      	ldr	r2, [r7, #32]
 8008944:	b2d2      	uxtb	r2, r2
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	6979      	ldr	r1, [r7, #20]
 8008950:	69b8      	ldr	r0, [r7, #24]
 8008952:	f7ff fd13 	bl	800837c <_SendPacket>
  RECORD_END();
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f383 8811 	msr	BASEPRI, r3
}
 800895c:	bf00      	nop
 800895e:	3740      	adds	r7, #64	; 0x40
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20004438 	.word	0x20004438

08008968 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b08c      	sub	sp, #48	; 0x30
 800896c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800896e:	4b58      	ldr	r3, [pc, #352]	; (8008ad0 <SEGGER_SYSVIEW_Start+0x168>)
 8008970:	2201      	movs	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008974:	f3ef 8311 	mrs	r3, BASEPRI
 8008978:	f04f 0120 	mov.w	r1, #32
 800897c:	f381 8811 	msr	BASEPRI, r1
 8008980:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008982:	4b53      	ldr	r3, [pc, #332]	; (8008ad0 <SEGGER_SYSVIEW_Start+0x168>)
 8008984:	785b      	ldrb	r3, [r3, #1]
 8008986:	220a      	movs	r2, #10
 8008988:	4952      	ldr	r1, [pc, #328]	; (8008ad4 <SEGGER_SYSVIEW_Start+0x16c>)
 800898a:	4618      	mov	r0, r3
 800898c:	f7f7 fc30 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8008996:	200a      	movs	r0, #10
 8008998:	f7ff fe2a 	bl	80085f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800899c:	f3ef 8311 	mrs	r3, BASEPRI
 80089a0:	f04f 0120 	mov.w	r1, #32
 80089a4:	f381 8811 	msr	BASEPRI, r1
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	484b      	ldr	r0, [pc, #300]	; (8008ad8 <SEGGER_SYSVIEW_Start+0x170>)
 80089ac:	f7ff fbf6 	bl	800819c <_PreparePacket>
 80089b0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ba:	4b45      	ldr	r3, [pc, #276]	; (8008ad0 <SEGGER_SYSVIEW_Start+0x168>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	62bb      	str	r3, [r7, #40]	; 0x28
 80089c0:	e00b      	b.n	80089da <SEGGER_SYSVIEW_Start+0x72>
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	1c59      	adds	r1, r3, #1
 80089ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80089cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089d0:	b2d2      	uxtb	r2, r2
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	09db      	lsrs	r3, r3, #7
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	2b7f      	cmp	r3, #127	; 0x7f
 80089de:	d8f0      	bhi.n	80089c2 <SEGGER_SYSVIEW_Start+0x5a>
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089e8:	b2d2      	uxtb	r2, r2
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
 80089f4:	4b36      	ldr	r3, [pc, #216]	; (8008ad0 <SEGGER_SYSVIEW_Start+0x168>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	623b      	str	r3, [r7, #32]
 80089fa:	e00b      	b.n	8008a14 <SEGGER_SYSVIEW_Start+0xac>
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	1c59      	adds	r1, r3, #1
 8008a04:	6279      	str	r1, [r7, #36]	; 0x24
 8008a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	09db      	lsrs	r3, r3, #7
 8008a12:	623b      	str	r3, [r7, #32]
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	2b7f      	cmp	r3, #127	; 0x7f
 8008a18:	d8f0      	bhi.n	80089fc <SEGGER_SYSVIEW_Start+0x94>
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	627a      	str	r2, [r7, #36]	; 0x24
 8008a20:	6a3a      	ldr	r2, [r7, #32]
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	4b28      	ldr	r3, [pc, #160]	; (8008ad0 <SEGGER_SYSVIEW_Start+0x168>)
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	e00b      	b.n	8008a4e <SEGGER_SYSVIEW_Start+0xe6>
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	1c59      	adds	r1, r3, #1
 8008a3e:	61f9      	str	r1, [r7, #28]
 8008a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	09db      	lsrs	r3, r3, #7
 8008a4c:	61bb      	str	r3, [r7, #24]
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b7f      	cmp	r3, #127	; 0x7f
 8008a52:	d8f0      	bhi.n	8008a36 <SEGGER_SYSVIEW_Start+0xce>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	61fa      	str	r2, [r7, #28]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	b2d2      	uxtb	r2, r2
 8008a5e:	701a      	strb	r2, [r3, #0]
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	e00b      	b.n	8008a86 <SEGGER_SYSVIEW_Start+0x11e>
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	1c59      	adds	r1, r3, #1
 8008a76:	6179      	str	r1, [r7, #20]
 8008a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a7c:	b2d2      	uxtb	r2, r2
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	09db      	lsrs	r3, r3, #7
 8008a84:	613b      	str	r3, [r7, #16]
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b7f      	cmp	r3, #127	; 0x7f
 8008a8a:	d8f0      	bhi.n	8008a6e <SEGGER_SYSVIEW_Start+0x106>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	617a      	str	r2, [r7, #20]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008a9c:	2218      	movs	r2, #24
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff fc6b 	bl	800837c <_SendPacket>
      RECORD_END();
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008aac:	4b08      	ldr	r3, [pc, #32]	; (8008ad0 <SEGGER_SYSVIEW_Start+0x168>)
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <SEGGER_SYSVIEW_Start+0x168>)
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008aba:	f000 f9eb 	bl	8008e94 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008abe:	f000 f9b1 	bl	8008e24 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008ac2:	f000 fc83 	bl	80093cc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008ac6:	bf00      	nop
 8008ac8:	3730      	adds	r7, #48	; 0x30
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20004408 	.word	0x20004408
 8008ad4:	0800d83c 	.word	0x0800d83c
 8008ad8:	20004438 	.word	0x20004438

08008adc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ae6:	f04f 0120 	mov.w	r1, #32
 8008aea:	f381 8811 	msr	BASEPRI, r1
 8008aee:	607b      	str	r3, [r7, #4]
 8008af0:	480b      	ldr	r0, [pc, #44]	; (8008b20 <SEGGER_SYSVIEW_Stop+0x44>)
 8008af2:	f7ff fb53 	bl	800819c <_PreparePacket>
 8008af6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008af8:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <SEGGER_SYSVIEW_Stop+0x48>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008b00:	220b      	movs	r2, #11
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6838      	ldr	r0, [r7, #0]
 8008b06:	f7ff fc39 	bl	800837c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008b0a:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <SEGGER_SYSVIEW_Stop+0x48>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f383 8811 	msr	BASEPRI, r3
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20004438 	.word	0x20004438
 8008b24:	20004408 	.word	0x20004408

08008b28 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08c      	sub	sp, #48	; 0x30
 8008b2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8008b32:	f04f 0120 	mov.w	r1, #32
 8008b36:	f381 8811 	msr	BASEPRI, r1
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	4845      	ldr	r0, [pc, #276]	; (8008c54 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008b3e:	f7ff fb2d 	bl	800819c <_PreparePacket>
 8008b42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b4c:	4b42      	ldr	r3, [pc, #264]	; (8008c58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b52:	e00b      	b.n	8008b6c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	1c59      	adds	r1, r3, #1
 8008b5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	09db      	lsrs	r3, r3, #7
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b70:	d8f0      	bhi.n	8008b54 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
 8008b86:	4b34      	ldr	r3, [pc, #208]	; (8008c58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	623b      	str	r3, [r7, #32]
 8008b8c:	e00b      	b.n	8008ba6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	1c59      	adds	r1, r3, #1
 8008b96:	6279      	str	r1, [r7, #36]	; 0x24
 8008b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	09db      	lsrs	r3, r3, #7
 8008ba4:	623b      	str	r3, [r7, #32]
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8008baa:	d8f0      	bhi.n	8008b8e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8008bb2:	6a3a      	ldr	r2, [r7, #32]
 8008bb4:	b2d2      	uxtb	r2, r2
 8008bb6:	701a      	strb	r2, [r3, #0]
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	61bb      	str	r3, [r7, #24]
 8008bc6:	e00b      	b.n	8008be0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	1c59      	adds	r1, r3, #1
 8008bd0:	61f9      	str	r1, [r7, #28]
 8008bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	09db      	lsrs	r3, r3, #7
 8008bde:	61bb      	str	r3, [r7, #24]
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	2b7f      	cmp	r3, #127	; 0x7f
 8008be4:	d8f0      	bhi.n	8008bc8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	61fa      	str	r2, [r7, #28]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	e00b      	b.n	8008c18 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	1c59      	adds	r1, r3, #1
 8008c08:	6179      	str	r1, [r7, #20]
 8008c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	701a      	strb	r2, [r3, #0]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	09db      	lsrs	r3, r3, #7
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c1c:	d8f0      	bhi.n	8008c00 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	617a      	str	r2, [r7, #20]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008c2e:	2218      	movs	r2, #24
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	68b8      	ldr	r0, [r7, #8]
 8008c34:	f7ff fba2 	bl	800837c <_SendPacket>
  RECORD_END();
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008c3e:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008c46:	4b04      	ldr	r3, [pc, #16]	; (8008c58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	4798      	blx	r3
  }
}
 8008c4c:	bf00      	nop
 8008c4e:	3730      	adds	r7, #48	; 0x30
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20004438 	.word	0x20004438
 8008c58:	20004408 	.word	0x20004408

08008c5c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b092      	sub	sp, #72	; 0x48
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008c64:	f3ef 8311 	mrs	r3, BASEPRI
 8008c68:	f04f 0120 	mov.w	r1, #32
 8008c6c:	f381 8811 	msr	BASEPRI, r1
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	486a      	ldr	r0, [pc, #424]	; (8008e1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008c74:	f7ff fa92 	bl	800819c <_PreparePacket>
 8008c78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	647b      	str	r3, [r7, #68]	; 0x44
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	4b66      	ldr	r3, [pc, #408]	; (8008e20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c8e:	e00b      	b.n	8008ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c96:	1c59      	adds	r1, r3, #1
 8008c98:	6479      	str	r1, [r7, #68]	; 0x44
 8008c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c9e:	b2d2      	uxtb	r2, r2
 8008ca0:	701a      	strb	r2, [r3, #0]
 8008ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca4:	09db      	lsrs	r3, r3, #7
 8008ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008caa:	2b7f      	cmp	r3, #127	; 0x7f
 8008cac:	d8f0      	bhi.n	8008c90 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	647a      	str	r2, [r7, #68]	; 0x44
 8008cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cc8:	e00b      	b.n	8008ce2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd0:	1c59      	adds	r1, r3, #1
 8008cd2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008cd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cd8:	b2d2      	uxtb	r2, r2
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	09db      	lsrs	r3, r3, #7
 8008ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8008ce6:	d8f0      	bhi.n	8008cca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cf0:	b2d2      	uxtb	r2, r2
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff f9fb 	bl	80080fc <_EncodeStr>
 8008d06:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008d08:	2209      	movs	r2, #9
 8008d0a:	68f9      	ldr	r1, [r7, #12]
 8008d0c:	6938      	ldr	r0, [r7, #16]
 8008d0e:	f7ff fb35 	bl	800837c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4b40      	ldr	r3, [pc, #256]	; (8008e20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	633b      	str	r3, [r7, #48]	; 0x30
 8008d26:	e00b      	b.n	8008d40 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	1c59      	adds	r1, r3, #1
 8008d30:	6379      	str	r1, [r7, #52]	; 0x34
 8008d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	701a      	strb	r2, [r3, #0]
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	09db      	lsrs	r3, r3, #7
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d42:	2b7f      	cmp	r3, #127	; 0x7f
 8008d44:	d8f0      	bhi.n	8008d28 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	637a      	str	r2, [r7, #52]	; 0x34
 8008d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4e:	b2d2      	uxtb	r2, r2
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d60:	e00b      	b.n	8008d7a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	1c59      	adds	r1, r3, #1
 8008d6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008d6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d70:	b2d2      	uxtb	r2, r2
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	09db      	lsrs	r3, r3, #7
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8008d7e:	d8f0      	bhi.n	8008d62 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	623b      	str	r3, [r7, #32]
 8008d9a:	e00b      	b.n	8008db4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	1c59      	adds	r1, r3, #1
 8008da4:	6279      	str	r1, [r7, #36]	; 0x24
 8008da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	09db      	lsrs	r3, r3, #7
 8008db2:	623b      	str	r3, [r7, #32]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	2b7f      	cmp	r3, #127	; 0x7f
 8008db8:	d8f0      	bhi.n	8008d9c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	627a      	str	r2, [r7, #36]	; 0x24
 8008dc0:	6a3a      	ldr	r2, [r7, #32]
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61bb      	str	r3, [r7, #24]
 8008dd2:	e00b      	b.n	8008dec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	1c59      	adds	r1, r3, #1
 8008ddc:	61f9      	str	r1, [r7, #28]
 8008dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	09db      	lsrs	r3, r3, #7
 8008dea:	61bb      	str	r3, [r7, #24]
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	2b7f      	cmp	r3, #127	; 0x7f
 8008df0:	d8f0      	bhi.n	8008dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	61fa      	str	r2, [r7, #28]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008e02:	2215      	movs	r2, #21
 8008e04:	68f9      	ldr	r1, [r7, #12]
 8008e06:	6938      	ldr	r0, [r7, #16]
 8008e08:	f7ff fab8 	bl	800837c <_SendPacket>
  RECORD_END();
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f383 8811 	msr	BASEPRI, r3
}
 8008e12:	bf00      	nop
 8008e14:	3748      	adds	r7, #72	; 0x48
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20004438 	.word	0x20004438
 8008e20:	20004408 	.word	0x20004408

08008e24 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008e28:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d008      	beq.n	8008e42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008e30:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008e3a:	4b03      	ldr	r3, [pc, #12]	; (8008e48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	4798      	blx	r3
  }
}
 8008e42:	bf00      	nop
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20004408 	.word	0x20004408

08008e4c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008e54:	f3ef 8311 	mrs	r3, BASEPRI
 8008e58:	f04f 0120 	mov.w	r1, #32
 8008e5c:	f381 8811 	msr	BASEPRI, r1
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	480b      	ldr	r0, [pc, #44]	; (8008e90 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008e64:	f7ff f99a 	bl	800819c <_PreparePacket>
 8008e68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008e6a:	2280      	movs	r2, #128	; 0x80
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	6938      	ldr	r0, [r7, #16]
 8008e70:	f7ff f944 	bl	80080fc <_EncodeStr>
 8008e74:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008e76:	220e      	movs	r2, #14
 8008e78:	68f9      	ldr	r1, [r7, #12]
 8008e7a:	6938      	ldr	r0, [r7, #16]
 8008e7c:	f7ff fa7e 	bl	800837c <_SendPacket>
  RECORD_END();
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f383 8811 	msr	BASEPRI, r3
}
 8008e86:	bf00      	nop
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20004438 	.word	0x20004438

08008e94 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008e94:	b590      	push	{r4, r7, lr}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008e9a:	4b15      	ldr	r3, [pc, #84]	; (8008ef0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01a      	beq.n	8008ed8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008ea2:	4b13      	ldr	r3, [pc, #76]	; (8008ef0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d015      	beq.n	8008ed8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008eac:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4798      	blx	r3
 8008eb4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008eb8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	000a      	movs	r2, r1
 8008ec8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008eca:	4613      	mov	r3, r2
 8008ecc:	461a      	mov	r2, r3
 8008ece:	4621      	mov	r1, r4
 8008ed0:	200d      	movs	r0, #13
 8008ed2:	f7ff fbe7 	bl	80086a4 <SEGGER_SYSVIEW_RecordU32x2>
 8008ed6:	e006      	b.n	8008ee6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008ed8:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4619      	mov	r1, r3
 8008ede:	200c      	movs	r0, #12
 8008ee0:	f7ff fba4 	bl	800862c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20004408 	.word	0x20004408
 8008ef4:	e0001004 	.word	0xe0001004

08008ef8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008efe:	f3ef 8311 	mrs	r3, BASEPRI
 8008f02:	f04f 0120 	mov.w	r1, #32
 8008f06:	f381 8811 	msr	BASEPRI, r1
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	4819      	ldr	r0, [pc, #100]	; (8008f74 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008f0e:	f7ff f945 	bl	800819c <_PreparePacket>
 8008f12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008f18:	4b17      	ldr	r3, [pc, #92]	; (8008f78 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f20:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	613b      	str	r3, [r7, #16]
 8008f2a:	e00b      	b.n	8008f44 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	6179      	str	r1, [r7, #20]
 8008f36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	09db      	lsrs	r3, r3, #7
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b7f      	cmp	r3, #127	; 0x7f
 8008f48:	d8f0      	bhi.n	8008f2c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	617a      	str	r2, [r7, #20]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	68b8      	ldr	r0, [r7, #8]
 8008f60:	f7ff fa0c 	bl	800837c <_SendPacket>
  RECORD_END();
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f383 8811 	msr	BASEPRI, r3
}
 8008f6a:	bf00      	nop
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20004438 	.word	0x20004438
 8008f78:	e000ed04 	.word	0xe000ed04

08008f7c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008f82:	f3ef 8311 	mrs	r3, BASEPRI
 8008f86:	f04f 0120 	mov.w	r1, #32
 8008f8a:	f381 8811 	msr	BASEPRI, r1
 8008f8e:	607b      	str	r3, [r7, #4]
 8008f90:	4807      	ldr	r0, [pc, #28]	; (8008fb0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008f92:	f7ff f903 	bl	800819c <_PreparePacket>
 8008f96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008f98:	2203      	movs	r2, #3
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6838      	ldr	r0, [r7, #0]
 8008f9e:	f7ff f9ed 	bl	800837c <_SendPacket>
  RECORD_END();
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f383 8811 	msr	BASEPRI, r3
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20004438 	.word	0x20004438

08008fb4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008fba:	f3ef 8311 	mrs	r3, BASEPRI
 8008fbe:	f04f 0120 	mov.w	r1, #32
 8008fc2:	f381 8811 	msr	BASEPRI, r1
 8008fc6:	607b      	str	r3, [r7, #4]
 8008fc8:	4807      	ldr	r0, [pc, #28]	; (8008fe8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008fca:	f7ff f8e7 	bl	800819c <_PreparePacket>
 8008fce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008fd0:	2212      	movs	r2, #18
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6838      	ldr	r0, [r7, #0]
 8008fd6:	f7ff f9d1 	bl	800837c <_SendPacket>
  RECORD_END();
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f383 8811 	msr	BASEPRI, r3
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20004438 	.word	0x20004438

08008fec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ff6:	f04f 0120 	mov.w	r1, #32
 8008ffa:	f381 8811 	msr	BASEPRI, r1
 8008ffe:	607b      	str	r3, [r7, #4]
 8009000:	4807      	ldr	r0, [pc, #28]	; (8009020 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009002:	f7ff f8cb 	bl	800819c <_PreparePacket>
 8009006:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009008:	2211      	movs	r2, #17
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6838      	ldr	r0, [r7, #0]
 800900e:	f7ff f9b5 	bl	800837c <_SendPacket>
  RECORD_END();
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f383 8811 	msr	BASEPRI, r3
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20004438 	.word	0x20004438

08009024 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800902c:	f3ef 8311 	mrs	r3, BASEPRI
 8009030:	f04f 0120 	mov.w	r1, #32
 8009034:	f381 8811 	msr	BASEPRI, r1
 8009038:	617b      	str	r3, [r7, #20]
 800903a:	4819      	ldr	r0, [pc, #100]	; (80090a0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800903c:	f7ff f8ae 	bl	800819c <_PreparePacket>
 8009040:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009046:	4b17      	ldr	r3, [pc, #92]	; (80090a4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	e00b      	b.n	8009072 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	1c59      	adds	r1, r3, #1
 8009062:	61f9      	str	r1, [r7, #28]
 8009064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009068:	b2d2      	uxtb	r2, r2
 800906a:	701a      	strb	r2, [r3, #0]
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	09db      	lsrs	r3, r3, #7
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2b7f      	cmp	r3, #127	; 0x7f
 8009076:	d8f0      	bhi.n	800905a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	61fa      	str	r2, [r7, #28]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009088:	2208      	movs	r2, #8
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	6938      	ldr	r0, [r7, #16]
 800908e:	f7ff f975 	bl	800837c <_SendPacket>
  RECORD_END();
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f383 8811 	msr	BASEPRI, r3
}
 8009098:	bf00      	nop
 800909a:	3720      	adds	r7, #32
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20004438 	.word	0x20004438
 80090a4:	20004408 	.word	0x20004408

080090a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80090b0:	f3ef 8311 	mrs	r3, BASEPRI
 80090b4:	f04f 0120 	mov.w	r1, #32
 80090b8:	f381 8811 	msr	BASEPRI, r1
 80090bc:	617b      	str	r3, [r7, #20]
 80090be:	4819      	ldr	r0, [pc, #100]	; (8009124 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80090c0:	f7ff f86c 	bl	800819c <_PreparePacket>
 80090c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80090ca:	4b17      	ldr	r3, [pc, #92]	; (8009128 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	61bb      	str	r3, [r7, #24]
 80090dc:	e00b      	b.n	80090f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	1c59      	adds	r1, r3, #1
 80090e6:	61f9      	str	r1, [r7, #28]
 80090e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090ec:	b2d2      	uxtb	r2, r2
 80090ee:	701a      	strb	r2, [r3, #0]
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	09db      	lsrs	r3, r3, #7
 80090f4:	61bb      	str	r3, [r7, #24]
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	2b7f      	cmp	r3, #127	; 0x7f
 80090fa:	d8f0      	bhi.n	80090de <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	61fa      	str	r2, [r7, #28]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	b2d2      	uxtb	r2, r2
 8009106:	701a      	strb	r2, [r3, #0]
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800910c:	2204      	movs	r2, #4
 800910e:	68f9      	ldr	r1, [r7, #12]
 8009110:	6938      	ldr	r0, [r7, #16]
 8009112:	f7ff f933 	bl	800837c <_SendPacket>
  RECORD_END();
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f383 8811 	msr	BASEPRI, r3
}
 800911c:	bf00      	nop
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	20004438 	.word	0x20004438
 8009128:	20004408 	.word	0x20004408

0800912c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009134:	f3ef 8311 	mrs	r3, BASEPRI
 8009138:	f04f 0120 	mov.w	r1, #32
 800913c:	f381 8811 	msr	BASEPRI, r1
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	4819      	ldr	r0, [pc, #100]	; (80091a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009144:	f7ff f82a 	bl	800819c <_PreparePacket>
 8009148:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800914e:	4b17      	ldr	r3, [pc, #92]	; (80091ac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	61fb      	str	r3, [r7, #28]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	61bb      	str	r3, [r7, #24]
 8009160:	e00b      	b.n	800917a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	b2da      	uxtb	r2, r3
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	1c59      	adds	r1, r3, #1
 800916a:	61f9      	str	r1, [r7, #28]
 800916c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	09db      	lsrs	r3, r3, #7
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b7f      	cmp	r3, #127	; 0x7f
 800917e:	d8f0      	bhi.n	8009162 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	61fa      	str	r2, [r7, #28]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	701a      	strb	r2, [r3, #0]
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009190:	2206      	movs	r2, #6
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	6938      	ldr	r0, [r7, #16]
 8009196:	f7ff f8f1 	bl	800837c <_SendPacket>
  RECORD_END();
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f383 8811 	msr	BASEPRI, r3
}
 80091a0:	bf00      	nop
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20004438 	.word	0x20004438
 80091ac:	20004408 	.word	0x20004408

080091b0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08a      	sub	sp, #40	; 0x28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80091ba:	f3ef 8311 	mrs	r3, BASEPRI
 80091be:	f04f 0120 	mov.w	r1, #32
 80091c2:	f381 8811 	msr	BASEPRI, r1
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	4827      	ldr	r0, [pc, #156]	; (8009268 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80091ca:	f7fe ffe7 	bl	800819c <_PreparePacket>
 80091ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	623b      	str	r3, [r7, #32]
 80091e6:	e00b      	b.n	8009200 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	1c59      	adds	r1, r3, #1
 80091f0:	6279      	str	r1, [r7, #36]	; 0x24
 80091f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	09db      	lsrs	r3, r3, #7
 80091fe:	623b      	str	r3, [r7, #32]
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2b7f      	cmp	r3, #127	; 0x7f
 8009204:	d8f0      	bhi.n	80091e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	627a      	str	r2, [r7, #36]	; 0x24
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	61fb      	str	r3, [r7, #28]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	e00b      	b.n	8009238 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	1c59      	adds	r1, r3, #1
 8009228:	61f9      	str	r1, [r7, #28]
 800922a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800922e:	b2d2      	uxtb	r2, r2
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	09db      	lsrs	r3, r3, #7
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	2b7f      	cmp	r3, #127	; 0x7f
 800923c:	d8f0      	bhi.n	8009220 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	61fa      	str	r2, [r7, #28]
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800924e:	2207      	movs	r2, #7
 8009250:	68f9      	ldr	r1, [r7, #12]
 8009252:	6938      	ldr	r0, [r7, #16]
 8009254:	f7ff f892 	bl	800837c <_SendPacket>
  RECORD_END();
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f383 8811 	msr	BASEPRI, r3
}
 800925e:	bf00      	nop
 8009260:	3728      	adds	r7, #40	; 0x28
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20004438 	.word	0x20004438
 800926c:	20004408 	.word	0x20004408

08009270 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009278:	4b04      	ldr	r3, [pc, #16]	; (800928c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	1ad3      	subs	r3, r2, r3
}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	20004408 	.word	0x20004408

08009290 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009290:	b580      	push	{r7, lr}
 8009292:	b08c      	sub	sp, #48	; 0x30
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800929a:	4b3b      	ldr	r3, [pc, #236]	; (8009388 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d06d      	beq.n	800937e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80092a2:	4b39      	ldr	r3, [pc, #228]	; (8009388 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80092a8:	2300      	movs	r3, #0
 80092aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80092ac:	e008      	b.n	80092c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80092ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092bc:	3301      	adds	r3, #1
 80092be:	62bb      	str	r3, [r7, #40]	; 0x28
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d3f2      	bcc.n	80092ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80092c8:	e000      	b.n	80092cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80092ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d055      	beq.n	800937e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80092d2:	f3ef 8311 	mrs	r3, BASEPRI
 80092d6:	f04f 0120 	mov.w	r1, #32
 80092da:	f381 8811 	msr	BASEPRI, r1
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	482a      	ldr	r0, [pc, #168]	; (800938c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80092e2:	f7fe ff5b 	bl	800819c <_PreparePacket>
 80092e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	627b      	str	r3, [r7, #36]	; 0x24
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	623b      	str	r3, [r7, #32]
 80092f4:	e00b      	b.n	800930e <SEGGER_SYSVIEW_SendModule+0x7e>
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	1c59      	adds	r1, r3, #1
 80092fe:	6279      	str	r1, [r7, #36]	; 0x24
 8009300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	701a      	strb	r2, [r3, #0]
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	09db      	lsrs	r3, r3, #7
 800930c:	623b      	str	r3, [r7, #32]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	2b7f      	cmp	r3, #127	; 0x7f
 8009312:	d8f0      	bhi.n	80092f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	627a      	str	r2, [r7, #36]	; 0x24
 800931a:	6a3a      	ldr	r2, [r7, #32]
 800931c:	b2d2      	uxtb	r2, r2
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	e00b      	b.n	8009348 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	b2da      	uxtb	r2, r3
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	1c59      	adds	r1, r3, #1
 8009338:	61f9      	str	r1, [r7, #28]
 800933a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	09db      	lsrs	r3, r3, #7
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b7f      	cmp	r3, #127	; 0x7f
 800934c:	d8f0      	bhi.n	8009330 <SEGGER_SYSVIEW_SendModule+0xa0>
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	61fa      	str	r2, [r7, #28]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2280      	movs	r2, #128	; 0x80
 8009364:	4619      	mov	r1, r3
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7fe fec8 	bl	80080fc <_EncodeStr>
 800936c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800936e:	2216      	movs	r2, #22
 8009370:	68f9      	ldr	r1, [r7, #12]
 8009372:	6938      	ldr	r0, [r7, #16]
 8009374:	f7ff f802 	bl	800837c <_SendPacket>
      RECORD_END();
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800937e:	bf00      	nop
 8009380:	3730      	adds	r7, #48	; 0x30
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20004430 	.word	0x20004430
 800938c:	20004438 	.word	0x20004438

08009390 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009396:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00f      	beq.n	80093be <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800939e:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f2      	bne.n	80093a4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20004430 	.word	0x20004430

080093cc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80093d2:	f3ef 8311 	mrs	r3, BASEPRI
 80093d6:	f04f 0120 	mov.w	r1, #32
 80093da:	f381 8811 	msr	BASEPRI, r1
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	4817      	ldr	r0, [pc, #92]	; (8009440 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80093e2:	f7fe fedb 	bl	800819c <_PreparePacket>
 80093e6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	4b14      	ldr	r3, [pc, #80]	; (8009444 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	613b      	str	r3, [r7, #16]
 80093f6:	e00b      	b.n	8009410 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	1c59      	adds	r1, r3, #1
 8009400:	6179      	str	r1, [r7, #20]
 8009402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009406:	b2d2      	uxtb	r2, r2
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	09db      	lsrs	r3, r3, #7
 800940e:	613b      	str	r3, [r7, #16]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	2b7f      	cmp	r3, #127	; 0x7f
 8009414:	d8f0      	bhi.n	80093f8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	617a      	str	r2, [r7, #20]
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	701a      	strb	r2, [r3, #0]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009426:	221b      	movs	r2, #27
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	68b8      	ldr	r0, [r7, #8]
 800942c:	f7fe ffa6 	bl	800837c <_SendPacket>
  RECORD_END();
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f383 8811 	msr	BASEPRI, r3
}
 8009436:	bf00      	nop
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20004438 	.word	0x20004438
 8009444:	20004434 	.word	0x20004434

08009448 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b08a      	sub	sp, #40	; 0x28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009450:	f3ef 8311 	mrs	r3, BASEPRI
 8009454:	f04f 0120 	mov.w	r1, #32
 8009458:	f381 8811 	msr	BASEPRI, r1
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	4827      	ldr	r0, [pc, #156]	; (80094fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8009460:	f7fe fe9c 	bl	800819c <_PreparePacket>
 8009464:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009466:	2280      	movs	r2, #128	; 0x80
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f7fe fe46 	bl	80080fc <_EncodeStr>
 8009470:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
 8009476:	2301      	movs	r3, #1
 8009478:	623b      	str	r3, [r7, #32]
 800947a:	e00b      	b.n	8009494 <SEGGER_SYSVIEW_Warn+0x4c>
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	b2da      	uxtb	r2, r3
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	1c59      	adds	r1, r3, #1
 8009484:	6279      	str	r1, [r7, #36]	; 0x24
 8009486:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	09db      	lsrs	r3, r3, #7
 8009492:	623b      	str	r3, [r7, #32]
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	2b7f      	cmp	r3, #127	; 0x7f
 8009498:	d8f0      	bhi.n	800947c <SEGGER_SYSVIEW_Warn+0x34>
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	627a      	str	r2, [r7, #36]	; 0x24
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	61fb      	str	r3, [r7, #28]
 80094ae:	2300      	movs	r3, #0
 80094b0:	61bb      	str	r3, [r7, #24]
 80094b2:	e00b      	b.n	80094cc <SEGGER_SYSVIEW_Warn+0x84>
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	1c59      	adds	r1, r3, #1
 80094bc:	61f9      	str	r1, [r7, #28]
 80094be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	09db      	lsrs	r3, r3, #7
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b7f      	cmp	r3, #127	; 0x7f
 80094d0:	d8f0      	bhi.n	80094b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	61fa      	str	r2, [r7, #28]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80094e2:	221a      	movs	r2, #26
 80094e4:	68f9      	ldr	r1, [r7, #12]
 80094e6:	6938      	ldr	r0, [r7, #16]
 80094e8:	f7fe ff48 	bl	800837c <_SendPacket>
  RECORD_END();
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f383 8811 	msr	BASEPRI, r3
}
 80094f2:	bf00      	nop
 80094f4:	3728      	adds	r7, #40	; 0x28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20004438 	.word	0x20004438

08009500 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009504:	4803      	ldr	r0, [pc, #12]	; (8009514 <_cbSendSystemDesc+0x14>)
 8009506:	f7ff fca1 	bl	8008e4c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800950a:	4803      	ldr	r0, [pc, #12]	; (8009518 <_cbSendSystemDesc+0x18>)
 800950c:	f7ff fc9e 	bl	8008e4c <SEGGER_SYSVIEW_SendSysDesc>
}
 8009510:	bf00      	nop
 8009512:	bd80      	pop	{r7, pc}
 8009514:	0800d550 	.word	0x0800d550
 8009518:	0800d584 	.word	0x0800d584

0800951c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009520:	4b06      	ldr	r3, [pc, #24]	; (800953c <SEGGER_SYSVIEW_Conf+0x20>)
 8009522:	6818      	ldr	r0, [r3, #0]
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <SEGGER_SYSVIEW_Conf+0x20>)
 8009526:	6819      	ldr	r1, [r3, #0]
 8009528:	4b05      	ldr	r3, [pc, #20]	; (8009540 <SEGGER_SYSVIEW_Conf+0x24>)
 800952a:	4a06      	ldr	r2, [pc, #24]	; (8009544 <SEGGER_SYSVIEW_Conf+0x28>)
 800952c:	f7ff f80c 	bl	8008548 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009530:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009534:	f7ff f84c 	bl	80085d0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8009538:	bf00      	nop
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20000010 	.word	0x20000010
 8009540:	08009501 	.word	0x08009501
 8009544:	0800d848 	.word	0x0800d848

08009548 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954a:	b085      	sub	sp, #20
 800954c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800954e:	2300      	movs	r3, #0
 8009550:	607b      	str	r3, [r7, #4]
 8009552:	e048      	b.n	80095e6 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8009554:	4929      	ldr	r1, [pc, #164]	; (80095fc <_cbSendTaskList+0xb4>)
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4618      	mov	r0, r3
 8009566:	f7fd fe61 	bl	800722c <uxTaskGetStackHighWaterMark>
 800956a:	4601      	mov	r1, r0
 800956c:	4823      	ldr	r0, [pc, #140]	; (80095fc <_cbSendTaskList+0xb4>)
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4403      	add	r3, r0
 800957a:	3310      	adds	r3, #16
 800957c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800957e:	491f      	ldr	r1, [pc, #124]	; (80095fc <_cbSendTaskList+0xb4>)
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	491b      	ldr	r1, [pc, #108]	; (80095fc <_cbSendTaskList+0xb4>)
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	3304      	adds	r3, #4
 800959e:	6819      	ldr	r1, [r3, #0]
 80095a0:	4c16      	ldr	r4, [pc, #88]	; (80095fc <_cbSendTaskList+0xb4>)
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4423      	add	r3, r4
 80095ae:	3308      	adds	r3, #8
 80095b0:	681c      	ldr	r4, [r3, #0]
 80095b2:	4d12      	ldr	r5, [pc, #72]	; (80095fc <_cbSendTaskList+0xb4>)
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	442b      	add	r3, r5
 80095c0:	330c      	adds	r3, #12
 80095c2:	681d      	ldr	r5, [r3, #0]
 80095c4:	4e0d      	ldr	r6, [pc, #52]	; (80095fc <_cbSendTaskList+0xb4>)
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4433      	add	r3, r6
 80095d2:	3310      	adds	r3, #16
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	462b      	mov	r3, r5
 80095da:	4622      	mov	r2, r4
 80095dc:	f000 f8be 	bl	800975c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3301      	adds	r3, #1
 80095e4:	607b      	str	r3, [r7, #4]
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <_cbSendTaskList+0xb8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d3b1      	bcc.n	8009554 <_cbSendTaskList+0xc>
  }
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fa:	bf00      	nop
 80095fc:	2000451c 	.word	0x2000451c
 8009600:	200045bc 	.word	0x200045bc

08009604 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009608:	b082      	sub	sp, #8
 800960a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800960c:	f7fd fac8 	bl	8006ba0 <xTaskGetTickCountFromISR>
 8009610:	4603      	mov	r3, r0
 8009612:	2200      	movs	r2, #0
 8009614:	469a      	mov	sl, r3
 8009616:	4693      	mov	fp, r2
 8009618:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800961c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	f04f 0a00 	mov.w	sl, #0
 8009628:	f04f 0b00 	mov.w	fp, #0
 800962c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009630:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009634:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009638:	4652      	mov	r2, sl
 800963a:	465b      	mov	r3, fp
 800963c:	1a14      	subs	r4, r2, r0
 800963e:	eb63 0501 	sbc.w	r5, r3, r1
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	f04f 0300 	mov.w	r3, #0
 800964a:	00ab      	lsls	r3, r5, #2
 800964c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009650:	00a2      	lsls	r2, r4, #2
 8009652:	4614      	mov	r4, r2
 8009654:	461d      	mov	r5, r3
 8009656:	eb14 0800 	adds.w	r8, r4, r0
 800965a:	eb45 0901 	adc.w	r9, r5, r1
 800965e:	f04f 0200 	mov.w	r2, #0
 8009662:	f04f 0300 	mov.w	r3, #0
 8009666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800966a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800966e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009672:	4690      	mov	r8, r2
 8009674:	4699      	mov	r9, r3
 8009676:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800967a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800967e:	4610      	mov	r0, r2
 8009680:	4619      	mov	r1, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800968c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af02      	add	r7, sp, #8
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800969a:	2205      	movs	r2, #5
 800969c:	492b      	ldr	r1, [pc, #172]	; (800974c <SYSVIEW_AddTask+0xc0>)
 800969e:	68b8      	ldr	r0, [r7, #8]
 80096a0:	f003 fa7a 	bl	800cb98 <memcmp>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d04b      	beq.n	8009742 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80096aa:	4b29      	ldr	r3, [pc, #164]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b07      	cmp	r3, #7
 80096b0:	d903      	bls.n	80096ba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80096b2:	4828      	ldr	r0, [pc, #160]	; (8009754 <SYSVIEW_AddTask+0xc8>)
 80096b4:	f7ff fec8 	bl	8009448 <SEGGER_SYSVIEW_Warn>
    return;
 80096b8:	e044      	b.n	8009744 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80096ba:	4b25      	ldr	r3, [pc, #148]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	4926      	ldr	r1, [pc, #152]	; (8009758 <SYSVIEW_AddTask+0xcc>)
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	440b      	add	r3, r1
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80096ce:	4b20      	ldr	r3, [pc, #128]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4921      	ldr	r1, [pc, #132]	; (8009758 <SYSVIEW_AddTask+0xcc>)
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	3304      	adds	r3, #4
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80096e4:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	491b      	ldr	r1, [pc, #108]	; (8009758 <SYSVIEW_AddTask+0xcc>)
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	3308      	adds	r3, #8
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80096fa:	4b15      	ldr	r3, [pc, #84]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4916      	ldr	r1, [pc, #88]	; (8009758 <SYSVIEW_AddTask+0xcc>)
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	330c      	adds	r3, #12
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009710:	4b0f      	ldr	r3, [pc, #60]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	4910      	ldr	r1, [pc, #64]	; (8009758 <SYSVIEW_AddTask+0xcc>)
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3310      	adds	r3, #16
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009726:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3301      	adds	r3, #1
 800972c:	4a08      	ldr	r2, [pc, #32]	; (8009750 <SYSVIEW_AddTask+0xc4>)
 800972e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f80e 	bl	800975c <SYSVIEW_SendTaskInfo>
 8009740:	e000      	b.n	8009744 <SYSVIEW_AddTask+0xb8>
    return;
 8009742:	bf00      	nop

}
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	0800d594 	.word	0x0800d594
 8009750:	200045bc 	.word	0x200045bc
 8009754:	0800d59c 	.word	0x0800d59c
 8009758:	2000451c 	.word	0x2000451c

0800975c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	; 0x28
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
 8009768:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800976a:	f107 0314 	add.w	r3, r7, #20
 800976e:	2214      	movs	r2, #20
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f003 fa2e 	bl	800cbd4 <memset>
  TaskInfo.TaskID     = TaskID;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800978c:	f107 0314 	add.w	r3, r7, #20
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fa63 	bl	8008c5c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8009796:	bf00      	nop
 8009798:	3728      	adds	r7, #40	; 0x28
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <LL_ADC_REG_SetSequencerRanks>:
{
 800979e:	b480      	push	{r7}
 80097a0:	b089      	sub	sp, #36	; 0x24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	332c      	adds	r3, #44	; 0x2c
 80097ae:	4619      	mov	r1, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80097ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	fa92 f2a2 	rbit	r2, r2
 80097c2:	617a      	str	r2, [r7, #20]
  return result;
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	fab2 f282 	clz	r2, r2
 80097ca:	b2d2      	uxtb	r2, r2
 80097cc:	40d3      	lsrs	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f003 031f 	and.w	r3, r3, #31
 80097de:	211f      	movs	r1, #31
 80097e0:	fa01 f303 	lsl.w	r3, r1, r3
 80097e4:	43db      	mvns	r3, r3
 80097e6:	401a      	ands	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f003 011f 	and.w	r1, r3, #31
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	fa01 f303 	lsl.w	r3, r1, r3
 80097f8:	431a      	orrs	r2, r3
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	601a      	str	r2, [r3, #0]
}
 80097fe:	bf00      	nop
 8009800:	3724      	adds	r7, #36	; 0x24
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <LL_ADC_REG_SetFlagEndOfConversion>:
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	609a      	str	r2, [r3, #8]
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <LL_ADC_SetChannelSamplingTime>:
{
 8009830:	b480      	push	{r7}
 8009832:	b08d      	sub	sp, #52	; 0x34
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	330c      	adds	r3, #12
 8009840:	4619      	mov	r1, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800984c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	fa92 f2a2 	rbit	r2, r2
 8009854:	617a      	str	r2, [r7, #20]
  return result;
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	fab2 f282 	clz	r2, r2
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	40d3      	lsrs	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8009866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009870:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8009874:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009876:	6a39      	ldr	r1, [r7, #32]
 8009878:	fa91 f1a1 	rbit	r1, r1
 800987c:	61f9      	str	r1, [r7, #28]
  return result;
 800987e:	69f9      	ldr	r1, [r7, #28]
 8009880:	fab1 f181 	clz	r1, r1
 8009884:	b2c9      	uxtb	r1, r1
 8009886:	40cb      	lsrs	r3, r1
 8009888:	2107      	movs	r1, #7
 800988a:	fa01 f303 	lsl.w	r3, r1, r3
 800988e:	43db      	mvns	r3, r3
 8009890:	401a      	ands	r2, r3
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009898:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800989c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800989e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a0:	fa91 f1a1 	rbit	r1, r1
 80098a4:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80098a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098a8:	fab1 f181 	clz	r1, r1
 80098ac:	b2c9      	uxtb	r1, r1
 80098ae:	40cb      	lsrs	r3, r1
 80098b0:	6879      	ldr	r1, [r7, #4]
 80098b2:	fa01 f303 	lsl.w	r3, r1, r3
 80098b6:	431a      	orrs	r2, r3
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	601a      	str	r2, [r3, #0]
}
 80098bc:	bf00      	nop
 80098be:	3734      	adds	r7, #52	; 0x34
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <LL_ADC_Enable>:
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f043 0201 	orr.w	r2, r3, #1
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	609a      	str	r2, [r3, #8]
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	609a      	str	r2, [r3, #8]
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009914:	b29b      	uxth	r3, r3
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b02      	cmp	r3, #2
 8009934:	bf0c      	ite	eq
 8009936:	2301      	moveq	r3, #1
 8009938:	2300      	movne	r3, #0
 800993a:	b2db      	uxtb	r3, r3
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <adc_init>:

#define ADC1_CONVERSION_TIMEOUT 1000

static void adc1_init(void);

void adc_init(AdcID id) {
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	71fb      	strb	r3, [r7, #7]
	switch(id) {
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d108      	bne.n	800996a <adc_init+0x22>
	case AdcId1:
		adc1_init();
 8009958:	f000 f85c 	bl	8009a14 <adc1_init>
		LL_ADC_Enable(ADC1);
 800995c:	4808      	ldr	r0, [pc, #32]	; (8009980 <adc_init+0x38>)
 800995e:	f7ff ffb3 	bl	80098c8 <LL_ADC_Enable>
		hal_cli_printf("adc1 init");
 8009962:	4808      	ldr	r0, [pc, #32]	; (8009984 <adc_init+0x3c>)
 8009964:	f000 f99e 	bl	8009ca4 <hal_cli_printf>
		break;
 8009968:	e005      	b.n	8009976 <adc_init+0x2e>

	default:
		hal_cli_printf("adc%d not exist",id);
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	4619      	mov	r1, r3
 800996e:	4806      	ldr	r0, [pc, #24]	; (8009988 <adc_init+0x40>)
 8009970:	f000 f998 	bl	8009ca4 <hal_cli_printf>
		break;
 8009974:	bf00      	nop
	}
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	40012000 	.word	0x40012000
 8009984:	0800d5ec 	.word	0x0800d5ec
 8009988:	0800d5f8 	.word	0x0800d5f8

0800998c <hal_adc_getdata>:

bool hal_adc_getdata(AdcID id, uint32_t* data) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	73fb      	strb	r3, [r7, #15]
	coretex_timer timer;
	timer = hal_get_delay_timer(ADC1_CONVERSION_TIMEOUT);
 8009998:	463b      	mov	r3, r7
 800999a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fc3a 	bl	800a218 <hal_get_delay_timer>
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	463a      	mov	r2, r7
 80099aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099ae:	e883 0003 	stmia.w	r3, {r0, r1}

	switch(id) {
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d11d      	bne.n	80099f4 <hal_adc_getdata+0x68>
		case AdcId1:
			LL_ADC_REG_StartConversionSWStart(ADC1);
 80099b8:	4813      	ldr	r0, [pc, #76]	; (8009a08 <hal_adc_getdata+0x7c>)
 80099ba:	f7ff ff95 	bl	80098e8 <LL_ADC_REG_StartConversionSWStart>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 80099be:	e009      	b.n	80099d4 <hal_adc_getdata+0x48>
				if(hal_delay_timer_is_expired(&timer))
 80099c0:	f107 0310 	add.w	r3, r7, #16
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fc4d 	bl	800a264 <hal_delay_timer_is_expired>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <hal_adc_getdata+0x48>
					return false;
 80099d0:	2300      	movs	r3, #0
 80099d2:	e015      	b.n	8009a00 <hal_adc_getdata+0x74>
			while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {
 80099d4:	480c      	ldr	r0, [pc, #48]	; (8009a08 <hal_adc_getdata+0x7c>)
 80099d6:	f7ff ffa4 	bl	8009922 <LL_ADC_IsActiveFlag_EOCS>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0ef      	beq.n	80099c0 <hal_adc_getdata+0x34>
			}
			*data = LL_ADC_REG_ReadConversionData12(ADC1);
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <hal_adc_getdata+0x7c>)
 80099e2:	f7ff ff91 	bl	8009908 <LL_ADC_REG_ReadConversionData12>
 80099e6:	4603      	mov	r3, r0
 80099e8:	461a      	mov	r2, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	601a      	str	r2, [r3, #0]
			break;
 80099ee:	bf00      	nop
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
			return false;
			break;
	}

	return true;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e005      	b.n	8009a00 <hal_adc_getdata+0x74>
			hal_cli_printf("EINVAL : %s %d",__FILE__,__LINE__);
 80099f4:	2229      	movs	r2, #41	; 0x29
 80099f6:	4905      	ldr	r1, [pc, #20]	; (8009a0c <hal_adc_getdata+0x80>)
 80099f8:	4805      	ldr	r0, [pc, #20]	; (8009a10 <hal_adc_getdata+0x84>)
 80099fa:	f000 f953 	bl	8009ca4 <hal_cli_printf>
			return false;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	40012000 	.word	0x40012000
 8009a0c:	0800d608 	.word	0x0800d608
 8009a10:	0800d618 	.word	0x0800d618

08009a14 <adc1_init>:

static void adc1_init(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08c      	sub	sp, #48	; 0x30
 8009a18:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8009a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	605a      	str	r2, [r3, #4]
 8009a24:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8009a26:	f107 0310 	add.w	r3, r7, #16
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	605a      	str	r2, [r3, #4]
 8009a30:	609a      	str	r2, [r3, #8]
 8009a32:	60da      	str	r2, [r3, #12]
 8009a34:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8009a36:	463b      	mov	r3, r7
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	609a      	str	r2, [r3, #8]
 8009a40:	60da      	str	r2, [r3, #12]

  hal_gpio_init(&gpio_adc1_channel7, GpioModeAnalog, GpioPullNo, GpioSpeedFreqLow);
 8009a42:	2300      	movs	r3, #0
 8009a44:	2200      	movs	r2, #0
 8009a46:	2105      	movs	r1, #5
 8009a48:	481e      	ldr	r0, [pc, #120]	; (8009ac4 <adc1_init+0xb0>)
 8009a4a:	f000 fe33 	bl	800a6b4 <hal_gpio_init>

  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8009a52:	2300      	movs	r3, #0
 8009a54:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8009a56:	2300      	movs	r3, #0
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8009a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4819      	ldr	r0, [pc, #100]	; (8009ac8 <adc1_init+0xb4>)
 8009a62:	f7f9 f917 	bl	8002c94 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	623b      	str	r3, [r7, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8009a7a:	f107 0310 	add.w	r3, r7, #16
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4811      	ldr	r0, [pc, #68]	; (8009ac8 <adc1_init+0xb4>)
 8009a82:	f7f9 f933 	bl	8002cec <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8009a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a8a:	480f      	ldr	r0, [pc, #60]	; (8009ac8 <adc1_init+0xb4>)
 8009a8c:	f7ff febd 	bl	800980a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8009a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a94:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	480b      	ldr	r0, [pc, #44]	; (8009acc <adc1_init+0xb8>)
 8009aa0:	f7f9 f8b0 	bl	8002c04 <LL_ADC_CommonInit>


  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8009aa4:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <adc1_init+0xbc>)
 8009aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009aaa:	4807      	ldr	r0, [pc, #28]	; (8009ac8 <adc1_init+0xb4>)
 8009aac:	f7ff fe77 	bl	800979e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_3CYCLES);
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	4907      	ldr	r1, [pc, #28]	; (8009ad0 <adc1_init+0xbc>)
 8009ab4:	4804      	ldr	r0, [pc, #16]	; (8009ac8 <adc1_init+0xb4>)
 8009ab6:	f7ff febb 	bl	8009830 <LL_ADC_SetChannelSamplingTime>
}
 8009aba:	bf00      	nop
 8009abc:	3730      	adds	r7, #48	; 0x30
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	0800d870 	.word	0x0800d870
 8009ac8:	40012000 	.word	0x40012000
 8009acc:	40012300 	.word	0x40012300
 8009ad0:	03500007 	.word	0x03500007

08009ad4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b089      	sub	sp, #36	; 0x24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	330c      	adds	r3, #12
 8009ae0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f043 0310 	orr.w	r3, r3, #16
 8009af0:	61fb      	str	r3, [r7, #28]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	330c      	adds	r3, #12
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	61ba      	str	r2, [r7, #24]
 8009afa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6979      	ldr	r1, [r7, #20]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	613b      	str	r3, [r7, #16]
   return(result);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e7      	bne.n	8009adc <LL_USART_EnableIT_IDLE+0x8>
}
 8009b0c:	bf00      	nop
 8009b0e:	bf00      	nop
 8009b10:	3724      	adds	r7, #36	; 0x24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b089      	sub	sp, #36	; 0x24
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3314      	adds	r3, #20
 8009b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b36:	61fb      	str	r3, [r7, #28]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3314      	adds	r3, #20
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	61ba      	str	r2, [r7, #24]
 8009b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b42:	6979      	ldr	r1, [r7, #20]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e7      	bne.n	8009b22 <LL_USART_EnableDMAReq_RX+0x8>
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	3724      	adds	r7, #36	; 0x24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	; (8009b9c <LL_DMA_EnableStream+0x3c>)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	4413      	add	r3, r2
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4413      	add	r3, r2
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4908      	ldr	r1, [pc, #32]	; (8009b9c <LL_DMA_EnableStream+0x3c>)
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	440a      	add	r2, r1
 8009b80:	7812      	ldrb	r2, [r2, #0]
 8009b82:	4611      	mov	r1, r2
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	440a      	add	r2, r1
 8009b88:	f043 0301 	orr.w	r3, r3, #1
 8009b8c:	6013      	str	r3, [r2, #0]
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	0800d850 	.word	0x0800d850

08009ba0 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8009bac:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <LL_DMA_SetDataLength+0x44>)
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	4413      	add	r3, r2
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	0c1b      	lsrs	r3, r3, #16
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	4908      	ldr	r1, [pc, #32]	; (8009be4 <LL_DMA_SetDataLength+0x44>)
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	7812      	ldrb	r2, [r2, #0]
 8009bc8:	4611      	mov	r1, r2
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	440a      	add	r2, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	604b      	str	r3, [r1, #4]
}
 8009bd6:	bf00      	nop
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	0800d850 	.word	0x0800d850

08009be8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8009bf4:	4a07      	ldr	r2, [pc, #28]	; (8009c14 <LL_DMA_SetMemoryAddress+0x2c>)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	461a      	mov	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	60d3      	str	r3, [r2, #12]
}
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	0800d850 	.word	0x0800d850

08009c18 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8009c24:	4a07      	ldr	r2, [pc, #28]	; (8009c44 <LL_DMA_SetPeriphAddress+0x2c>)
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	4413      	add	r3, r2
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	461a      	mov	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6093      	str	r3, [r2, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	0800d850 	.word	0x0800d850

08009c48 <print_boottime>:
void hal_cli_menuprint() {
	//hal_cli_printf
}


static void print_boottime() {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
	uint32_t tick = xTaskGetTickCount();
 8009c4e:	f7fc ff97 	bl	8006b80 <xTaskGetTickCount>
 8009c52:	60f8      	str	r0, [r7, #12]
	unsigned int decimal, fraction;
	int length;

	decimal = tick / 1000;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4a10      	ldr	r2, [pc, #64]	; (8009c98 <print_boottime+0x50>)
 8009c58:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5c:	099b      	lsrs	r3, r3, #6
 8009c5e:	60bb      	str	r3, [r7, #8]
	fraction = tick % 1000;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	4a0d      	ldr	r2, [pc, #52]	; (8009c98 <print_boottime+0x50>)
 8009c64:	fba2 1203 	umull	r1, r2, r2, r3
 8009c68:	0992      	lsrs	r2, r2, #6
 8009c6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009c6e:	fb01 f202 	mul.w	r2, r1, r2
 8009c72:	1a9b      	subs	r3, r3, r2
 8009c74:	607b      	str	r3, [r7, #4]

	length = sprintf((char*)logbuf.wd_buf, "[ %u.%u ] ", decimal, fraction);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	4908      	ldr	r1, [pc, #32]	; (8009c9c <print_boottime+0x54>)
 8009c7c:	4808      	ldr	r0, [pc, #32]	; (8009ca0 <print_boottime+0x58>)
 8009c7e:	f002 ffb1 	bl	800cbe4 <siprintf>
 8009c82:	6038      	str	r0, [r7, #0]
	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	4905      	ldr	r1, [pc, #20]	; (8009ca0 <print_boottime+0x58>)
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	f002 febe 	bl	800ca0c <hal_uart_transfer>
}
 8009c90:	bf00      	nop
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	10624dd3 	.word	0x10624dd3
 8009c9c:	0800d628 	.word	0x0800d628
 8009ca0:	200045c4 	.word	0x200045c4

08009ca4 <hal_cli_printf>:

void hal_cli_bufferprint(void) {

}

void hal_cli_printf(const char* fmt, ...) {
 8009ca4:	b40f      	push	{r0, r1, r2, r3}
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
	int length;
	va_list valist;

	if(xSemaphoreTake(uart_mutex, 1000) != pdPASS) {
 8009cac:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <hal_cli_printf+0x68>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fc f971 	bl	8005f9c <xQueueSemaphoreTake>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d11d      	bne.n	8009cfc <hal_cli_printf+0x58>
		return;
	}

	print_boottime();
 8009cc0:	f7ff ffc2 	bl	8009c48 <print_boottime>

	va_start(valist, fmt);
 8009cc4:	f107 0314 	add.w	r3, r7, #20
 8009cc8:	603b      	str	r3, [r7, #0]
	length = vsprintf((char*)logbuf.wd_buf, (char*)fmt, valist);
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	6939      	ldr	r1, [r7, #16]
 8009cce:	4810      	ldr	r0, [pc, #64]	; (8009d10 <hal_cli_printf+0x6c>)
 8009cd0:	f002 ffbe 	bl	800cc50 <vsiprintf>
 8009cd4:	6078      	str	r0, [r7, #4]
	va_end(valist);

	hal_uart_transfer(UartIdUSART1, logbuf.wd_buf, length);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	490d      	ldr	r1, [pc, #52]	; (8009d10 <hal_cli_printf+0x6c>)
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f002 fe95 	bl	800ca0c <hal_uart_transfer>
	hal_uart_transfer(UartIdUSART1, (uint8_t*)"\r\n", 2);
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	490b      	ldr	r1, [pc, #44]	; (8009d14 <hal_cli_printf+0x70>)
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	f002 fe90 	bl	800ca0c <hal_uart_transfer>

	xSemaphoreGive(uart_mutex);
 8009cec:	4b07      	ldr	r3, [pc, #28]	; (8009d0c <hal_cli_printf+0x68>)
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	f7fb fe5d 	bl	80059b4 <xQueueGenericSend>
 8009cfa:	e000      	b.n	8009cfe <hal_cli_printf+0x5a>
		return;
 8009cfc:	bf00      	nop
}
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d06:	b004      	add	sp, #16
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	200045c0 	.word	0x200045c0
 8009d10:	200045c4 	.word	0x200045c4
 8009d14:	0800d634 	.word	0x0800d634

08009d18 <hal_cli_init>:

void hal_cli_init(void) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
	logbuf.head = 0;
 8009d1c:	4b17      	ldr	r3, [pc, #92]	; (8009d7c <hal_cli_init+0x64>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	logbuf.tail = 0;
 8009d24:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <hal_cli_init+0x64>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	logbuf.is_over_rd = false;
 8009d2c:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <hal_cli_init+0x64>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208

	uart_mutex = xSemaphoreCreateMutex();
 8009d34:	2001      	movs	r0, #1
 8009d36:	f7fb fe25 	bl	8005984 <xQueueCreateMutex>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	4a10      	ldr	r2, [pc, #64]	; (8009d80 <hal_cli_init+0x68>)
 8009d3e:	6013      	str	r3, [r2, #0]

	/* configuration USART1 DMA RX channel */

	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)logbuf.rd_buf);
 8009d40:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <hal_cli_init+0x6c>)
 8009d42:	461a      	mov	r2, r3
 8009d44:	2102      	movs	r1, #2
 8009d46:	4810      	ldr	r0, [pc, #64]	; (8009d88 <hal_cli_init+0x70>)
 8009d48:	f7ff ff4e 	bl	8009be8 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 8009d4c:	4a0f      	ldr	r2, [pc, #60]	; (8009d8c <hal_cli_init+0x74>)
 8009d4e:	2102      	movs	r1, #2
 8009d50:	480d      	ldr	r0, [pc, #52]	; (8009d88 <hal_cli_init+0x70>)
 8009d52:	f7ff ff61 	bl	8009c18 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, LOG_BUF_SIZE);
 8009d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d5a:	2102      	movs	r1, #2
 8009d5c:	480a      	ldr	r0, [pc, #40]	; (8009d88 <hal_cli_init+0x70>)
 8009d5e:	f7ff ff1f 	bl	8009ba0 <LL_DMA_SetDataLength>
	LL_USART_EnableDMAReq_RX(USART1);
 8009d62:	480b      	ldr	r0, [pc, #44]	; (8009d90 <hal_cli_init+0x78>)
 8009d64:	f7ff fed9 	bl	8009b1a <LL_USART_EnableDMAReq_RX>

	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8009d68:	2102      	movs	r1, #2
 8009d6a:	4807      	ldr	r0, [pc, #28]	; (8009d88 <hal_cli_init+0x70>)
 8009d6c:	f7ff fef8 	bl	8009b60 <LL_DMA_EnableStream>

	LL_USART_EnableIT_IDLE(USART1);
 8009d70:	4807      	ldr	r0, [pc, #28]	; (8009d90 <hal_cli_init+0x78>)
 8009d72:	f7ff feaf 	bl	8009ad4 <LL_USART_EnableIT_IDLE>
}
 8009d76:	bf00      	nop
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200045c4 	.word	0x200045c4
 8009d80:	200045c0 	.word	0x200045c0
 8009d84:	200046c4 	.word	0x200046c4
 8009d88:	40026400 	.word	0x40026400
 8009d8c:	40011004 	.word	0x40011004
 8009d90:	40011000 	.word	0x40011000

08009d94 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009d9c:	4b08      	ldr	r3, [pc, #32]	; (8009dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009da0:	4907      	ldr	r1, [pc, #28]	; (8009dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009da8:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4013      	ands	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009db2:	68fb      	ldr	r3, [r7, #12]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	40023800 	.word	0x40023800

08009dc4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8009dcc:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dd0:	4907      	ldr	r1, [pc, #28]	; (8009df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4013      	ands	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009de2:	68fb      	ldr	r3, [r7, #12]
}
 8009de4:	bf00      	nop
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	40023800 	.word	0x40023800

08009df4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009dfc:	4b08      	ldr	r3, [pc, #32]	; (8009e20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e00:	4907      	ldr	r1, [pc, #28]	; (8009e20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009e08:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4013      	ands	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009e12:	68fb      	ldr	r3, [r7, #12]
}
 8009e14:	bf00      	nop
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	40023800 	.word	0x40023800

08009e24 <LL_RCC_HSE_Enable>:
{
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <LL_RCC_HSE_Enable+0x1c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a04      	ldr	r2, [pc, #16]	; (8009e40 <LL_RCC_HSE_Enable+0x1c>)
 8009e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e32:	6013      	str	r3, [r2, #0]
}
 8009e34:	bf00      	nop
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	40023800 	.word	0x40023800

08009e44 <LL_RCC_HSE_IsReady>:
{
 8009e44:	b480      	push	{r7}
 8009e46:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8009e48:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <LL_RCC_HSE_IsReady+0x24>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e54:	bf0c      	ite	eq
 8009e56:	2301      	moveq	r3, #1
 8009e58:	2300      	movne	r3, #0
 8009e5a:	b2db      	uxtb	r3, r3
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	40023800 	.word	0x40023800

08009e6c <LL_RCC_SetSysClkSource>:
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009e74:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <LL_RCC_SetSysClkSource+0x24>)
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f023 0203 	bic.w	r2, r3, #3
 8009e7c:	4904      	ldr	r1, [pc, #16]	; (8009e90 <LL_RCC_SetSysClkSource+0x24>)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	608b      	str	r3, [r1, #8]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	40023800 	.word	0x40023800

08009e94 <LL_RCC_GetSysClkSource>:
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009e98:	4b04      	ldr	r3, [pc, #16]	; (8009eac <LL_RCC_GetSysClkSource+0x18>)
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f003 030c 	and.w	r3, r3, #12
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40023800 	.word	0x40023800

08009eb0 <LL_RCC_SetAHBPrescaler>:
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009eb8:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <LL_RCC_SetAHBPrescaler+0x24>)
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ec0:	4904      	ldr	r1, [pc, #16]	; (8009ed4 <LL_RCC_SetAHBPrescaler+0x24>)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	608b      	str	r3, [r1, #8]
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	40023800 	.word	0x40023800

08009ed8 <LL_RCC_SetAPB1Prescaler>:
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8009ee0:	4b06      	ldr	r3, [pc, #24]	; (8009efc <LL_RCC_SetAPB1Prescaler+0x24>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ee8:	4904      	ldr	r1, [pc, #16]	; (8009efc <LL_RCC_SetAPB1Prescaler+0x24>)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	608b      	str	r3, [r1, #8]
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	40023800 	.word	0x40023800

08009f00 <LL_RCC_SetAPB2Prescaler>:
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009f08:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <LL_RCC_SetAPB2Prescaler+0x24>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f10:	4904      	ldr	r1, [pc, #16]	; (8009f24 <LL_RCC_SetAPB2Prescaler+0x24>)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	608b      	str	r3, [r1, #8]
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	40023800 	.word	0x40023800

08009f28 <LL_RCC_SetTIMPrescaler>:
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <LL_RCC_SetTIMPrescaler+0x28>)
 8009f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f3a:	4905      	ldr	r1, [pc, #20]	; (8009f50 <LL_RCC_SetTIMPrescaler+0x28>)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	40023800 	.word	0x40023800

08009f54 <LL_RCC_PLL_Enable>:
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <LL_RCC_PLL_Enable+0x1c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a04      	ldr	r2, [pc, #16]	; (8009f70 <LL_RCC_PLL_Enable+0x1c>)
 8009f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f62:	6013      	str	r3, [r2, #0]
}
 8009f64:	bf00      	nop
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	40023800 	.word	0x40023800

08009f74 <LL_RCC_PLL_IsReady>:
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8009f78:	4b07      	ldr	r3, [pc, #28]	; (8009f98 <LL_RCC_PLL_IsReady+0x24>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f84:	bf0c      	ite	eq
 8009f86:	2301      	moveq	r3, #1
 8009f88:	2300      	movne	r3, #0
 8009f8a:	b2db      	uxtb	r3, r3
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	40023800 	.word	0x40023800

08009f9c <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8009faa:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	4b0d      	ldr	r3, [pc, #52]	; (8009fe4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	68f9      	ldr	r1, [r7, #12]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	4311      	orrs	r1, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	0192      	lsls	r2, r2, #6
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	4908      	ldr	r1, [pc, #32]	; (8009fe0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fcc:	4904      	ldr	r1, [pc, #16]	; (8009fe0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	604b      	str	r3, [r1, #4]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	40023800 	.word	0x40023800
 8009fe4:	ffbf8000 	.word	0xffbf8000

08009fe8 <LL_RCC_PLL_ConfigDomain_48M>:
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	68f9      	ldr	r1, [r7, #12]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	4311      	orrs	r1, r2
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	0192      	lsls	r2, r2, #6
 800a008:	4311      	orrs	r1, r2
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	4904      	ldr	r1, [pc, #16]	; (800a020 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800a010:	4313      	orrs	r3, r2
 800a012:	604b      	str	r3, [r1, #4]
}
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	40023800 	.word	0x40023800
 800a024:	f0bf8000 	.word	0xf0bf8000

0800a028 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <LL_FLASH_SetLatency+0x24>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f023 020f 	bic.w	r2, r3, #15
 800a038:	4904      	ldr	r1, [pc, #16]	; (800a04c <LL_FLASH_SetLatency+0x24>)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	600b      	str	r3, [r1, #0]
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	40023c00 	.word	0x40023c00

0800a050 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800a054:	4b04      	ldr	r3, [pc, #16]	; (800a068 <LL_FLASH_GetLatency+0x18>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 030f 	and.w	r3, r3, #15
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	40023c00 	.word	0x40023c00

0800a06c <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800a070:	4b05      	ldr	r3, [pc, #20]	; (800a088 <LL_PWR_EnableOverDriveMode+0x1c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a04      	ldr	r2, [pc, #16]	; (800a088 <LL_PWR_EnableOverDriveMode+0x1c>)
 800a076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a07a:	6013      	str	r3, [r2, #0]
}
 800a07c:	bf00      	nop
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	40007000 	.word	0x40007000

0800a08c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800a094:	4b06      	ldr	r3, [pc, #24]	; (800a0b0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a09c:	4904      	ldr	r1, [pc, #16]	; (800a0b0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	600b      	str	r3, [r1, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40007000 	.word	0x40007000

0800a0b4 <hal_bus_init_early>:
#include "stm32f4xx_ll_rcc.h"
#include "stm32f4xx_ll_system.h"
#include "stm32f4xx_ll_pwr.h"
#include "stm32f4xx_ll_utils.h"

void hal_bus_init_early(void) {
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	f7ff fe6b 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a0be:	2002      	movs	r0, #2
 800a0c0:	f7ff fe68 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a0c4:	2004      	movs	r0, #4
 800a0c6:	f7ff fe65 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800a0ca:	2008      	movs	r0, #8
 800a0cc:	f7ff fe62 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800a0d0:	2010      	movs	r0, #16
 800a0d2:	f7ff fe5f 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800a0d6:	2020      	movs	r0, #32
 800a0d8:	f7ff fe5c 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800a0dc:	2040      	movs	r0, #64	; 0x40
 800a0de:	f7ff fe59 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800a0e2:	2080      	movs	r0, #128	; 0x80
 800a0e4:	f7ff fe56 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800a0e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a0ec:	f7ff fe52 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800a0f0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a0f4:	f7ff fe4e 	bl	8009d94 <LL_AHB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800a0f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a0fc:	f7ff fe7a 	bl	8009df4 <LL_APB2_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800a100:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a104:	f7ff fe5e 	bl	8009dc4 <LL_APB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800a108:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a10c:	f7ff fe5a 	bl	8009dc4 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800a110:	2010      	movs	r0, #16
 800a112:	f7ff fe6f 	bl	8009df4 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800a116:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a11a:	f7ff fe53 	bl	8009dc4 <LL_APB1_GRP1_EnableClock>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800a11e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a122:	f7ff fe4f 	bl	8009dc4 <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 800a126:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a12a:	f7ff fe63 	bl	8009df4 <LL_APB2_GRP1_EnableClock>
//	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
}
 800a12e:	bf00      	nop
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <hal_clock_init_early>:
//	LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SPI5);
}


void hal_clock_init_early(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800a13a:	2005      	movs	r0, #5
 800a13c:	f7ff ff74 	bl	800a028 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800a140:	bf00      	nop
 800a142:	f7ff ff85 	bl	800a050 <LL_FLASH_GetLatency>
 800a146:	4603      	mov	r3, r0
 800a148:	2b05      	cmp	r3, #5
 800a14a:	d1fa      	bne.n	800a142 <hal_clock_init_early+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800a14c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800a150:	f7ff ff9c 	bl	800a08c <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800a154:	f7ff ff8a 	bl	800a06c <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800a158:	f7ff fe64 	bl	8009e24 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800a15c:	bf00      	nop
 800a15e:	f7ff fe71 	bl	8009e44 <LL_RCC_HSE_IsReady>
 800a162:	4603      	mov	r3, r0
 800a164:	2b01      	cmp	r3, #1
 800a166:	d1fa      	bne.n	800a15e <hal_clock_init_early+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800a168:	2300      	movs	r3, #0
 800a16a:	22b4      	movs	r2, #180	; 0xb4
 800a16c:	2104      	movs	r1, #4
 800a16e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a172:	f7ff ff13 	bl	8009f9c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
 800a176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a17a:	22b4      	movs	r2, #180	; 0xb4
 800a17c:	2104      	movs	r1, #4
 800a17e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a182:	f7ff ff31 	bl	8009fe8 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 800a186:	f7ff fee5 	bl	8009f54 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800a18a:	bf00      	nop
 800a18c:	f7ff fef2 	bl	8009f74 <LL_RCC_PLL_IsReady>
 800a190:	4603      	mov	r3, r0
 800a192:	2b01      	cmp	r3, #1
 800a194:	d1fa      	bne.n	800a18c <hal_clock_init_early+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800a196:	2000      	movs	r0, #0
 800a198:	f7ff fe8a 	bl	8009eb0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800a19c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800a1a0:	f7ff fe9a 	bl	8009ed8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800a1a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a1a8:	f7ff feaa 	bl	8009f00 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800a1ac:	2002      	movs	r0, #2
 800a1ae:	f7ff fe5d 	bl	8009e6c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a1b2:	bf00      	nop
 800a1b4:	f7ff fe6e 	bl	8009e94 <LL_RCC_GetSysClkSource>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d1fa      	bne.n	800a1b4 <hal_clock_init_early+0x80>
  {

  }
	LL_RCC_ClocksTypeDef rcc_clocks;

  LL_SetSystemCoreClock(180000000);
 800a1be:	4808      	ldr	r0, [pc, #32]	; (800a1e0 <hal_clock_init_early+0xac>)
 800a1c0:	f7fa fa6e 	bl	80046a0 <LL_SetSystemCoreClock>

	 LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7f9 f900 	bl	80033cc <LL_RCC_GetSystemClocksFreq>
   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800a1cc:	2005      	movs	r0, #5
 800a1ce:	f002 f835 	bl	800c23c <HAL_InitTick>
  {
//    Error_Handler();
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	f7ff fea8 	bl	8009f28 <LL_RCC_SetTIMPrescaler>
}
 800a1d8:	bf00      	nop
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	0aba9500 	.word	0x0aba9500

0800a1e4 <hal_dwt_init_early>:

  }
}

void hal_dwt_init_early(void)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800a1e8:	4b09      	ldr	r3, [pc, #36]	; (800a210 <hal_dwt_init_early+0x2c>)
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	4a08      	ldr	r2, [pc, #32]	; (800a210 <hal_dwt_init_early+0x2c>)
 800a1ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1f2:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800a1f4:	4b07      	ldr	r3, [pc, #28]	; (800a214 <hal_dwt_init_early+0x30>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a06      	ldr	r2, [pc, #24]	; (800a214 <hal_dwt_init_early+0x30>)
 800a1fa:	f043 0301 	orr.w	r3, r3, #1
 800a1fe:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0U;
 800a200:	4b04      	ldr	r3, [pc, #16]	; (800a214 <hal_dwt_init_early+0x30>)
 800a202:	2200      	movs	r2, #0
 800a204:	605a      	str	r2, [r3, #4]
}
 800a206:	bf00      	nop
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	e000edf0 	.word	0xe000edf0
 800a214:	e0001000 	.word	0xe0001000

0800a218 <hal_get_delay_timer>:
    uint32_t time_ticks = (SystemCoreClock / 1000000) * microseconds;
    while((DWT->CYCCNT - start) < time_ticks) {
    };
}

coretex_timer hal_get_delay_timer(uint32_t timeout) {
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
	coretex_timer tmp;
	tmp.start = DWT->CYCCNT;
 800a222:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <hal_get_delay_timer+0x40>)
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	60bb      	str	r3, [r7, #8]
	tmp.value = (SystemCoreClock / 1000) * timeout;
 800a228:	4b0c      	ldr	r3, [pc, #48]	; (800a25c <hal_get_delay_timer+0x44>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a0c      	ldr	r2, [pc, #48]	; (800a260 <hal_get_delay_timer+0x48>)
 800a22e:	fba2 2303 	umull	r2, r3, r2, r3
 800a232:	099b      	lsrs	r3, r3, #6
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	fb02 f303 	mul.w	r3, r2, r3
 800a23a:	60fb      	str	r3, [r7, #12]
	return tmp;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	461a      	mov	r2, r3
 800a240:	f107 0308 	add.w	r3, r7, #8
 800a244:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a248:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	e0001000 	.word	0xe0001000
 800a25c:	20000010 	.word	0x20000010
 800a260:	10624dd3 	.word	0x10624dd3

0800a264 <hal_delay_timer_is_expired>:

bool hal_delay_timer_is_expired(coretex_timer* timer)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
	return !(DWT->CYCCNT - timer->start < timer->value);
 800a26c:	4b08      	ldr	r3, [pc, #32]	; (800a290 <hal_delay_timer_is_expired+0x2c>)
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	1ad2      	subs	r2, r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	bf2c      	ite	cs
 800a27e:	2301      	movcs	r3, #1
 800a280:	2300      	movcc	r3, #0
 800a282:	b2db      	uxtb	r3, r3
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	e0001000 	.word	0xe0001000

0800a294 <LL_GPIO_SetPinMode>:
{
 800a294:	b480      	push	{r7}
 800a296:	b089      	sub	sp, #36	; 0x24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	fa93 f3a3 	rbit	r3, r3
 800a2ae:	613b      	str	r3, [r7, #16]
  return result;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	fab3 f383 	clz	r3, r3
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	2103      	movs	r1, #3
 800a2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c0:	43db      	mvns	r3, r3
 800a2c2:	401a      	ands	r2, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	fa93 f3a3 	rbit	r3, r3
 800a2ce:	61bb      	str	r3, [r7, #24]
  return result;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	fab3 f383 	clz	r3, r3
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	601a      	str	r2, [r3, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	3724      	adds	r7, #36	; 0x24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <LL_GPIO_SetPinOutputType>:
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b085      	sub	sp, #20
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	43db      	mvns	r3, r3
 800a306:	401a      	ands	r2, r3
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	fb01 f303 	mul.w	r3, r1, r3
 800a310:	431a      	orrs	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	605a      	str	r2, [r3, #4]
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <LL_GPIO_SetPinSpeed>:
{
 800a322:	b480      	push	{r7}
 800a324:	b089      	sub	sp, #36	; 0x24
 800a326:	af00      	add	r7, sp, #0
 800a328:	60f8      	str	r0, [r7, #12]
 800a32a:	60b9      	str	r1, [r7, #8]
 800a32c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	fa93 f3a3 	rbit	r3, r3
 800a33c:	613b      	str	r3, [r7, #16]
  return result;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	fab3 f383 	clz	r3, r3
 800a344:	b2db      	uxtb	r3, r3
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	2103      	movs	r1, #3
 800a34a:	fa01 f303 	lsl.w	r3, r1, r3
 800a34e:	43db      	mvns	r3, r3
 800a350:	401a      	ands	r2, r3
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	fa93 f3a3 	rbit	r3, r3
 800a35c:	61bb      	str	r3, [r7, #24]
  return result;
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	fab3 f383 	clz	r3, r3
 800a364:	b2db      	uxtb	r3, r3
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	6879      	ldr	r1, [r7, #4]
 800a36a:	fa01 f303 	lsl.w	r3, r1, r3
 800a36e:	431a      	orrs	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	609a      	str	r2, [r3, #8]
}
 800a374:	bf00      	nop
 800a376:	3724      	adds	r7, #36	; 0x24
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <LL_GPIO_SetPinPull>:
{
 800a380:	b480      	push	{r7}
 800a382:	b089      	sub	sp, #36	; 0x24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	68da      	ldr	r2, [r3, #12]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	fa93 f3a3 	rbit	r3, r3
 800a39a:	613b      	str	r3, [r7, #16]
  return result;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	fab3 f383 	clz	r3, r3
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	2103      	movs	r1, #3
 800a3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ac:	43db      	mvns	r3, r3
 800a3ae:	401a      	ands	r2, r3
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	fa93 f3a3 	rbit	r3, r3
 800a3ba:	61bb      	str	r3, [r7, #24]
  return result;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	fab3 f383 	clz	r3, r3
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3cc:	431a      	orrs	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	60da      	str	r2, [r3, #12]
}
 800a3d2:	bf00      	nop
 800a3d4:	3724      	adds	r7, #36	; 0x24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <LL_GPIO_SetAFPin_0_7>:
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b089      	sub	sp, #36	; 0x24
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6a1a      	ldr	r2, [r3, #32]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	fa93 f3a3 	rbit	r3, r3
 800a3f8:	613b      	str	r3, [r7, #16]
  return result;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	fab3 f383 	clz	r3, r3
 800a400:	b2db      	uxtb	r3, r3
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	210f      	movs	r1, #15
 800a406:	fa01 f303 	lsl.w	r3, r1, r3
 800a40a:	43db      	mvns	r3, r3
 800a40c:	401a      	ands	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	fa93 f3a3 	rbit	r3, r3
 800a418:	61bb      	str	r3, [r7, #24]
  return result;
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	fab3 f383 	clz	r3, r3
 800a420:	b2db      	uxtb	r3, r3
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	fa01 f303 	lsl.w	r3, r1, r3
 800a42a:	431a      	orrs	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	621a      	str	r2, [r3, #32]
}
 800a430:	bf00      	nop
 800a432:	3724      	adds	r7, #36	; 0x24
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <LL_GPIO_SetAFPin_8_15>:
{
 800a43c:	b480      	push	{r7}
 800a43e:	b089      	sub	sp, #36	; 0x24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	0a1b      	lsrs	r3, r3, #8
 800a450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	fa93 f3a3 	rbit	r3, r3
 800a458:	613b      	str	r3, [r7, #16]
  return result;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	fab3 f383 	clz	r3, r3
 800a460:	b2db      	uxtb	r3, r3
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	210f      	movs	r1, #15
 800a466:	fa01 f303 	lsl.w	r3, r1, r3
 800a46a:	43db      	mvns	r3, r3
 800a46c:	401a      	ands	r2, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	0a1b      	lsrs	r3, r3, #8
 800a472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	fa93 f3a3 	rbit	r3, r3
 800a47a:	61bb      	str	r3, [r7, #24]
  return result;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	fab3 f383 	clz	r3, r3
 800a482:	b2db      	uxtb	r3, r3
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	fa01 f303 	lsl.w	r3, r1, r3
 800a48c:	431a      	orrs	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a492:	bf00      	nop
 800a494:	3724      	adds	r7, #36	; 0x24
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <LL_SYSCFG_SetEXTISource>:
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800a4aa:	4a13      	ldr	r2, [pc, #76]	; (800a4f8 <LL_SYSCFG_SetEXTISource+0x58>)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	0c1b      	lsrs	r3, r3, #16
 800a4ba:	43db      	mvns	r3, r3
 800a4bc:	ea02 0103 	and.w	r1, r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	fa93 f3a3 	rbit	r3, r3
 800a4cc:	60bb      	str	r3, [r7, #8]
  return result;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	fab3 f383 	clz	r3, r3
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	fa03 f202 	lsl.w	r2, r3, r2
 800a4de:	4806      	ldr	r0, [pc, #24]	; (800a4f8 <LL_SYSCFG_SetEXTISource+0x58>)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	3302      	adds	r3, #2
 800a4e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	40013800 	.word	0x40013800

0800a4fc <LL_SYSCFG_GetEXTISource>:
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800a504:	4a0d      	ldr	r2, [pc, #52]	; (800a53c <LL_SYSCFG_GetEXTISource+0x40>)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	3302      	adds	r3, #2
 800a50c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	0c1b      	lsrs	r3, r3, #16
 800a514:	4013      	ands	r3, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	0c12      	lsrs	r2, r2, #16
 800a51a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	fa92 f2a2 	rbit	r2, r2
 800a522:	60ba      	str	r2, [r7, #8]
  return result;
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	fab2 f282 	clz	r2, r2
 800a52a:	b2d2      	uxtb	r2, r2
 800a52c:	40d3      	lsrs	r3, r2
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	40013800 	.word	0x40013800

0800a540 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <LL_EXTI_EnableIT_0_31+0x20>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	4904      	ldr	r1, [pc, #16]	; (800a560 <LL_EXTI_EnableIT_0_31+0x20>)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4313      	orrs	r3, r2
 800a552:	600b      	str	r3, [r1, #0]
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	40013c00 	.word	0x40013c00

0800a564 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800a56c:	4b06      	ldr	r3, [pc, #24]	; (800a588 <LL_EXTI_DisableIT_0_31+0x24>)
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	43db      	mvns	r3, r3
 800a574:	4904      	ldr	r1, [pc, #16]	; (800a588 <LL_EXTI_DisableIT_0_31+0x24>)
 800a576:	4013      	ands	r3, r2
 800a578:	600b      	str	r3, [r1, #0]
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40013c00 	.word	0x40013c00

0800a58c <LL_EXTI_IsEnabledIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->IMR, ExtiLine) == (ExtiLine));
 800a594:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <LL_EXTI_IsEnabledIT_0_31+0x28>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4013      	ands	r3, r2
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	bf0c      	ite	eq
 800a5a2:	2301      	moveq	r3, #1
 800a5a4:	2300      	movne	r3, #0
 800a5a6:	b2db      	uxtb	r3, r3
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	40013c00 	.word	0x40013c00

0800a5b8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	4904      	ldr	r1, [pc, #16]	; (800a5d8 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	604b      	str	r3, [r1, #4]

}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	40013c00 	.word	0x40013c00

0800a5dc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800a5e4:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	4904      	ldr	r1, [pc, #16]	; (800a5fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	608b      	str	r3, [r1, #8]

}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	40013c00 	.word	0x40013c00

0800a600 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800a608:	4b06      	ldr	r3, [pc, #24]	; (800a624 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	43db      	mvns	r3, r3
 800a610:	4904      	ldr	r1, [pc, #16]	; (800a624 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a612:	4013      	ands	r3, r2
 800a614:	608b      	str	r3, [r1, #8]

}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	40013c00 	.word	0x40013c00

0800a628 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800a630:	4b05      	ldr	r3, [pc, #20]	; (800a648 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	4904      	ldr	r1, [pc, #16]	; (800a648 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60cb      	str	r3, [r1, #12]
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	40013c00 	.word	0x40013c00

0800a64c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800a654:	4b06      	ldr	r3, [pc, #24]	; (800a670 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	43db      	mvns	r3, r3
 800a65c:	4904      	ldr	r1, [pc, #16]	; (800a670 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a65e:	4013      	ands	r3, r2
 800a660:	60cb      	str	r3, [r1, #12]
}
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	40013c00 	.word	0x40013c00

0800a674 <hal_gpio_get_pin_number>:
#define GET_SYSCFG_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_SYSCFG_EXTI_LINE)
#define GET_EXTI_LINE(pin) GPIO_PIN_MAP(pin, LL_EXTI_LINE_)

static volatile GpioInterrupt gpio_interrupt[GPIO_NUMBER];

static uint8_t hal_gpio_get_pin_number(const GpioPin* gpio) {
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
	uint8_t pin_number;

	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800a67c:	2300      	movs	r3, #0
 800a67e:	73fb      	strb	r3, [r7, #15]
 800a680:	e00c      	b.n	800a69c <hal_gpio_get_pin_number+0x28>
		if(gpio->pin & (1 << pin_number)) break;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	889b      	ldrh	r3, [r3, #4]
 800a686:	461a      	mov	r2, r3
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	fa42 f303 	asr.w	r3, r2, r3
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <hal_gpio_get_pin_number+0x30>
	for(pin_number = 0; pin_number < GPIO_NUMBER; pin_number++) {
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	3301      	adds	r3, #1
 800a69a:	73fb      	strb	r3, [r7, #15]
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d9ef      	bls.n	800a682 <hal_gpio_get_pin_number+0xe>
 800a6a2:	e000      	b.n	800a6a6 <hal_gpio_get_pin_number+0x32>
		if(gpio->pin & (1 << pin_number)) break;
 800a6a4:	bf00      	nop
	}
	return pin_number;
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <hal_gpio_init>:

void hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	4608      	mov	r0, r1
 800a6be:	4611      	mov	r1, r2
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	70fb      	strb	r3, [r7, #3]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70bb      	strb	r3, [r7, #2]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	707b      	strb	r3, [r7, #1]
	hal_gpio_init_alt(gpio, mode, pull, speed, GpioAltFnUnused);
 800a6ce:	787b      	ldrb	r3, [r7, #1]
 800a6d0:	78ba      	ldrb	r2, [r7, #2]
 800a6d2:	78f9      	ldrb	r1, [r7, #3]
 800a6d4:	2010      	movs	r0, #16
 800a6d6:	9000      	str	r0, [sp, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f805 	bl	800a6e8 <hal_gpio_init_alt>
}
 800a6de:	bf00      	nop
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <hal_gpio_init_alt>:
void hal_gpio_init_alt(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	70fb      	strb	r3, [r7, #3]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	70bb      	strb	r3, [r7, #2]
 800a6fe:	4613      	mov	r3, r2
 800a700:	707b      	strb	r3, [r7, #1]

	uint32_t syscfg_exti_port = GET_SYSCFG_EXTI_PORT(gpio->port);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a8d      	ldr	r2, [pc, #564]	; (800a93c <hal_gpio_init_alt+0x254>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d02b      	beq.n	800a764 <hal_gpio_init_alt+0x7c>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a8b      	ldr	r2, [pc, #556]	; (800a940 <hal_gpio_init_alt+0x258>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d024      	beq.n	800a760 <hal_gpio_init_alt+0x78>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a8a      	ldr	r2, [pc, #552]	; (800a944 <hal_gpio_init_alt+0x25c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d01d      	beq.n	800a75c <hal_gpio_init_alt+0x74>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a88      	ldr	r2, [pc, #544]	; (800a948 <hal_gpio_init_alt+0x260>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d016      	beq.n	800a758 <hal_gpio_init_alt+0x70>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a87      	ldr	r2, [pc, #540]	; (800a94c <hal_gpio_init_alt+0x264>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d00f      	beq.n	800a754 <hal_gpio_init_alt+0x6c>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a85      	ldr	r2, [pc, #532]	; (800a950 <hal_gpio_init_alt+0x268>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d008      	beq.n	800a750 <hal_gpio_init_alt+0x68>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a84      	ldr	r2, [pc, #528]	; (800a954 <hal_gpio_init_alt+0x26c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d101      	bne.n	800a74c <hal_gpio_init_alt+0x64>
 800a748:	2306      	movs	r3, #6
 800a74a:	e00c      	b.n	800a766 <hal_gpio_init_alt+0x7e>
 800a74c:	2307      	movs	r3, #7
 800a74e:	e00a      	b.n	800a766 <hal_gpio_init_alt+0x7e>
 800a750:	2305      	movs	r3, #5
 800a752:	e008      	b.n	800a766 <hal_gpio_init_alt+0x7e>
 800a754:	2304      	movs	r3, #4
 800a756:	e006      	b.n	800a766 <hal_gpio_init_alt+0x7e>
 800a758:	2303      	movs	r3, #3
 800a75a:	e004      	b.n	800a766 <hal_gpio_init_alt+0x7e>
 800a75c:	2302      	movs	r3, #2
 800a75e:	e002      	b.n	800a766 <hal_gpio_init_alt+0x7e>
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <hal_gpio_init_alt+0x7e>
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
	uint32_t syscfg_exti_line = GET_SYSCFG_EXTI_LINE(gpio->pin);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	889b      	ldrh	r3, [r3, #4]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d05f      	beq.n	800a830 <hal_gpio_init_alt+0x148>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	889b      	ldrh	r3, [r3, #4]
 800a774:	2b02      	cmp	r3, #2
 800a776:	d058      	beq.n	800a82a <hal_gpio_init_alt+0x142>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	889b      	ldrh	r3, [r3, #4]
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d051      	beq.n	800a824 <hal_gpio_init_alt+0x13c>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	889b      	ldrh	r3, [r3, #4]
 800a784:	2b08      	cmp	r3, #8
 800a786:	d04a      	beq.n	800a81e <hal_gpio_init_alt+0x136>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	889b      	ldrh	r3, [r3, #4]
 800a78c:	2b10      	cmp	r3, #16
 800a78e:	d044      	beq.n	800a81a <hal_gpio_init_alt+0x132>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	889b      	ldrh	r3, [r3, #4]
 800a794:	2b20      	cmp	r3, #32
 800a796:	d03e      	beq.n	800a816 <hal_gpio_init_alt+0x12e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	889b      	ldrh	r3, [r3, #4]
 800a79c:	2b40      	cmp	r3, #64	; 0x40
 800a79e:	d038      	beq.n	800a812 <hal_gpio_init_alt+0x12a>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	889b      	ldrh	r3, [r3, #4]
 800a7a4:	2b80      	cmp	r3, #128	; 0x80
 800a7a6:	d032      	beq.n	800a80e <hal_gpio_init_alt+0x126>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	889b      	ldrh	r3, [r3, #4]
 800a7ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7b0:	d02b      	beq.n	800a80a <hal_gpio_init_alt+0x122>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	889b      	ldrh	r3, [r3, #4]
 800a7b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ba:	d024      	beq.n	800a806 <hal_gpio_init_alt+0x11e>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	889b      	ldrh	r3, [r3, #4]
 800a7c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c4:	d01d      	beq.n	800a802 <hal_gpio_init_alt+0x11a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	889b      	ldrh	r3, [r3, #4]
 800a7ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7ce:	d016      	beq.n	800a7fe <hal_gpio_init_alt+0x116>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	889b      	ldrh	r3, [r3, #4]
 800a7d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d8:	d00f      	beq.n	800a7fa <hal_gpio_init_alt+0x112>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	889b      	ldrh	r3, [r3, #4]
 800a7de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7e2:	d008      	beq.n	800a7f6 <hal_gpio_init_alt+0x10e>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	889b      	ldrh	r3, [r3, #4]
 800a7e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7ec:	d101      	bne.n	800a7f2 <hal_gpio_init_alt+0x10a>
 800a7ee:	4b5a      	ldr	r3, [pc, #360]	; (800a958 <hal_gpio_init_alt+0x270>)
 800a7f0:	e020      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a7f2:	4b5a      	ldr	r3, [pc, #360]	; (800a95c <hal_gpio_init_alt+0x274>)
 800a7f4:	e01e      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a7f6:	4b5a      	ldr	r3, [pc, #360]	; (800a960 <hal_gpio_init_alt+0x278>)
 800a7f8:	e01c      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a7fa:	4b5a      	ldr	r3, [pc, #360]	; (800a964 <hal_gpio_init_alt+0x27c>)
 800a7fc:	e01a      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a7fe:	4b5a      	ldr	r3, [pc, #360]	; (800a968 <hal_gpio_init_alt+0x280>)
 800a800:	e018      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a802:	4b5a      	ldr	r3, [pc, #360]	; (800a96c <hal_gpio_init_alt+0x284>)
 800a804:	e016      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a806:	4b5a      	ldr	r3, [pc, #360]	; (800a970 <hal_gpio_init_alt+0x288>)
 800a808:	e014      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a80a:	4b5a      	ldr	r3, [pc, #360]	; (800a974 <hal_gpio_init_alt+0x28c>)
 800a80c:	e012      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a80e:	4b5a      	ldr	r3, [pc, #360]	; (800a978 <hal_gpio_init_alt+0x290>)
 800a810:	e010      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a812:	4b5a      	ldr	r3, [pc, #360]	; (800a97c <hal_gpio_init_alt+0x294>)
 800a814:	e00e      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a816:	4b5a      	ldr	r3, [pc, #360]	; (800a980 <hal_gpio_init_alt+0x298>)
 800a818:	e00c      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a81a:	4b5a      	ldr	r3, [pc, #360]	; (800a984 <hal_gpio_init_alt+0x29c>)
 800a81c:	e00a      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a81e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800a822:	e007      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a824:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800a828:	e004      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a82a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800a82e:	e001      	b.n	800a834 <hal_gpio_init_alt+0x14c>
 800a830:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800a834:	613b      	str	r3, [r7, #16]
	uint32_t exti_line = GET_EXTI_LINE(gpio->pin);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	889b      	ldrh	r3, [r3, #4]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d064      	beq.n	800a908 <hal_gpio_init_alt+0x220>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	889b      	ldrh	r3, [r3, #4]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d05e      	beq.n	800a904 <hal_gpio_init_alt+0x21c>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	889b      	ldrh	r3, [r3, #4]
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d058      	beq.n	800a900 <hal_gpio_init_alt+0x218>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	889b      	ldrh	r3, [r3, #4]
 800a852:	2b08      	cmp	r3, #8
 800a854:	d052      	beq.n	800a8fc <hal_gpio_init_alt+0x214>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	889b      	ldrh	r3, [r3, #4]
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d04c      	beq.n	800a8f8 <hal_gpio_init_alt+0x210>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	889b      	ldrh	r3, [r3, #4]
 800a862:	2b20      	cmp	r3, #32
 800a864:	d046      	beq.n	800a8f4 <hal_gpio_init_alt+0x20c>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	889b      	ldrh	r3, [r3, #4]
 800a86a:	2b40      	cmp	r3, #64	; 0x40
 800a86c:	d040      	beq.n	800a8f0 <hal_gpio_init_alt+0x208>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	889b      	ldrh	r3, [r3, #4]
 800a872:	2b80      	cmp	r3, #128	; 0x80
 800a874:	d03a      	beq.n	800a8ec <hal_gpio_init_alt+0x204>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	889b      	ldrh	r3, [r3, #4]
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87e:	d032      	beq.n	800a8e6 <hal_gpio_init_alt+0x1fe>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	889b      	ldrh	r3, [r3, #4]
 800a884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a888:	d02a      	beq.n	800a8e0 <hal_gpio_init_alt+0x1f8>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	889b      	ldrh	r3, [r3, #4]
 800a88e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a892:	d022      	beq.n	800a8da <hal_gpio_init_alt+0x1f2>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	889b      	ldrh	r3, [r3, #4]
 800a898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a89c:	d01a      	beq.n	800a8d4 <hal_gpio_init_alt+0x1ec>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	889b      	ldrh	r3, [r3, #4]
 800a8a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8a6:	d012      	beq.n	800a8ce <hal_gpio_init_alt+0x1e6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	889b      	ldrh	r3, [r3, #4]
 800a8ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8b0:	d00a      	beq.n	800a8c8 <hal_gpio_init_alt+0x1e0>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	889b      	ldrh	r3, [r3, #4]
 800a8b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8ba:	d102      	bne.n	800a8c2 <hal_gpio_init_alt+0x1da>
 800a8bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a8c0:	e023      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c6:	e020      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8cc:	e01d      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8d2:	e01a      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8d8:	e017      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8de:	e014      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8e4:	e011      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ea:	e00e      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8ec:	2380      	movs	r3, #128	; 0x80
 800a8ee:	e00c      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8f0:	2340      	movs	r3, #64	; 0x40
 800a8f2:	e00a      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	e008      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	e006      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a8fc:	2308      	movs	r3, #8
 800a8fe:	e004      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a900:	2304      	movs	r3, #4
 800a902:	e002      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a904:	2302      	movs	r3, #2
 800a906:	e000      	b.n	800a90a <hal_gpio_init_alt+0x222>
 800a908:	2301      	movs	r3, #1
 800a90a:	60fb      	str	r3, [r7, #12]

	switch(speed) {
 800a90c:	787b      	ldrb	r3, [r7, #1]
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d855      	bhi.n	800a9be <hal_gpio_init_alt+0x2d6>
 800a912:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <hal_gpio_init_alt+0x230>)
 800a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a918:	0800a929 	.word	0x0800a929
 800a91c:	0800a989 	.word	0x0800a989
 800a920:	0800a99b 	.word	0x0800a99b
 800a924:	0800a9ad 	.word	0x0800a9ad
	case GpioSpeedFreqLow:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_LOW);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	889b      	ldrh	r3, [r3, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	4619      	mov	r1, r3
 800a934:	f7ff fcf5 	bl	800a322 <LL_GPIO_SetPinSpeed>
		break;
 800a938:	e041      	b.n	800a9be <hal_gpio_init_alt+0x2d6>
 800a93a:	bf00      	nop
 800a93c:	40020000 	.word	0x40020000
 800a940:	40020400 	.word	0x40020400
 800a944:	40020800 	.word	0x40020800
 800a948:	40020c00 	.word	0x40020c00
 800a94c:	40021000 	.word	0x40021000
 800a950:	40021400 	.word	0x40021400
 800a954:	40021800 	.word	0x40021800
 800a958:	0f000003 	.word	0x0f000003
 800a95c:	f0000003 	.word	0xf0000003
 800a960:	00f00003 	.word	0x00f00003
 800a964:	000f0003 	.word	0x000f0003
 800a968:	f0000002 	.word	0xf0000002
 800a96c:	0f000002 	.word	0x0f000002
 800a970:	00f00002 	.word	0x00f00002
 800a974:	000f0002 	.word	0x000f0002
 800a978:	f0000001 	.word	0xf0000001
 800a97c:	0f000001 	.word	0x0f000001
 800a980:	00f00001 	.word	0x00f00001
 800a984:	000f0001 	.word	0x000f0001
	case GpioSpeedFreqMedium:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_MEDIUM);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	889b      	ldrh	r3, [r3, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	4619      	mov	r1, r3
 800a994:	f7ff fcc5 	bl	800a322 <LL_GPIO_SetPinSpeed>
		break;
 800a998:	e011      	b.n	800a9be <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_HIGH);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	889b      	ldrh	r3, [r3, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	f7ff fcbc 	bl	800a322 <LL_GPIO_SetPinSpeed>
		break;
 800a9aa:	e008      	b.n	800a9be <hal_gpio_init_alt+0x2d6>
	case GpioSpeedFreqVeryHigh:
		LL_GPIO_SetPinSpeed(gpio->port, gpio->pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6818      	ldr	r0, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	889b      	ldrh	r3, [r3, #4]
 800a9b4:	2203      	movs	r2, #3
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	f7ff fcb3 	bl	800a322 <LL_GPIO_SetPinSpeed>
		break;
 800a9bc:	bf00      	nop
	}

	switch(pull) {
 800a9be:	78bb      	ldrb	r3, [r7, #2]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d018      	beq.n	800a9f6 <hal_gpio_init_alt+0x30e>
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	dc1f      	bgt.n	800aa08 <hal_gpio_init_alt+0x320>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <hal_gpio_init_alt+0x2ea>
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d009      	beq.n	800a9e4 <hal_gpio_init_alt+0x2fc>
 800a9d0:	e01a      	b.n	800aa08 <hal_gpio_init_alt+0x320>
	case GpioPullNo:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_NO);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6818      	ldr	r0, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	889b      	ldrh	r3, [r3, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4619      	mov	r1, r3
 800a9de:	f7ff fccf 	bl	800a380 <LL_GPIO_SetPinPull>
		break;
 800a9e2:	e011      	b.n	800aa08 <hal_gpio_init_alt+0x320>
	case GpioPullUp:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_UP);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	889b      	ldrh	r3, [r3, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	f7ff fcc6 	bl	800a380 <LL_GPIO_SetPinPull>
		break;
 800a9f4:	e008      	b.n	800aa08 <hal_gpio_init_alt+0x320>
	case GpioPullDown:
		LL_GPIO_SetPinPull(gpio->port, gpio->pin, LL_GPIO_PULL_DOWN);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	889b      	ldrh	r3, [r3, #4]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	4619      	mov	r1, r3
 800aa02:	f7ff fcbd 	bl	800a380 <LL_GPIO_SetPinPull>
		break;
 800aa06:	bf00      	nop
	}

	if(mode >= GpioModeInterruptRise) {
 800aa08:	78fb      	ldrb	r3, [r7, #3]
 800aa0a:	2b05      	cmp	r3, #5
 800aa0c:	d93d      	bls.n	800aa8a <hal_gpio_init_alt+0x3a2>
		LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	889b      	ldrh	r3, [r3, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f7ff fc3b 	bl	800a294 <LL_GPIO_SetPinMode>
		LL_SYSCFG_SetEXTISource(syscfg_exti_port, syscfg_exti_line);
 800aa1e:	6939      	ldr	r1, [r7, #16]
 800aa20:	6978      	ldr	r0, [r7, #20]
 800aa22:	f7ff fd3d 	bl	800a4a0 <LL_SYSCFG_SetEXTISource>
		if(mode == GpioModeInterruptRise || mode == GpioModeInterruptRiseFall) {
 800aa26:	78fb      	ldrb	r3, [r7, #3]
 800aa28:	2b06      	cmp	r3, #6
 800aa2a:	d002      	beq.n	800aa32 <hal_gpio_init_alt+0x34a>
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	2b08      	cmp	r3, #8
 800aa30:	d105      	bne.n	800aa3e <hal_gpio_init_alt+0x356>
			LL_EXTI_EnableIT_0_31(exti_line);
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff fd84 	bl	800a540 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f7ff fdcf 	bl	800a5dc <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeInterruptFall || mode == GpioModeInterruptRiseFall) {
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	2b07      	cmp	r3, #7
 800aa42:	d002      	beq.n	800aa4a <hal_gpio_init_alt+0x362>
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	2b08      	cmp	r3, #8
 800aa48:	d105      	bne.n	800aa56 <hal_gpio_init_alt+0x36e>
			LL_EXTI_EnableIT_0_31(exti_line);
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fd78 	bl	800a540 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff fde9 	bl	800a628 <LL_EXTI_EnableFallingTrig_0_31>
		}

		if(mode == GpioModeEventRise || mode == GpioModeEventRiseFall) {
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	2b09      	cmp	r3, #9
 800aa5a:	d002      	beq.n	800aa62 <hal_gpio_init_alt+0x37a>
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	2b0b      	cmp	r3, #11
 800aa60:	d105      	bne.n	800aa6e <hal_gpio_init_alt+0x386>
			LL_EXTI_EnableEvent_0_31(exti_line);
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fda8 	bl	800a5b8 <LL_EXTI_EnableEvent_0_31>
			LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7ff fdb7 	bl	800a5dc <LL_EXTI_EnableRisingTrig_0_31>
		}

		if(mode == GpioModeEventFall || mode == GpioModeEventRiseFall) {
 800aa6e:	78fb      	ldrb	r3, [r7, #3]
 800aa70:	2b0a      	cmp	r3, #10
 800aa72:	d003      	beq.n	800aa7c <hal_gpio_init_alt+0x394>
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	2b0b      	cmp	r3, #11
 800aa78:	f040 80a7 	bne.w	800abca <hal_gpio_init_alt+0x4e2>
			LL_EXTI_EnableIT_0_31(exti_line);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fd5f 	bl	800a540 <LL_EXTI_EnableIT_0_31>
			LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff fdd0 	bl	800a628 <LL_EXTI_EnableFallingTrig_0_31>
		default:
			break;
		}
	}

}
 800aa88:	e09f      	b.n	800abca <hal_gpio_init_alt+0x4e2>
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800aa8a:	6938      	ldr	r0, [r7, #16]
 800aa8c:	f7ff fd36 	bl	800a4fc <LL_SYSCFG_GetEXTISource>
 800aa90:	4602      	mov	r2, r0
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d10e      	bne.n	800aab6 <hal_gpio_init_alt+0x3ce>
		   LL_EXTI_IsEnabledIT_0_31(exti_line)) {
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff fd77 	bl	800a58c <LL_EXTI_IsEnabledIT_0_31>
 800aa9e:	4603      	mov	r3, r0
		if(LL_SYSCFG_GetEXTISource(syscfg_exti_line) == syscfg_exti_port &&
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d008      	beq.n	800aab6 <hal_gpio_init_alt+0x3ce>
			LL_EXTI_DisableIT_0_31(exti_line);
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7ff fd5d 	bl	800a564 <LL_EXTI_DisableIT_0_31>
			LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff fdce 	bl	800a64c <LL_EXTI_DisableFallingTrig_0_31>
			LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff fda5 	bl	800a600 <LL_EXTI_DisableRisingTrig_0_31>
		if(mode == GpioModeAltFunctionPushPull || mode == GpioModeAltFunctionOpenDrain) {
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d002      	beq.n	800aac2 <hal_gpio_init_alt+0x3da>
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d11a      	bne.n	800aaf8 <hal_gpio_init_alt+0x410>
			if(hal_gpio_get_pin_number(gpio) < 8) {
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff fdd6 	bl	800a674 <hal_gpio_get_pin_number>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b07      	cmp	r3, #7
 800aacc:	d80a      	bhi.n	800aae4 <hal_gpio_init_alt+0x3fc>
				LL_GPIO_SetAFPin_0_7(gpio->port, gpio->pin, alt_fn);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	889b      	ldrh	r3, [r3, #4]
 800aad6:	4619      	mov	r1, r3
 800aad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aadc:	461a      	mov	r2, r3
 800aade:	f7ff fc7e 	bl	800a3de <LL_GPIO_SetAFPin_0_7>
 800aae2:	e009      	b.n	800aaf8 <hal_gpio_init_alt+0x410>
				LL_GPIO_SetAFPin_8_15(gpio->port, gpio->pin, alt_fn);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6818      	ldr	r0, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	889b      	ldrh	r3, [r3, #4]
 800aaec:	4619      	mov	r1, r3
 800aaee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f7ff fca2 	bl	800a43c <LL_GPIO_SetAFPin_8_15>
		switch(mode) {
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	2b05      	cmp	r3, #5
 800aafc:	d864      	bhi.n	800abc8 <hal_gpio_init_alt+0x4e0>
 800aafe:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <hal_gpio_init_alt+0x41c>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab1d 	.word	0x0800ab1d
 800ab08:	0800ab2f 	.word	0x0800ab2f
 800ab0c:	0800ab51 	.word	0x0800ab51
 800ab10:	0800ab73 	.word	0x0800ab73
 800ab14:	0800ab95 	.word	0x0800ab95
 800ab18:	0800abb7 	.word	0x0800abb7
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_INPUT);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6818      	ldr	r0, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	889b      	ldrh	r3, [r3, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	4619      	mov	r1, r3
 800ab28:	f7ff fbb4 	bl	800a294 <LL_GPIO_SetPinMode>
			break;
 800ab2c:	e04d      	b.n	800abca <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	889b      	ldrh	r3, [r3, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f7ff fbab 	bl	800a294 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	889b      	ldrh	r3, [r3, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	4619      	mov	r1, r3
 800ab4a:	f7ff fbd2 	bl	800a2f2 <LL_GPIO_SetPinOutputType>
			break;
 800ab4e:	e03c      	b.n	800abca <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_OUTPUT);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	889b      	ldrh	r3, [r3, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	f7ff fb9a 	bl	800a294 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	889b      	ldrh	r3, [r3, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f7ff fbc1 	bl	800a2f2 <LL_GPIO_SetPinOutputType>
			break;
 800ab70:	e02b      	b.n	800abca <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	889b      	ldrh	r3, [r3, #4]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	f7ff fb89 	bl	800a294 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_PUSHPULL);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	889b      	ldrh	r3, [r3, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f7ff fbb0 	bl	800a2f2 <LL_GPIO_SetPinOutputType>
			break;
 800ab92:	e01a      	b.n	800abca <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ALTERNATE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	889b      	ldrh	r3, [r3, #4]
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	4619      	mov	r1, r3
 800aba0:	f7ff fb78 	bl	800a294 <LL_GPIO_SetPinMode>
			LL_GPIO_SetPinOutputType(gpio->port, gpio->pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	889b      	ldrh	r3, [r3, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	4619      	mov	r1, r3
 800abb0:	f7ff fb9f 	bl	800a2f2 <LL_GPIO_SetPinOutputType>
			break;
 800abb4:	e009      	b.n	800abca <hal_gpio_init_alt+0x4e2>
			LL_GPIO_SetPinMode(gpio->port, gpio->pin, LL_GPIO_MODE_ANALOG);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6818      	ldr	r0, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	889b      	ldrh	r3, [r3, #4]
 800abbe:	2203      	movs	r2, #3
 800abc0:	4619      	mov	r1, r3
 800abc2:	f7ff fb67 	bl	800a294 <LL_GPIO_SetPinMode>
			break;
 800abc6:	e000      	b.n	800abca <hal_gpio_init_alt+0x4e2>
			break;
 800abc8:	bf00      	nop
}
 800abca:	bf00      	nop
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop

0800abd4 <vApplicationMallocFailedHook>:
*    The size of the FreeRTOS heap is set by the configTOTAL_HEAP_SIZE
*    configuration constant in FreeRTOSConfig.h
*
*/

void vApplicationMallocFailedHook(void) {
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
        __asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	607b      	str	r3, [r7, #4]
    }
 800abec:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800abee:	e7fe      	b.n	800abee <vApplicationMallocFailedHook+0x1a>

0800abf0 <vApplicationStackOverflowHook>:
*  Function description
*    Run time stack overflow checking is performed if
*    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.
*    This hook function is called if a stack overflow is detected.
*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char * pcTaskName) {
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
        __asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	60fb      	str	r3, [r7, #12]
    }
 800ac0c:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) xTask;
  taskDISABLE_INTERRUPTS();
  for( ;; );
 800ac0e:	e7fe      	b.n	800ac0e <vApplicationStackOverflowHook+0x1e>

0800ac10 <vApplicationGetIdleTaskMemory>:
*
*       vApplicationGetIdleTaskMemory()
*
*/
#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize ) {
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
  state will be stored. */
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4a07      	ldr	r2, [pc, #28]	; (800ac3c <vApplicationGetIdleTaskMemory+0x2c>)
 800ac20:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Idle task's stack. */
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	4a06      	ldr	r2, [pc, #24]	; (800ac40 <vApplicationGetIdleTaskMemory+0x30>)
 800ac26:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac2e:	601a      	str	r2, [r3, #0]
}
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	200047d8 	.word	0x200047d8
 800ac40:	20004834 	.word	0x20004834

0800ac44 <vApplicationGetTimerTaskMemory>:
*
*/
/*-----------------------------------------------------------*/

#if configSUPPORT_STATIC_ALLOCATION == 1
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize ) {
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  /* Pass out a pointer to the StaticTask_t structure in which the Timer
  task's state will be stored. */
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4a07      	ldr	r2, [pc, #28]	; (800ac70 <vApplicationGetTimerTaskMemory+0x2c>)
 800ac54:	601a      	str	r2, [r3, #0]

  /* Pass out the array that will be used as the Timer task's stack. */
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	4a06      	ldr	r2, [pc, #24]	; (800ac74 <vApplicationGetTimerTaskMemory+0x30>)
 800ac5a:	601a      	str	r2, [r3, #0]

  /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
  Note that, as the array is necessarily of type StackType_t,
  configMINIMAL_STACK_SIZE is specified in words, not bytes. */
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac62:	601a      	str	r2, [r3, #0]
}
 800ac64:	bf00      	nop
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	20005034 	.word	0x20005034
 800ac74:	20005090 	.word	0x20005090

0800ac78 <__NVIC_GetPriorityGrouping>:
{
 800ac78:	b480      	push	{r7}
 800ac7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <__NVIC_GetPriorityGrouping+0x18>)
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	0a1b      	lsrs	r3, r3, #8
 800ac82:	f003 0307 	and.w	r3, r3, #7
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	e000ed00 	.word	0xe000ed00

0800ac94 <__NVIC_EnableIRQ>:
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	db0b      	blt.n	800acbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	f003 021f 	and.w	r2, r3, #31
 800acac:	4907      	ldr	r1, [pc, #28]	; (800accc <__NVIC_EnableIRQ+0x38>)
 800acae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acb2:	095b      	lsrs	r3, r3, #5
 800acb4:	2001      	movs	r0, #1
 800acb6:	fa00 f202 	lsl.w	r2, r0, r2
 800acba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800acbe:	bf00      	nop
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	e000e100 	.word	0xe000e100

0800acd0 <__NVIC_SetPriority>:
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	6039      	str	r1, [r7, #0]
 800acda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	db0a      	blt.n	800acfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	490c      	ldr	r1, [pc, #48]	; (800ad1c <__NVIC_SetPriority+0x4c>)
 800acea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acee:	0112      	lsls	r2, r2, #4
 800acf0:	b2d2      	uxtb	r2, r2
 800acf2:	440b      	add	r3, r1
 800acf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800acf8:	e00a      	b.n	800ad10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	4908      	ldr	r1, [pc, #32]	; (800ad20 <__NVIC_SetPriority+0x50>)
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	f003 030f 	and.w	r3, r3, #15
 800ad06:	3b04      	subs	r3, #4
 800ad08:	0112      	lsls	r2, r2, #4
 800ad0a:	b2d2      	uxtb	r2, r2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	761a      	strb	r2, [r3, #24]
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	e000e100 	.word	0xe000e100
 800ad20:	e000ed00 	.word	0xe000ed00

0800ad24 <NVIC_EncodePriority>:
{
 800ad24:	b480      	push	{r7}
 800ad26:	b089      	sub	sp, #36	; 0x24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	f1c3 0307 	rsb	r3, r3, #7
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	bf28      	it	cs
 800ad42:	2304      	movcs	r3, #4
 800ad44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	2b06      	cmp	r3, #6
 800ad4c:	d902      	bls.n	800ad54 <NVIC_EncodePriority+0x30>
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	3b03      	subs	r3, #3
 800ad52:	e000      	b.n	800ad56 <NVIC_EncodePriority+0x32>
 800ad54:	2300      	movs	r3, #0
 800ad56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad62:	43da      	mvns	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	401a      	ands	r2, r3
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ad6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	fa01 f303 	lsl.w	r3, r1, r3
 800ad76:	43d9      	mvns	r1, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad7c:	4313      	orrs	r3, r2
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3724      	adds	r7, #36	; 0x24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <LL_I2C_EnableClockStretching>:
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]
}
 800ad9e:	bf00      	nop
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <LL_I2C_DisableGeneralCall>:
{
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <LL_I2C_SetOwnAddress2>:
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60da      	str	r2, [r3, #12]
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <LL_I2C_DisableOwnAddress2>:
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f023 0201 	bic.w	r2, r3, #1
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60da      	str	r2, [r3, #12]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <LL_DMA_SetDataTransferDirection>:
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800ae1c:	4a0d      	ldr	r2, [pc, #52]	; (800ae54 <LL_DMA_SetDataTransferDirection+0x44>)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	4413      	add	r3, r2
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	461a      	mov	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ae30:	4908      	ldr	r1, [pc, #32]	; (800ae54 <LL_DMA_SetDataTransferDirection+0x44>)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	440b      	add	r3, r1
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	440b      	add	r3, r1
 800ae3e:	4619      	mov	r1, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	600b      	str	r3, [r1, #0]
}
 800ae46:	bf00      	nop
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	0800d858 	.word	0x0800d858

0800ae58 <LL_DMA_SetMode>:
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800ae64:	4a0d      	ldr	r2, [pc, #52]	; (800ae9c <LL_DMA_SetMode+0x44>)
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	4413      	add	r3, r2
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	4413      	add	r3, r2
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800ae78:	4908      	ldr	r1, [pc, #32]	; (800ae9c <LL_DMA_SetMode+0x44>)
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	440b      	add	r3, r1
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	4619      	mov	r1, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	440b      	add	r3, r1
 800ae86:	4619      	mov	r1, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	600b      	str	r3, [r1, #0]
}
 800ae8e:	bf00      	nop
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	0800d858 	.word	0x0800d858

0800aea0 <LL_DMA_SetPeriphIncMode>:
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800aeac:	4a0d      	ldr	r2, [pc, #52]	; (800aee4 <LL_DMA_SetPeriphIncMode+0x44>)
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	4413      	add	r3, r2
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aec0:	4908      	ldr	r1, [pc, #32]	; (800aee4 <LL_DMA_SetPeriphIncMode+0x44>)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	440b      	add	r3, r1
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	4619      	mov	r1, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	440b      	add	r3, r1
 800aece:	4619      	mov	r1, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	600b      	str	r3, [r1, #0]
}
 800aed6:	bf00      	nop
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	0800d858 	.word	0x0800d858

0800aee8 <LL_DMA_SetMemoryIncMode>:
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800aef4:	4a0d      	ldr	r2, [pc, #52]	; (800af2c <LL_DMA_SetMemoryIncMode+0x44>)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4413      	add	r3, r2
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4413      	add	r3, r2
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af08:	4908      	ldr	r1, [pc, #32]	; (800af2c <LL_DMA_SetMemoryIncMode+0x44>)
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	440b      	add	r3, r1
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	4619      	mov	r1, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	440b      	add	r3, r1
 800af16:	4619      	mov	r1, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	600b      	str	r3, [r1, #0]
}
 800af1e:	bf00      	nop
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	0800d858 	.word	0x0800d858

0800af30 <LL_DMA_SetPeriphSize>:
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800af3c:	4a0d      	ldr	r2, [pc, #52]	; (800af74 <LL_DMA_SetPeriphSize+0x44>)
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	4413      	add	r3, r2
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	461a      	mov	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	4413      	add	r3, r2
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800af50:	4908      	ldr	r1, [pc, #32]	; (800af74 <LL_DMA_SetPeriphSize+0x44>)
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	440b      	add	r3, r1
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	4619      	mov	r1, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	440b      	add	r3, r1
 800af5e:	4619      	mov	r1, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4313      	orrs	r3, r2
 800af64:	600b      	str	r3, [r1, #0]
}
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	0800d858 	.word	0x0800d858

0800af78 <LL_DMA_SetMemorySize>:
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800af84:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <LL_DMA_SetMemorySize+0x44>)
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	4413      	add	r3, r2
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	461a      	mov	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	4413      	add	r3, r2
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800af98:	4908      	ldr	r1, [pc, #32]	; (800afbc <LL_DMA_SetMemorySize+0x44>)
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	440b      	add	r3, r1
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	4619      	mov	r1, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	440b      	add	r3, r1
 800afa6:	4619      	mov	r1, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4313      	orrs	r3, r2
 800afac:	600b      	str	r3, [r1, #0]
}
 800afae:	bf00      	nop
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	0800d858 	.word	0x0800d858

0800afc0 <LL_DMA_SetStreamPriorityLevel>:
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800afcc:	4a0d      	ldr	r2, [pc, #52]	; (800b004 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	4413      	add	r3, r2
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	4413      	add	r3, r2
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800afe0:	4908      	ldr	r1, [pc, #32]	; (800b004 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	440b      	add	r3, r1
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	4619      	mov	r1, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	440b      	add	r3, r1
 800afee:	4619      	mov	r1, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	600b      	str	r3, [r1, #0]
}
 800aff6:	bf00      	nop
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	0800d858 	.word	0x0800d858

0800b008 <LL_DMA_SetChannelSelection>:
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800b014:	4a0d      	ldr	r2, [pc, #52]	; (800b04c <LL_DMA_SetChannelSelection+0x44>)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	4413      	add	r3, r2
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	461a      	mov	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4413      	add	r3, r2
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800b028:	4908      	ldr	r1, [pc, #32]	; (800b04c <LL_DMA_SetChannelSelection+0x44>)
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	440b      	add	r3, r1
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	4619      	mov	r1, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	440b      	add	r3, r1
 800b036:	4619      	mov	r1, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	600b      	str	r3, [r1, #0]
}
 800b03e:	bf00      	nop
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	0800d858 	.word	0x0800d858

0800b050 <LL_DMA_DisableFifoMode>:
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800b05a:	4a0c      	ldr	r2, [pc, #48]	; (800b08c <LL_DMA_DisableFifoMode+0x3c>)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	4413      	add	r3, r2
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4413      	add	r3, r2
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	4908      	ldr	r1, [pc, #32]	; (800b08c <LL_DMA_DisableFifoMode+0x3c>)
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	440a      	add	r2, r1
 800b070:	7812      	ldrb	r2, [r2, #0]
 800b072:	4611      	mov	r1, r2
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	440a      	add	r2, r1
 800b078:	f023 0304 	bic.w	r3, r3, #4
 800b07c:	6153      	str	r3, [r2, #20]
}
 800b07e:	bf00      	nop
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	0800d858 	.word	0x0800d858

0800b090 <i2c_init>:

#define I2C_MUTEX_TIMEOUT 1000 /* 1sec */


void i2c_init(I2cID i2c_id)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 800b09a:	f7fa f97d 	bl	8005398 <vPortEnterCritical>

	switch(i2c_id) {
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d002      	beq.n	800b0aa <i2c_init+0x1a>
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d00f      	beq.n	800b0c8 <i2c_init+0x38>
 800b0a8:	e01d      	b.n	800b0e6 <i2c_init+0x56>
	case I2cId1:
		i2c1_init();
 800b0aa:	f000 f835 	bl	800b118 <i2c1_init>
		i2c1drv.i2c = I2C1;
 800b0ae:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <i2c_init+0x6c>)
 800b0b0:	4a13      	ldr	r2, [pc, #76]	; (800b100 <i2c_init+0x70>)
 800b0b2:	601a      	str	r2, [r3, #0]
		i2c1drv.mutex = xSemaphoreCreateMutex();
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	f7fa fc65 	bl	8005984 <xQueueCreateMutex>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4a0f      	ldr	r2, [pc, #60]	; (800b0fc <i2c_init+0x6c>)
 800b0be:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c1 init");
 800b0c0:	4810      	ldr	r0, [pc, #64]	; (800b104 <i2c_init+0x74>)
 800b0c2:	f7fe fdef 	bl	8009ca4 <hal_cli_printf>
		break;
 800b0c6:	e012      	b.n	800b0ee <i2c_init+0x5e>

	case I2cId3:
		i2c3_init();
 800b0c8:	f000 f8ee 	bl	800b2a8 <i2c3_init>
		i2c3drv.i2c = I2C3;
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <i2c_init+0x78>)
 800b0ce:	4a0f      	ldr	r2, [pc, #60]	; (800b10c <i2c_init+0x7c>)
 800b0d0:	601a      	str	r2, [r3, #0]
		i2c3drv.mutex = xSemaphoreCreateMutex();
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	f7fa fc56 	bl	8005984 <xQueueCreateMutex>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	4a0b      	ldr	r2, [pc, #44]	; (800b108 <i2c_init+0x78>)
 800b0dc:	6053      	str	r3, [r2, #4]
		hal_cli_printf("i2c3 init");
 800b0de:	480c      	ldr	r0, [pc, #48]	; (800b110 <i2c_init+0x80>)
 800b0e0:	f7fe fde0 	bl	8009ca4 <hal_cli_printf>
		break;
 800b0e4:	e003      	b.n	800b0ee <i2c_init+0x5e>

	default:
		hal_cli_printf("i2c id not exist");
 800b0e6:	480b      	ldr	r0, [pc, #44]	; (800b114 <i2c_init+0x84>)
 800b0e8:	f7fe fddc 	bl	8009ca4 <hal_cli_printf>
		break;
 800b0ec:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 800b0ee:	f7fa f983 	bl	80053f8 <vPortExitCritical>
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20005490 	.word	0x20005490
 800b100:	40005400 	.word	0x40005400
 800b104:	0800d638 	.word	0x0800d638
 800b108:	20005498 	.word	0x20005498
 800b10c:	40005c00 	.word	0x40005c00
 800b110:	0800d644 	.word	0x0800d644
 800b114:	0800d650 	.word	0x0800d650

0800b118 <i2c1_init>:

	return byte;
}

static void i2c1_init(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b08a      	sub	sp, #40	; 0x28
 800b11c:	af02      	add	r7, sp, #8
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800b11e:	463b      	mov	r3, r7
 800b120:	2220      	movs	r2, #32
 800b122:	2100      	movs	r1, #0
 800b124:	4618      	mov	r0, r3
 800b126:	f001 fd55 	bl	800cbd4 <memset>

	hal_gpio_init_alt(
 800b12a:	2304      	movs	r3, #4
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	2303      	movs	r3, #3
 800b130:	2200      	movs	r2, #0
 800b132:	2104      	movs	r1, #4
 800b134:	4857      	ldr	r0, [pc, #348]	; (800b294 <i2c1_init+0x17c>)
 800b136:	f7ff fad7 	bl	800a6e8 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

	hal_gpio_init_alt(
 800b13a:	2304      	movs	r3, #4
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	2303      	movs	r3, #3
 800b140:	2200      	movs	r2, #0
 800b142:	2104      	movs	r1, #4
 800b144:	4854      	ldr	r0, [pc, #336]	; (800b298 <i2c1_init+0x180>)
 800b146:	f7ff facf 	bl	800a6e8 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C1);

  /* I2C1_TX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_TX_STREAM, DMA_I2C1_TX_CHANNEL);
 800b14a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b14e:	2106      	movs	r1, #6
 800b150:	4852      	ldr	r0, [pc, #328]	; (800b29c <i2c1_init+0x184>)
 800b152:	f7ff ff59 	bl	800b008 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800b156:	2240      	movs	r2, #64	; 0x40
 800b158:	2106      	movs	r1, #6
 800b15a:	4850      	ldr	r0, [pc, #320]	; (800b29c <i2c1_init+0x184>)
 800b15c:	f7ff fe58 	bl	800ae10 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800b160:	2200      	movs	r2, #0
 800b162:	2106      	movs	r1, #6
 800b164:	484d      	ldr	r0, [pc, #308]	; (800b29c <i2c1_init+0x184>)
 800b166:	f7ff ff2b 	bl	800afc0 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MODE_NORMAL);
 800b16a:	2200      	movs	r2, #0
 800b16c:	2106      	movs	r1, #6
 800b16e:	484b      	ldr	r0, [pc, #300]	; (800b29c <i2c1_init+0x184>)
 800b170:	f7ff fe72 	bl	800ae58 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800b174:	2200      	movs	r2, #0
 800b176:	2106      	movs	r1, #6
 800b178:	4848      	ldr	r0, [pc, #288]	; (800b29c <i2c1_init+0x184>)
 800b17a:	f7ff fe91 	bl	800aea0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800b17e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b182:	2106      	movs	r1, #6
 800b184:	4845      	ldr	r0, [pc, #276]	; (800b29c <i2c1_init+0x184>)
 800b186:	f7ff feaf 	bl	800aee8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800b18a:	2200      	movs	r2, #0
 800b18c:	2106      	movs	r1, #6
 800b18e:	4843      	ldr	r0, [pc, #268]	; (800b29c <i2c1_init+0x184>)
 800b190:	f7ff fece 	bl	800af30 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800b194:	2200      	movs	r2, #0
 800b196:	2106      	movs	r1, #6
 800b198:	4840      	ldr	r0, [pc, #256]	; (800b29c <i2c1_init+0x184>)
 800b19a:	f7ff feed 	bl	800af78 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_TX_STREAM);
 800b19e:	2106      	movs	r1, #6
 800b1a0:	483e      	ldr	r0, [pc, #248]	; (800b29c <i2c1_init+0x184>)
 800b1a2:	f7ff ff55 	bl	800b050 <LL_DMA_DisableFifoMode>

  /* I2C1_RX Init */
  LL_DMA_SetChannelSelection(DMA1, DMA_I2C1_RX_STREAM, DMA_I2C1_RX_CHANNEL);
 800b1a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	483b      	ldr	r0, [pc, #236]	; (800b29c <i2c1_init+0x184>)
 800b1ae:	f7ff ff2b 	bl	800b008 <LL_DMA_SetChannelSelection>
  LL_DMA_SetDataTransferDirection(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	4839      	ldr	r0, [pc, #228]	; (800b29c <i2c1_init+0x184>)
 800b1b8:	f7ff fe2a 	bl	800ae10 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetStreamPriorityLevel(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	4836      	ldr	r0, [pc, #216]	; (800b29c <i2c1_init+0x184>)
 800b1c2:	f7ff fefd 	bl	800afc0 <LL_DMA_SetStreamPriorityLevel>
  LL_DMA_SetMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MODE_NORMAL);
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4834      	ldr	r0, [pc, #208]	; (800b29c <i2c1_init+0x184>)
 800b1cc:	f7ff fe44 	bl	800ae58 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	4831      	ldr	r0, [pc, #196]	; (800b29c <i2c1_init+0x184>)
 800b1d6:	f7ff fe63 	bl	800aea0 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800b1da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1de:	2100      	movs	r1, #0
 800b1e0:	482e      	ldr	r0, [pc, #184]	; (800b29c <i2c1_init+0x184>)
 800b1e2:	f7ff fe81 	bl	800aee8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	482c      	ldr	r0, [pc, #176]	; (800b29c <i2c1_init+0x184>)
 800b1ec:	f7ff fea0 	bl	800af30 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, DMA_I2C1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	4829      	ldr	r0, [pc, #164]	; (800b29c <i2c1_init+0x184>)
 800b1f6:	f7ff febf 	bl	800af78 <LL_DMA_SetMemorySize>
  LL_DMA_DisableFifoMode(DMA1, DMA_I2C1_RX_STREAM);
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4827      	ldr	r0, [pc, #156]	; (800b29c <i2c1_init+0x184>)
 800b1fe:	f7ff ff27 	bl	800b050 <LL_DMA_DisableFifoMode>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800b202:	f7ff fd39 	bl	800ac78 <__NVIC_GetPriorityGrouping>
 800b206:	4603      	mov	r3, r0
 800b208:	2200      	movs	r2, #0
 800b20a:	2105      	movs	r1, #5
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fd89 	bl	800ad24 <NVIC_EncodePriority>
 800b212:	4603      	mov	r3, r0
 800b214:	4619      	mov	r1, r3
 800b216:	201f      	movs	r0, #31
 800b218:	f7ff fd5a 	bl	800acd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b21c:	201f      	movs	r0, #31
 800b21e:	f7ff fd39 	bl	800ac94 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800b222:	f7ff fd29 	bl	800ac78 <__NVIC_GetPriorityGrouping>
 800b226:	4603      	mov	r3, r0
 800b228:	2200      	movs	r2, #0
 800b22a:	2105      	movs	r1, #5
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff fd79 	bl	800ad24 <NVIC_EncodePriority>
 800b232:	4603      	mov	r3, r0
 800b234:	4619      	mov	r1, r3
 800b236:	2020      	movs	r0, #32
 800b238:	f7ff fd4a 	bl	800acd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 800b23c:	2020      	movs	r0, #32
 800b23e:	f7ff fd29 	bl	800ac94 <__NVIC_EnableIRQ>

  /* I2C Initialization */
  LL_I2C_DisableOwnAddress2(I2C1);
 800b242:	4817      	ldr	r0, [pc, #92]	; (800b2a0 <i2c1_init+0x188>)
 800b244:	f7ff fdd4 	bl	800adf0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800b248:	4815      	ldr	r0, [pc, #84]	; (800b2a0 <i2c1_init+0x188>)
 800b24a:	f7ff fdae 	bl	800adaa <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800b24e:	4814      	ldr	r0, [pc, #80]	; (800b2a0 <i2c1_init+0x188>)
 800b250:	f7ff fd9b 	bl	800ad8a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800b254:	2300      	movs	r3, #0
 800b256:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 800b258:	4b12      	ldr	r3, [pc, #72]	; (800b2a4 <i2c1_init+0x18c>)
 800b25a:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800b25c:	2300      	movs	r3, #0
 800b25e:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800b26c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b270:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800b272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b276:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800b278:	463b      	mov	r3, r7
 800b27a:	4619      	mov	r1, r3
 800b27c:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <i2c1_init+0x188>)
 800b27e:	f7f7 fffb 	bl	8003278 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800b282:	2100      	movs	r1, #0
 800b284:	4806      	ldr	r0, [pc, #24]	; (800b2a0 <i2c1_init+0x188>)
 800b286:	f7ff fda0 	bl	800adca <LL_I2C_SetOwnAddress2>
}
 800b28a:	bf00      	nop
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	0800d888 	.word	0x0800d888
 800b298:	0800d890 	.word	0x0800d890
 800b29c:	40026000 	.word	0x40026000
 800b2a0:	40005400 	.word	0x40005400
 800b2a4:	000186a0 	.word	0x000186a0

0800b2a8 <i2c3_init>:

static void i2c3_init(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af02      	add	r7, sp, #8
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f001 fc8d 	bl	800cbd4 <memset>

	hal_gpio_init_alt(
 800b2ba:	2304      	movs	r3, #4
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	2303      	movs	r3, #3
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2104      	movs	r1, #4
 800b2c4:	4829      	ldr	r0, [pc, #164]	; (800b36c <i2c3_init+0xc4>)
 800b2c6:	f7ff fa0f 	bl	800a6e8 <hal_gpio_init_alt>
		GpioModeAltFunctionOpenDrain,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

	hal_gpio_init_alt(
 800b2ca:	2304      	movs	r3, #4
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2104      	movs	r1, #4
 800b2d4:	4826      	ldr	r0, [pc, #152]	; (800b370 <i2c3_init+0xc8>)
 800b2d6:	f7ff fa07 	bl	800a6e8 <hal_gpio_init_alt>
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnI2C3);

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800b2da:	f7ff fccd 	bl	800ac78 <__NVIC_GetPriorityGrouping>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2105      	movs	r1, #5
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7ff fd1d 	bl	800ad24 <NVIC_EncodePriority>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	2048      	movs	r0, #72	; 0x48
 800b2f0:	f7ff fcee 	bl	800acd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 800b2f4:	2048      	movs	r0, #72	; 0x48
 800b2f6:	f7ff fccd 	bl	800ac94 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800b2fa:	f7ff fcbd 	bl	800ac78 <__NVIC_GetPriorityGrouping>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2200      	movs	r2, #0
 800b302:	2105      	movs	r1, #5
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fd0d 	bl	800ad24 <NVIC_EncodePriority>
 800b30a:	4603      	mov	r3, r0
 800b30c:	4619      	mov	r1, r3
 800b30e:	2049      	movs	r0, #73	; 0x49
 800b310:	f7ff fcde 	bl	800acd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 800b314:	2049      	movs	r0, #73	; 0x49
 800b316:	f7ff fcbd 	bl	800ac94 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 800b31a:	4816      	ldr	r0, [pc, #88]	; (800b374 <i2c3_init+0xcc>)
 800b31c:	f7ff fd68 	bl	800adf0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800b320:	4814      	ldr	r0, [pc, #80]	; (800b374 <i2c3_init+0xcc>)
 800b322:	f7ff fd42 	bl	800adaa <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800b326:	4813      	ldr	r0, [pc, #76]	; (800b374 <i2c3_init+0xcc>)
 800b328:	f7ff fd2f 	bl	800ad8a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800b32c:	2300      	movs	r3, #0
 800b32e:	603b      	str	r3, [r7, #0]
  I2C_InitStruct.ClockSpeed = 100000;
 800b330:	4b11      	ldr	r3, [pc, #68]	; (800b378 <i2c3_init+0xd0>)
 800b332:	607b      	str	r3, [r7, #4]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800b334:	2300      	movs	r3, #0
 800b336:	60bb      	str	r3, [r7, #8]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800b338:	2300      	movs	r3, #0
 800b33a:	60fb      	str	r3, [r7, #12]
  I2C_InitStruct.DigitalFilter = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	613b      	str	r3, [r7, #16]
  I2C_InitStruct.OwnAddress1 = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800b344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b348:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800b34a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b34e:	61fb      	str	r3, [r7, #28]
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800b350:	463b      	mov	r3, r7
 800b352:	4619      	mov	r1, r3
 800b354:	4807      	ldr	r0, [pc, #28]	; (800b374 <i2c3_init+0xcc>)
 800b356:	f7f7 ff8f 	bl	8003278 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800b35a:	2100      	movs	r1, #0
 800b35c:	4805      	ldr	r0, [pc, #20]	; (800b374 <i2c3_init+0xcc>)
 800b35e:	f7ff fd34 	bl	800adca <LL_I2C_SetOwnAddress2>
}
 800b362:	bf00      	nop
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	0800d898 	.word	0x0800d898
 800b370:	0800d8a0 	.word	0x0800d8a0
 800b374:	40005c00 	.word	0x40005c00
 800b378:	000186a0 	.word	0x000186a0

0800b37c <DMA1_Stream0_IRQHandler>:



void DMA1_Stream0_IRQHandler(void)
{
 800b37c:	b480      	push	{r7}
 800b37e:	af00      	add	r7, sp, #0

}
 800b380:	bf00      	nop
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800b38a:	b480      	push	{r7}
 800b38c:	af00      	add	r7, sp, #0

}
 800b38e:	bf00      	nop
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0

}
 800b39c:	bf00      	nop
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	af00      	add	r7, sp, #0

}
 800b3aa:	bf00      	nop
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <I2C3_EV_IRQHandler>:


void I2C3_EV_IRQHandler(void)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	af00      	add	r7, sp, #0

}
 800b3b8:	bf00      	nop
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <I2C3_ER_IRQHandler>:


void I2C3_ER_IRQHandler(void)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	af00      	add	r7, sp, #0

}
 800b3c6:	bf00      	nop
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <initThread>:
#include "fatfs.h"
#include "mp3_app.h"

uint32_t temp=0;

void initThread(void* param) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	hal_cli_printf("enter mainthread");
 800b3d8:	4813      	ldr	r0, [pc, #76]	; (800b428 <initThread+0x58>)
 800b3da:	f7fe fc63 	bl	8009ca4 <hal_cli_printf>

	sdio_init();
 800b3de:	f000 f8e3 	bl	800b5a8 <sdio_init>
	MX_FATFS_Init();
 800b3e2:	f7f9 fa09 	bl	80047f8 <MX_FATFS_Init>

	i2c_init(I2cId1);
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	f7ff fe52 	bl	800b090 <i2c_init>
	i2c_init(I2cId3);
 800b3ec:	2003      	movs	r0, #3
 800b3ee:	f7ff fe4f 	bl	800b090 <i2c_init>

	spi_init(SpiId2);
 800b3f2:	2002      	movs	r0, #2
 800b3f4:	f000 fbe4 	bl	800bbc0 <spi_init>
	spi_init(SpiId4);
 800b3f8:	2004      	movs	r0, #4
 800b3fa:	f000 fbe1 	bl	800bbc0 <spi_init>

	adc_init(AdcId1);
 800b3fe:	2001      	movs	r0, #1
 800b400:	f7fe faa2 	bl	8009948 <adc_init>

	hal_resources_init();
 800b404:	f000 f87c 	bl	800b500 <hal_resources_init>



	while(1) {
		hal_adc_getdata(1, &temp);
 800b408:	4908      	ldr	r1, [pc, #32]	; (800b42c <initThread+0x5c>)
 800b40a:	2001      	movs	r0, #1
 800b40c:	f7fe fabe 	bl	800998c <hal_adc_getdata>
		hal_cli_printf("%d",temp);
 800b410:	4b06      	ldr	r3, [pc, #24]	; (800b42c <initThread+0x5c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4619      	mov	r1, r3
 800b416:	4806      	ldr	r0, [pc, #24]	; (800b430 <initThread+0x60>)
 800b418:	f7fe fc44 	bl	8009ca4 <hal_cli_printf>
		vTaskDelay(1000);
 800b41c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b420:	f7fb fa4c 	bl	80068bc <vTaskDelay>
		hal_adc_getdata(1, &temp);
 800b424:	e7f0      	b.n	800b408 <initThread+0x38>
 800b426:	bf00      	nop
 800b428:	0800d758 	.word	0x0800d758
 800b42c:	200054a0 	.word	0x200054a0
 800b430:	0800d76c 	.word	0x0800d76c

0800b434 <main>:

	xTaskCreate(mp3Thread, "mp3_app", 256, NULL, 3, NULL);
	vTaskDelete(NULL);
}

int main(void) {
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af02      	add	r7, sp, #8
	HAL_Init();
 800b43a:	f7f5 f8fb 	bl	8000634 <HAL_Init>

	hal_bus_init_early();
 800b43e:	f7fe fe39 	bl	800a0b4 <hal_bus_init_early>
	hal_clock_init_early();
 800b442:	f7fe fe77 	bl	800a134 <hal_clock_init_early>
	hal_dwt_init_early();
 800b446:	f7fe fecd 	bl	800a1e4 <hal_dwt_init_early>

	hal_resources_init_early();
 800b44a:	f000 f83d 	bl	800b4c8 <hal_resources_init_early>

	hal_uart_init(UartIdUSART1, 115200);
 800b44e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800b452:	2000      	movs	r0, #0
 800b454:	f001 faca 	bl	800c9ec <hal_uart_init>
	hal_cli_init();
 800b458:	f7fe fc5e 	bl	8009d18 <hal_cli_init>

	hal_cli_printf("mcu init early finished");
 800b45c:	4809      	ldr	r0, [pc, #36]	; (800b484 <main+0x50>)
 800b45e:	f7fe fc21 	bl	8009ca4 <hal_cli_printf>

	traceSTART();
 800b462:	f7fe f85b 	bl	800951c <SEGGER_SYSVIEW_Conf>
	xTaskCreate(initThread, "init", 256, NULL, 3, NULL);
 800b466:	2300      	movs	r3, #0
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	2303      	movs	r3, #3
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	2300      	movs	r3, #0
 800b470:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b474:	4904      	ldr	r1, [pc, #16]	; (800b488 <main+0x54>)
 800b476:	4805      	ldr	r0, [pc, #20]	; (800b48c <main+0x58>)
 800b478:	f7fb f8b7 	bl	80065ea <xTaskCreate>
	vTaskStartScheduler();
 800b47c:	f7fb fa56 	bl	800692c <vTaskStartScheduler>

	for(;;);
 800b480:	e7fe      	b.n	800b480 <main+0x4c>
 800b482:	bf00      	nop
 800b484:	0800d770 	.word	0x0800d770
 800b488:	0800d788 	.word	0x0800d788
 800b48c:	0800b3d1 	.word	0x0800b3d1

0800b490 <hal_gpio_write>:


void hal_gpio_init(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed);
void hal_gpio_init_alt(const GpioPin* gpio, const GpioMode mode, const GpioPull pull, const GpioSpeed speed, const GpioAltFn alt_fn);

static inline void hal_gpio_write(const GpioPin* gpio, const bool state) {
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
    if(state == true) {
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d005      	beq.n	800b4ae <hal_gpio_write+0x1e>
        gpio->port->BSRR = gpio->pin;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	889a      	ldrh	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	619a      	str	r2, [r3, #24]
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
    }
}
 800b4ac:	e006      	b.n	800b4bc <hal_gpio_write+0x2c>
        gpio->port->BSRR = (uint32_t)gpio->pin << GPIO_NUMBER;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	889b      	ldrh	r3, [r3, #4]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	0412      	lsls	r2, r2, #16
 800b4ba:	619a      	str	r2, [r3, #24]
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <hal_resources_init_early>:
const GpioPin gpio_vs1053_dcs = {.port = VS1053_DCS_GPIO_PORT, .pin = VS1053_DCS_PIN};
const GpioPin gpio_vs1053_rst = {.port = VS1053_RST_GPIO_PORT, .pin = VS1053_RST_PIN};
const GpioPin gpio_vs1053_dreq = {.port = VS1053_DREQ_GPIO_PORT, .pin = VS1053_DREQ_PIN};


void hal_resources_init_early(void) {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
	/* led */
	hal_gpio_init(&gpio_led_green, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	4809      	ldr	r0, [pc, #36]	; (800b4f8 <hal_resources_init_early+0x30>)
 800b4d4:	f7ff f8ee 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_led_green, 1);
 800b4d8:	2101      	movs	r1, #1
 800b4da:	4807      	ldr	r0, [pc, #28]	; (800b4f8 <hal_resources_init_early+0x30>)
 800b4dc:	f7ff ffd8 	bl	800b490 <hal_gpio_write>
	hal_gpio_init(&gpio_led_red, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	4805      	ldr	r0, [pc, #20]	; (800b4fc <hal_resources_init_early+0x34>)
 800b4e8:	f7ff f8e4 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_led_red, 1);
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	4803      	ldr	r0, [pc, #12]	; (800b4fc <hal_resources_init_early+0x34>)
 800b4f0:	f7ff ffce 	bl	800b490 <hal_gpio_write>
}
 800b4f4:	bf00      	nop
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	0800d860 	.word	0x0800d860
 800b4fc:	0800d868 	.word	0x0800d868

0800b500 <hal_resources_init>:

void hal_resources_init(void) {
 800b500:	b580      	push	{r7, lr}
 800b502:	af00      	add	r7, sp, #0
	/* ssd1306 */
	hal_gpio_init(&gpio_ssd1306_reset, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800b504:	2300      	movs	r3, #0
 800b506:	2201      	movs	r2, #1
 800b508:	2101      	movs	r1, #1
 800b50a:	4820      	ldr	r0, [pc, #128]	; (800b58c <hal_resources_init+0x8c>)
 800b50c:	f7ff f8d2 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_reset, 1);
 800b510:	2101      	movs	r1, #1
 800b512:	481e      	ldr	r0, [pc, #120]	; (800b58c <hal_resources_init+0x8c>)
 800b514:	f7ff ffbc 	bl	800b490 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_dc, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800b518:	2300      	movs	r3, #0
 800b51a:	2201      	movs	r2, #1
 800b51c:	2101      	movs	r1, #1
 800b51e:	481c      	ldr	r0, [pc, #112]	; (800b590 <hal_resources_init+0x90>)
 800b520:	f7ff f8c8 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_dc, 1);
 800b524:	2101      	movs	r1, #1
 800b526:	481a      	ldr	r0, [pc, #104]	; (800b590 <hal_resources_init+0x90>)
 800b528:	f7ff ffb2 	bl	800b490 <hal_gpio_write>
	hal_gpio_init(&gpio_ssd1306_cs, GpioModeOutputPushPull, GpioPullUp, GpioSpeedFreqLow);
 800b52c:	2300      	movs	r3, #0
 800b52e:	2201      	movs	r2, #1
 800b530:	2101      	movs	r1, #1
 800b532:	4818      	ldr	r0, [pc, #96]	; (800b594 <hal_resources_init+0x94>)
 800b534:	f7ff f8be 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_ssd1306_cs, 1);
 800b538:	2101      	movs	r1, #1
 800b53a:	4816      	ldr	r0, [pc, #88]	; (800b594 <hal_resources_init+0x94>)
 800b53c:	f7ff ffa8 	bl	800b490 <hal_gpio_write>

	/* vs1053 */
	hal_gpio_init(&gpio_vs1053_cs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 800b540:	2300      	movs	r3, #0
 800b542:	2200      	movs	r2, #0
 800b544:	2101      	movs	r1, #1
 800b546:	4814      	ldr	r0, [pc, #80]	; (800b598 <hal_resources_init+0x98>)
 800b548:	f7ff f8b4 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_cs, 1);
 800b54c:	2101      	movs	r1, #1
 800b54e:	4812      	ldr	r0, [pc, #72]	; (800b598 <hal_resources_init+0x98>)
 800b550:	f7ff ff9e 	bl	800b490 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dcs, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 800b554:	2300      	movs	r3, #0
 800b556:	2200      	movs	r2, #0
 800b558:	2101      	movs	r1, #1
 800b55a:	4810      	ldr	r0, [pc, #64]	; (800b59c <hal_resources_init+0x9c>)
 800b55c:	f7ff f8aa 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_dcs, 1);
 800b560:	2101      	movs	r1, #1
 800b562:	480e      	ldr	r0, [pc, #56]	; (800b59c <hal_resources_init+0x9c>)
 800b564:	f7ff ff94 	bl	800b490 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_rst, GpioModeOutputPushPull, GpioPullNo, GpioSpeedFreqLow);
 800b568:	2300      	movs	r3, #0
 800b56a:	2200      	movs	r2, #0
 800b56c:	2101      	movs	r1, #1
 800b56e:	480c      	ldr	r0, [pc, #48]	; (800b5a0 <hal_resources_init+0xa0>)
 800b570:	f7ff f8a0 	bl	800a6b4 <hal_gpio_init>
	hal_gpio_write(&gpio_vs1053_rst, 1);
 800b574:	2101      	movs	r1, #1
 800b576:	480a      	ldr	r0, [pc, #40]	; (800b5a0 <hal_resources_init+0xa0>)
 800b578:	f7ff ff8a 	bl	800b490 <hal_gpio_write>
	hal_gpio_init(&gpio_vs1053_dreq, GpioModeInput, GpioPullNo, GpioSpeedFreqLow);
 800b57c:	2300      	movs	r3, #0
 800b57e:	2200      	movs	r2, #0
 800b580:	2100      	movs	r1, #0
 800b582:	4808      	ldr	r0, [pc, #32]	; (800b5a4 <hal_resources_init+0xa4>)
 800b584:	f7ff f896 	bl	800a6b4 <hal_gpio_init>

	/* button */
}
 800b588:	bf00      	nop
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	0800d8d0 	.word	0x0800d8d0
 800b590:	0800d8d8 	.word	0x0800d8d8
 800b594:	0800d8e0 	.word	0x0800d8e0
 800b598:	0800d8e8 	.word	0x0800d8e8
 800b59c:	0800d8f0 	.word	0x0800d8f0
 800b5a0:	0800d8f8 	.word	0x0800d8f8
 800b5a4:	0800d900 	.word	0x0800d900

0800b5a8 <sdio_init>:
SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio;


void sdio_init(void)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
  hsd.Instance = SDIO;
 800b5ac:	4b0c      	ldr	r3, [pc, #48]	; (800b5e0 <sdio_init+0x38>)
 800b5ae:	4a0d      	ldr	r2, [pc, #52]	; (800b5e4 <sdio_init+0x3c>)
 800b5b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800b5b2:	4b0b      	ldr	r3, [pc, #44]	; (800b5e0 <sdio_init+0x38>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800b5b8:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <sdio_init+0x38>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b5be:	4b08      	ldr	r3, [pc, #32]	; (800b5e0 <sdio_init+0x38>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800b5c4:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <sdio_init+0x38>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b5ca:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <sdio_init+0x38>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	615a      	str	r2, [r3, #20]
  /* clock hz = 45 / (2 + ClockDiv) = 9mHz */
  hsd.Init.ClockDiv = 0;
 800b5d0:	4b03      	ldr	r3, [pc, #12]	; (800b5e0 <sdio_init+0x38>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	619a      	str	r2, [r3, #24]
}
 800b5d6:	bf00      	nop
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	200054a4 	.word	0x200054a4
 800b5e4:	40012c00 	.word	0x40012c00

0800b5e8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08c      	sub	sp, #48	; 0x30
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	61bb      	str	r3, [r7, #24]
 800b5f4:	4b60      	ldr	r3, [pc, #384]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f8:	4a5f      	ldr	r2, [pc, #380]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b5fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5fe:	6313      	str	r3, [r2, #48]	; 0x30
 800b600:	4b5d      	ldr	r3, [pc, #372]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	69bb      	ldr	r3, [r7, #24]

	  /* DMA interrupt init */
	  /* DMA2_Stream3_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800b60c:	2200      	movs	r2, #0
 800b60e:	2100      	movs	r1, #0
 800b610:	203b      	movs	r0, #59	; 0x3b
 800b612:	f7f5 f92d 	bl	8000870 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800b616:	203b      	movs	r0, #59	; 0x3b
 800b618:	f7f5 f946 	bl	80008a8 <HAL_NVIC_EnableIRQ>


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b61c:	f107 031c 	add.w	r3, r7, #28
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	605a      	str	r2, [r3, #4]
 800b626:	609a      	str	r2, [r3, #8]
 800b628:	60da      	str	r2, [r3, #12]
 800b62a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a52      	ldr	r2, [pc, #328]	; (800b77c <HAL_SD_MspInit+0x194>)
 800b632:	4293      	cmp	r3, r2
 800b634:	f040 809c 	bne.w	800b770 <HAL_SD_MspInit+0x188>
  {
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b638:	2300      	movs	r3, #0
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	4b4e      	ldr	r3, [pc, #312]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b640:	4a4d      	ldr	r2, [pc, #308]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b642:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b646:	6453      	str	r3, [r2, #68]	; 0x44
 800b648:	4b4b      	ldr	r3, [pc, #300]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b64c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b650:	617b      	str	r3, [r7, #20]
 800b652:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b654:	2300      	movs	r3, #0
 800b656:	613b      	str	r3, [r7, #16]
 800b658:	4b47      	ldr	r3, [pc, #284]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b65c:	4a46      	ldr	r2, [pc, #280]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b65e:	f043 0304 	orr.w	r3, r3, #4
 800b662:	6313      	str	r3, [r2, #48]	; 0x30
 800b664:	4b44      	ldr	r3, [pc, #272]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b668:	f003 0304 	and.w	r3, r3, #4
 800b66c:	613b      	str	r3, [r7, #16]
 800b66e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b670:	2300      	movs	r3, #0
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	4b40      	ldr	r3, [pc, #256]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b678:	4a3f      	ldr	r2, [pc, #252]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b67a:	f043 0308 	orr.w	r3, r3, #8
 800b67e:	6313      	str	r3, [r2, #48]	; 0x30
 800b680:	4b3d      	ldr	r3, [pc, #244]	; (800b778 <HAL_SD_MspInit+0x190>)
 800b682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b684:	f003 0308 	and.w	r3, r3, #8
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800b68c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800b690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b692:	2302      	movs	r3, #2
 800b694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b696:	2300      	movs	r3, #0
 800b698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b69a:	2303      	movs	r3, #3
 800b69c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b69e:	230c      	movs	r3, #12
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6a2:	f107 031c 	add.w	r3, r7, #28
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4835      	ldr	r0, [pc, #212]	; (800b780 <HAL_SD_MspInit+0x198>)
 800b6aa:	f7f5 fca9 	bl	8001000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b6ae:	2304      	movs	r3, #4
 800b6b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b6be:	230c      	movs	r3, #12
 800b6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b6c2:	f107 031c 	add.w	r3, r7, #28
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	482e      	ldr	r0, [pc, #184]	; (800b784 <HAL_SD_MspInit+0x19c>)
 800b6ca:	f7f5 fc99 	bl	8001000 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2105      	movs	r1, #5
 800b6d2:	203b      	movs	r0, #59	; 0x3b
 800b6d4:	f7f5 f8cc 	bl	8000870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800b6d8:	203b      	movs	r0, #59	; 0x3b
 800b6da:	f7f5 f8e5 	bl	80008a8 <HAL_NVIC_EnableIRQ>

    hdma_sdio.Instance = DMA2_Stream3;
 800b6de:	4b2a      	ldr	r3, [pc, #168]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b6e0:	4a2a      	ldr	r2, [pc, #168]	; (800b78c <HAL_SD_MspInit+0x1a4>)
 800b6e2:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 800b6e4:	4b28      	ldr	r3, [pc, #160]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b6e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b6ea:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6ec:	4b26      	ldr	r3, [pc, #152]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 800b6f2:	4b25      	ldr	r3, [pc, #148]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 800b6f8:	4b23      	ldr	r3, [pc, #140]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b6fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6fe:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b700:	4b21      	ldr	r3, [pc, #132]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b706:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b708:	4b1f      	ldr	r3, [pc, #124]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b70a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b70e:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 800b710:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b712:	2220      	movs	r2, #32
 800b714:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 800b716:	4b1c      	ldr	r3, [pc, #112]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b718:	2200      	movs	r2, #0
 800b71a:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b71c:	4b1a      	ldr	r3, [pc, #104]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b71e:	2204      	movs	r2, #4
 800b720:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b722:	4b19      	ldr	r3, [pc, #100]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b724:	2203      	movs	r2, #3
 800b726:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 800b728:	4b17      	ldr	r3, [pc, #92]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b72a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b72e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 800b730:	4b15      	ldr	r3, [pc, #84]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b732:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b736:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 800b738:	4813      	ldr	r0, [pc, #76]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b73a:	f7f5 f8c3 	bl	80008c4 <HAL_DMA_Init>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <HAL_SD_MspInit+0x160>
    {
      ErrorHandler();
 800b744:	f001 f9d0 	bl	800cae8 <ErrorHandler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a0f      	ldr	r2, [pc, #60]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b74c:	641a      	str	r2, [r3, #64]	; 0x40
 800b74e:	4a0e      	ldr	r2, [pc, #56]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a0c      	ldr	r2, [pc, #48]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b758:	63da      	str	r2, [r3, #60]	; 0x3c
 800b75a:	4a0b      	ldr	r2, [pc, #44]	; (800b788 <HAL_SD_MspInit+0x1a0>)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800b760:	2200      	movs	r2, #0
 800b762:	2105      	movs	r1, #5
 800b764:	2031      	movs	r0, #49	; 0x31
 800b766:	f7f5 f883 	bl	8000870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800b76a:	2031      	movs	r0, #49	; 0x31
 800b76c:	f7f5 f89c 	bl	80008a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800b770:	bf00      	nop
 800b772:	3730      	adds	r7, #48	; 0x30
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	40023800 	.word	0x40023800
 800b77c:	40012c00 	.word	0x40012c00
 800b780:	40020800 	.word	0x40020800
 800b784:	40020c00 	.word	0x40020c00
 800b788:	20005528 	.word	0x20005528
 800b78c:	40026458 	.word	0x40026458

0800b790 <DMA2_Stream3_IRQHandler>:
  }
}


void DMA2_Stream3_IRQHandler(void)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_sdio);
 800b794:	4802      	ldr	r0, [pc, #8]	; (800b7a0 <DMA2_Stream3_IRQHandler+0x10>)
 800b796:	f7f5 f9bd 	bl	8000b14 <HAL_DMA_IRQHandler>
}
 800b79a:	bf00      	nop
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20005528 	.word	0x20005528

0800b7a4 <SDIO_IRQHandler>:

void SDIO_IRQHandler(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd);
 800b7a8:	4802      	ldr	r0, [pc, #8]	; (800b7b4 <SDIO_IRQHandler+0x10>)
 800b7aa:	f7f6 f89f 	bl	80018ec <HAL_SD_IRQHandler>
}
 800b7ae:	bf00      	nop
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200054a4 	.word	0x200054a4

0800b7b8 <__NVIC_GetPriorityGrouping>:
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7bc:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <__NVIC_GetPriorityGrouping+0x18>)
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	0a1b      	lsrs	r3, r3, #8
 800b7c2:	f003 0307 	and.w	r3, r3, #7
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	e000ed00 	.word	0xe000ed00

0800b7d4 <__NVIC_EnableIRQ>:
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	db0b      	blt.n	800b7fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	f003 021f 	and.w	r2, r3, #31
 800b7ec:	4907      	ldr	r1, [pc, #28]	; (800b80c <__NVIC_EnableIRQ+0x38>)
 800b7ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f2:	095b      	lsrs	r3, r3, #5
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	fa00 f202 	lsl.w	r2, r0, r2
 800b7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	e000e100 	.word	0xe000e100

0800b810 <__NVIC_SetPriority>:
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	6039      	str	r1, [r7, #0]
 800b81a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b81c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b820:	2b00      	cmp	r3, #0
 800b822:	db0a      	blt.n	800b83a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	b2da      	uxtb	r2, r3
 800b828:	490c      	ldr	r1, [pc, #48]	; (800b85c <__NVIC_SetPriority+0x4c>)
 800b82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b82e:	0112      	lsls	r2, r2, #4
 800b830:	b2d2      	uxtb	r2, r2
 800b832:	440b      	add	r3, r1
 800b834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b838:	e00a      	b.n	800b850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	4908      	ldr	r1, [pc, #32]	; (800b860 <__NVIC_SetPriority+0x50>)
 800b840:	79fb      	ldrb	r3, [r7, #7]
 800b842:	f003 030f 	and.w	r3, r3, #15
 800b846:	3b04      	subs	r3, #4
 800b848:	0112      	lsls	r2, r2, #4
 800b84a:	b2d2      	uxtb	r2, r2
 800b84c:	440b      	add	r3, r1
 800b84e:	761a      	strb	r2, [r3, #24]
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	e000e100 	.word	0xe000e100
 800b860:	e000ed00 	.word	0xe000ed00

0800b864 <NVIC_EncodePriority>:
{
 800b864:	b480      	push	{r7}
 800b866:	b089      	sub	sp, #36	; 0x24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f003 0307 	and.w	r3, r3, #7
 800b876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	f1c3 0307 	rsb	r3, r3, #7
 800b87e:	2b04      	cmp	r3, #4
 800b880:	bf28      	it	cs
 800b882:	2304      	movcs	r3, #4
 800b884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	3304      	adds	r3, #4
 800b88a:	2b06      	cmp	r3, #6
 800b88c:	d902      	bls.n	800b894 <NVIC_EncodePriority+0x30>
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	3b03      	subs	r3, #3
 800b892:	e000      	b.n	800b896 <NVIC_EncodePriority+0x32>
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a2:	43da      	mvns	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	401a      	ands	r2, r3
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b6:	43d9      	mvns	r1, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8bc:	4313      	orrs	r3, r2
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3724      	adds	r7, #36	; 0x24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <LL_SPI_Enable>:
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	601a      	str	r2, [r3, #0]
}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <LL_SPI_SetStandard>:
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f023 0210 	bic.w	r2, r3, #16
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	431a      	orrs	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	605a      	str	r2, [r3, #4]
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <LL_DMA_SetDataTransferDirection>:
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800b91c:	4a0d      	ldr	r2, [pc, #52]	; (800b954 <LL_DMA_SetDataTransferDirection+0x44>)
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	4413      	add	r3, r2
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4413      	add	r3, r2
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b930:	4908      	ldr	r1, [pc, #32]	; (800b954 <LL_DMA_SetDataTransferDirection+0x44>)
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	440b      	add	r3, r1
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	4619      	mov	r1, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	440b      	add	r3, r1
 800b93e:	4619      	mov	r1, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4313      	orrs	r3, r2
 800b944:	600b      	str	r3, [r1, #0]
}
 800b946:	bf00      	nop
 800b948:	3714      	adds	r7, #20
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	0800d908 	.word	0x0800d908

0800b958 <LL_DMA_SetMode>:
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800b964:	4a0d      	ldr	r2, [pc, #52]	; (800b99c <LL_DMA_SetMode+0x44>)
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	4413      	add	r3, r2
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	461a      	mov	r2, r3
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	4413      	add	r3, r2
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800b978:	4908      	ldr	r1, [pc, #32]	; (800b99c <LL_DMA_SetMode+0x44>)
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	440b      	add	r3, r1
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	440b      	add	r3, r1
 800b986:	4619      	mov	r1, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	600b      	str	r3, [r1, #0]
}
 800b98e:	bf00      	nop
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	0800d908 	.word	0x0800d908

0800b9a0 <LL_DMA_SetPeriphIncMode>:
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800b9ac:	4a0d      	ldr	r2, [pc, #52]	; (800b9e4 <LL_DMA_SetPeriphIncMode+0x44>)
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b9c0:	4908      	ldr	r1, [pc, #32]	; (800b9e4 <LL_DMA_SetPeriphIncMode+0x44>)
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	440b      	add	r3, r1
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	440b      	add	r3, r1
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	600b      	str	r3, [r1, #0]
}
 800b9d6:	bf00      	nop
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	0800d908 	.word	0x0800d908

0800b9e8 <LL_DMA_SetMemoryIncMode>:
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800b9f4:	4a0d      	ldr	r2, [pc, #52]	; (800ba2c <LL_DMA_SetMemoryIncMode+0x44>)
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4413      	add	r3, r2
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba08:	4908      	ldr	r1, [pc, #32]	; (800ba2c <LL_DMA_SetMemoryIncMode+0x44>)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	440b      	add	r3, r1
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	4619      	mov	r1, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	440b      	add	r3, r1
 800ba16:	4619      	mov	r1, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	600b      	str	r3, [r1, #0]
}
 800ba1e:	bf00      	nop
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	0800d908 	.word	0x0800d908

0800ba30 <LL_DMA_SetPeriphSize>:
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800ba3c:	4a0d      	ldr	r2, [pc, #52]	; (800ba74 <LL_DMA_SetPeriphSize+0x44>)
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	4413      	add	r3, r2
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	461a      	mov	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	4413      	add	r3, r2
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ba50:	4908      	ldr	r1, [pc, #32]	; (800ba74 <LL_DMA_SetPeriphSize+0x44>)
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	440b      	add	r3, r1
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	4619      	mov	r1, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	440b      	add	r3, r1
 800ba5e:	4619      	mov	r1, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	600b      	str	r3, [r1, #0]
}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	0800d908 	.word	0x0800d908

0800ba78 <LL_DMA_SetMemorySize>:
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800ba84:	4a0d      	ldr	r2, [pc, #52]	; (800babc <LL_DMA_SetMemorySize+0x44>)
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	4413      	add	r3, r2
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	4413      	add	r3, r2
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800ba98:	4908      	ldr	r1, [pc, #32]	; (800babc <LL_DMA_SetMemorySize+0x44>)
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	440b      	add	r3, r1
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	4619      	mov	r1, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	440b      	add	r3, r1
 800baa6:	4619      	mov	r1, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4313      	orrs	r3, r2
 800baac:	600b      	str	r3, [r1, #0]
}
 800baae:	bf00      	nop
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	0800d908 	.word	0x0800d908

0800bac0 <LL_DMA_SetStreamPriorityLevel>:
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800bacc:	4a0d      	ldr	r2, [pc, #52]	; (800bb04 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	4413      	add	r3, r2
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	461a      	mov	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4413      	add	r3, r2
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bae0:	4908      	ldr	r1, [pc, #32]	; (800bb04 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	440b      	add	r3, r1
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	4619      	mov	r1, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	440b      	add	r3, r1
 800baee:	4619      	mov	r1, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	600b      	str	r3, [r1, #0]
}
 800baf6:	bf00      	nop
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	0800d908 	.word	0x0800d908

0800bb08 <LL_DMA_SetChannelSelection>:
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800bb14:	4a0d      	ldr	r2, [pc, #52]	; (800bb4c <LL_DMA_SetChannelSelection+0x44>)
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	4413      	add	r3, r2
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	4413      	add	r3, r2
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800bb28:	4908      	ldr	r1, [pc, #32]	; (800bb4c <LL_DMA_SetChannelSelection+0x44>)
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	440b      	add	r3, r1
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	4619      	mov	r1, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	440b      	add	r3, r1
 800bb36:	4619      	mov	r1, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	600b      	str	r3, [r1, #0]
}
 800bb3e:	bf00      	nop
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	0800d908 	.word	0x0800d908

0800bb50 <LL_DMA_DisableFifoMode>:
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800bb5a:	4a0c      	ldr	r2, [pc, #48]	; (800bb8c <LL_DMA_DisableFifoMode+0x3c>)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4413      	add	r3, r2
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	4908      	ldr	r1, [pc, #32]	; (800bb8c <LL_DMA_DisableFifoMode+0x3c>)
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	440a      	add	r2, r1
 800bb70:	7812      	ldrb	r2, [r2, #0]
 800bb72:	4611      	mov	r1, r2
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	440a      	add	r2, r1
 800bb78:	f023 0304 	bic.w	r3, r3, #4
 800bb7c:	6153      	str	r3, [r2, #20]
}
 800bb7e:	bf00      	nop
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	0800d908 	.word	0x0800d908

0800bb90 <LL_APB2_GRP1_EnableClock>:
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800bb98:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <LL_APB2_GRP1_EnableClock+0x2c>)
 800bb9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb9c:	4907      	ldr	r1, [pc, #28]	; (800bbbc <LL_APB2_GRP1_EnableClock+0x2c>)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <LL_APB2_GRP1_EnableClock+0x2c>)
 800bba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bbae:	68fb      	ldr	r3, [r7, #12]
}
 800bbb0:	bf00      	nop
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	40023800 	.word	0x40023800

0800bbc0 <spi_init>:
spidrv_t spi4drv;
spidrv_t spi5drv;


void spi_init(SpiId spi_id)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 800bbca:	f7f9 fbe5 	bl	8005398 <vPortEnterCritical>

	switch(spi_id) {
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	2b05      	cmp	r3, #5
 800bbd2:	d014      	beq.n	800bbfe <spi_init+0x3e>
 800bbd4:	2b05      	cmp	r3, #5
 800bbd6:	dc19      	bgt.n	800bc0c <spi_init+0x4c>
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d002      	beq.n	800bbe2 <spi_init+0x22>
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	d007      	beq.n	800bbf0 <spi_init+0x30>
 800bbe0:	e014      	b.n	800bc0c <spi_init+0x4c>
	case SpiId2:
		spi2_init(&spi2drv);
 800bbe2:	480f      	ldr	r0, [pc, #60]	; (800bc20 <spi_init+0x60>)
 800bbe4:	f000 f82a 	bl	800bc3c <spi2_init>
		hal_cli_printf("spi2 init");
 800bbe8:	480e      	ldr	r0, [pc, #56]	; (800bc24 <spi_init+0x64>)
 800bbea:	f7fe f85b 	bl	8009ca4 <hal_cli_printf>
		break;
 800bbee:	e011      	b.n	800bc14 <spi_init+0x54>

	case SpiId4:
		spi4_init(&spi4drv);
 800bbf0:	480d      	ldr	r0, [pc, #52]	; (800bc28 <spi_init+0x68>)
 800bbf2:	f000 f84b 	bl	800bc8c <spi4_init>
		hal_cli_printf("spi4 init");
 800bbf6:	480d      	ldr	r0, [pc, #52]	; (800bc2c <spi_init+0x6c>)
 800bbf8:	f7fe f854 	bl	8009ca4 <hal_cli_printf>
		break;
 800bbfc:	e00a      	b.n	800bc14 <spi_init+0x54>

	case SpiId5:
		spi5_init(&spi5drv);
 800bbfe:	480c      	ldr	r0, [pc, #48]	; (800bc30 <spi_init+0x70>)
 800bc00:	f000 f86c 	bl	800bcdc <spi5_init>
		hal_cli_printf("spi5 init");
 800bc04:	480b      	ldr	r0, [pc, #44]	; (800bc34 <spi_init+0x74>)
 800bc06:	f7fe f84d 	bl	8009ca4 <hal_cli_printf>
		break;
 800bc0a:	e003      	b.n	800bc14 <spi_init+0x54>

	default:
		hal_cli_printf("spi id not existed");
 800bc0c:	480a      	ldr	r0, [pc, #40]	; (800bc38 <spi_init+0x78>)
 800bc0e:	f7fe f849 	bl	8009ca4 <hal_cli_printf>
		break;
 800bc12:	bf00      	nop
	}

	taskEXIT_CRITICAL();
 800bc14:	f7f9 fbf0 	bl	80053f8 <vPortExitCritical>
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20005588 	.word	0x20005588
 800bc24:	0800d790 	.word	0x0800d790
 800bc28:	2000559c 	.word	0x2000559c
 800bc2c:	0800d79c 	.word	0x0800d79c
 800bc30:	200055b0 	.word	0x200055b0
 800bc34:	0800d7a8 	.word	0x0800d7a8
 800bc38:	0800d7b4 	.word	0x0800d7b4

0800bc3c <spi2_init>:
	return true;
}


static void spi2_init(spidrv_t* drv)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	spi2_pin_conf();
 800bc44:	f000 f872 	bl	800bd2c <spi2_pin_conf>
	spi2_dma_init();
 800bc48:	f000 f88a 	bl	800bd60 <spi2_dma_init>
	spi2_config();
 800bc4c:	f000 f8cc 	bl	800bde8 <spi2_config>

	LL_SPI_Enable(SPI2);
 800bc50:	480c      	ldr	r0, [pc, #48]	; (800bc84 <spi2_init+0x48>)
 800bc52:	f7ff fe3a 	bl	800b8ca <LL_SPI_Enable>

	drv->spi = SPI2;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a0a      	ldr	r2, [pc, #40]	; (800bc84 <spi2_init+0x48>)
 800bc5a:	601a      	str	r2, [r3, #0]
	drv->dma = DMA1;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a0a      	ldr	r2, [pc, #40]	; (800bc88 <spi2_init+0x4c>)
 800bc60:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2204      	movs	r2, #4
 800bc66:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800bc6e:	2001      	movs	r0, #1
 800bc70:	f7f9 fe88 	bl	8005984 <xQueueCreateMutex>
 800bc74:	4602      	mov	r2, r0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	605a      	str	r2, [r3, #4]
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	40003800 	.word	0x40003800
 800bc88:	40026000 	.word	0x40026000

0800bc8c <spi4_init>:

/* SPI4 init function */
static void spi4_init(spidrv_t* drv)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	spi4_pin_conf();
 800bc94:	f000 f8e6 	bl	800be64 <spi4_pin_conf>
	spi4_dma_init();
 800bc98:	f000 f908 	bl	800beac <spi4_dma_init>
	spi4_config();
 800bc9c:	f000 f988 	bl	800bfb0 <spi4_config>

	LL_SPI_Enable(SPI4);
 800bca0:	480c      	ldr	r0, [pc, #48]	; (800bcd4 <spi4_init+0x48>)
 800bca2:	f7ff fe12 	bl	800b8ca <LL_SPI_Enable>

	drv->spi = SPI4;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a0a      	ldr	r2, [pc, #40]	; (800bcd4 <spi4_init+0x48>)
 800bcaa:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a0a      	ldr	r2, [pc, #40]	; (800bcd8 <spi4_init+0x4c>)
 800bcb0:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_1;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = LL_DMA_STREAM_0;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	f7f9 fe60 	bl	8005984 <xQueueCreateMutex>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	605a      	str	r2, [r3, #4]
}
 800bcca:	bf00      	nop
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	40013400 	.word	0x40013400
 800bcd8:	40026400 	.word	0x40026400

0800bcdc <spi5_init>:

static void spi5_init(spidrv_t* drv)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
	spi5_pin_conf();
 800bce4:	f000 f9a2 	bl	800c02c <spi5_pin_conf>
	spi5_dma_init();
 800bce8:	f000 f9c4 	bl	800c074 <spi5_dma_init>
	spi5_config();
 800bcec:	f000 fa06 	bl	800c0fc <spi5_config>

	LL_SPI_Enable(SPI5);
 800bcf0:	480c      	ldr	r0, [pc, #48]	; (800bd24 <spi5_init+0x48>)
 800bcf2:	f7ff fdea 	bl	800b8ca <LL_SPI_Enable>

	drv->spi = SPI5;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a0a      	ldr	r2, [pc, #40]	; (800bd24 <spi5_init+0x48>)
 800bcfa:	601a      	str	r2, [r3, #0]
	drv->dma = DMA2;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a0a      	ldr	r2, [pc, #40]	; (800bd28 <spi5_init+0x4c>)
 800bd00:	609a      	str	r2, [r3, #8]
	drv->dma_tx_stream = LL_DMA_STREAM_4;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2204      	movs	r2, #4
 800bd06:	60da      	str	r2, [r3, #12]
	drv->dma_rx_stream = 0;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	611a      	str	r2, [r3, #16]

	drv->mutex = xSemaphoreCreateMutex();
 800bd0e:	2001      	movs	r0, #1
 800bd10:	f7f9 fe38 	bl	8005984 <xQueueCreateMutex>
 800bd14:	4602      	mov	r2, r0
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	605a      	str	r2, [r3, #4]
}
 800bd1a:	bf00      	nop
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	40015000 	.word	0x40015000
 800bd28:	40026400 	.word	0x40026400

0800bd2c <spi2_pin_conf>:


static void spi2_pin_conf(void)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 800bd32:	2305      	movs	r3, #5
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	2303      	movs	r3, #3
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2103      	movs	r1, #3
 800bd3c:	4806      	ldr	r0, [pc, #24]	; (800bd58 <spi2_pin_conf+0x2c>)
 800bd3e:	f7fe fcd3 	bl	800a6e8 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 800bd42:	2305      	movs	r3, #5
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	2303      	movs	r3, #3
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2103      	movs	r1, #3
 800bd4c:	4803      	ldr	r0, [pc, #12]	; (800bd5c <spi2_pin_conf+0x30>)
 800bd4e:	f7fe fccb 	bl	800a6e8 <hal_gpio_init_alt>
		&gpio_spi2_mosi,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 800bd52:	bf00      	nop
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	0800d8a8 	.word	0x0800d8a8
 800bd5c:	0800d8b0 	.word	0x0800d8b0

0800bd60 <spi2_dma_init>:

static void spi2_dma_init(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800bd64:	f7ff fd28 	bl	800b7b8 <__NVIC_GetPriorityGrouping>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	2105      	movs	r1, #5
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fd78 	bl	800b864 <NVIC_EncodePriority>
 800bd74:	4603      	mov	r3, r0
 800bd76:	4619      	mov	r1, r3
 800bd78:	200f      	movs	r0, #15
 800bd7a:	f7ff fd49 	bl	800b810 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800bd7e:	200f      	movs	r0, #15
 800bd80:	f7ff fd28 	bl	800b7d4 <__NVIC_EnableIRQ>

	LL_DMA_SetChannelSelection(DMA1, DMA_SPI2_TX_STREAM, DMA_SPI2_TX_CHANNEL);
 800bd84:	2200      	movs	r2, #0
 800bd86:	2104      	movs	r1, #4
 800bd88:	4816      	ldr	r0, [pc, #88]	; (800bde4 <spi2_dma_init+0x84>)
 800bd8a:	f7ff febd 	bl	800bb08 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800bd8e:	2240      	movs	r2, #64	; 0x40
 800bd90:	2104      	movs	r1, #4
 800bd92:	4814      	ldr	r0, [pc, #80]	; (800bde4 <spi2_dma_init+0x84>)
 800bd94:	f7ff fdbc 	bl	800b910 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2104      	movs	r1, #4
 800bd9c:	4811      	ldr	r0, [pc, #68]	; (800bde4 <spi2_dma_init+0x84>)
 800bd9e:	f7ff fe8f 	bl	800bac0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MODE_NORMAL);
 800bda2:	2200      	movs	r2, #0
 800bda4:	2104      	movs	r1, #4
 800bda6:	480f      	ldr	r0, [pc, #60]	; (800bde4 <spi2_dma_init+0x84>)
 800bda8:	f7ff fdd6 	bl	800b958 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800bdac:	2200      	movs	r2, #0
 800bdae:	2104      	movs	r1, #4
 800bdb0:	480c      	ldr	r0, [pc, #48]	; (800bde4 <spi2_dma_init+0x84>)
 800bdb2:	f7ff fdf5 	bl	800b9a0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800bdb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bdba:	2104      	movs	r1, #4
 800bdbc:	4809      	ldr	r0, [pc, #36]	; (800bde4 <spi2_dma_init+0x84>)
 800bdbe:	f7ff fe13 	bl	800b9e8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2104      	movs	r1, #4
 800bdc6:	4807      	ldr	r0, [pc, #28]	; (800bde4 <spi2_dma_init+0x84>)
 800bdc8:	f7ff fe32 	bl	800ba30 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, DMA_SPI2_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800bdcc:	2200      	movs	r2, #0
 800bdce:	2104      	movs	r1, #4
 800bdd0:	4804      	ldr	r0, [pc, #16]	; (800bde4 <spi2_dma_init+0x84>)
 800bdd2:	f7ff fe51 	bl	800ba78 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA1, DMA_SPI2_TX_STREAM);
 800bdd6:	2104      	movs	r1, #4
 800bdd8:	4802      	ldr	r0, [pc, #8]	; (800bde4 <spi2_dma_init+0x84>)
 800bdda:	f7ff feb9 	bl	800bb50 <LL_DMA_DisableFifoMode>
}
 800bdde:	bf00      	nop
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	40026000 	.word	0x40026000

0800bde8 <spi2_config>:

static void spi2_config(void)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08a      	sub	sp, #40	; 0x28
 800bdec:	af00      	add	r7, sp, #0
	 LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800bdee:	463b      	mov	r3, r7
 800bdf0:	2228      	movs	r2, #40	; 0x28
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 feed 	bl	800cbd4 <memset>

	 NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800bdfa:	f7ff fcdd 	bl	800b7b8 <__NVIC_GetPriorityGrouping>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2200      	movs	r2, #0
 800be02:	2105      	movs	r1, #5
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff fd2d 	bl	800b864 <NVIC_EncodePriority>
 800be0a:	4603      	mov	r3, r0
 800be0c:	4619      	mov	r1, r3
 800be0e:	2024      	movs	r0, #36	; 0x24
 800be10:	f7ff fcfe 	bl	800b810 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(SPI2_IRQn);
 800be14:	2024      	movs	r0, #36	; 0x24
 800be16:	f7ff fcdd 	bl	800b7d4 <__NVIC_EnableIRQ>

	 SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800be1a:	2300      	movs	r3, #0
 800be1c:	603b      	str	r3, [r7, #0]
	 SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800be1e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800be22:	607b      	str	r3, [r7, #4]
	 SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800be24:	2300      	movs	r3, #0
 800be26:	60bb      	str	r3, [r7, #8]
	 SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800be28:	2300      	movs	r3, #0
 800be2a:	60fb      	str	r3, [r7, #12]
	 SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800be2c:	2300      	movs	r3, #0
 800be2e:	613b      	str	r3, [r7, #16]
	 SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800be30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be34:	617b      	str	r3, [r7, #20]
	 SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800be36:	2318      	movs	r3, #24
 800be38:	61bb      	str	r3, [r7, #24]
	 SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800be3a:	2300      	movs	r3, #0
 800be3c:	61fb      	str	r3, [r7, #28]
	 SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800be3e:	2300      	movs	r3, #0
 800be40:	623b      	str	r3, [r7, #32]
	 SPI_InitStruct.CRCPoly = 10;
 800be42:	230a      	movs	r3, #10
 800be44:	627b      	str	r3, [r7, #36]	; 0x24
	 LL_SPI_Init(SPI2, &SPI_InitStruct);
 800be46:	463b      	mov	r3, r7
 800be48:	4619      	mov	r1, r3
 800be4a:	4805      	ldr	r0, [pc, #20]	; (800be60 <spi2_config+0x78>)
 800be4c:	f7f8 f8dd 	bl	800400a <LL_SPI_Init>
	 LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800be50:	2100      	movs	r1, #0
 800be52:	4803      	ldr	r0, [pc, #12]	; (800be60 <spi2_config+0x78>)
 800be54:	f7ff fd49 	bl	800b8ea <LL_SPI_SetStandard>
}
 800be58:	bf00      	nop
 800be5a:	3728      	adds	r7, #40	; 0x28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	40003800 	.word	0x40003800

0800be64 <spi4_pin_conf>:

static void spi4_pin_conf(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af02      	add	r7, sp, #8
	hal_gpio_init_alt(
 800be6a:	2305      	movs	r3, #5
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	2303      	movs	r3, #3
 800be70:	2200      	movs	r2, #0
 800be72:	2103      	movs	r1, #3
 800be74:	480a      	ldr	r0, [pc, #40]	; (800bea0 <spi4_pin_conf+0x3c>)
 800be76:	f7fe fc37 	bl	800a6e8 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 800be7a:	2305      	movs	r3, #5
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	2303      	movs	r3, #3
 800be80:	2200      	movs	r2, #0
 800be82:	2103      	movs	r1, #3
 800be84:	4807      	ldr	r0, [pc, #28]	; (800bea4 <spi4_pin_conf+0x40>)
 800be86:	f7fe fc2f 	bl	800a6e8 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);

	hal_gpio_init_alt(
 800be8a:	2305      	movs	r3, #5
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	2303      	movs	r3, #3
 800be90:	2200      	movs	r2, #0
 800be92:	2103      	movs	r1, #3
 800be94:	4804      	ldr	r0, [pc, #16]	; (800bea8 <spi4_pin_conf+0x44>)
 800be96:	f7fe fc27 	bl	800a6e8 <hal_gpio_init_alt>
		&gpio_spi4_miso,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnSpi2);
}
 800be9a:	bf00      	nop
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	0800d8b8 	.word	0x0800d8b8
 800bea4:	0800d8c0 	.word	0x0800d8c0
 800bea8:	0800d8c8 	.word	0x0800d8c8

0800beac <spi4_dma_init>:

static void spi4_dma_init(void)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800beb0:	f7ff fc82 	bl	800b7b8 <__NVIC_GetPriorityGrouping>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2200      	movs	r2, #0
 800beb8:	2105      	movs	r1, #5
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff fcd2 	bl	800b864 <NVIC_EncodePriority>
 800bec0:	4603      	mov	r3, r0
 800bec2:	4619      	mov	r1, r3
 800bec4:	2038      	movs	r0, #56	; 0x38
 800bec6:	f7ff fca3 	bl	800b810 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800beca:	2038      	movs	r0, #56	; 0x38
 800becc:	f7ff fc82 	bl	800b7d4 <__NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800bed0:	f7ff fc72 	bl	800b7b8 <__NVIC_GetPriorityGrouping>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2200      	movs	r2, #0
 800bed8:	2105      	movs	r1, #5
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff fcc2 	bl	800b864 <NVIC_EncodePriority>
 800bee0:	4603      	mov	r3, r0
 800bee2:	4619      	mov	r1, r3
 800bee4:	2039      	movs	r0, #57	; 0x39
 800bee6:	f7ff fc93 	bl	800b810 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800beea:	2039      	movs	r0, #57	; 0x39
 800beec:	f7ff fc72 	bl	800b7d4 <__NVIC_EnableIRQ>

	/* SPI4_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_RX_STREAM, DMA_SPI4_RX_CHANNEL);
 800bef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bef4:	2100      	movs	r1, #0
 800bef6:	482d      	ldr	r0, [pc, #180]	; (800bfac <spi4_dma_init+0x100>)
 800bef8:	f7ff fe06 	bl	800bb08 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800befc:	2200      	movs	r2, #0
 800befe:	2100      	movs	r1, #0
 800bf00:	482a      	ldr	r0, [pc, #168]	; (800bfac <spi4_dma_init+0x100>)
 800bf02:	f7ff fd05 	bl	800b910 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PRIORITY_LOW);
 800bf06:	2200      	movs	r2, #0
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4828      	ldr	r0, [pc, #160]	; (800bfac <spi4_dma_init+0x100>)
 800bf0c:	f7ff fdd8 	bl	800bac0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MODE_NORMAL);
 800bf10:	2200      	movs	r2, #0
 800bf12:	2100      	movs	r1, #0
 800bf14:	4825      	ldr	r0, [pc, #148]	; (800bfac <spi4_dma_init+0x100>)
 800bf16:	f7ff fd1f 	bl	800b958 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	4823      	ldr	r0, [pc, #140]	; (800bfac <spi4_dma_init+0x100>)
 800bf20:	f7ff fd3e 	bl	800b9a0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800bf24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4820      	ldr	r0, [pc, #128]	; (800bfac <spi4_dma_init+0x100>)
 800bf2c:	f7ff fd5c 	bl	800b9e8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800bf30:	2200      	movs	r2, #0
 800bf32:	2100      	movs	r1, #0
 800bf34:	481d      	ldr	r0, [pc, #116]	; (800bfac <spi4_dma_init+0x100>)
 800bf36:	f7ff fd7b 	bl	800ba30 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	481b      	ldr	r0, [pc, #108]	; (800bfac <spi4_dma_init+0x100>)
 800bf40:	f7ff fd9a 	bl	800ba78 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_RX_STREAM);
 800bf44:	2100      	movs	r1, #0
 800bf46:	4819      	ldr	r0, [pc, #100]	; (800bfac <spi4_dma_init+0x100>)
 800bf48:	f7ff fe02 	bl	800bb50 <LL_DMA_DisableFifoMode>

	/* SPI4_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_SPI4_TX_STREAM, DMA_SPI4_TX_CHANNEL);
 800bf4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bf50:	2101      	movs	r1, #1
 800bf52:	4816      	ldr	r0, [pc, #88]	; (800bfac <spi4_dma_init+0x100>)
 800bf54:	f7ff fdd8 	bl	800bb08 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800bf58:	2240      	movs	r2, #64	; 0x40
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	4813      	ldr	r0, [pc, #76]	; (800bfac <spi4_dma_init+0x100>)
 800bf5e:	f7ff fcd7 	bl	800b910 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800bf62:	2200      	movs	r2, #0
 800bf64:	2101      	movs	r1, #1
 800bf66:	4811      	ldr	r0, [pc, #68]	; (800bfac <spi4_dma_init+0x100>)
 800bf68:	f7ff fdaa 	bl	800bac0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MODE_NORMAL);
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2101      	movs	r1, #1
 800bf70:	480e      	ldr	r0, [pc, #56]	; (800bfac <spi4_dma_init+0x100>)
 800bf72:	f7ff fcf1 	bl	800b958 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800bf76:	2200      	movs	r2, #0
 800bf78:	2101      	movs	r1, #1
 800bf7a:	480c      	ldr	r0, [pc, #48]	; (800bfac <spi4_dma_init+0x100>)
 800bf7c:	f7ff fd10 	bl	800b9a0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800bf80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf84:	2101      	movs	r1, #1
 800bf86:	4809      	ldr	r0, [pc, #36]	; (800bfac <spi4_dma_init+0x100>)
 800bf88:	f7ff fd2e 	bl	800b9e8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2101      	movs	r1, #1
 800bf90:	4806      	ldr	r0, [pc, #24]	; (800bfac <spi4_dma_init+0x100>)
 800bf92:	f7ff fd4d 	bl	800ba30 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_SPI4_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800bf96:	2200      	movs	r2, #0
 800bf98:	2101      	movs	r1, #1
 800bf9a:	4804      	ldr	r0, [pc, #16]	; (800bfac <spi4_dma_init+0x100>)
 800bf9c:	f7ff fd6c 	bl	800ba78 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_SPI4_TX_STREAM);
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	4802      	ldr	r0, [pc, #8]	; (800bfac <spi4_dma_init+0x100>)
 800bfa4:	f7ff fdd4 	bl	800bb50 <LL_DMA_DisableFifoMode>
}
 800bfa8:	bf00      	nop
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	40026400 	.word	0x40026400

0800bfb0 <spi4_config>:

static void spi4_config(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	; 0x28
 800bfb4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800bfb6:	463b      	mov	r3, r7
 800bfb8:	2228      	movs	r2, #40	; 0x28
 800bfba:	2100      	movs	r1, #0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 fe09 	bl	800cbd4 <memset>

	/* SPI4 interrupt Init */
	NVIC_SetPriority(SPI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800bfc2:	f7ff fbf9 	bl	800b7b8 <__NVIC_GetPriorityGrouping>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2105      	movs	r1, #5
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff fc49 	bl	800b864 <NVIC_EncodePriority>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	2054      	movs	r0, #84	; 0x54
 800bfd8:	f7ff fc1a 	bl	800b810 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI4_IRQn);
 800bfdc:	2054      	movs	r0, #84	; 0x54
 800bfde:	f7ff fbf9 	bl	800b7d4 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800bfe6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800bfea:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800bfec:	2300      	movs	r3, #0
 800bfee:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800bff4:	2300      	movs	r3, #0
 800bff6:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800bff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bffc:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 800bffe:	2328      	movs	r3, #40	; 0x28
 800c000:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800c002:	2300      	movs	r3, #0
 800c004:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800c006:	2300      	movs	r3, #0
 800c008:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 800c00a:	230a      	movs	r3, #10
 800c00c:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI4, &SPI_InitStruct);
 800c00e:	463b      	mov	r3, r7
 800c010:	4619      	mov	r1, r3
 800c012:	4805      	ldr	r0, [pc, #20]	; (800c028 <spi4_config+0x78>)
 800c014:	f7f7 fff9 	bl	800400a <LL_SPI_Init>
	LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 800c018:	2100      	movs	r1, #0
 800c01a:	4803      	ldr	r0, [pc, #12]	; (800c028 <spi4_config+0x78>)
 800c01c:	f7ff fc65 	bl	800b8ea <LL_SPI_SetStandard>
}
 800c020:	bf00      	nop
 800c022:	3728      	adds	r7, #40	; 0x28
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	40013400 	.word	0x40013400

0800c02c <spi5_pin_conf>:


static void spi5_pin_conf(void)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c032:	463b      	mov	r3, r7
 800c034:	2200      	movs	r2, #0
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	605a      	str	r2, [r3, #4]
 800c03a:	609a      	str	r2, [r3, #8]
 800c03c:	60da      	str	r2, [r3, #12]
 800c03e:	611a      	str	r2, [r3, #16]
 800c040:	615a      	str	r2, [r3, #20]
	/**SPI5 GPIO Configuration
	PF7   ------> SPI5_SCK
	PF8   ------> SPI5_MISO
	PF9   ------> SPI5_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800c042:	f44f 7360 	mov.w	r3, #896	; 0x380
 800c046:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c048:	2302      	movs	r3, #2
 800c04a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c04c:	2303      	movs	r3, #3
 800c04e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c050:	2300      	movs	r3, #0
 800c052:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800c054:	2300      	movs	r3, #0
 800c056:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800c058:	2305      	movs	r3, #5
 800c05a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c05c:	463b      	mov	r3, r7
 800c05e:	4619      	mov	r1, r3
 800c060:	4803      	ldr	r0, [pc, #12]	; (800c070 <spi5_pin_conf+0x44>)
 800c062:	f7f6 ff8a 	bl	8002f7a <LL_GPIO_Init>
}
 800c066:	bf00      	nop
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	40021400 	.word	0x40021400

0800c074 <spi5_dma_init>:

static void spi5_dma_init(void)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	af00      	add	r7, sp, #0
	NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800c078:	f7ff fb9e 	bl	800b7b8 <__NVIC_GetPriorityGrouping>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2200      	movs	r2, #0
 800c080:	2105      	movs	r1, #5
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fbee 	bl	800b864 <NVIC_EncodePriority>
 800c088:	4603      	mov	r3, r0
 800c08a:	4619      	mov	r1, r3
 800c08c:	203c      	movs	r0, #60	; 0x3c
 800c08e:	f7ff fbbf 	bl	800b810 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800c092:	203c      	movs	r0, #60	; 0x3c
 800c094:	f7ff fb9e 	bl	800b7d4 <__NVIC_EnableIRQ>

	/* tx configuration */
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 800c098:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c09c:	2104      	movs	r1, #4
 800c09e:	4816      	ldr	r0, [pc, #88]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0a0:	f7ff fd32 	bl	800bb08 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800c0a4:	2240      	movs	r2, #64	; 0x40
 800c0a6:	2104      	movs	r1, #4
 800c0a8:	4813      	ldr	r0, [pc, #76]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0aa:	f7ff fc31 	bl	800b910 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2104      	movs	r1, #4
 800c0b2:	4811      	ldr	r0, [pc, #68]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0b4:	f7ff fd04 	bl	800bac0 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2104      	movs	r1, #4
 800c0bc:	480e      	ldr	r0, [pc, #56]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0be:	f7ff fc4b 	bl	800b958 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	2104      	movs	r1, #4
 800c0c6:	480c      	ldr	r0, [pc, #48]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0c8:	f7ff fc6a 	bl	800b9a0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 800c0cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0d0:	2104      	movs	r1, #4
 800c0d2:	4809      	ldr	r0, [pc, #36]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0d4:	f7ff fc88 	bl	800b9e8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2104      	movs	r1, #4
 800c0dc:	4806      	ldr	r0, [pc, #24]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0de:	f7ff fca7 	bl	800ba30 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2104      	movs	r1, #4
 800c0e6:	4804      	ldr	r0, [pc, #16]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0e8:	f7ff fcc6 	bl	800ba78 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 800c0ec:	2104      	movs	r1, #4
 800c0ee:	4802      	ldr	r0, [pc, #8]	; (800c0f8 <spi5_dma_init+0x84>)
 800c0f0:	f7ff fd2e 	bl	800bb50 <LL_DMA_DisableFifoMode>
}
 800c0f4:	bf00      	nop
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	40026400 	.word	0x40026400

0800c0fc <spi5_config>:

static void spi5_config(void)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08a      	sub	sp, #40	; 0x28
 800c100:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800c102:	463b      	mov	r3, r7
 800c104:	2228      	movs	r2, #40	; 0x28
 800c106:	2100      	movs	r1, #0
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 fd63 	bl	800cbd4 <memset>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 800c10e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c112:	f7ff fd3d 	bl	800bb90 <LL_APB2_GRP1_EnableClock>

	/* SPI5 interrupt Init */
	NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800c116:	f7ff fb4f 	bl	800b7b8 <__NVIC_GetPriorityGrouping>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2200      	movs	r2, #0
 800c11e:	2105      	movs	r1, #5
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff fb9f 	bl	800b864 <NVIC_EncodePriority>
 800c126:	4603      	mov	r3, r0
 800c128:	4619      	mov	r1, r3
 800c12a:	2055      	movs	r0, #85	; 0x55
 800c12c:	f7ff fb70 	bl	800b810 <__NVIC_SetPriority>
	NVIC_EnableIRQ(SPI5_IRQn);
 800c130:	2055      	movs	r0, #85	; 0x55
 800c132:	f7ff fb4f 	bl	800b7d4 <__NVIC_EnableIRQ>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800c136:	2300      	movs	r3, #0
 800c138:	603b      	str	r3, [r7, #0]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800c13a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c13e:	607b      	str	r3, [r7, #4]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800c140:	2300      	movs	r3, #0
 800c142:	60bb      	str	r3, [r7, #8]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800c144:	2300      	movs	r3, #0
 800c146:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800c148:	2300      	movs	r3, #0
 800c14a:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800c14c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c150:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800c152:	2318      	movs	r3, #24
 800c154:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800c156:	2300      	movs	r3, #0
 800c158:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.CRCPoly = 10;
 800c15e:	230a      	movs	r3, #10
 800c160:	627b      	str	r3, [r7, #36]	; 0x24
	LL_SPI_Init(SPI5, &SPI_InitStruct);
 800c162:	463b      	mov	r3, r7
 800c164:	4619      	mov	r1, r3
 800c166:	4805      	ldr	r0, [pc, #20]	; (800c17c <spi5_config+0x80>)
 800c168:	f7f7 ff4f 	bl	800400a <LL_SPI_Init>
	LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 800c16c:	2100      	movs	r1, #0
 800c16e:	4803      	ldr	r0, [pc, #12]	; (800c17c <spi5_config+0x80>)
 800c170:	f7ff fbbb 	bl	800b8ea <LL_SPI_SetStandard>
}
 800c174:	bf00      	nop
 800c176:	3728      	adds	r7, #40	; 0x28
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	40015000 	.word	0x40015000

0800c180 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800c180:	b480      	push	{r7}
 800c182:	af00      	add	r7, sp, #0

}
 800c184:	bf00      	nop
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <SPI4_IRQHandler>:

void SPI4_IRQHandler(void)
{
 800c18e:	b480      	push	{r7}
 800c190:	af00      	add	r7, sp, #0

}
 800c192:	bf00      	nop
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <SPI5_IRQHandler>:


void SPI5_IRQHandler(void)
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0

}
 800c1a0:	bf00      	nop
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <DMA1_Stream4_IRQHandler>:

/* spi2 dma tx */
void DMA1_Stream4_IRQHandler(void)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	af00      	add	r7, sp, #0

}
 800c1ae:	bf00      	nop
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <DMA2_Stream0_IRQHandler>:


/* spi4 dma rx */
void DMA2_Stream0_IRQHandler(void)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0

}
 800c1bc:	bf00      	nop
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <DMA2_Stream1_IRQHandler>:

/* spi4 dma tx */
void DMA2_Stream1_IRQHandler(void)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	af00      	add	r7, sp, #0

}
 800c1ca:	bf00      	nop
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <DMA2_Stream4_IRQHandler>:

/* spi5 tx dma handler */
void DMA2_Stream4_IRQHandler(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0

}
 800c1d8:	bf00      	nop
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
	...

0800c1e4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	607b      	str	r3, [r7, #4]
 800c1ee:	4b12      	ldr	r3, [pc, #72]	; (800c238 <HAL_MspInit+0x54>)
 800c1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f2:	4a11      	ldr	r2, [pc, #68]	; (800c238 <HAL_MspInit+0x54>)
 800c1f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1f8:	6453      	str	r3, [r2, #68]	; 0x44
 800c1fa:	4b0f      	ldr	r3, [pc, #60]	; (800c238 <HAL_MspInit+0x54>)
 800c1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c202:	607b      	str	r3, [r7, #4]
 800c204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c206:	2300      	movs	r3, #0
 800c208:	603b      	str	r3, [r7, #0]
 800c20a:	4b0b      	ldr	r3, [pc, #44]	; (800c238 <HAL_MspInit+0x54>)
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	4a0a      	ldr	r2, [pc, #40]	; (800c238 <HAL_MspInit+0x54>)
 800c210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c214:	6413      	str	r3, [r2, #64]	; 0x40
 800c216:	4b08      	ldr	r3, [pc, #32]	; (800c238 <HAL_MspInit+0x54>)
 800c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c222:	2200      	movs	r2, #0
 800c224:	210f      	movs	r1, #15
 800c226:	f06f 0001 	mvn.w	r0, #1
 800c22a:	f7f4 fb21 	bl	8000870 <HAL_NVIC_SetPriority>
}
 800c22e:	bf00      	nop
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	40023800 	.word	0x40023800

0800c23c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b08e      	sub	sp, #56	; 0x38
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800c248:	2300      	movs	r3, #0
 800c24a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c24c:	2300      	movs	r3, #0
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	4b33      	ldr	r3, [pc, #204]	; (800c320 <HAL_InitTick+0xe4>)
 800c252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c254:	4a32      	ldr	r2, [pc, #200]	; (800c320 <HAL_InitTick+0xe4>)
 800c256:	f043 0310 	orr.w	r3, r3, #16
 800c25a:	6413      	str	r3, [r2, #64]	; 0x40
 800c25c:	4b30      	ldr	r3, [pc, #192]	; (800c320 <HAL_InitTick+0xe4>)
 800c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c260:	f003 0310 	and.w	r3, r3, #16
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c268:	f107 0210 	add.w	r2, r7, #16
 800c26c:	f107 0314 	add.w	r3, r7, #20
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f7f5 f890 	bl	8001398 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d103      	bne.n	800c28a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800c282:	f7f5 f875 	bl	8001370 <HAL_RCC_GetPCLK1Freq>
 800c286:	6378      	str	r0, [r7, #52]	; 0x34
 800c288:	e004      	b.n	800c294 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800c28a:	f7f5 f871 	bl	8001370 <HAL_RCC_GetPCLK1Freq>
 800c28e:	4603      	mov	r3, r0
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c296:	4a23      	ldr	r2, [pc, #140]	; (800c324 <HAL_InitTick+0xe8>)
 800c298:	fba2 2303 	umull	r2, r3, r2, r3
 800c29c:	0c9b      	lsrs	r3, r3, #18
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c2a2:	4b21      	ldr	r3, [pc, #132]	; (800c328 <HAL_InitTick+0xec>)
 800c2a4:	4a21      	ldr	r2, [pc, #132]	; (800c32c <HAL_InitTick+0xf0>)
 800c2a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800c2a8:	4b1f      	ldr	r3, [pc, #124]	; (800c328 <HAL_InitTick+0xec>)
 800c2aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c2ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c2b0:	4a1d      	ldr	r2, [pc, #116]	; (800c328 <HAL_InitTick+0xec>)
 800c2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c2b6:	4b1c      	ldr	r3, [pc, #112]	; (800c328 <HAL_InitTick+0xec>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c2bc:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <HAL_InitTick+0xec>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c2c2:	4b19      	ldr	r3, [pc, #100]	; (800c328 <HAL_InitTick+0xec>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800c2c8:	4817      	ldr	r0, [pc, #92]	; (800c328 <HAL_InitTick+0xec>)
 800c2ca:	f7f6 f9c7 	bl	800265c <HAL_TIM_Base_Init>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800c2d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d11b      	bne.n	800c314 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800c2dc:	4812      	ldr	r0, [pc, #72]	; (800c328 <HAL_InitTick+0xec>)
 800c2de:	f7f6 fa17 	bl	8002710 <HAL_TIM_Base_Start_IT>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800c2e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d111      	bne.n	800c314 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c2f0:	2036      	movs	r0, #54	; 0x36
 800c2f2:	f7f4 fad9 	bl	80008a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b0f      	cmp	r3, #15
 800c2fa:	d808      	bhi.n	800c30e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	2036      	movs	r0, #54	; 0x36
 800c302:	f7f4 fab5 	bl	8000870 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c306:	4a0a      	ldr	r2, [pc, #40]	; (800c330 <HAL_InitTick+0xf4>)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	e002      	b.n	800c314 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800c314:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3738      	adds	r7, #56	; 0x38
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	40023800 	.word	0x40023800
 800c324:	431bde83 	.word	0x431bde83
 800c328:	200055c4 	.word	0x200055c4
 800c32c:	40001000 	.word	0x40001000
 800c330:	20000000 	.word	0x20000000

0800c334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
  while (1)
 800c338:	e7fe      	b.n	800c338 <NMI_Handler+0x4>

0800c33a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c33a:	b480      	push	{r7}
 800c33c:	af00      	add	r7, sp, #0
  while (1)
 800c33e:	e7fe      	b.n	800c33e <HardFault_Handler+0x4>

0800c340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c340:	b480      	push	{r7}
 800c342:	af00      	add	r7, sp, #0
  while (1)
 800c344:	e7fe      	b.n	800c344 <MemManage_Handler+0x4>

0800c346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c346:	b480      	push	{r7}
 800c348:	af00      	add	r7, sp, #0
  while (1)
 800c34a:	e7fe      	b.n	800c34a <BusFault_Handler+0x4>

0800c34c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c34c:	b480      	push	{r7}
 800c34e:	af00      	add	r7, sp, #0
  while (1)
 800c350:	e7fe      	b.n	800c350 <UsageFault_Handler+0x4>

0800c352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c352:	b480      	push	{r7}
 800c354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c356:	bf00      	nop
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c364:	4802      	ldr	r0, [pc, #8]	; (800c370 <TIM6_DAC_IRQHandler+0x10>)
 800c366:	f7f6 fa43 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c36a:	bf00      	nop
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	200055c4 	.word	0x200055c4

0800c374 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a04      	ldr	r2, [pc, #16]	; (800c394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d101      	bne.n	800c38a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800c386:	f7f4 f977 	bl	8000678 <HAL_IncTick>
  }
}
 800c38a:	bf00      	nop
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	40001000 	.word	0x40001000

0800c398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c398:	b480      	push	{r7}
 800c39a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c39c:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <SystemInit+0x20>)
 800c39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3a2:	4a05      	ldr	r2, [pc, #20]	; (800c3b8 <SystemInit+0x20>)
 800c3a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c3ac:	bf00      	nop
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	e000ed00 	.word	0xe000ed00

0800c3bc <__NVIC_GetPriorityGrouping>:
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c3c0:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <__NVIC_GetPriorityGrouping+0x18>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	0a1b      	lsrs	r3, r3, #8
 800c3c6:	f003 0307 	and.w	r3, r3, #7
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	e000ed00 	.word	0xe000ed00

0800c3d8 <__NVIC_EnableIRQ>:
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	db0b      	blt.n	800c402 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	f003 021f 	and.w	r2, r3, #31
 800c3f0:	4907      	ldr	r1, [pc, #28]	; (800c410 <__NVIC_EnableIRQ+0x38>)
 800c3f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3f6:	095b      	lsrs	r3, r3, #5
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	fa00 f202 	lsl.w	r2, r0, r2
 800c3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	e000e100 	.word	0xe000e100

0800c414 <__NVIC_SetPriority>:
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c424:	2b00      	cmp	r3, #0
 800c426:	db0a      	blt.n	800c43e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	490c      	ldr	r1, [pc, #48]	; (800c460 <__NVIC_SetPriority+0x4c>)
 800c42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c432:	0112      	lsls	r2, r2, #4
 800c434:	b2d2      	uxtb	r2, r2
 800c436:	440b      	add	r3, r1
 800c438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c43c:	e00a      	b.n	800c454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	b2da      	uxtb	r2, r3
 800c442:	4908      	ldr	r1, [pc, #32]	; (800c464 <__NVIC_SetPriority+0x50>)
 800c444:	79fb      	ldrb	r3, [r7, #7]
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	3b04      	subs	r3, #4
 800c44c:	0112      	lsls	r2, r2, #4
 800c44e:	b2d2      	uxtb	r2, r2
 800c450:	440b      	add	r3, r1
 800c452:	761a      	strb	r2, [r3, #24]
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	e000e100 	.word	0xe000e100
 800c464:	e000ed00 	.word	0xe000ed00

0800c468 <NVIC_EncodePriority>:
{
 800c468:	b480      	push	{r7}
 800c46a:	b089      	sub	sp, #36	; 0x24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	f1c3 0307 	rsb	r3, r3, #7
 800c482:	2b04      	cmp	r3, #4
 800c484:	bf28      	it	cs
 800c486:	2304      	movcs	r3, #4
 800c488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	3304      	adds	r3, #4
 800c48e:	2b06      	cmp	r3, #6
 800c490:	d902      	bls.n	800c498 <NVIC_EncodePriority+0x30>
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	3b03      	subs	r3, #3
 800c496:	e000      	b.n	800c49a <NVIC_EncodePriority+0x32>
 800c498:	2300      	movs	r3, #0
 800c49a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a6:	43da      	mvns	r2, r3
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	401a      	ands	r2, r3
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ba:	43d9      	mvns	r1, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4c0:	4313      	orrs	r3, r2
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3724      	adds	r7, #36	; 0x24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <LL_USART_Enable>:
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	60da      	str	r2, [r3, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <LL_USART_IsEnabled>:
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b083      	sub	sp, #12
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c502:	bf0c      	ite	eq
 800c504:	2301      	moveq	r3, #1
 800c506:	2300      	movne	r3, #0
 800c508:	b2db      	uxtb	r3, r3
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <LL_USART_ConfigAsyncMode>:
{
 800c516:	b480      	push	{r7}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	615a      	str	r2, [r3, #20]
}
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <LL_USART_IsActiveFlag_IDLE>:
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 0310 	and.w	r3, r3, #16
 800c552:	2b10      	cmp	r3, #16
 800c554:	bf0c      	ite	eq
 800c556:	2301      	moveq	r3, #1
 800c558:	2300      	movne	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <LL_USART_IsActiveFlag_TXE>:
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c578:	2b80      	cmp	r3, #128	; 0x80
 800c57a:	bf0c      	ite	eq
 800c57c:	2301      	moveq	r3, #1
 800c57e:	2300      	movne	r3, #0
 800c580:	b2db      	uxtb	r3, r3
}
 800c582:	4618      	mov	r0, r3
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <LL_USART_ClearFlag_IDLE>:
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800c59c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
}
 800c5a6:	bf00      	nop
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800c5be:	78fa      	ldrb	r2, [r7, #3]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	605a      	str	r2, [r3, #4]
}
 800c5c4:	bf00      	nop
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <LL_DMA_SetDataTransferDirection>:
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800c5dc:	4a0d      	ldr	r2, [pc, #52]	; (800c614 <LL_DMA_SetDataTransferDirection+0x44>)
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c5f0:	4908      	ldr	r1, [pc, #32]	; (800c614 <LL_DMA_SetDataTransferDirection+0x44>)
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	440b      	add	r3, r1
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	440b      	add	r3, r1
 800c5fe:	4619      	mov	r1, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4313      	orrs	r3, r2
 800c604:	600b      	str	r3, [r1, #0]
}
 800c606:	bf00      	nop
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	0800d928 	.word	0x0800d928

0800c618 <LL_DMA_SetMode>:
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800c624:	4a0d      	ldr	r2, [pc, #52]	; (800c65c <LL_DMA_SetMode+0x44>)
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	4413      	add	r3, r2
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	461a      	mov	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	4413      	add	r3, r2
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800c638:	4908      	ldr	r1, [pc, #32]	; (800c65c <LL_DMA_SetMode+0x44>)
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	440b      	add	r3, r1
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	4619      	mov	r1, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	440b      	add	r3, r1
 800c646:	4619      	mov	r1, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	600b      	str	r3, [r1, #0]
}
 800c64e:	bf00      	nop
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	0800d928 	.word	0x0800d928

0800c660 <LL_DMA_SetPeriphIncMode>:
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800c66c:	4a0d      	ldr	r2, [pc, #52]	; (800c6a4 <LL_DMA_SetPeriphIncMode+0x44>)
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	4413      	add	r3, r2
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	461a      	mov	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	4413      	add	r3, r2
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c680:	4908      	ldr	r1, [pc, #32]	; (800c6a4 <LL_DMA_SetPeriphIncMode+0x44>)
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	440b      	add	r3, r1
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	4619      	mov	r1, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	440b      	add	r3, r1
 800c68e:	4619      	mov	r1, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4313      	orrs	r3, r2
 800c694:	600b      	str	r3, [r1, #0]
}
 800c696:	bf00      	nop
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	0800d928 	.word	0x0800d928

0800c6a8 <LL_DMA_SetMemoryIncMode>:
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800c6b4:	4a0d      	ldr	r2, [pc, #52]	; (800c6ec <LL_DMA_SetMemoryIncMode+0x44>)
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c6c8:	4908      	ldr	r1, [pc, #32]	; (800c6ec <LL_DMA_SetMemoryIncMode+0x44>)
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	440b      	add	r3, r1
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	440b      	add	r3, r1
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	600b      	str	r3, [r1, #0]
}
 800c6de:	bf00      	nop
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	0800d928 	.word	0x0800d928

0800c6f0 <LL_DMA_SetPeriphSize>:
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800c6fc:	4a0d      	ldr	r2, [pc, #52]	; (800c734 <LL_DMA_SetPeriphSize+0x44>)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	4413      	add	r3, r2
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	4413      	add	r3, r2
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c710:	4908      	ldr	r1, [pc, #32]	; (800c734 <LL_DMA_SetPeriphSize+0x44>)
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	440b      	add	r3, r1
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	4619      	mov	r1, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	440b      	add	r3, r1
 800c71e:	4619      	mov	r1, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4313      	orrs	r3, r2
 800c724:	600b      	str	r3, [r1, #0]
}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	0800d928 	.word	0x0800d928

0800c738 <LL_DMA_SetMemorySize>:
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800c744:	4a0d      	ldr	r2, [pc, #52]	; (800c77c <LL_DMA_SetMemorySize+0x44>)
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	4413      	add	r3, r2
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	4413      	add	r3, r2
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800c758:	4908      	ldr	r1, [pc, #32]	; (800c77c <LL_DMA_SetMemorySize+0x44>)
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	440b      	add	r3, r1
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	4619      	mov	r1, r3
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	440b      	add	r3, r1
 800c766:	4619      	mov	r1, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	600b      	str	r3, [r1, #0]
}
 800c76e:	bf00      	nop
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	0800d928 	.word	0x0800d928

0800c780 <LL_DMA_SetStreamPriorityLevel>:
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800c78c:	4a0d      	ldr	r2, [pc, #52]	; (800c7c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	4413      	add	r3, r2
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	461a      	mov	r2, r3
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	4413      	add	r3, r2
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c7a0:	4908      	ldr	r1, [pc, #32]	; (800c7c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	440b      	add	r3, r1
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	440b      	add	r3, r1
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	600b      	str	r3, [r1, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	0800d928 	.word	0x0800d928

0800c7c8 <LL_DMA_GetDataLength>:
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 800c7d2:	4a07      	ldr	r2, [pc, #28]	; (800c7f0 <LL_DMA_GetDataLength+0x28>)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4413      	add	r3, r2
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	b29b      	uxth	r3, r3
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	0800d928 	.word	0x0800d928

0800c7f4 <LL_DMA_SetChannelSelection>:
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800c800:	4a0d      	ldr	r2, [pc, #52]	; (800c838 <LL_DMA_SetChannelSelection+0x44>)
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4413      	add	r3, r2
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	461a      	mov	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	4413      	add	r3, r2
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800c814:	4908      	ldr	r1, [pc, #32]	; (800c838 <LL_DMA_SetChannelSelection+0x44>)
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	440b      	add	r3, r1
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	4619      	mov	r1, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	440b      	add	r3, r1
 800c822:	4619      	mov	r1, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4313      	orrs	r3, r2
 800c828:	600b      	str	r3, [r1, #0]
}
 800c82a:	bf00      	nop
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	0800d928 	.word	0x0800d928

0800c83c <LL_DMA_DisableFifoMode>:
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800c846:	4a0c      	ldr	r2, [pc, #48]	; (800c878 <LL_DMA_DisableFifoMode+0x3c>)
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	4413      	add	r3, r2
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	461a      	mov	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4413      	add	r3, r2
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	4908      	ldr	r1, [pc, #32]	; (800c878 <LL_DMA_DisableFifoMode+0x3c>)
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	440a      	add	r2, r1
 800c85c:	7812      	ldrb	r2, [r2, #0]
 800c85e:	4611      	mov	r1, r2
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	440a      	add	r2, r1
 800c864:	f023 0304 	bic.w	r3, r3, #4
 800c868:	6153      	str	r3, [r2, #20]
}
 800c86a:	bf00      	nop
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	0800d928 	.word	0x0800d928

0800c87c <hal_uart1_init>:
#include "stdlib.h"


static void hal_uart1_init(uint32_t baud);

static void hal_uart1_init(uint32_t baud) {
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08c      	sub	sp, #48	; 0x30
 800c880:	af02      	add	r7, sp, #8
 800c882:	6078      	str	r0, [r7, #4]
	hal_gpio_init_alt(
 800c884:	2307      	movs	r3, #7
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	2303      	movs	r3, #3
 800c88a:	2200      	movs	r2, #0
 800c88c:	2103      	movs	r1, #3
 800c88e:	4853      	ldr	r0, [pc, #332]	; (800c9dc <hal_uart1_init+0x160>)
 800c890:	f7fd ff2a 	bl	800a6e8 <hal_gpio_init_alt>
		&gpio_uart1_tx,
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);
	hal_gpio_init_alt(
 800c894:	2307      	movs	r3, #7
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	2303      	movs	r3, #3
 800c89a:	2200      	movs	r2, #0
 800c89c:	2103      	movs	r1, #3
 800c89e:	4850      	ldr	r0, [pc, #320]	; (800c9e0 <hal_uart1_init+0x164>)
 800c8a0:	f7fd ff22 	bl	800a6e8 <hal_gpio_init_alt>
		GpioModeAltFunctionPushPull,
		GpioPullNo,
		GpioSpeedFreqVeryHigh,
		GpioAltFnUART1);

	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	2105      	movs	r1, #5
 800c8a8:	203a      	movs	r0, #58	; 0x3a
 800c8aa:	f7f3 ffe1 	bl	8000870 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c8ae:	203a      	movs	r0, #58	; 0x3a
 800c8b0:	f7f3 fffa 	bl	80008a8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2105      	movs	r1, #5
 800c8b8:	2046      	movs	r0, #70	; 0x46
 800c8ba:	f7f3 ffd9 	bl	8000870 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800c8be:	2046      	movs	r0, #70	; 0x46
 800c8c0:	f7f3 fff2 	bl	80008a8 <HAL_NVIC_EnableIRQ>

	/* USART1_RX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_RX_STREAM, DMA_USART1_RX_CHANNEL);
 800c8c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c8c8:	2102      	movs	r1, #2
 800c8ca:	4846      	ldr	r0, [pc, #280]	; (800c9e4 <hal_uart1_init+0x168>)
 800c8cc:	f7ff ff92 	bl	800c7f4 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_RX_STREAM, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	2102      	movs	r1, #2
 800c8d4:	4843      	ldr	r0, [pc, #268]	; (800c9e4 <hal_uart1_init+0x168>)
 800c8d6:	f7ff fe7b 	bl	800c5d0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PRIORITY_LOW);
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2102      	movs	r1, #2
 800c8de:	4841      	ldr	r0, [pc, #260]	; (800c9e4 <hal_uart1_init+0x168>)
 800c8e0:	f7ff ff4e 	bl	800c780 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MODE_CIRCULAR);
 800c8e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	483e      	ldr	r0, [pc, #248]	; (800c9e4 <hal_uart1_init+0x168>)
 800c8ec:	f7ff fe94 	bl	800c618 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	2102      	movs	r1, #2
 800c8f4:	483b      	ldr	r0, [pc, #236]	; (800c9e4 <hal_uart1_init+0x168>)
 800c8f6:	f7ff feb3 	bl	800c660 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800c8fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c8fe:	2102      	movs	r1, #2
 800c900:	4838      	ldr	r0, [pc, #224]	; (800c9e4 <hal_uart1_init+0x168>)
 800c902:	f7ff fed1 	bl	800c6a8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800c906:	2200      	movs	r2, #0
 800c908:	2102      	movs	r1, #2
 800c90a:	4836      	ldr	r0, [pc, #216]	; (800c9e4 <hal_uart1_init+0x168>)
 800c90c:	f7ff fef0 	bl	800c6f0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_RX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800c910:	2200      	movs	r2, #0
 800c912:	2102      	movs	r1, #2
 800c914:	4833      	ldr	r0, [pc, #204]	; (800c9e4 <hal_uart1_init+0x168>)
 800c916:	f7ff ff0f 	bl	800c738 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_RX_STREAM);
 800c91a:	2102      	movs	r1, #2
 800c91c:	4831      	ldr	r0, [pc, #196]	; (800c9e4 <hal_uart1_init+0x168>)
 800c91e:	f7ff ff8d 	bl	800c83c <LL_DMA_DisableFifoMode>

	/* USART1_TX Init */
	LL_DMA_SetChannelSelection(DMA2, DMA_USART1_TX_STREAM, DMA_USART1_TX_CHANNEL);
 800c922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c926:	2107      	movs	r1, #7
 800c928:	482e      	ldr	r0, [pc, #184]	; (800c9e4 <hal_uart1_init+0x168>)
 800c92a:	f7ff ff63 	bl	800c7f4 <LL_DMA_SetChannelSelection>
	LL_DMA_SetDataTransferDirection(DMA2, DMA_USART1_TX_STREAM, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800c92e:	2240      	movs	r2, #64	; 0x40
 800c930:	2107      	movs	r1, #7
 800c932:	482c      	ldr	r0, [pc, #176]	; (800c9e4 <hal_uart1_init+0x168>)
 800c934:	f7ff fe4c 	bl	800c5d0 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetStreamPriorityLevel(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PRIORITY_LOW);
 800c938:	2200      	movs	r2, #0
 800c93a:	2107      	movs	r1, #7
 800c93c:	4829      	ldr	r0, [pc, #164]	; (800c9e4 <hal_uart1_init+0x168>)
 800c93e:	f7ff ff1f 	bl	800c780 <LL_DMA_SetStreamPriorityLevel>
	LL_DMA_SetMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MODE_NORMAL);
 800c942:	2200      	movs	r2, #0
 800c944:	2107      	movs	r1, #7
 800c946:	4827      	ldr	r0, [pc, #156]	; (800c9e4 <hal_uart1_init+0x168>)
 800c948:	f7ff fe66 	bl	800c618 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PERIPH_NOINCREMENT);
 800c94c:	2200      	movs	r2, #0
 800c94e:	2107      	movs	r1, #7
 800c950:	4824      	ldr	r0, [pc, #144]	; (800c9e4 <hal_uart1_init+0x168>)
 800c952:	f7ff fe85 	bl	800c660 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MEMORY_INCREMENT);
 800c956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c95a:	2107      	movs	r1, #7
 800c95c:	4821      	ldr	r0, [pc, #132]	; (800c9e4 <hal_uart1_init+0x168>)
 800c95e:	f7ff fea3 	bl	800c6a8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_PDATAALIGN_BYTE);
 800c962:	2200      	movs	r2, #0
 800c964:	2107      	movs	r1, #7
 800c966:	481f      	ldr	r0, [pc, #124]	; (800c9e4 <hal_uart1_init+0x168>)
 800c968:	f7ff fec2 	bl	800c6f0 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA2, DMA_USART1_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 800c96c:	2200      	movs	r2, #0
 800c96e:	2107      	movs	r1, #7
 800c970:	481c      	ldr	r0, [pc, #112]	; (800c9e4 <hal_uart1_init+0x168>)
 800c972:	f7ff fee1 	bl	800c738 <LL_DMA_SetMemorySize>
	LL_DMA_DisableFifoMode(DMA2, DMA_USART1_TX_STREAM);
 800c976:	2107      	movs	r1, #7
 800c978:	481a      	ldr	r0, [pc, #104]	; (800c9e4 <hal_uart1_init+0x168>)
 800c97a:	f7ff ff5f 	bl	800c83c <LL_DMA_DisableFifoMode>

	LL_USART_InitTypeDef USART_InitStruct;

	/* USART1 configuration */
	USART_InitStruct.BaudRate = baud;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c98a:	2300      	movs	r3, #0
 800c98c:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800c98e:	230c      	movs	r3, #12
 800c990:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c992:	2300      	movs	r3, #0
 800c994:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c996:	2300      	movs	r3, #0
 800c998:	627b      	str	r3, [r7, #36]	; 0x24

	LL_USART_Init(USART1, &USART_InitStruct);
 800c99a:	f107 030c 	add.w	r3, r7, #12
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4811      	ldr	r0, [pc, #68]	; (800c9e8 <hal_uart1_init+0x16c>)
 800c9a2:	f7f7 fdeb 	bl	800457c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 800c9a6:	4810      	ldr	r0, [pc, #64]	; (800c9e8 <hal_uart1_init+0x16c>)
 800c9a8:	f7ff fdb5 	bl	800c516 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 800c9ac:	480e      	ldr	r0, [pc, #56]	; (800c9e8 <hal_uart1_init+0x16c>)
 800c9ae:	f7ff fd8e 	bl	800c4ce <LL_USART_Enable>

	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800c9b2:	f7ff fd03 	bl	800c3bc <__NVIC_GetPriorityGrouping>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2105      	movs	r1, #5
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff fd53 	bl	800c468 <NVIC_EncodePriority>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	2025      	movs	r0, #37	; 0x25
 800c9c8:	f7ff fd24 	bl	800c414 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800c9cc:	2025      	movs	r0, #37	; 0x25
 800c9ce:	f7ff fd03 	bl	800c3d8 <__NVIC_EnableIRQ>
}
 800c9d2:	bf00      	nop
 800c9d4:	3728      	adds	r7, #40	; 0x28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	0800d878 	.word	0x0800d878
 800c9e0:	0800d880 	.word	0x0800d880
 800c9e4:	40026400 	.word	0x40026400
 800c9e8:	40011000 	.word	0x40011000

0800c9ec <hal_uart_init>:
}
*/


void hal_uart_init(UartId ch, uint32_t baud)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	6039      	str	r1, [r7, #0]
 800c9f6:	71fb      	strb	r3, [r7, #7]
	if(ch == UartIdUSART1)
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d102      	bne.n	800ca04 <hal_uart_init+0x18>
		hal_uart1_init(baud);
 800c9fe:	6838      	ldr	r0, [r7, #0]
 800ca00:	f7ff ff3c 	bl	800c87c <hal_uart1_init>
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <hal_uart_transfer>:
	}
}


/* polling mode */
void hal_uart_transfer(UartId ch, uint8_t* buf, size_t size) {
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	73fb      	strb	r3, [r7, #15]
    if(ch == UartIdUSART1) {
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d11e      	bne.n	800ca5e <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 800ca20:	4810      	ldr	r0, [pc, #64]	; (800ca64 <hal_uart_transfer+0x58>)
 800ca22:	f7ff fd64 	bl	800c4ee <LL_USART_IsEnabled>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d017      	beq.n	800ca5c <hal_uart_transfer+0x50>

        while(size > 0) {
 800ca2c:	e012      	b.n	800ca54 <hal_uart_transfer+0x48>
            while(!LL_USART_IsActiveFlag_TXE(USART1));
 800ca2e:	bf00      	nop
 800ca30:	480c      	ldr	r0, [pc, #48]	; (800ca64 <hal_uart_transfer+0x58>)
 800ca32:	f7ff fd99 	bl	800c568 <LL_USART_IsActiveFlag_TXE>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d0f9      	beq.n	800ca30 <hal_uart_transfer+0x24>
            LL_USART_TransmitData8(USART1, *buf);
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	4619      	mov	r1, r3
 800ca42:	4808      	ldr	r0, [pc, #32]	; (800ca64 <hal_uart_transfer+0x58>)
 800ca44:	f7ff fdb5 	bl	800c5b2 <LL_USART_TransmitData8>
            buf++;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	60bb      	str	r3, [r7, #8]
            size--;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	607b      	str	r3, [r7, #4]
        while(size > 0) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1e9      	bne.n	800ca2e <hal_uart_transfer+0x22>
 800ca5a:	e000      	b.n	800ca5e <hal_uart_transfer+0x52>
        if(LL_USART_IsEnabled(USART1) == 0) return;
 800ca5c:	bf00      	nop
        }
    }
}
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	40011000 	.word	0x40011000

0800ca68 <USART1_IRQHandler>:

void hal_uart_receive_dma(UartId ch, uint8_t* buf, size_t size) {
//	LL_DMA_EnableStream(DMAx, Stream)
}

void USART1_IRQHandler(void) {
 800ca68:	b590      	push	{r4, r7, lr}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0

	uint32_t size = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	607b      	str	r3, [r7, #4]

	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 800ca72:	4813      	ldr	r0, [pc, #76]	; (800cac0 <USART1_IRQHandler+0x58>)
 800ca74:	f7ff fd65 	bl	800c542 <LL_USART_IsActiveFlag_IDLE>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d01c      	beq.n	800cab8 <USART1_IRQHandler+0x50>
		LL_USART_ClearFlag_IDLE(USART1);
 800ca7e:	4810      	ldr	r0, [pc, #64]	; (800cac0 <USART1_IRQHandler+0x58>)
 800ca80:	f7ff fd85 	bl	800c58e <LL_USART_ClearFlag_IDLE>

		size = abs(logbuf.tail - (LOG_BUF_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2)));
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <USART1_IRQHandler+0x5c>)
 800ca86:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800ca8a:	2102      	movs	r1, #2
 800ca8c:	480e      	ldr	r0, [pc, #56]	; (800cac8 <USART1_IRQHandler+0x60>)
 800ca8e:	f7ff fe9b 	bl	800c7c8 <LL_DMA_GetDataLength>
 800ca92:	4603      	mov	r3, r0
 800ca94:	4423      	add	r3, r4
 800ca96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	bfb8      	it	lt
 800ca9e:	425b      	neglt	r3, r3
 800caa0:	607b      	str	r3, [r7, #4]
		if(size + logbuf.tail >= LOG_BUF_SIZE) {
 800caa2:	4b08      	ldr	r3, [pc, #32]	; (800cac4 <USART1_IRQHandler+0x5c>)
 800caa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4413      	add	r3, r2
 800caac:	2bff      	cmp	r3, #255	; 0xff
 800caae:	d903      	bls.n	800cab8 <USART1_IRQHandler+0x50>
			logbuf.is_over_rd = true;
 800cab0:	4b04      	ldr	r3, [pc, #16]	; (800cac4 <USART1_IRQHandler+0x5c>)
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
		}

	}
}
 800cab8:	bf00      	nop
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd90      	pop	{r4, r7, pc}
 800cac0:	40011000 	.word	0x40011000
 800cac4:	200045c4 	.word	0x200045c4
 800cac8:	40026400 	.word	0x40026400

0800cacc <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0

}
 800cad0:	bf00      	nop
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 800cada:	b480      	push	{r7}
 800cadc:	af00      	add	r7, sp, #0

}
 800cade:	bf00      	nop
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <ErrorHandler>:
#include "core.h"
#include "cli.h"

void ErrorHandler(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800caec:	b672      	cpsid	i
}
 800caee:	bf00      	nop
  __disable_irq();
  hal_cli_printf("enter error handler");
 800caf0:	4801      	ldr	r0, [pc, #4]	; (800caf8 <ErrorHandler+0x10>)
 800caf2:	f7fd f8d7 	bl	8009ca4 <hal_cli_printf>
  while (1)
 800caf6:	e7fe      	b.n	800caf6 <ErrorHandler+0xe>
 800caf8:	0800d80c 	.word	0x0800d80c

0800cafc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800cafc:	480d      	ldr	r0, [pc, #52]	; (800cb34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800cafe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800cb00:	f7ff fc4a 	bl	800c398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800cb04:	480c      	ldr	r0, [pc, #48]	; (800cb38 <LoopForever+0x6>)
  ldr r1, =_edata
 800cb06:	490d      	ldr	r1, [pc, #52]	; (800cb3c <LoopForever+0xa>)
  ldr r2, =_sidata
 800cb08:	4a0d      	ldr	r2, [pc, #52]	; (800cb40 <LoopForever+0xe>)
  movs r3, #0
 800cb0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cb0c:	e002      	b.n	800cb14 <LoopCopyDataInit>

0800cb0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cb0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cb10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cb12:	3304      	adds	r3, #4

0800cb14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cb14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cb16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cb18:	d3f9      	bcc.n	800cb0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cb1a:	4a0a      	ldr	r2, [pc, #40]	; (800cb44 <LoopForever+0x12>)
  ldr r4, =_ebss
 800cb1c:	4c0a      	ldr	r4, [pc, #40]	; (800cb48 <LoopForever+0x16>)
  movs r3, #0
 800cb1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cb20:	e001      	b.n	800cb26 <LoopFillZerobss>

0800cb22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cb22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cb24:	3204      	adds	r2, #4

0800cb26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cb26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cb28:	d3fb      	bcc.n	800cb22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800cb2a:	f000 f811 	bl	800cb50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800cb2e:	f7fe fc81 	bl	800b434 <main>

0800cb32 <LoopForever>:

LoopForever:
    b LoopForever
 800cb32:	e7fe      	b.n	800cb32 <LoopForever>
  ldr   r0, =_estack
 800cb34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800cb38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cb3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800cb40:	0800d9d4 	.word	0x0800d9d4
  ldr r2, =_sbss
 800cb44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800cb48:	20005620 	.word	0x20005620

0800cb4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800cb4c:	e7fe      	b.n	800cb4c <ADC_IRQHandler>
	...

0800cb50 <__libc_init_array>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	4d0d      	ldr	r5, [pc, #52]	; (800cb88 <__libc_init_array+0x38>)
 800cb54:	4c0d      	ldr	r4, [pc, #52]	; (800cb8c <__libc_init_array+0x3c>)
 800cb56:	1b64      	subs	r4, r4, r5
 800cb58:	10a4      	asrs	r4, r4, #2
 800cb5a:	2600      	movs	r6, #0
 800cb5c:	42a6      	cmp	r6, r4
 800cb5e:	d109      	bne.n	800cb74 <__libc_init_array+0x24>
 800cb60:	4d0b      	ldr	r5, [pc, #44]	; (800cb90 <__libc_init_array+0x40>)
 800cb62:	4c0c      	ldr	r4, [pc, #48]	; (800cb94 <__libc_init_array+0x44>)
 800cb64:	f000 fccc 	bl	800d500 <_init>
 800cb68:	1b64      	subs	r4, r4, r5
 800cb6a:	10a4      	asrs	r4, r4, #2
 800cb6c:	2600      	movs	r6, #0
 800cb6e:	42a6      	cmp	r6, r4
 800cb70:	d105      	bne.n	800cb7e <__libc_init_array+0x2e>
 800cb72:	bd70      	pop	{r4, r5, r6, pc}
 800cb74:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb78:	4798      	blx	r3
 800cb7a:	3601      	adds	r6, #1
 800cb7c:	e7ee      	b.n	800cb5c <__libc_init_array+0xc>
 800cb7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb82:	4798      	blx	r3
 800cb84:	3601      	adds	r6, #1
 800cb86:	e7f2      	b.n	800cb6e <__libc_init_array+0x1e>
 800cb88:	0800d9cc 	.word	0x0800d9cc
 800cb8c:	0800d9cc 	.word	0x0800d9cc
 800cb90:	0800d9cc 	.word	0x0800d9cc
 800cb94:	0800d9d0 	.word	0x0800d9d0

0800cb98 <memcmp>:
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	3901      	subs	r1, #1
 800cb9c:	4402      	add	r2, r0
 800cb9e:	4290      	cmp	r0, r2
 800cba0:	d101      	bne.n	800cba6 <memcmp+0xe>
 800cba2:	2000      	movs	r0, #0
 800cba4:	e005      	b.n	800cbb2 <memcmp+0x1a>
 800cba6:	7803      	ldrb	r3, [r0, #0]
 800cba8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	d001      	beq.n	800cbb4 <memcmp+0x1c>
 800cbb0:	1b18      	subs	r0, r3, r4
 800cbb2:	bd10      	pop	{r4, pc}
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	e7f2      	b.n	800cb9e <memcmp+0x6>

0800cbb8 <memcpy>:
 800cbb8:	440a      	add	r2, r1
 800cbba:	4291      	cmp	r1, r2
 800cbbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cbc0:	d100      	bne.n	800cbc4 <memcpy+0xc>
 800cbc2:	4770      	bx	lr
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbce:	4291      	cmp	r1, r2
 800cbd0:	d1f9      	bne.n	800cbc6 <memcpy+0xe>
 800cbd2:	bd10      	pop	{r4, pc}

0800cbd4 <memset>:
 800cbd4:	4402      	add	r2, r0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d100      	bne.n	800cbde <memset+0xa>
 800cbdc:	4770      	bx	lr
 800cbde:	f803 1b01 	strb.w	r1, [r3], #1
 800cbe2:	e7f9      	b.n	800cbd8 <memset+0x4>

0800cbe4 <siprintf>:
 800cbe4:	b40e      	push	{r1, r2, r3}
 800cbe6:	b500      	push	{lr}
 800cbe8:	b09c      	sub	sp, #112	; 0x70
 800cbea:	ab1d      	add	r3, sp, #116	; 0x74
 800cbec:	9002      	str	r0, [sp, #8]
 800cbee:	9006      	str	r0, [sp, #24]
 800cbf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbf4:	4809      	ldr	r0, [pc, #36]	; (800cc1c <siprintf+0x38>)
 800cbf6:	9107      	str	r1, [sp, #28]
 800cbf8:	9104      	str	r1, [sp, #16]
 800cbfa:	4909      	ldr	r1, [pc, #36]	; (800cc20 <siprintf+0x3c>)
 800cbfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc00:	9105      	str	r1, [sp, #20]
 800cc02:	6800      	ldr	r0, [r0, #0]
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	a902      	add	r1, sp, #8
 800cc08:	f000 f91e 	bl	800ce48 <_svfiprintf_r>
 800cc0c:	9b02      	ldr	r3, [sp, #8]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	701a      	strb	r2, [r3, #0]
 800cc12:	b01c      	add	sp, #112	; 0x70
 800cc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc18:	b003      	add	sp, #12
 800cc1a:	4770      	bx	lr
 800cc1c:	20000014 	.word	0x20000014
 800cc20:	ffff0208 	.word	0xffff0208

0800cc24 <_vsiprintf_r>:
 800cc24:	b500      	push	{lr}
 800cc26:	b09b      	sub	sp, #108	; 0x6c
 800cc28:	9100      	str	r1, [sp, #0]
 800cc2a:	9104      	str	r1, [sp, #16]
 800cc2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc30:	9105      	str	r1, [sp, #20]
 800cc32:	9102      	str	r1, [sp, #8]
 800cc34:	4905      	ldr	r1, [pc, #20]	; (800cc4c <_vsiprintf_r+0x28>)
 800cc36:	9103      	str	r1, [sp, #12]
 800cc38:	4669      	mov	r1, sp
 800cc3a:	f000 f905 	bl	800ce48 <_svfiprintf_r>
 800cc3e:	9b00      	ldr	r3, [sp, #0]
 800cc40:	2200      	movs	r2, #0
 800cc42:	701a      	strb	r2, [r3, #0]
 800cc44:	b01b      	add	sp, #108	; 0x6c
 800cc46:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc4a:	bf00      	nop
 800cc4c:	ffff0208 	.word	0xffff0208

0800cc50 <vsiprintf>:
 800cc50:	4613      	mov	r3, r2
 800cc52:	460a      	mov	r2, r1
 800cc54:	4601      	mov	r1, r0
 800cc56:	4802      	ldr	r0, [pc, #8]	; (800cc60 <vsiprintf+0x10>)
 800cc58:	6800      	ldr	r0, [r0, #0]
 800cc5a:	f7ff bfe3 	b.w	800cc24 <_vsiprintf_r>
 800cc5e:	bf00      	nop
 800cc60:	20000014 	.word	0x20000014

0800cc64 <__retarget_lock_acquire_recursive>:
 800cc64:	4770      	bx	lr

0800cc66 <__retarget_lock_release_recursive>:
 800cc66:	4770      	bx	lr

0800cc68 <sbrk_aligned>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	4e0e      	ldr	r6, [pc, #56]	; (800cca4 <sbrk_aligned+0x3c>)
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	6831      	ldr	r1, [r6, #0]
 800cc70:	4605      	mov	r5, r0
 800cc72:	b911      	cbnz	r1, 800cc7a <sbrk_aligned+0x12>
 800cc74:	f000 fb7c 	bl	800d370 <_sbrk_r>
 800cc78:	6030      	str	r0, [r6, #0]
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f000 fb77 	bl	800d370 <_sbrk_r>
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d00a      	beq.n	800cc9c <sbrk_aligned+0x34>
 800cc86:	1cc4      	adds	r4, r0, #3
 800cc88:	f024 0403 	bic.w	r4, r4, #3
 800cc8c:	42a0      	cmp	r0, r4
 800cc8e:	d007      	beq.n	800cca0 <sbrk_aligned+0x38>
 800cc90:	1a21      	subs	r1, r4, r0
 800cc92:	4628      	mov	r0, r5
 800cc94:	f000 fb6c 	bl	800d370 <_sbrk_r>
 800cc98:	3001      	adds	r0, #1
 800cc9a:	d101      	bne.n	800cca0 <sbrk_aligned+0x38>
 800cc9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cca0:	4620      	mov	r0, r4
 800cca2:	bd70      	pop	{r4, r5, r6, pc}
 800cca4:	20005614 	.word	0x20005614

0800cca8 <_malloc_r>:
 800cca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccac:	1ccd      	adds	r5, r1, #3
 800ccae:	f025 0503 	bic.w	r5, r5, #3
 800ccb2:	3508      	adds	r5, #8
 800ccb4:	2d0c      	cmp	r5, #12
 800ccb6:	bf38      	it	cc
 800ccb8:	250c      	movcc	r5, #12
 800ccba:	2d00      	cmp	r5, #0
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	db01      	blt.n	800ccc4 <_malloc_r+0x1c>
 800ccc0:	42a9      	cmp	r1, r5
 800ccc2:	d905      	bls.n	800ccd0 <_malloc_r+0x28>
 800ccc4:	230c      	movs	r3, #12
 800ccc6:	603b      	str	r3, [r7, #0]
 800ccc8:	2600      	movs	r6, #0
 800ccca:	4630      	mov	r0, r6
 800cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd0:	4e2e      	ldr	r6, [pc, #184]	; (800cd8c <_malloc_r+0xe4>)
 800ccd2:	f000 fb77 	bl	800d3c4 <__malloc_lock>
 800ccd6:	6833      	ldr	r3, [r6, #0]
 800ccd8:	461c      	mov	r4, r3
 800ccda:	bb34      	cbnz	r4, 800cd2a <_malloc_r+0x82>
 800ccdc:	4629      	mov	r1, r5
 800ccde:	4638      	mov	r0, r7
 800cce0:	f7ff ffc2 	bl	800cc68 <sbrk_aligned>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	4604      	mov	r4, r0
 800cce8:	d14d      	bne.n	800cd86 <_malloc_r+0xde>
 800ccea:	6834      	ldr	r4, [r6, #0]
 800ccec:	4626      	mov	r6, r4
 800ccee:	2e00      	cmp	r6, #0
 800ccf0:	d140      	bne.n	800cd74 <_malloc_r+0xcc>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	4631      	mov	r1, r6
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	eb04 0803 	add.w	r8, r4, r3
 800ccfc:	f000 fb38 	bl	800d370 <_sbrk_r>
 800cd00:	4580      	cmp	r8, r0
 800cd02:	d13a      	bne.n	800cd7a <_malloc_r+0xd2>
 800cd04:	6821      	ldr	r1, [r4, #0]
 800cd06:	3503      	adds	r5, #3
 800cd08:	1a6d      	subs	r5, r5, r1
 800cd0a:	f025 0503 	bic.w	r5, r5, #3
 800cd0e:	3508      	adds	r5, #8
 800cd10:	2d0c      	cmp	r5, #12
 800cd12:	bf38      	it	cc
 800cd14:	250c      	movcc	r5, #12
 800cd16:	4629      	mov	r1, r5
 800cd18:	4638      	mov	r0, r7
 800cd1a:	f7ff ffa5 	bl	800cc68 <sbrk_aligned>
 800cd1e:	3001      	adds	r0, #1
 800cd20:	d02b      	beq.n	800cd7a <_malloc_r+0xd2>
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	442b      	add	r3, r5
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	e00e      	b.n	800cd48 <_malloc_r+0xa0>
 800cd2a:	6822      	ldr	r2, [r4, #0]
 800cd2c:	1b52      	subs	r2, r2, r5
 800cd2e:	d41e      	bmi.n	800cd6e <_malloc_r+0xc6>
 800cd30:	2a0b      	cmp	r2, #11
 800cd32:	d916      	bls.n	800cd62 <_malloc_r+0xba>
 800cd34:	1961      	adds	r1, r4, r5
 800cd36:	42a3      	cmp	r3, r4
 800cd38:	6025      	str	r5, [r4, #0]
 800cd3a:	bf18      	it	ne
 800cd3c:	6059      	strne	r1, [r3, #4]
 800cd3e:	6863      	ldr	r3, [r4, #4]
 800cd40:	bf08      	it	eq
 800cd42:	6031      	streq	r1, [r6, #0]
 800cd44:	5162      	str	r2, [r4, r5]
 800cd46:	604b      	str	r3, [r1, #4]
 800cd48:	4638      	mov	r0, r7
 800cd4a:	f104 060b 	add.w	r6, r4, #11
 800cd4e:	f000 fb3f 	bl	800d3d0 <__malloc_unlock>
 800cd52:	f026 0607 	bic.w	r6, r6, #7
 800cd56:	1d23      	adds	r3, r4, #4
 800cd58:	1af2      	subs	r2, r6, r3
 800cd5a:	d0b6      	beq.n	800ccca <_malloc_r+0x22>
 800cd5c:	1b9b      	subs	r3, r3, r6
 800cd5e:	50a3      	str	r3, [r4, r2]
 800cd60:	e7b3      	b.n	800ccca <_malloc_r+0x22>
 800cd62:	6862      	ldr	r2, [r4, #4]
 800cd64:	42a3      	cmp	r3, r4
 800cd66:	bf0c      	ite	eq
 800cd68:	6032      	streq	r2, [r6, #0]
 800cd6a:	605a      	strne	r2, [r3, #4]
 800cd6c:	e7ec      	b.n	800cd48 <_malloc_r+0xa0>
 800cd6e:	4623      	mov	r3, r4
 800cd70:	6864      	ldr	r4, [r4, #4]
 800cd72:	e7b2      	b.n	800ccda <_malloc_r+0x32>
 800cd74:	4634      	mov	r4, r6
 800cd76:	6876      	ldr	r6, [r6, #4]
 800cd78:	e7b9      	b.n	800ccee <_malloc_r+0x46>
 800cd7a:	230c      	movs	r3, #12
 800cd7c:	603b      	str	r3, [r7, #0]
 800cd7e:	4638      	mov	r0, r7
 800cd80:	f000 fb26 	bl	800d3d0 <__malloc_unlock>
 800cd84:	e7a1      	b.n	800ccca <_malloc_r+0x22>
 800cd86:	6025      	str	r5, [r4, #0]
 800cd88:	e7de      	b.n	800cd48 <_malloc_r+0xa0>
 800cd8a:	bf00      	nop
 800cd8c:	20005610 	.word	0x20005610

0800cd90 <__ssputs_r>:
 800cd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd94:	688e      	ldr	r6, [r1, #8]
 800cd96:	429e      	cmp	r6, r3
 800cd98:	4682      	mov	sl, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	4690      	mov	r8, r2
 800cd9e:	461f      	mov	r7, r3
 800cda0:	d838      	bhi.n	800ce14 <__ssputs_r+0x84>
 800cda2:	898a      	ldrh	r2, [r1, #12]
 800cda4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cda8:	d032      	beq.n	800ce10 <__ssputs_r+0x80>
 800cdaa:	6825      	ldr	r5, [r4, #0]
 800cdac:	6909      	ldr	r1, [r1, #16]
 800cdae:	eba5 0901 	sub.w	r9, r5, r1
 800cdb2:	6965      	ldr	r5, [r4, #20]
 800cdb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	444b      	add	r3, r9
 800cdc0:	106d      	asrs	r5, r5, #1
 800cdc2:	429d      	cmp	r5, r3
 800cdc4:	bf38      	it	cc
 800cdc6:	461d      	movcc	r5, r3
 800cdc8:	0553      	lsls	r3, r2, #21
 800cdca:	d531      	bpl.n	800ce30 <__ssputs_r+0xa0>
 800cdcc:	4629      	mov	r1, r5
 800cdce:	f7ff ff6b 	bl	800cca8 <_malloc_r>
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	b950      	cbnz	r0, 800cdec <__ssputs_r+0x5c>
 800cdd6:	230c      	movs	r3, #12
 800cdd8:	f8ca 3000 	str.w	r3, [sl]
 800cddc:	89a3      	ldrh	r3, [r4, #12]
 800cdde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdec:	6921      	ldr	r1, [r4, #16]
 800cdee:	464a      	mov	r2, r9
 800cdf0:	f7ff fee2 	bl	800cbb8 <memcpy>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfe:	81a3      	strh	r3, [r4, #12]
 800ce00:	6126      	str	r6, [r4, #16]
 800ce02:	6165      	str	r5, [r4, #20]
 800ce04:	444e      	add	r6, r9
 800ce06:	eba5 0509 	sub.w	r5, r5, r9
 800ce0a:	6026      	str	r6, [r4, #0]
 800ce0c:	60a5      	str	r5, [r4, #8]
 800ce0e:	463e      	mov	r6, r7
 800ce10:	42be      	cmp	r6, r7
 800ce12:	d900      	bls.n	800ce16 <__ssputs_r+0x86>
 800ce14:	463e      	mov	r6, r7
 800ce16:	6820      	ldr	r0, [r4, #0]
 800ce18:	4632      	mov	r2, r6
 800ce1a:	4641      	mov	r1, r8
 800ce1c:	f000 fab8 	bl	800d390 <memmove>
 800ce20:	68a3      	ldr	r3, [r4, #8]
 800ce22:	1b9b      	subs	r3, r3, r6
 800ce24:	60a3      	str	r3, [r4, #8]
 800ce26:	6823      	ldr	r3, [r4, #0]
 800ce28:	4433      	add	r3, r6
 800ce2a:	6023      	str	r3, [r4, #0]
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	e7db      	b.n	800cde8 <__ssputs_r+0x58>
 800ce30:	462a      	mov	r2, r5
 800ce32:	f000 fb1f 	bl	800d474 <_realloc_r>
 800ce36:	4606      	mov	r6, r0
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d1e1      	bne.n	800ce00 <__ssputs_r+0x70>
 800ce3c:	6921      	ldr	r1, [r4, #16]
 800ce3e:	4650      	mov	r0, sl
 800ce40:	f000 facc 	bl	800d3dc <_free_r>
 800ce44:	e7c7      	b.n	800cdd6 <__ssputs_r+0x46>
	...

0800ce48 <_svfiprintf_r>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	4698      	mov	r8, r3
 800ce4e:	898b      	ldrh	r3, [r1, #12]
 800ce50:	061b      	lsls	r3, r3, #24
 800ce52:	b09d      	sub	sp, #116	; 0x74
 800ce54:	4607      	mov	r7, r0
 800ce56:	460d      	mov	r5, r1
 800ce58:	4614      	mov	r4, r2
 800ce5a:	d50e      	bpl.n	800ce7a <_svfiprintf_r+0x32>
 800ce5c:	690b      	ldr	r3, [r1, #16]
 800ce5e:	b963      	cbnz	r3, 800ce7a <_svfiprintf_r+0x32>
 800ce60:	2140      	movs	r1, #64	; 0x40
 800ce62:	f7ff ff21 	bl	800cca8 <_malloc_r>
 800ce66:	6028      	str	r0, [r5, #0]
 800ce68:	6128      	str	r0, [r5, #16]
 800ce6a:	b920      	cbnz	r0, 800ce76 <_svfiprintf_r+0x2e>
 800ce6c:	230c      	movs	r3, #12
 800ce6e:	603b      	str	r3, [r7, #0]
 800ce70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce74:	e0d1      	b.n	800d01a <_svfiprintf_r+0x1d2>
 800ce76:	2340      	movs	r3, #64	; 0x40
 800ce78:	616b      	str	r3, [r5, #20]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7e:	2320      	movs	r3, #32
 800ce80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce88:	2330      	movs	r3, #48	; 0x30
 800ce8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d034 <_svfiprintf_r+0x1ec>
 800ce8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce92:	f04f 0901 	mov.w	r9, #1
 800ce96:	4623      	mov	r3, r4
 800ce98:	469a      	mov	sl, r3
 800ce9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9e:	b10a      	cbz	r2, 800cea4 <_svfiprintf_r+0x5c>
 800cea0:	2a25      	cmp	r2, #37	; 0x25
 800cea2:	d1f9      	bne.n	800ce98 <_svfiprintf_r+0x50>
 800cea4:	ebba 0b04 	subs.w	fp, sl, r4
 800cea8:	d00b      	beq.n	800cec2 <_svfiprintf_r+0x7a>
 800ceaa:	465b      	mov	r3, fp
 800ceac:	4622      	mov	r2, r4
 800ceae:	4629      	mov	r1, r5
 800ceb0:	4638      	mov	r0, r7
 800ceb2:	f7ff ff6d 	bl	800cd90 <__ssputs_r>
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	f000 80aa 	beq.w	800d010 <_svfiprintf_r+0x1c8>
 800cebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cebe:	445a      	add	r2, fp
 800cec0:	9209      	str	r2, [sp, #36]	; 0x24
 800cec2:	f89a 3000 	ldrb.w	r3, [sl]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f000 80a2 	beq.w	800d010 <_svfiprintf_r+0x1c8>
 800cecc:	2300      	movs	r3, #0
 800cece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ced2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced6:	f10a 0a01 	add.w	sl, sl, #1
 800ceda:	9304      	str	r3, [sp, #16]
 800cedc:	9307      	str	r3, [sp, #28]
 800cede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cee2:	931a      	str	r3, [sp, #104]	; 0x68
 800cee4:	4654      	mov	r4, sl
 800cee6:	2205      	movs	r2, #5
 800cee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceec:	4851      	ldr	r0, [pc, #324]	; (800d034 <_svfiprintf_r+0x1ec>)
 800ceee:	f7f3 f9cf 	bl	8000290 <memchr>
 800cef2:	9a04      	ldr	r2, [sp, #16]
 800cef4:	b9d8      	cbnz	r0, 800cf2e <_svfiprintf_r+0xe6>
 800cef6:	06d0      	lsls	r0, r2, #27
 800cef8:	bf44      	itt	mi
 800cefa:	2320      	movmi	r3, #32
 800cefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf00:	0711      	lsls	r1, r2, #28
 800cf02:	bf44      	itt	mi
 800cf04:	232b      	movmi	r3, #43	; 0x2b
 800cf06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf0a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf10:	d015      	beq.n	800cf3e <_svfiprintf_r+0xf6>
 800cf12:	9a07      	ldr	r2, [sp, #28]
 800cf14:	4654      	mov	r4, sl
 800cf16:	2000      	movs	r0, #0
 800cf18:	f04f 0c0a 	mov.w	ip, #10
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf22:	3b30      	subs	r3, #48	; 0x30
 800cf24:	2b09      	cmp	r3, #9
 800cf26:	d94e      	bls.n	800cfc6 <_svfiprintf_r+0x17e>
 800cf28:	b1b0      	cbz	r0, 800cf58 <_svfiprintf_r+0x110>
 800cf2a:	9207      	str	r2, [sp, #28]
 800cf2c:	e014      	b.n	800cf58 <_svfiprintf_r+0x110>
 800cf2e:	eba0 0308 	sub.w	r3, r0, r8
 800cf32:	fa09 f303 	lsl.w	r3, r9, r3
 800cf36:	4313      	orrs	r3, r2
 800cf38:	9304      	str	r3, [sp, #16]
 800cf3a:	46a2      	mov	sl, r4
 800cf3c:	e7d2      	b.n	800cee4 <_svfiprintf_r+0x9c>
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	1d19      	adds	r1, r3, #4
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	9103      	str	r1, [sp, #12]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfbb      	ittet	lt
 800cf4a:	425b      	neglt	r3, r3
 800cf4c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf50:	9307      	strge	r3, [sp, #28]
 800cf52:	9307      	strlt	r3, [sp, #28]
 800cf54:	bfb8      	it	lt
 800cf56:	9204      	strlt	r2, [sp, #16]
 800cf58:	7823      	ldrb	r3, [r4, #0]
 800cf5a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf5c:	d10c      	bne.n	800cf78 <_svfiprintf_r+0x130>
 800cf5e:	7863      	ldrb	r3, [r4, #1]
 800cf60:	2b2a      	cmp	r3, #42	; 0x2a
 800cf62:	d135      	bne.n	800cfd0 <_svfiprintf_r+0x188>
 800cf64:	9b03      	ldr	r3, [sp, #12]
 800cf66:	1d1a      	adds	r2, r3, #4
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	9203      	str	r2, [sp, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	bfb8      	it	lt
 800cf70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf74:	3402      	adds	r4, #2
 800cf76:	9305      	str	r3, [sp, #20]
 800cf78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d044 <_svfiprintf_r+0x1fc>
 800cf7c:	7821      	ldrb	r1, [r4, #0]
 800cf7e:	2203      	movs	r2, #3
 800cf80:	4650      	mov	r0, sl
 800cf82:	f7f3 f985 	bl	8000290 <memchr>
 800cf86:	b140      	cbz	r0, 800cf9a <_svfiprintf_r+0x152>
 800cf88:	2340      	movs	r3, #64	; 0x40
 800cf8a:	eba0 000a 	sub.w	r0, r0, sl
 800cf8e:	fa03 f000 	lsl.w	r0, r3, r0
 800cf92:	9b04      	ldr	r3, [sp, #16]
 800cf94:	4303      	orrs	r3, r0
 800cf96:	3401      	adds	r4, #1
 800cf98:	9304      	str	r3, [sp, #16]
 800cf9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf9e:	4826      	ldr	r0, [pc, #152]	; (800d038 <_svfiprintf_r+0x1f0>)
 800cfa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfa4:	2206      	movs	r2, #6
 800cfa6:	f7f3 f973 	bl	8000290 <memchr>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d038      	beq.n	800d020 <_svfiprintf_r+0x1d8>
 800cfae:	4b23      	ldr	r3, [pc, #140]	; (800d03c <_svfiprintf_r+0x1f4>)
 800cfb0:	bb1b      	cbnz	r3, 800cffa <_svfiprintf_r+0x1b2>
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	3307      	adds	r3, #7
 800cfb6:	f023 0307 	bic.w	r3, r3, #7
 800cfba:	3308      	adds	r3, #8
 800cfbc:	9303      	str	r3, [sp, #12]
 800cfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc0:	4433      	add	r3, r6
 800cfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc4:	e767      	b.n	800ce96 <_svfiprintf_r+0x4e>
 800cfc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfca:	460c      	mov	r4, r1
 800cfcc:	2001      	movs	r0, #1
 800cfce:	e7a5      	b.n	800cf1c <_svfiprintf_r+0xd4>
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	3401      	adds	r4, #1
 800cfd4:	9305      	str	r3, [sp, #20]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	f04f 0c0a 	mov.w	ip, #10
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfe2:	3a30      	subs	r2, #48	; 0x30
 800cfe4:	2a09      	cmp	r2, #9
 800cfe6:	d903      	bls.n	800cff0 <_svfiprintf_r+0x1a8>
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d0c5      	beq.n	800cf78 <_svfiprintf_r+0x130>
 800cfec:	9105      	str	r1, [sp, #20]
 800cfee:	e7c3      	b.n	800cf78 <_svfiprintf_r+0x130>
 800cff0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cff4:	4604      	mov	r4, r0
 800cff6:	2301      	movs	r3, #1
 800cff8:	e7f0      	b.n	800cfdc <_svfiprintf_r+0x194>
 800cffa:	ab03      	add	r3, sp, #12
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	462a      	mov	r2, r5
 800d000:	4b0f      	ldr	r3, [pc, #60]	; (800d040 <_svfiprintf_r+0x1f8>)
 800d002:	a904      	add	r1, sp, #16
 800d004:	4638      	mov	r0, r7
 800d006:	f3af 8000 	nop.w
 800d00a:	1c42      	adds	r2, r0, #1
 800d00c:	4606      	mov	r6, r0
 800d00e:	d1d6      	bne.n	800cfbe <_svfiprintf_r+0x176>
 800d010:	89ab      	ldrh	r3, [r5, #12]
 800d012:	065b      	lsls	r3, r3, #25
 800d014:	f53f af2c 	bmi.w	800ce70 <_svfiprintf_r+0x28>
 800d018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d01a:	b01d      	add	sp, #116	; 0x74
 800d01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d020:	ab03      	add	r3, sp, #12
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	462a      	mov	r2, r5
 800d026:	4b06      	ldr	r3, [pc, #24]	; (800d040 <_svfiprintf_r+0x1f8>)
 800d028:	a904      	add	r1, sp, #16
 800d02a:	4638      	mov	r0, r7
 800d02c:	f000 f87a 	bl	800d124 <_printf_i>
 800d030:	e7eb      	b.n	800d00a <_svfiprintf_r+0x1c2>
 800d032:	bf00      	nop
 800d034:	0800d990 	.word	0x0800d990
 800d038:	0800d99a 	.word	0x0800d99a
 800d03c:	00000000 	.word	0x00000000
 800d040:	0800cd91 	.word	0x0800cd91
 800d044:	0800d996 	.word	0x0800d996

0800d048 <_printf_common>:
 800d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	4616      	mov	r6, r2
 800d04e:	4699      	mov	r9, r3
 800d050:	688a      	ldr	r2, [r1, #8]
 800d052:	690b      	ldr	r3, [r1, #16]
 800d054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d058:	4293      	cmp	r3, r2
 800d05a:	bfb8      	it	lt
 800d05c:	4613      	movlt	r3, r2
 800d05e:	6033      	str	r3, [r6, #0]
 800d060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d064:	4607      	mov	r7, r0
 800d066:	460c      	mov	r4, r1
 800d068:	b10a      	cbz	r2, 800d06e <_printf_common+0x26>
 800d06a:	3301      	adds	r3, #1
 800d06c:	6033      	str	r3, [r6, #0]
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	0699      	lsls	r1, r3, #26
 800d072:	bf42      	ittt	mi
 800d074:	6833      	ldrmi	r3, [r6, #0]
 800d076:	3302      	addmi	r3, #2
 800d078:	6033      	strmi	r3, [r6, #0]
 800d07a:	6825      	ldr	r5, [r4, #0]
 800d07c:	f015 0506 	ands.w	r5, r5, #6
 800d080:	d106      	bne.n	800d090 <_printf_common+0x48>
 800d082:	f104 0a19 	add.w	sl, r4, #25
 800d086:	68e3      	ldr	r3, [r4, #12]
 800d088:	6832      	ldr	r2, [r6, #0]
 800d08a:	1a9b      	subs	r3, r3, r2
 800d08c:	42ab      	cmp	r3, r5
 800d08e:	dc26      	bgt.n	800d0de <_printf_common+0x96>
 800d090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d094:	1e13      	subs	r3, r2, #0
 800d096:	6822      	ldr	r2, [r4, #0]
 800d098:	bf18      	it	ne
 800d09a:	2301      	movne	r3, #1
 800d09c:	0692      	lsls	r2, r2, #26
 800d09e:	d42b      	bmi.n	800d0f8 <_printf_common+0xb0>
 800d0a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0a4:	4649      	mov	r1, r9
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	47c0      	blx	r8
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	d01e      	beq.n	800d0ec <_printf_common+0xa4>
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	68e5      	ldr	r5, [r4, #12]
 800d0b2:	6832      	ldr	r2, [r6, #0]
 800d0b4:	f003 0306 	and.w	r3, r3, #6
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	bf08      	it	eq
 800d0bc:	1aad      	subeq	r5, r5, r2
 800d0be:	68a3      	ldr	r3, [r4, #8]
 800d0c0:	6922      	ldr	r2, [r4, #16]
 800d0c2:	bf0c      	ite	eq
 800d0c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0c8:	2500      	movne	r5, #0
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	bfc4      	itt	gt
 800d0ce:	1a9b      	subgt	r3, r3, r2
 800d0d0:	18ed      	addgt	r5, r5, r3
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	341a      	adds	r4, #26
 800d0d6:	42b5      	cmp	r5, r6
 800d0d8:	d11a      	bne.n	800d110 <_printf_common+0xc8>
 800d0da:	2000      	movs	r0, #0
 800d0dc:	e008      	b.n	800d0f0 <_printf_common+0xa8>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	47c0      	blx	r8
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d103      	bne.n	800d0f4 <_printf_common+0xac>
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f4:	3501      	adds	r5, #1
 800d0f6:	e7c6      	b.n	800d086 <_printf_common+0x3e>
 800d0f8:	18e1      	adds	r1, r4, r3
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	2030      	movs	r0, #48	; 0x30
 800d0fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d102:	4422      	add	r2, r4
 800d104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d10c:	3302      	adds	r3, #2
 800d10e:	e7c7      	b.n	800d0a0 <_printf_common+0x58>
 800d110:	2301      	movs	r3, #1
 800d112:	4622      	mov	r2, r4
 800d114:	4649      	mov	r1, r9
 800d116:	4638      	mov	r0, r7
 800d118:	47c0      	blx	r8
 800d11a:	3001      	adds	r0, #1
 800d11c:	d0e6      	beq.n	800d0ec <_printf_common+0xa4>
 800d11e:	3601      	adds	r6, #1
 800d120:	e7d9      	b.n	800d0d6 <_printf_common+0x8e>
	...

0800d124 <_printf_i>:
 800d124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d128:	7e0f      	ldrb	r7, [r1, #24]
 800d12a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d12c:	2f78      	cmp	r7, #120	; 0x78
 800d12e:	4691      	mov	r9, r2
 800d130:	4680      	mov	r8, r0
 800d132:	460c      	mov	r4, r1
 800d134:	469a      	mov	sl, r3
 800d136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d13a:	d807      	bhi.n	800d14c <_printf_i+0x28>
 800d13c:	2f62      	cmp	r7, #98	; 0x62
 800d13e:	d80a      	bhi.n	800d156 <_printf_i+0x32>
 800d140:	2f00      	cmp	r7, #0
 800d142:	f000 80d8 	beq.w	800d2f6 <_printf_i+0x1d2>
 800d146:	2f58      	cmp	r7, #88	; 0x58
 800d148:	f000 80a3 	beq.w	800d292 <_printf_i+0x16e>
 800d14c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d154:	e03a      	b.n	800d1cc <_printf_i+0xa8>
 800d156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d15a:	2b15      	cmp	r3, #21
 800d15c:	d8f6      	bhi.n	800d14c <_printf_i+0x28>
 800d15e:	a101      	add	r1, pc, #4	; (adr r1, 800d164 <_printf_i+0x40>)
 800d160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d164:	0800d1bd 	.word	0x0800d1bd
 800d168:	0800d1d1 	.word	0x0800d1d1
 800d16c:	0800d14d 	.word	0x0800d14d
 800d170:	0800d14d 	.word	0x0800d14d
 800d174:	0800d14d 	.word	0x0800d14d
 800d178:	0800d14d 	.word	0x0800d14d
 800d17c:	0800d1d1 	.word	0x0800d1d1
 800d180:	0800d14d 	.word	0x0800d14d
 800d184:	0800d14d 	.word	0x0800d14d
 800d188:	0800d14d 	.word	0x0800d14d
 800d18c:	0800d14d 	.word	0x0800d14d
 800d190:	0800d2dd 	.word	0x0800d2dd
 800d194:	0800d201 	.word	0x0800d201
 800d198:	0800d2bf 	.word	0x0800d2bf
 800d19c:	0800d14d 	.word	0x0800d14d
 800d1a0:	0800d14d 	.word	0x0800d14d
 800d1a4:	0800d2ff 	.word	0x0800d2ff
 800d1a8:	0800d14d 	.word	0x0800d14d
 800d1ac:	0800d201 	.word	0x0800d201
 800d1b0:	0800d14d 	.word	0x0800d14d
 800d1b4:	0800d14d 	.word	0x0800d14d
 800d1b8:	0800d2c7 	.word	0x0800d2c7
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	1d1a      	adds	r2, r3, #4
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	602a      	str	r2, [r5, #0]
 800d1c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e0a3      	b.n	800d318 <_printf_i+0x1f4>
 800d1d0:	6820      	ldr	r0, [r4, #0]
 800d1d2:	6829      	ldr	r1, [r5, #0]
 800d1d4:	0606      	lsls	r6, r0, #24
 800d1d6:	f101 0304 	add.w	r3, r1, #4
 800d1da:	d50a      	bpl.n	800d1f2 <_printf_i+0xce>
 800d1dc:	680e      	ldr	r6, [r1, #0]
 800d1de:	602b      	str	r3, [r5, #0]
 800d1e0:	2e00      	cmp	r6, #0
 800d1e2:	da03      	bge.n	800d1ec <_printf_i+0xc8>
 800d1e4:	232d      	movs	r3, #45	; 0x2d
 800d1e6:	4276      	negs	r6, r6
 800d1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1ec:	485e      	ldr	r0, [pc, #376]	; (800d368 <_printf_i+0x244>)
 800d1ee:	230a      	movs	r3, #10
 800d1f0:	e019      	b.n	800d226 <_printf_i+0x102>
 800d1f2:	680e      	ldr	r6, [r1, #0]
 800d1f4:	602b      	str	r3, [r5, #0]
 800d1f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1fa:	bf18      	it	ne
 800d1fc:	b236      	sxthne	r6, r6
 800d1fe:	e7ef      	b.n	800d1e0 <_printf_i+0xbc>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	6820      	ldr	r0, [r4, #0]
 800d204:	1d19      	adds	r1, r3, #4
 800d206:	6029      	str	r1, [r5, #0]
 800d208:	0601      	lsls	r1, r0, #24
 800d20a:	d501      	bpl.n	800d210 <_printf_i+0xec>
 800d20c:	681e      	ldr	r6, [r3, #0]
 800d20e:	e002      	b.n	800d216 <_printf_i+0xf2>
 800d210:	0646      	lsls	r6, r0, #25
 800d212:	d5fb      	bpl.n	800d20c <_printf_i+0xe8>
 800d214:	881e      	ldrh	r6, [r3, #0]
 800d216:	4854      	ldr	r0, [pc, #336]	; (800d368 <_printf_i+0x244>)
 800d218:	2f6f      	cmp	r7, #111	; 0x6f
 800d21a:	bf0c      	ite	eq
 800d21c:	2308      	moveq	r3, #8
 800d21e:	230a      	movne	r3, #10
 800d220:	2100      	movs	r1, #0
 800d222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d226:	6865      	ldr	r5, [r4, #4]
 800d228:	60a5      	str	r5, [r4, #8]
 800d22a:	2d00      	cmp	r5, #0
 800d22c:	bfa2      	ittt	ge
 800d22e:	6821      	ldrge	r1, [r4, #0]
 800d230:	f021 0104 	bicge.w	r1, r1, #4
 800d234:	6021      	strge	r1, [r4, #0]
 800d236:	b90e      	cbnz	r6, 800d23c <_printf_i+0x118>
 800d238:	2d00      	cmp	r5, #0
 800d23a:	d04d      	beq.n	800d2d8 <_printf_i+0x1b4>
 800d23c:	4615      	mov	r5, r2
 800d23e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d242:	fb03 6711 	mls	r7, r3, r1, r6
 800d246:	5dc7      	ldrb	r7, [r0, r7]
 800d248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d24c:	4637      	mov	r7, r6
 800d24e:	42bb      	cmp	r3, r7
 800d250:	460e      	mov	r6, r1
 800d252:	d9f4      	bls.n	800d23e <_printf_i+0x11a>
 800d254:	2b08      	cmp	r3, #8
 800d256:	d10b      	bne.n	800d270 <_printf_i+0x14c>
 800d258:	6823      	ldr	r3, [r4, #0]
 800d25a:	07de      	lsls	r6, r3, #31
 800d25c:	d508      	bpl.n	800d270 <_printf_i+0x14c>
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	6861      	ldr	r1, [r4, #4]
 800d262:	4299      	cmp	r1, r3
 800d264:	bfde      	ittt	le
 800d266:	2330      	movle	r3, #48	; 0x30
 800d268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d26c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d270:	1b52      	subs	r2, r2, r5
 800d272:	6122      	str	r2, [r4, #16]
 800d274:	f8cd a000 	str.w	sl, [sp]
 800d278:	464b      	mov	r3, r9
 800d27a:	aa03      	add	r2, sp, #12
 800d27c:	4621      	mov	r1, r4
 800d27e:	4640      	mov	r0, r8
 800d280:	f7ff fee2 	bl	800d048 <_printf_common>
 800d284:	3001      	adds	r0, #1
 800d286:	d14c      	bne.n	800d322 <_printf_i+0x1fe>
 800d288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d28c:	b004      	add	sp, #16
 800d28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d292:	4835      	ldr	r0, [pc, #212]	; (800d368 <_printf_i+0x244>)
 800d294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d298:	6829      	ldr	r1, [r5, #0]
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2a0:	6029      	str	r1, [r5, #0]
 800d2a2:	061d      	lsls	r5, r3, #24
 800d2a4:	d514      	bpl.n	800d2d0 <_printf_i+0x1ac>
 800d2a6:	07df      	lsls	r7, r3, #31
 800d2a8:	bf44      	itt	mi
 800d2aa:	f043 0320 	orrmi.w	r3, r3, #32
 800d2ae:	6023      	strmi	r3, [r4, #0]
 800d2b0:	b91e      	cbnz	r6, 800d2ba <_printf_i+0x196>
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	f023 0320 	bic.w	r3, r3, #32
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	2310      	movs	r3, #16
 800d2bc:	e7b0      	b.n	800d220 <_printf_i+0xfc>
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	f043 0320 	orr.w	r3, r3, #32
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	2378      	movs	r3, #120	; 0x78
 800d2c8:	4828      	ldr	r0, [pc, #160]	; (800d36c <_printf_i+0x248>)
 800d2ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ce:	e7e3      	b.n	800d298 <_printf_i+0x174>
 800d2d0:	0659      	lsls	r1, r3, #25
 800d2d2:	bf48      	it	mi
 800d2d4:	b2b6      	uxthmi	r6, r6
 800d2d6:	e7e6      	b.n	800d2a6 <_printf_i+0x182>
 800d2d8:	4615      	mov	r5, r2
 800d2da:	e7bb      	b.n	800d254 <_printf_i+0x130>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	6826      	ldr	r6, [r4, #0]
 800d2e0:	6961      	ldr	r1, [r4, #20]
 800d2e2:	1d18      	adds	r0, r3, #4
 800d2e4:	6028      	str	r0, [r5, #0]
 800d2e6:	0635      	lsls	r5, r6, #24
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	d501      	bpl.n	800d2f0 <_printf_i+0x1cc>
 800d2ec:	6019      	str	r1, [r3, #0]
 800d2ee:	e002      	b.n	800d2f6 <_printf_i+0x1d2>
 800d2f0:	0670      	lsls	r0, r6, #25
 800d2f2:	d5fb      	bpl.n	800d2ec <_printf_i+0x1c8>
 800d2f4:	8019      	strh	r1, [r3, #0]
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	6123      	str	r3, [r4, #16]
 800d2fa:	4615      	mov	r5, r2
 800d2fc:	e7ba      	b.n	800d274 <_printf_i+0x150>
 800d2fe:	682b      	ldr	r3, [r5, #0]
 800d300:	1d1a      	adds	r2, r3, #4
 800d302:	602a      	str	r2, [r5, #0]
 800d304:	681d      	ldr	r5, [r3, #0]
 800d306:	6862      	ldr	r2, [r4, #4]
 800d308:	2100      	movs	r1, #0
 800d30a:	4628      	mov	r0, r5
 800d30c:	f7f2 ffc0 	bl	8000290 <memchr>
 800d310:	b108      	cbz	r0, 800d316 <_printf_i+0x1f2>
 800d312:	1b40      	subs	r0, r0, r5
 800d314:	6060      	str	r0, [r4, #4]
 800d316:	6863      	ldr	r3, [r4, #4]
 800d318:	6123      	str	r3, [r4, #16]
 800d31a:	2300      	movs	r3, #0
 800d31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d320:	e7a8      	b.n	800d274 <_printf_i+0x150>
 800d322:	6923      	ldr	r3, [r4, #16]
 800d324:	462a      	mov	r2, r5
 800d326:	4649      	mov	r1, r9
 800d328:	4640      	mov	r0, r8
 800d32a:	47d0      	blx	sl
 800d32c:	3001      	adds	r0, #1
 800d32e:	d0ab      	beq.n	800d288 <_printf_i+0x164>
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	079b      	lsls	r3, r3, #30
 800d334:	d413      	bmi.n	800d35e <_printf_i+0x23a>
 800d336:	68e0      	ldr	r0, [r4, #12]
 800d338:	9b03      	ldr	r3, [sp, #12]
 800d33a:	4298      	cmp	r0, r3
 800d33c:	bfb8      	it	lt
 800d33e:	4618      	movlt	r0, r3
 800d340:	e7a4      	b.n	800d28c <_printf_i+0x168>
 800d342:	2301      	movs	r3, #1
 800d344:	4632      	mov	r2, r6
 800d346:	4649      	mov	r1, r9
 800d348:	4640      	mov	r0, r8
 800d34a:	47d0      	blx	sl
 800d34c:	3001      	adds	r0, #1
 800d34e:	d09b      	beq.n	800d288 <_printf_i+0x164>
 800d350:	3501      	adds	r5, #1
 800d352:	68e3      	ldr	r3, [r4, #12]
 800d354:	9903      	ldr	r1, [sp, #12]
 800d356:	1a5b      	subs	r3, r3, r1
 800d358:	42ab      	cmp	r3, r5
 800d35a:	dcf2      	bgt.n	800d342 <_printf_i+0x21e>
 800d35c:	e7eb      	b.n	800d336 <_printf_i+0x212>
 800d35e:	2500      	movs	r5, #0
 800d360:	f104 0619 	add.w	r6, r4, #25
 800d364:	e7f5      	b.n	800d352 <_printf_i+0x22e>
 800d366:	bf00      	nop
 800d368:	0800d9a1 	.word	0x0800d9a1
 800d36c:	0800d9b2 	.word	0x0800d9b2

0800d370 <_sbrk_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	4d06      	ldr	r5, [pc, #24]	; (800d38c <_sbrk_r+0x1c>)
 800d374:	2300      	movs	r3, #0
 800d376:	4604      	mov	r4, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	602b      	str	r3, [r5, #0]
 800d37c:	f000 f8b2 	bl	800d4e4 <_sbrk>
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	d102      	bne.n	800d38a <_sbrk_r+0x1a>
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	b103      	cbz	r3, 800d38a <_sbrk_r+0x1a>
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	bd38      	pop	{r3, r4, r5, pc}
 800d38c:	20005618 	.word	0x20005618

0800d390 <memmove>:
 800d390:	4288      	cmp	r0, r1
 800d392:	b510      	push	{r4, lr}
 800d394:	eb01 0402 	add.w	r4, r1, r2
 800d398:	d902      	bls.n	800d3a0 <memmove+0x10>
 800d39a:	4284      	cmp	r4, r0
 800d39c:	4623      	mov	r3, r4
 800d39e:	d807      	bhi.n	800d3b0 <memmove+0x20>
 800d3a0:	1e43      	subs	r3, r0, #1
 800d3a2:	42a1      	cmp	r1, r4
 800d3a4:	d008      	beq.n	800d3b8 <memmove+0x28>
 800d3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3ae:	e7f8      	b.n	800d3a2 <memmove+0x12>
 800d3b0:	4402      	add	r2, r0
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	428a      	cmp	r2, r1
 800d3b6:	d100      	bne.n	800d3ba <memmove+0x2a>
 800d3b8:	bd10      	pop	{r4, pc}
 800d3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3c2:	e7f7      	b.n	800d3b4 <memmove+0x24>

0800d3c4 <__malloc_lock>:
 800d3c4:	4801      	ldr	r0, [pc, #4]	; (800d3cc <__malloc_lock+0x8>)
 800d3c6:	f7ff bc4d 	b.w	800cc64 <__retarget_lock_acquire_recursive>
 800d3ca:	bf00      	nop
 800d3cc:	2000560c 	.word	0x2000560c

0800d3d0 <__malloc_unlock>:
 800d3d0:	4801      	ldr	r0, [pc, #4]	; (800d3d8 <__malloc_unlock+0x8>)
 800d3d2:	f7ff bc48 	b.w	800cc66 <__retarget_lock_release_recursive>
 800d3d6:	bf00      	nop
 800d3d8:	2000560c 	.word	0x2000560c

0800d3dc <_free_r>:
 800d3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	d044      	beq.n	800d46c <_free_r+0x90>
 800d3e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3e6:	9001      	str	r0, [sp, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f1a1 0404 	sub.w	r4, r1, #4
 800d3ee:	bfb8      	it	lt
 800d3f0:	18e4      	addlt	r4, r4, r3
 800d3f2:	f7ff ffe7 	bl	800d3c4 <__malloc_lock>
 800d3f6:	4a1e      	ldr	r2, [pc, #120]	; (800d470 <_free_r+0x94>)
 800d3f8:	9801      	ldr	r0, [sp, #4]
 800d3fa:	6813      	ldr	r3, [r2, #0]
 800d3fc:	b933      	cbnz	r3, 800d40c <_free_r+0x30>
 800d3fe:	6063      	str	r3, [r4, #4]
 800d400:	6014      	str	r4, [r2, #0]
 800d402:	b003      	add	sp, #12
 800d404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d408:	f7ff bfe2 	b.w	800d3d0 <__malloc_unlock>
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	d908      	bls.n	800d422 <_free_r+0x46>
 800d410:	6825      	ldr	r5, [r4, #0]
 800d412:	1961      	adds	r1, r4, r5
 800d414:	428b      	cmp	r3, r1
 800d416:	bf01      	itttt	eq
 800d418:	6819      	ldreq	r1, [r3, #0]
 800d41a:	685b      	ldreq	r3, [r3, #4]
 800d41c:	1949      	addeq	r1, r1, r5
 800d41e:	6021      	streq	r1, [r4, #0]
 800d420:	e7ed      	b.n	800d3fe <_free_r+0x22>
 800d422:	461a      	mov	r2, r3
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	b10b      	cbz	r3, 800d42c <_free_r+0x50>
 800d428:	42a3      	cmp	r3, r4
 800d42a:	d9fa      	bls.n	800d422 <_free_r+0x46>
 800d42c:	6811      	ldr	r1, [r2, #0]
 800d42e:	1855      	adds	r5, r2, r1
 800d430:	42a5      	cmp	r5, r4
 800d432:	d10b      	bne.n	800d44c <_free_r+0x70>
 800d434:	6824      	ldr	r4, [r4, #0]
 800d436:	4421      	add	r1, r4
 800d438:	1854      	adds	r4, r2, r1
 800d43a:	42a3      	cmp	r3, r4
 800d43c:	6011      	str	r1, [r2, #0]
 800d43e:	d1e0      	bne.n	800d402 <_free_r+0x26>
 800d440:	681c      	ldr	r4, [r3, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	6053      	str	r3, [r2, #4]
 800d446:	4421      	add	r1, r4
 800d448:	6011      	str	r1, [r2, #0]
 800d44a:	e7da      	b.n	800d402 <_free_r+0x26>
 800d44c:	d902      	bls.n	800d454 <_free_r+0x78>
 800d44e:	230c      	movs	r3, #12
 800d450:	6003      	str	r3, [r0, #0]
 800d452:	e7d6      	b.n	800d402 <_free_r+0x26>
 800d454:	6825      	ldr	r5, [r4, #0]
 800d456:	1961      	adds	r1, r4, r5
 800d458:	428b      	cmp	r3, r1
 800d45a:	bf04      	itt	eq
 800d45c:	6819      	ldreq	r1, [r3, #0]
 800d45e:	685b      	ldreq	r3, [r3, #4]
 800d460:	6063      	str	r3, [r4, #4]
 800d462:	bf04      	itt	eq
 800d464:	1949      	addeq	r1, r1, r5
 800d466:	6021      	streq	r1, [r4, #0]
 800d468:	6054      	str	r4, [r2, #4]
 800d46a:	e7ca      	b.n	800d402 <_free_r+0x26>
 800d46c:	b003      	add	sp, #12
 800d46e:	bd30      	pop	{r4, r5, pc}
 800d470:	20005610 	.word	0x20005610

0800d474 <_realloc_r>:
 800d474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d478:	4680      	mov	r8, r0
 800d47a:	4614      	mov	r4, r2
 800d47c:	460e      	mov	r6, r1
 800d47e:	b921      	cbnz	r1, 800d48a <_realloc_r+0x16>
 800d480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d484:	4611      	mov	r1, r2
 800d486:	f7ff bc0f 	b.w	800cca8 <_malloc_r>
 800d48a:	b92a      	cbnz	r2, 800d498 <_realloc_r+0x24>
 800d48c:	f7ff ffa6 	bl	800d3dc <_free_r>
 800d490:	4625      	mov	r5, r4
 800d492:	4628      	mov	r0, r5
 800d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d498:	f000 f81b 	bl	800d4d2 <_malloc_usable_size_r>
 800d49c:	4284      	cmp	r4, r0
 800d49e:	4607      	mov	r7, r0
 800d4a0:	d802      	bhi.n	800d4a8 <_realloc_r+0x34>
 800d4a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4a6:	d812      	bhi.n	800d4ce <_realloc_r+0x5a>
 800d4a8:	4621      	mov	r1, r4
 800d4aa:	4640      	mov	r0, r8
 800d4ac:	f7ff fbfc 	bl	800cca8 <_malloc_r>
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d0ed      	beq.n	800d492 <_realloc_r+0x1e>
 800d4b6:	42bc      	cmp	r4, r7
 800d4b8:	4622      	mov	r2, r4
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	bf28      	it	cs
 800d4be:	463a      	movcs	r2, r7
 800d4c0:	f7ff fb7a 	bl	800cbb8 <memcpy>
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	f7ff ff88 	bl	800d3dc <_free_r>
 800d4cc:	e7e1      	b.n	800d492 <_realloc_r+0x1e>
 800d4ce:	4635      	mov	r5, r6
 800d4d0:	e7df      	b.n	800d492 <_realloc_r+0x1e>

0800d4d2 <_malloc_usable_size_r>:
 800d4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d6:	1f18      	subs	r0, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bfbc      	itt	lt
 800d4dc:	580b      	ldrlt	r3, [r1, r0]
 800d4de:	18c0      	addlt	r0, r0, r3
 800d4e0:	4770      	bx	lr
	...

0800d4e4 <_sbrk>:
 800d4e4:	4a04      	ldr	r2, [pc, #16]	; (800d4f8 <_sbrk+0x14>)
 800d4e6:	6811      	ldr	r1, [r2, #0]
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	b909      	cbnz	r1, 800d4f0 <_sbrk+0xc>
 800d4ec:	4903      	ldr	r1, [pc, #12]	; (800d4fc <_sbrk+0x18>)
 800d4ee:	6011      	str	r1, [r2, #0]
 800d4f0:	6810      	ldr	r0, [r2, #0]
 800d4f2:	4403      	add	r3, r0
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	4770      	bx	lr
 800d4f8:	2000561c 	.word	0x2000561c
 800d4fc:	20005620 	.word	0x20005620

0800d500 <_init>:
 800d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d502:	bf00      	nop
 800d504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d506:	bc08      	pop	{r3}
 800d508:	469e      	mov	lr, r3
 800d50a:	4770      	bx	lr

0800d50c <_fini>:
 800d50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50e:	bf00      	nop
 800d510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d512:	bc08      	pop	{r3}
 800d514:	469e      	mov	lr, r3
 800d516:	4770      	bx	lr
